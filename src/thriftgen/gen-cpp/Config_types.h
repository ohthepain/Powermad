/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Config_TYPES_H
#define Config_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace DF { namespace Config {

struct RaidBossObjectiveType {
  enum type {
    FirstStrike = 0,
    MostDamage = 1,
    LastStrike = 2,
    Participation = 3,
    Rally = 4
  };
};

extern const std::map<int, const char*> _RaidBossObjectiveType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RaidBossObjectiveType::type& val);

struct MarketType {
  enum type {
    Default = 0,
    BlackMarket = 1
  };
};

extern const std::map<int, const char*> _MarketType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MarketType::type& val);

struct AffinityID {
  enum type {
    Chocolate = 0,
    Blue = 1,
    Green = 2,
    Orange = 3,
    Pink = 4,
    Yellow = 5
  };
};

extern const std::map<int, const char*> _AffinityID_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AffinityID::type& val);

struct SpecialtyID {
  enum type {
    Donut = 0,
    Sorbet = 1,
    Cake = 2,
    Cookie = 3,
    Pie = 4,
    Cannoli = 5
  };
};

extern const std::map<int, const char*> _SpecialtyID_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SpecialtyID::type& val);

struct LootItemType {
  enum type {
    Nothing = -1,
    Currency = 0,
    Building = 1
  };
};

extern const std::map<int, const char*> _LootItemType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LootItemType::type& val);

struct EventPhase {
  enum type {
    NonEvent = 0,
    Main = 1,
    Preview = 2,
    Recap = 4
  };
};

extern const std::map<int, const char*> _EventPhase_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EventPhase::type& val);

struct EventPhases {
  enum type {
    PreviewMainRecap = 0,
    Main = 1,
    Preview = 2,
    PreviewMain = 3,
    Recap = 4,
    MainRecap = 5
  };
};

extern const std::map<int, const char*> _EventPhases_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EventPhases::type& val);

struct GuildJoinType {
  enum type {
    AutoJoin = 0,
    Request = 1,
    InviteOnly = 2
  };
};

extern const std::map<int, const char*> _GuildJoinType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GuildJoinType::type& val);

struct GuildMemberType {
  enum type {
    Leader = 0,
    CoLeader = 1,
    Member1 = 2,
    Member2 = 3,
    Member3 = 4
  };
};

extern const std::map<int, const char*> _GuildMemberType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GuildMemberType::type& val);

struct GuildState {
  enum type {
    Active = 0,
    Deleted = 1
  };
};

extern const std::map<int, const char*> _GuildState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GuildState::type& val);

struct GuildQuestRewardType {
  enum type {
    AllMembers = 0,
    Leader = 1,
    Guild = 2
  };
};

extern const std::map<int, const char*> _GuildQuestRewardType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GuildQuestRewardType::type& val);

struct MessageButtonAction {
  enum type {
    Default = 0,
    GoToBuildMenu = 1,
    GoToKingdom = 2,
    GoToGachaStore = 3,
    GoToCurrencyStore = 4,
    GoToIsland = 5,
    GoToURL = 6,
    CollectGiftMessage = 7,
    CancelFriendRequest = 8,
    AcceptFriendRequest = 9,
    SpinGacha = 10,
    GoToSocialMenu = 11,
    OpenGachaCard = 12,
    RunFTUE = 13,
    OpenGachaOffer = 14,
    GoToInbox = 15,
    GoToEventMenu = 16,
    GoToEventMenuOpenRewards = 17,
    GoToEventMenuOpenHelp = 18,
    GoToEventMenuOpenStore = 19,
    GoToEventMenuOpenLeaderboard = 20,
    GoToRewards = 21,
    GoToHelp = 22,
    GoToStore = 23,
    GoToLeaderboard = 24,
    GoToNextEvoEventLevel = 25,
    GoToGuildLeaderboard = 26
  };
};

extern const std::map<int, const char*> _MessageButtonAction_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MessageButtonAction::type& val);

struct EventMenuWidgetType {
  enum type {
    ButtonWidget = 0,
    LeaderboardWidget = 1,
    PlayButtonWidget = 2,
    ImageWidget = 3,
    TextWidget = 4,
    NPCImageWidget = 5,
    CurrencyHudWidget = 6,
    TimerWidget = 7,
    FakeLeaderboardWidget = 8,
    GuildLeaderboardPositionWidget = 9
  };
};

extern const std::map<int, const char*> _EventMenuWidgetType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EventMenuWidgetType::type& val);

struct BuildingType {
  enum type {
    Default = 0,
    Business = 1,
    Expansion = 2,
    Market = 3,
    Deco = 4,
    Blocker = 5
  };
};

extern const std::map<int, const char*> _BuildingType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuildingType::type& val);

struct IslandObjectType {
  enum type {
    Level = 0,
    Cakebox = 1,
    Object = 2
  };
};

extern const std::map<int, const char*> _IslandObjectType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const IslandObjectType::type& val);

struct LevelType {
  enum type {
    Normal = 0,
    Blitz = 1,
    Illegal = 2
  };
};

extern const std::map<int, const char*> _LevelType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LevelType::type& val);

struct LevelParentType {
  enum type {
    Default = 0,
    Business = 1,
    CastleEvent = 2,
    Campaign = 3,
    EvolutionEvent = 4
  };
};

extern const std::map<int, const char*> _LevelParentType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LevelParentType::type& val);

struct LevelAvailability {
  enum type {
    Default = 0,
    Sequential = 1,
    All = 2,
    Loop = 3
  };
};

extern const std::map<int, const char*> _LevelAvailability_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LevelAvailability::type& val);

struct GiftMessageType {
  enum type {
    Default = 0,
    CustomerService = 1,
    RushOrder = 2,
    DeliverOrder = 3,
    LikeBonus = 4,
    DecoBonus = 5,
    Guild = 6,
    Gift = 7,
    AskForItems = 8
  };
};

extern const std::map<int, const char*> _GiftMessageType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GiftMessageType::type& val);

struct PopupTemplateType {
  enum type {
    Default = 0,
    CustomerService = 1,
    RushOrder = 2,
    DeliverOrder = 3,
    LikeBonus = 4,
    DecoBonus = 5,
    FriendRequest = 2000
  };
};

extern const std::map<int, const char*> _PopupTemplateType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PopupTemplateType::type& val);

struct PurchasableOfferType {
  enum type {
    Default = 0,
    Gacha = 1,
    Card = 2,
    LegacyStoreProduct = 3
  };
};

extern const std::map<int, const char*> _PurchasableOfferType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PurchasableOfferType::type& val);

struct OfferType {
  enum type {
    Default = 0,
    Gacha = 1,
    Card = 2,
    LegacyStoreProduct = 3
  };
};

extern const std::map<int, const char*> _OfferType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const OfferType::type& val);

struct StoreProductBillingType {
  enum type {
    Vendor = 0,
    Currency = 1
  };
};

extern const std::map<int, const char*> _StoreProductBillingType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const StoreProductBillingType::type& val);

struct AchievementType {
  enum type {
    Unknown = 0,
    Bomb = 1,
    ColumnBlaster = 2,
    RowBlaster = 3,
    Colorbomb = 4,
    ScreenBlasterAColorbomb = 5,
    DoubleBlasterAColorbomb = 6,
    C2BlastersAColorbomb = 7,
    ColorbombABlaster = 8,
    ColorbombARowBlasterAColumnBlaster = 9,
    RowBlasterABlaster = 10,
    ColumnBlasterABlaster = 11,
    C2Blasters = 12,
    C3Blasters = 13,
    C2LineBlasters = 14,
    C3LineBlasters = 15,
    C4LineBlasters = 16,
    C5LineBlasters = 17,
    C6LineBlasters = 18,
    C7LineBlasters = 19,
    C8LineBlasters = 20,
    C9LineBlasters = 21,
    C10LineBlasters = 22,
    C2Colorbombs = 23,
    PlaceDeco = 24,
    GetBusiness = 25,
    EvolveBusiness = 26,
    CollectDailyBonus = 27,
    FinishIsland = 28,
    PlaceOrder = 29,
    CollectOrder = 30,
    RushOrder = 31,
    PlaceBusiness = 32,
    Rank = 33,
    LikeKingdom = 34,
    PlaceSocialOrder = 35,
    OpenGachaPack = 36,
    VisitKingdom = 37,
    FinishLevel = 38,
    MoveBusiness = 39,
    MoveDeco = 40,
    PlaceExpansion = 41,
    MoveExpansion = 42,
    CraftGear = 43,
    EquipGear = 44,
    UseLevelBox = 45,
    PlaceRoad = 46,
    PlaceDistinctDecos = 47
  };
};

extern const std::map<int, const char*> _AchievementType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AchievementType::type& val);

struct GoalType {
  enum type {
    NoType = 0,
    HarvestAnyBusiness = 1,
    HarvestSpecificBusiness = 2,
    EquipAnyGearOnAnyBusiness = 3,
    EquipAnyGearOnSpecificBusiness = 4,
    EvolveAnyBusiness = 5,
    EvolveSpecificBusiness = 6,
    PlaceAnyBuilding = 7,
    PlaceSpecificBuilding = 8,
    PlaceSpecificBuildingWithRarity = 9,
    RotateAnyBuilding = 10,
    MoveAnyBuilding = 11,
    AutoPlayAnyLevel = 12,
    WinAnyLevel = 13,
    WinLevelSpecificBusiness = 14,
    WinSpecificLevel = 15,
    WinAnyEventLevel = 16,
    SocialCompleteOrder = 17,
    SocialLikeKingdom = 18,
    SocialPlaceOrderGuildMate = 19,
    SocialVisitKingdom = 20,
    EquipSpecificGearOnAnyBusiness = 21,
    EquipSpecificGearOnSpecificBusiness = 22,
    AutoPlayAnyEventLevel = 23,
    AutoPlaySpecificLevel = 24,
    JoinGuild = 25,
    MatchUseAnyBooster = 26,
    MatchUseSpecificBooster = 27,
    WinAnyLevelThreeStars = 28,
    WinLevelSpecificBusinessThreeStars = 29,
    WinSpecificLevelThreeStars = 30,
    WinEventLevelThreeStars = 31,
    MatchTiles = 32,
    CompleteLevel = 33,
    GachaSpin = 34
  };
};

extern const std::map<int, const char*> _GoalType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GoalType::type& val);

struct ClientPlatform {
  enum type {
    iOS = 0,
    Android = 1
  };
};

extern const std::map<int, const char*> _ClientPlatform_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ClientPlatform::type& val);

struct AdPlatform {
  enum type {
    IOS = 1,
    Android = 2
  };
};

extern const std::map<int, const char*> _AdPlatform_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AdPlatform::type& val);

struct AdProviders {
  enum type {
    AdColony = 1,
    UnityAds = 2,
    IronSource = 3
  };
};

extern const std::map<int, const char*> _AdProviders_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AdProviders::type& val);

struct AvailableOfferType {
  enum type {
    Nothing = 0,
    GachaOffer = 1,
    CardOffer = 2
  };
};

extern const std::map<int, const char*> _AvailableOfferType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AvailableOfferType::type& val);

struct GuildLeaderboardRewardRecipient {
  enum type {
    Everyone = 0,
    Leader = 1
  };
};

extern const std::map<int, const char*> _GuildLeaderboardRewardRecipient_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GuildLeaderboardRewardRecipient::type& val);

typedef int64_t Timestamp;

typedef std::string AssetPath;

typedef std::string LocalizationID;

typedef std::string LocalizationKey;

typedef std::string BundleID;

typedef std::string CurrencyID;

typedef std::string CurrencyTypeID;

typedef int32_t RarityID;

typedef std::string ProductID;

typedef int32_t EvolutionID;

typedef std::string BuildingID;

typedef int32_t EntityID;

typedef int32_t Coordinate;

typedef std::string PresetKingdomID;

typedef std::string IslandID;

typedef std::string IslandObjectID;

typedef std::string ColorID;

typedef std::string RecipeID;

typedef std::string InventoryTabID;

typedef std::string MaterialID;

typedef std::string EvolutionMaterialID;

typedef std::string BusinessOrderListID;

typedef std::string BusinessID;

typedef std::string BusinessOrderID;

typedef std::string CharacterID;

typedef std::string DecoID;

typedef std::string WeightedLootListID;

typedef std::string GachaGroupID;

typedef std::string GachaBannerID;

typedef std::string GachaOfferID;

typedef std::string GachaPackID;

typedef std::string LootTableID;

typedef std::string LootCurrencyGroupID;

typedef std::string LootBuildingGroupID;

typedef int32_t RankID;

typedef std::string ExpansionTypeID;

typedef std::string ExpansionID;

typedef int32_t GuildRankID;

typedef std::string BoostID;

typedef std::string BoostTypeID;

typedef std::string EventLockID;

typedef std::string BuildMenuSpecialCardID;

typedef std::string LevelDotID;

typedef std::string LevelID;

typedef std::string VillainID;

typedef std::string LevelName;

typedef std::string LevelCampaignStyleID;

typedef std::string LevelCampaignID;

typedef std::string SocialUnlockRewardID;

typedef std::string BlobID;

typedef std::string AvatarID;

typedef std::string AnalyticsEventID;

typedef std::string AnalyticsDimensionID;

typedef std::string TemplateID;

typedef std::string AdminMessageID;

typedef std::string NpcID;

typedef std::string IAPProductID;

typedef std::string CardOfferID;

typedef std::string StoreTabID;

typedef std::string StoreID;

typedef std::string StoreProductID;

typedef std::string AppleProductID;

typedef std::string GoogleProductID;

typedef std::string MarketOrderID;

typedef std::string AchievementID;

typedef std::string AchievementGroupID;

typedef std::string QuestID;

typedef std::string QuestNpcID;

typedef std::string GoalID;

typedef std::string GuildQuestRewardID;

typedef int32_t GoalDisplayTemplateID;

typedef int32_t QuestDisplayTemplateID;

typedef std::string ErrorId;

typedef std::string GiftMessageRewardID;

typedef std::string KingdomLikeGiftID;

typedef std::string PushMessageID;

typedef std::string LeaderboardID;

typedef std::string LeaderboardLeagueID;

typedef std::string LeaderboardRibbonID;

typedef std::string LeaderboardTemplateID;

typedef std::string EventID;

typedef std::string RewardMessageID;

typedef std::string AssetID;

typedef std::string EventIslandID;

typedef std::string EventHowToPlayID;

typedef std::string EventMainMenuID;

typedef std::string CellInfoMapID;

typedef std::string CellTypeID;

typedef std::string Match3ThemeId;

typedef std::string BlasterTypeID;

typedef std::string CastleActivityID;

typedef std::string KeyCostPerLevelID;

typedef std::string EventMenuWidgetID;

typedef std::string EventKeyDropRateFormulaID;

typedef std::string TutorialID;

typedef std::string AdminGiftMessageID;

typedef std::string PopupMessageID;

typedef std::string GuildLeaderboardID;

typedef std::string GuildLeaderboardRibbonID;

typedef std::string LocationID;

typedef std::string GuildEmblemID;

typedef std::string ChatSystemMessageID;

typedef std::string GiftID;

typedef std::string MainShopEntryID;

typedef std::string AskForItemID;

typedef std::string TestBucketID;

typedef std::string ABTestID;

typedef int32_t HeroTypeID;

typedef std::string HeroLevelCurveID;

typedef std::string RaidBossID;

typedef std::string RaidBossActivityID;

typedef std::string SkillID;

typedef std::string HeroID;

typedef std::string RaidBossCurveID;

typedef std::string RaidBossObjectiveID;

typedef std::string RaidBossRarityID;

typedef std::string RaidBossRewardID;

typedef std::string RaidBossDifficultyBracketID;

class Localization;

class LocalizedString;

class DateTimeUTC;

class Header;

class ConfigBundle;

class BundleInfo;

class Bundle;

class BundleManifest;

class Currency;

class Rarity;

class Building;

class StartingKingdomEntity;

class PresetKingdomEntity;

class Color;

class IslandSettings;

class IslandObject;

class Island;

class Recipe;

class InventoryTab;

class Material;

class BusinessEvolution;

class BusinessOrderList;

class Business;

class BusinessOrder;

class NewBusinessOrder;

class Deco;

class Blocker;

class WeightedLoot;

class GachaGroup;

class GachaBanner;

class GachaOffer;

class GachaPack;

class LootTable;

class LootCurrencyGroup;

class LootBuildingGroup;

class ExpansionType;

class Expansion;

class Rank;

class GuildRank;

class Boost;

class EventLock;

class BuildMenuSpecialCard;

class LevelDot;

class LevelDotV2;

class Level;

class NewLevel;

class MatchThreeData;

class Villain;

class LevelCampaignStyle;

class LevelCampaign;

class LevelCampaignLevelsList;

class BusinessLevelsList;

class CastleEventLevelsList;

class CampaignSettings;

class FTUESettings;

class StartingGameState;

class SocialUnlockReward;

class BusinessMenuSettings;

class Settings;

class PollSettings;

class HappinessSettings;

class LevelBlob;

class ScreenNameMapping;

class Avatar;

class AnalyticsEvent;

class AnalyticsDimension;

class AppBoyEvent;

class ApsalarEvent;

class PopupTemplate;

class DefaultTemplate;

class MessageTemplateModifier;

class AdminMessage;

class Npc;

class PurchasableOffer;

class IAPProduct;

class CardOffer;

class StoreTab;

class Store;

class StoreInventoryItem;

class VendorProduct;

class StoreProduct;

class BuyItemOrder;

class Market;

class Achievement;

class AchievementGroup;

class Goal;

class QuestNpc;

class BusinessQuestNpc;

class GuildQuestReward;

class Quest;

class GoalDisplayTemplate;

class QuestDisplayTemplate;

class QuestSettings;

class QuestRankSettings;

class BuildingTypeLocalization;

class ForcedUpgrade;

class ErrorMessage;

class StrangerSettings;

class StrangerMatchSettings;

class PlayerMatchRankSettings;

class FakeStrangerDisplay;

class GiftMessageReward;

class KingdomLikeGift;

class PartialKingdomLikeGift;

class PushMessage;

class AdProvider;

class RushCostByRemainingTime;

class RewardMessage;

class Event;

class CellInfo;

class MatchThreeCellDefinition;

class MatchThreeBlasterDefinition;

class CastleActivity;

class RaidBossActivity;

class KeyCostPerLevel;

class EventIsland;

class EventHowToPlay;

class EventMainMenu;

class LeaderboardSettings;

class GuildLeaderboardSettings;

class LeaderboardReward;

class LeaderboardRibbon;

class LeaderboardLeague;

class Leaderboard;

class LeaderboardPlacement;

class EventMenuWidget;

class LeaderboardTemplate;

class RarityEvoLevelKeyDropRate;

class KeyDropRateByOrderTime;

class EventBusinessKeyDropRate;

class BuildingMultiplier;

class TutorialState;

class AdminGiftMessage;

class PopupMessage;

class PopupMessageSettings;

class EventSettings;

class PlayerDisplaySuggest;

class GuildNameSuggest;

class GuildLeaderboardReward;

class GuildLeaderboardRibbon;

class GuildLeaderboard;

class GuildMemberTypeDisplay;

class GuildJoinTypeDisplay;

class GuildSettings;

class Location;

class GuildEmblem;

class GuildBoundItem;

class ChatSystemMessage;

class Gift;

class GearAvailableOnGachaOfferList;

class GearAvailableOnCardOfferList;

class GearAvailableOnLevelList;

class GearAvailableOnBusinessHarvestList;

class MainShopEntry;

class AskForItemEntry;

class TestBucket;

class ABTest;

class ClientVersionTestBucket;

class HeroType;

class HeroLevelCurve;

class HeroMaxUpgrade;

class Hero;

class RaidBoss;

class RaidBossCurve;

class RaidBossObjective;

class RaidBossRarity;

class RaidBossReward;

class RaidBossKarmaBracket;

class RaidBossDifficultyBracket;

class Data;


class Localization : public virtual ::apache::thrift::TBase {
 public:

  Localization(const Localization&);
  Localization& operator=(const Localization&);
  Localization() : localizationId(), localizationPath() {
  }

  virtual ~Localization() throw();
  LocalizationID localizationId;
  std::string localizationPath;

  void __set_localizationId(const LocalizationID& val);

  void __set_localizationPath(const std::string& val);

  bool operator == (const Localization & rhs) const
  {
    if (!(localizationId == rhs.localizationId))
      return false;
    if (!(localizationPath == rhs.localizationPath))
      return false;
    return true;
  }
  bool operator != (const Localization &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Localization & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Localization &a, Localization &b);

std::ostream& operator<<(std::ostream& out, const Localization& obj);

typedef struct _LocalizedString__isset {
  _LocalizedString__isset() : value(false) {}
  bool value :1;
} _LocalizedString__isset;

class LocalizedString : public virtual ::apache::thrift::TBase {
 public:

  LocalizedString(const LocalizedString&);
  LocalizedString& operator=(const LocalizedString&);
  LocalizedString() : key(), value() {
  }

  virtual ~LocalizedString() throw();
  LocalizationKey key;
  std::string value;

  _LocalizedString__isset __isset;

  void __set_key(const LocalizationKey& val);

  void __set_value(const std::string& val);

  bool operator == (const LocalizedString & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const LocalizedString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalizedString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LocalizedString &a, LocalizedString &b);

std::ostream& operator<<(std::ostream& out, const LocalizedString& obj);


class DateTimeUTC : public virtual ::apache::thrift::TBase {
 public:

  DateTimeUTC(const DateTimeUTC&);
  DateTimeUTC& operator=(const DateTimeUTC&);
  DateTimeUTC() : epochSeconds(0) {
  }

  virtual ~DateTimeUTC() throw();
  int64_t epochSeconds;

  void __set_epochSeconds(const int64_t val);

  bool operator == (const DateTimeUTC & rhs) const
  {
    if (!(epochSeconds == rhs.epochSeconds))
      return false;
    return true;
  }
  bool operator != (const DateTimeUTC &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateTimeUTC & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DateTimeUTC &a, DateTimeUTC &b);

std::ostream& operator<<(std::ostream& out, const DateTimeUTC& obj);


class Header : public virtual ::apache::thrift::TBase {
 public:

  Header(const Header&);
  Header& operator=(const Header&);
  Header() : schemaVersion(0), configVersion(0) {
  }

  virtual ~Header() throw();
  int32_t schemaVersion;
  int32_t configVersion;

  void __set_schemaVersion(const int32_t val);

  void __set_configVersion(const int32_t val);

  bool operator == (const Header & rhs) const
  {
    if (!(schemaVersion == rhs.schemaVersion))
      return false;
    if (!(configVersion == rhs.configVersion))
      return false;
    return true;
  }
  bool operator != (const Header &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Header & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Header &a, Header &b);

std::ostream& operator<<(std::ostream& out, const Header& obj);

typedef struct _ConfigBundle__isset {
  _ConfigBundle__isset() : priority(false), noncompulsory(false), dependencies(false) {}
  bool priority :1;
  bool noncompulsory :1;
  bool dependencies :1;
} _ConfigBundle__isset;

class ConfigBundle : public virtual ::apache::thrift::TBase {
 public:

  ConfigBundle(const ConfigBundle&);
  ConfigBundle& operator=(const ConfigBundle&);
  ConfigBundle() : bundleId(), path(), priority(0), noncompulsory(0) {
  }

  virtual ~ConfigBundle() throw();
  BundleID bundleId;
  std::string path;
  int32_t priority;
  bool noncompulsory;
  std::vector<BundleID>  dependencies;

  _ConfigBundle__isset __isset;

  void __set_bundleId(const BundleID& val);

  void __set_path(const std::string& val);

  void __set_priority(const int32_t val);

  void __set_noncompulsory(const bool val);

  void __set_dependencies(const std::vector<BundleID> & val);

  bool operator == (const ConfigBundle & rhs) const
  {
    if (!(bundleId == rhs.bundleId))
      return false;
    if (!(path == rhs.path))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    if (__isset.noncompulsory != rhs.__isset.noncompulsory)
      return false;
    else if (__isset.noncompulsory && !(noncompulsory == rhs.noncompulsory))
      return false;
    if (__isset.dependencies != rhs.__isset.dependencies)
      return false;
    else if (__isset.dependencies && !(dependencies == rhs.dependencies))
      return false;
    return true;
  }
  bool operator != (const ConfigBundle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigBundle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ConfigBundle &a, ConfigBundle &b);

std::ostream& operator<<(std::ostream& out, const ConfigBundle& obj);

typedef struct _BundleInfo__isset {
  _BundleInfo__isset() : size(false), url(false) {}
  bool size :1;
  bool url :1;
} _BundleInfo__isset;

class BundleInfo : public virtual ::apache::thrift::TBase {
 public:

  BundleInfo(const BundleInfo&);
  BundleInfo& operator=(const BundleInfo&);
  BundleInfo() : path(), size(0), bundlemd5(), zipmd5(), url() {
  }

  virtual ~BundleInfo() throw();
  std::string path;
  int32_t size;
  std::string bundlemd5;
  std::string zipmd5;
  std::string url;

  _BundleInfo__isset __isset;

  void __set_path(const std::string& val);

  void __set_size(const int32_t val);

  void __set_bundlemd5(const std::string& val);

  void __set_zipmd5(const std::string& val);

  void __set_url(const std::string& val);

  bool operator == (const BundleInfo & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    if (!(bundlemd5 == rhs.bundlemd5))
      return false;
    if (!(zipmd5 == rhs.zipmd5))
      return false;
    if (__isset.url != rhs.__isset.url)
      return false;
    else if (__isset.url && !(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const BundleInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BundleInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BundleInfo &a, BundleInfo &b);

std::ostream& operator<<(std::ostream& out, const BundleInfo& obj);

typedef struct _Bundle__isset {
  _Bundle__isset() : dependencies(false), bundleInfo(false), noncompulsory(false), priority(false) {}
  bool dependencies :1;
  bool bundleInfo :1;
  bool noncompulsory :1;
  bool priority :1;
} _Bundle__isset;

class Bundle : public virtual ::apache::thrift::TBase {
 public:

  Bundle(const Bundle&);
  Bundle& operator=(const Bundle&);
  Bundle() : bundleId(), noncompulsory(0), priority(0) {
  }

  virtual ~Bundle() throw();
  BundleID bundleId;
  std::vector<BundleID>  dependencies;
  std::map<std::string, BundleInfo>  bundleInfo;
  bool noncompulsory;
  int32_t priority;

  _Bundle__isset __isset;

  void __set_bundleId(const BundleID& val);

  void __set_dependencies(const std::vector<BundleID> & val);

  void __set_bundleInfo(const std::map<std::string, BundleInfo> & val);

  void __set_noncompulsory(const bool val);

  void __set_priority(const int32_t val);

  bool operator == (const Bundle & rhs) const
  {
    if (!(bundleId == rhs.bundleId))
      return false;
    if (__isset.dependencies != rhs.__isset.dependencies)
      return false;
    else if (__isset.dependencies && !(dependencies == rhs.dependencies))
      return false;
    if (__isset.bundleInfo != rhs.__isset.bundleInfo)
      return false;
    else if (__isset.bundleInfo && !(bundleInfo == rhs.bundleInfo))
      return false;
    if (__isset.noncompulsory != rhs.__isset.noncompulsory)
      return false;
    else if (__isset.noncompulsory && !(noncompulsory == rhs.noncompulsory))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    return true;
  }
  bool operator != (const Bundle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bundle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Bundle &a, Bundle &b);

std::ostream& operator<<(std::ostream& out, const Bundle& obj);

typedef struct _BundleManifest__isset {
  _BundleManifest__isset() : gitCommit(false) {}
  bool gitCommit :1;
} _BundleManifest__isset;

class BundleManifest : public virtual ::apache::thrift::TBase {
 public:

  BundleManifest(const BundleManifest&);
  BundleManifest& operator=(const BundleManifest&);
  BundleManifest() : baseUrl(), gitCommit() {
  }

  virtual ~BundleManifest() throw();
  std::string baseUrl;
  std::map<BundleID, Bundle>  bundles;
  std::string gitCommit;

  _BundleManifest__isset __isset;

  void __set_baseUrl(const std::string& val);

  void __set_bundles(const std::map<BundleID, Bundle> & val);

  void __set_gitCommit(const std::string& val);

  bool operator == (const BundleManifest & rhs) const
  {
    if (!(baseUrl == rhs.baseUrl))
      return false;
    if (!(bundles == rhs.bundles))
      return false;
    if (__isset.gitCommit != rhs.__isset.gitCommit)
      return false;
    else if (__isset.gitCommit && !(gitCommit == rhs.gitCommit))
      return false;
    return true;
  }
  bool operator != (const BundleManifest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BundleManifest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BundleManifest &a, BundleManifest &b);

std::ostream& operator<<(std::ostream& out, const BundleManifest& obj);

typedef struct _Currency__isset {
  _Currency__isset() : currencyTypeId(false), bundleId(false), gachaRevealImage(false), pluralDisplay(false) {}
  bool currencyTypeId :1;
  bool bundleId :1;
  bool gachaRevealImage :1;
  bool pluralDisplay :1;
} _Currency__isset;

class Currency : public virtual ::apache::thrift::TBase {
 public:

  Currency(const Currency&);
  Currency& operator=(const Currency&);
  Currency() : currencyId(), catalogImage(), currencyTypeId(), bundleId(), gachaRevealImage(), startingValue(0) {
  }

  virtual ~Currency() throw();
  CurrencyID currencyId;
  LocalizedString newDisplay;
  AssetPath catalogImage;
  CurrencyTypeID currencyTypeId;
  BundleID bundleId;
  AssetPath gachaRevealImage;
  int32_t startingValue;
  LocalizedString pluralDisplay;

  _Currency__isset __isset;

  void __set_currencyId(const CurrencyID& val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_catalogImage(const AssetPath& val);

  void __set_currencyTypeId(const CurrencyTypeID& val);

  void __set_bundleId(const BundleID& val);

  void __set_gachaRevealImage(const AssetPath& val);

  void __set_startingValue(const int32_t val);

  void __set_pluralDisplay(const LocalizedString& val);

  bool operator == (const Currency & rhs) const
  {
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(newDisplay == rhs.newDisplay))
      return false;
    if (!(catalogImage == rhs.catalogImage))
      return false;
    if (__isset.currencyTypeId != rhs.__isset.currencyTypeId)
      return false;
    else if (__isset.currencyTypeId && !(currencyTypeId == rhs.currencyTypeId))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.gachaRevealImage != rhs.__isset.gachaRevealImage)
      return false;
    else if (__isset.gachaRevealImage && !(gachaRevealImage == rhs.gachaRevealImage))
      return false;
    if (!(startingValue == rhs.startingValue))
      return false;
    if (__isset.pluralDisplay != rhs.__isset.pluralDisplay)
      return false;
    else if (__isset.pluralDisplay && !(pluralDisplay == rhs.pluralDisplay))
      return false;
    return true;
  }
  bool operator != (const Currency &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Currency & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Currency &a, Currency &b);

std::ostream& operator<<(std::ostream& out, const Currency& obj);

typedef struct _Rarity__isset {
  _Rarity__isset() : newDisplay(false), gearGachaCardFrontImage(false), gearGachaCardBackImage(false), businessGachaCardFrontImage(false), businessGachaCardBackImage(false), smallCardBackground(false), gachaRibbon(false), gachaCounter(false), starBackground(false), detailGachaGearCardImage(false), detailGachaBusinessCardImage(false), buildMenuCardImageLocked(false), buildMenuCardImageUnlocked(false), buildMenuCardImageFree(false), buildMenuCardEffectColor(false), buildMenuTextColor(false), buildMenuNpcBgColor(false), buildMenuBusinessCardImage(false), buildMenuChefhatEmptyImage(false), gachaChefhatEmptyImage(false), businessOrderMenuChefhatEmptyImage(false), detailGachaDecoCardImage(false) {}
  bool newDisplay :1;
  bool gearGachaCardFrontImage :1;
  bool gearGachaCardBackImage :1;
  bool businessGachaCardFrontImage :1;
  bool businessGachaCardBackImage :1;
  bool smallCardBackground :1;
  bool gachaRibbon :1;
  bool gachaCounter :1;
  bool starBackground :1;
  bool detailGachaGearCardImage :1;
  bool detailGachaBusinessCardImage :1;
  bool buildMenuCardImageLocked :1;
  bool buildMenuCardImageUnlocked :1;
  bool buildMenuCardImageFree :1;
  bool buildMenuCardEffectColor :1;
  bool buildMenuTextColor :1;
  bool buildMenuNpcBgColor :1;
  bool buildMenuBusinessCardImage :1;
  bool buildMenuChefhatEmptyImage :1;
  bool gachaChefhatEmptyImage :1;
  bool businessOrderMenuChefhatEmptyImage :1;
  bool detailGachaDecoCardImage :1;
} _Rarity__isset;

class Rarity : public virtual ::apache::thrift::TBase {
 public:

  Rarity(const Rarity&);
  Rarity& operator=(const Rarity&);
  Rarity() : rarityId(0), weight(0), cardImage(), minBusinessOrderSlots(0), maxBusinessOrderSlots(0), gearGachaCardFrontImage(), gearGachaCardBackImage(), businessGachaCardFrontImage(), businessGachaCardBackImage(), smallCardBackground(), gachaRibbon(), gachaCounter(), starBackground(), detailGachaGearCardImage(), detailGachaBusinessCardImage(), buildMenuCardImageLocked(), buildMenuCardImageUnlocked(), buildMenuCardImageFree(), buildMenuCardEffectColor(), buildMenuTextColor(), buildMenuNpcBgColor(), buildMenuBusinessCardImage(), buildMenuChefhatEmptyImage(), gachaChefhatEmptyImage(), businessOrderMenuChefhatEmptyImage(), detailGachaDecoCardImage() {
  }

  virtual ~Rarity() throw();
  RarityID rarityId;
  int32_t weight;
  LocalizedString newDisplay;
  std::string cardImage;
  int32_t minBusinessOrderSlots;
  int32_t maxBusinessOrderSlots;
  std::vector<int32_t>  slotPrices;
  std::string gearGachaCardFrontImage;
  std::string gearGachaCardBackImage;
  std::string businessGachaCardFrontImage;
  std::string businessGachaCardBackImage;
  AssetPath smallCardBackground;
  AssetPath gachaRibbon;
  std::string gachaCounter;
  AssetPath starBackground;
  AssetPath detailGachaGearCardImage;
  AssetPath detailGachaBusinessCardImage;
  AssetPath buildMenuCardImageLocked;
  AssetPath buildMenuCardImageUnlocked;
  AssetPath buildMenuCardImageFree;
  std::string buildMenuCardEffectColor;
  std::string buildMenuTextColor;
  std::string buildMenuNpcBgColor;
  AssetPath buildMenuBusinessCardImage;
  AssetPath buildMenuChefhatEmptyImage;
  AssetPath gachaChefhatEmptyImage;
  AssetPath businessOrderMenuChefhatEmptyImage;
  AssetPath detailGachaDecoCardImage;

  _Rarity__isset __isset;

  void __set_rarityId(const RarityID val);

  void __set_weight(const int32_t val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_cardImage(const std::string& val);

  void __set_minBusinessOrderSlots(const int32_t val);

  void __set_maxBusinessOrderSlots(const int32_t val);

  void __set_slotPrices(const std::vector<int32_t> & val);

  void __set_gearGachaCardFrontImage(const std::string& val);

  void __set_gearGachaCardBackImage(const std::string& val);

  void __set_businessGachaCardFrontImage(const std::string& val);

  void __set_businessGachaCardBackImage(const std::string& val);

  void __set_smallCardBackground(const AssetPath& val);

  void __set_gachaRibbon(const AssetPath& val);

  void __set_gachaCounter(const std::string& val);

  void __set_starBackground(const AssetPath& val);

  void __set_detailGachaGearCardImage(const AssetPath& val);

  void __set_detailGachaBusinessCardImage(const AssetPath& val);

  void __set_buildMenuCardImageLocked(const AssetPath& val);

  void __set_buildMenuCardImageUnlocked(const AssetPath& val);

  void __set_buildMenuCardImageFree(const AssetPath& val);

  void __set_buildMenuCardEffectColor(const std::string& val);

  void __set_buildMenuTextColor(const std::string& val);

  void __set_buildMenuNpcBgColor(const std::string& val);

  void __set_buildMenuBusinessCardImage(const AssetPath& val);

  void __set_buildMenuChefhatEmptyImage(const AssetPath& val);

  void __set_gachaChefhatEmptyImage(const AssetPath& val);

  void __set_businessOrderMenuChefhatEmptyImage(const AssetPath& val);

  void __set_detailGachaDecoCardImage(const AssetPath& val);

  bool operator == (const Rarity & rhs) const
  {
    if (!(rarityId == rhs.rarityId))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (!(cardImage == rhs.cardImage))
      return false;
    if (!(minBusinessOrderSlots == rhs.minBusinessOrderSlots))
      return false;
    if (!(maxBusinessOrderSlots == rhs.maxBusinessOrderSlots))
      return false;
    if (!(slotPrices == rhs.slotPrices))
      return false;
    if (__isset.gearGachaCardFrontImage != rhs.__isset.gearGachaCardFrontImage)
      return false;
    else if (__isset.gearGachaCardFrontImage && !(gearGachaCardFrontImage == rhs.gearGachaCardFrontImage))
      return false;
    if (__isset.gearGachaCardBackImage != rhs.__isset.gearGachaCardBackImage)
      return false;
    else if (__isset.gearGachaCardBackImage && !(gearGachaCardBackImage == rhs.gearGachaCardBackImage))
      return false;
    if (__isset.businessGachaCardFrontImage != rhs.__isset.businessGachaCardFrontImage)
      return false;
    else if (__isset.businessGachaCardFrontImage && !(businessGachaCardFrontImage == rhs.businessGachaCardFrontImage))
      return false;
    if (__isset.businessGachaCardBackImage != rhs.__isset.businessGachaCardBackImage)
      return false;
    else if (__isset.businessGachaCardBackImage && !(businessGachaCardBackImage == rhs.businessGachaCardBackImage))
      return false;
    if (__isset.smallCardBackground != rhs.__isset.smallCardBackground)
      return false;
    else if (__isset.smallCardBackground && !(smallCardBackground == rhs.smallCardBackground))
      return false;
    if (__isset.gachaRibbon != rhs.__isset.gachaRibbon)
      return false;
    else if (__isset.gachaRibbon && !(gachaRibbon == rhs.gachaRibbon))
      return false;
    if (__isset.gachaCounter != rhs.__isset.gachaCounter)
      return false;
    else if (__isset.gachaCounter && !(gachaCounter == rhs.gachaCounter))
      return false;
    if (__isset.starBackground != rhs.__isset.starBackground)
      return false;
    else if (__isset.starBackground && !(starBackground == rhs.starBackground))
      return false;
    if (__isset.detailGachaGearCardImage != rhs.__isset.detailGachaGearCardImage)
      return false;
    else if (__isset.detailGachaGearCardImage && !(detailGachaGearCardImage == rhs.detailGachaGearCardImage))
      return false;
    if (__isset.detailGachaBusinessCardImage != rhs.__isset.detailGachaBusinessCardImage)
      return false;
    else if (__isset.detailGachaBusinessCardImage && !(detailGachaBusinessCardImage == rhs.detailGachaBusinessCardImage))
      return false;
    if (__isset.buildMenuCardImageLocked != rhs.__isset.buildMenuCardImageLocked)
      return false;
    else if (__isset.buildMenuCardImageLocked && !(buildMenuCardImageLocked == rhs.buildMenuCardImageLocked))
      return false;
    if (__isset.buildMenuCardImageUnlocked != rhs.__isset.buildMenuCardImageUnlocked)
      return false;
    else if (__isset.buildMenuCardImageUnlocked && !(buildMenuCardImageUnlocked == rhs.buildMenuCardImageUnlocked))
      return false;
    if (__isset.buildMenuCardImageFree != rhs.__isset.buildMenuCardImageFree)
      return false;
    else if (__isset.buildMenuCardImageFree && !(buildMenuCardImageFree == rhs.buildMenuCardImageFree))
      return false;
    if (__isset.buildMenuCardEffectColor != rhs.__isset.buildMenuCardEffectColor)
      return false;
    else if (__isset.buildMenuCardEffectColor && !(buildMenuCardEffectColor == rhs.buildMenuCardEffectColor))
      return false;
    if (__isset.buildMenuTextColor != rhs.__isset.buildMenuTextColor)
      return false;
    else if (__isset.buildMenuTextColor && !(buildMenuTextColor == rhs.buildMenuTextColor))
      return false;
    if (__isset.buildMenuNpcBgColor != rhs.__isset.buildMenuNpcBgColor)
      return false;
    else if (__isset.buildMenuNpcBgColor && !(buildMenuNpcBgColor == rhs.buildMenuNpcBgColor))
      return false;
    if (__isset.buildMenuBusinessCardImage != rhs.__isset.buildMenuBusinessCardImage)
      return false;
    else if (__isset.buildMenuBusinessCardImage && !(buildMenuBusinessCardImage == rhs.buildMenuBusinessCardImage))
      return false;
    if (__isset.buildMenuChefhatEmptyImage != rhs.__isset.buildMenuChefhatEmptyImage)
      return false;
    else if (__isset.buildMenuChefhatEmptyImage && !(buildMenuChefhatEmptyImage == rhs.buildMenuChefhatEmptyImage))
      return false;
    if (__isset.gachaChefhatEmptyImage != rhs.__isset.gachaChefhatEmptyImage)
      return false;
    else if (__isset.gachaChefhatEmptyImage && !(gachaChefhatEmptyImage == rhs.gachaChefhatEmptyImage))
      return false;
    if (__isset.businessOrderMenuChefhatEmptyImage != rhs.__isset.businessOrderMenuChefhatEmptyImage)
      return false;
    else if (__isset.businessOrderMenuChefhatEmptyImage && !(businessOrderMenuChefhatEmptyImage == rhs.businessOrderMenuChefhatEmptyImage))
      return false;
    if (__isset.detailGachaDecoCardImage != rhs.__isset.detailGachaDecoCardImage)
      return false;
    else if (__isset.detailGachaDecoCardImage && !(detailGachaDecoCardImage == rhs.detailGachaDecoCardImage))
      return false;
    return true;
  }
  bool operator != (const Rarity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rarity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rarity &a, Rarity &b);

std::ostream& operator<<(std::ostream& out, const Rarity& obj);

typedef struct _Building__isset {
  _Building__isset() : bundleId(false), inventoryTabId(false), newDisplay(false), newDisplayPlural(false), canRotate(false), rankMin(false), nextEvolveBuildingId(false), baseEvolveBuildingId(false), sellPrices(false), sellCurrencyIds(false), cannotMove(false), newEvolveName(false), fullDisplayName(false), realHeight(false), luaInterface(false), marketType(false), showAsGachaOfferIndex(false), placedScore(false), fountain(false), populationPlacedScore(false), onOpenAction(false), onOpenActionParameter(false) {}
  bool bundleId :1;
  bool inventoryTabId :1;
  bool newDisplay :1;
  bool newDisplayPlural :1;
  bool canRotate :1;
  bool rankMin :1;
  bool nextEvolveBuildingId :1;
  bool baseEvolveBuildingId :1;
  bool sellPrices :1;
  bool sellCurrencyIds :1;
  bool cannotMove :1;
  bool newEvolveName :1;
  bool fullDisplayName :1;
  bool realHeight :1;
  bool luaInterface :1;
  bool marketType :1;
  bool showAsGachaOfferIndex :1;
  bool placedScore :1;
  bool fountain :1;
  bool populationPlacedScore :1;
  bool onOpenAction :1;
  bool onOpenActionParameter :1;
} _Building__isset;

class Building : public virtual ::apache::thrift::TBase {
 public:

  Building(const Building&);
  Building& operator=(const Building&);
  Building() : buildingId(), buildingType((BuildingType::type)0), bundleId(), tileHeight(0), inventoryTabId(), sizeX(0), sizeY(0), canRotate(0), rarityId(0), evolutionId(0), rankMin(0), nextEvolveBuildingId(), baseEvolveBuildingId(), sellPrice(0), sellCurrencyId(), costCurrencyId(), cost(0), costGrowthFactor(0), baseCost(0), cannotMove(0), realHeight(0), luaInterface(), marketType((MarketType::type)0), showAsGachaOfferIndex(0), placedScore(0), fountain(0), populationPlacedScore(0), hiddenFromBuildMenu(0), onOpenAction((MessageButtonAction::type)0) {
  }

  virtual ~Building() throw();
  BuildingID buildingId;
  BuildingType::type buildingType;
  BundleID bundleId;
  int32_t tileHeight;
  InventoryTabID inventoryTabId;
  LocalizedString newDisplay;
  LocalizedString newDisplayPlural;
  int32_t sizeX;
  int32_t sizeY;
  bool canRotate;
  RarityID rarityId;
  EvolutionID evolutionId;
  int32_t rankMin;
  BuildingID nextEvolveBuildingId;
  BuildingID baseEvolveBuildingId;
  int32_t sellPrice;
  CurrencyID sellCurrencyId;
  std::vector<int32_t>  sellPrices;
  std::vector<CurrencyID>  sellCurrencyIds;
  CurrencyID costCurrencyId;
  int32_t cost;
  double costGrowthFactor;
  int32_t baseCost;
  bool cannotMove;
  LocalizedString newEvolveName;
  LocalizedString fullDisplayName;
  int32_t realHeight;
  std::string luaInterface;
  MarketType::type marketType;
  int32_t showAsGachaOfferIndex;
  int32_t placedScore;
  bool fountain;
  int32_t populationPlacedScore;
  bool hiddenFromBuildMenu;
  MessageButtonAction::type onOpenAction;
  std::vector<std::string>  onOpenActionParameter;

  _Building__isset __isset;

  void __set_buildingId(const BuildingID& val);

  void __set_buildingType(const BuildingType::type val);

  void __set_bundleId(const BundleID& val);

  void __set_tileHeight(const int32_t val);

  void __set_inventoryTabId(const InventoryTabID& val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_newDisplayPlural(const LocalizedString& val);

  void __set_sizeX(const int32_t val);

  void __set_sizeY(const int32_t val);

  void __set_canRotate(const bool val);

  void __set_rarityId(const RarityID val);

  void __set_evolutionId(const EvolutionID val);

  void __set_rankMin(const int32_t val);

  void __set_nextEvolveBuildingId(const BuildingID& val);

  void __set_baseEvolveBuildingId(const BuildingID& val);

  void __set_sellPrice(const int32_t val);

  void __set_sellCurrencyId(const CurrencyID& val);

  void __set_sellPrices(const std::vector<int32_t> & val);

  void __set_sellCurrencyIds(const std::vector<CurrencyID> & val);

  void __set_costCurrencyId(const CurrencyID& val);

  void __set_cost(const int32_t val);

  void __set_costGrowthFactor(const double val);

  void __set_baseCost(const int32_t val);

  void __set_cannotMove(const bool val);

  void __set_newEvolveName(const LocalizedString& val);

  void __set_fullDisplayName(const LocalizedString& val);

  void __set_realHeight(const int32_t val);

  void __set_luaInterface(const std::string& val);

  void __set_marketType(const MarketType::type val);

  void __set_showAsGachaOfferIndex(const int32_t val);

  void __set_placedScore(const int32_t val);

  void __set_fountain(const bool val);

  void __set_populationPlacedScore(const int32_t val);

  void __set_hiddenFromBuildMenu(const bool val);

  void __set_onOpenAction(const MessageButtonAction::type val);

  void __set_onOpenActionParameter(const std::vector<std::string> & val);

  bool operator == (const Building & rhs) const
  {
    if (!(buildingId == rhs.buildingId))
      return false;
    if (!(buildingType == rhs.buildingType))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (!(tileHeight == rhs.tileHeight))
      return false;
    if (__isset.inventoryTabId != rhs.__isset.inventoryTabId)
      return false;
    else if (__isset.inventoryTabId && !(inventoryTabId == rhs.inventoryTabId))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (__isset.newDisplayPlural != rhs.__isset.newDisplayPlural)
      return false;
    else if (__isset.newDisplayPlural && !(newDisplayPlural == rhs.newDisplayPlural))
      return false;
    if (!(sizeX == rhs.sizeX))
      return false;
    if (!(sizeY == rhs.sizeY))
      return false;
    if (__isset.canRotate != rhs.__isset.canRotate)
      return false;
    else if (__isset.canRotate && !(canRotate == rhs.canRotate))
      return false;
    if (!(rarityId == rhs.rarityId))
      return false;
    if (!(evolutionId == rhs.evolutionId))
      return false;
    if (__isset.rankMin != rhs.__isset.rankMin)
      return false;
    else if (__isset.rankMin && !(rankMin == rhs.rankMin))
      return false;
    if (__isset.nextEvolveBuildingId != rhs.__isset.nextEvolveBuildingId)
      return false;
    else if (__isset.nextEvolveBuildingId && !(nextEvolveBuildingId == rhs.nextEvolveBuildingId))
      return false;
    if (__isset.baseEvolveBuildingId != rhs.__isset.baseEvolveBuildingId)
      return false;
    else if (__isset.baseEvolveBuildingId && !(baseEvolveBuildingId == rhs.baseEvolveBuildingId))
      return false;
    if (!(sellPrice == rhs.sellPrice))
      return false;
    if (!(sellCurrencyId == rhs.sellCurrencyId))
      return false;
    if (__isset.sellPrices != rhs.__isset.sellPrices)
      return false;
    else if (__isset.sellPrices && !(sellPrices == rhs.sellPrices))
      return false;
    if (__isset.sellCurrencyIds != rhs.__isset.sellCurrencyIds)
      return false;
    else if (__isset.sellCurrencyIds && !(sellCurrencyIds == rhs.sellCurrencyIds))
      return false;
    if (!(costCurrencyId == rhs.costCurrencyId))
      return false;
    if (!(cost == rhs.cost))
      return false;
    if (!(costGrowthFactor == rhs.costGrowthFactor))
      return false;
    if (!(baseCost == rhs.baseCost))
      return false;
    if (__isset.cannotMove != rhs.__isset.cannotMove)
      return false;
    else if (__isset.cannotMove && !(cannotMove == rhs.cannotMove))
      return false;
    if (__isset.newEvolveName != rhs.__isset.newEvolveName)
      return false;
    else if (__isset.newEvolveName && !(newEvolveName == rhs.newEvolveName))
      return false;
    if (__isset.fullDisplayName != rhs.__isset.fullDisplayName)
      return false;
    else if (__isset.fullDisplayName && !(fullDisplayName == rhs.fullDisplayName))
      return false;
    if (__isset.realHeight != rhs.__isset.realHeight)
      return false;
    else if (__isset.realHeight && !(realHeight == rhs.realHeight))
      return false;
    if (__isset.luaInterface != rhs.__isset.luaInterface)
      return false;
    else if (__isset.luaInterface && !(luaInterface == rhs.luaInterface))
      return false;
    if (__isset.marketType != rhs.__isset.marketType)
      return false;
    else if (__isset.marketType && !(marketType == rhs.marketType))
      return false;
    if (__isset.showAsGachaOfferIndex != rhs.__isset.showAsGachaOfferIndex)
      return false;
    else if (__isset.showAsGachaOfferIndex && !(showAsGachaOfferIndex == rhs.showAsGachaOfferIndex))
      return false;
    if (__isset.placedScore != rhs.__isset.placedScore)
      return false;
    else if (__isset.placedScore && !(placedScore == rhs.placedScore))
      return false;
    if (__isset.fountain != rhs.__isset.fountain)
      return false;
    else if (__isset.fountain && !(fountain == rhs.fountain))
      return false;
    if (__isset.populationPlacedScore != rhs.__isset.populationPlacedScore)
      return false;
    else if (__isset.populationPlacedScore && !(populationPlacedScore == rhs.populationPlacedScore))
      return false;
    if (!(hiddenFromBuildMenu == rhs.hiddenFromBuildMenu))
      return false;
    if (__isset.onOpenAction != rhs.__isset.onOpenAction)
      return false;
    else if (__isset.onOpenAction && !(onOpenAction == rhs.onOpenAction))
      return false;
    if (__isset.onOpenActionParameter != rhs.__isset.onOpenActionParameter)
      return false;
    else if (__isset.onOpenActionParameter && !(onOpenActionParameter == rhs.onOpenActionParameter))
      return false;
    return true;
  }
  bool operator != (const Building &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Building & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Building &a, Building &b);

std::ostream& operator<<(std::ostream& out, const Building& obj);

typedef struct _StartingKingdomEntity__isset {
  _StartingKingdomEntity__isset() : rotated(false) {}
  bool rotated :1;
} _StartingKingdomEntity__isset;

class StartingKingdomEntity : public virtual ::apache::thrift::TBase {
 public:

  StartingKingdomEntity(const StartingKingdomEntity&);
  StartingKingdomEntity& operator=(const StartingKingdomEntity&);
  StartingKingdomEntity() : entityId(0), buildingId(), x(0), y(0), rotated(0) {
  }

  virtual ~StartingKingdomEntity() throw();
  EntityID entityId;
  BuildingID buildingId;
  Coordinate x;
  Coordinate y;
  bool rotated;

  _StartingKingdomEntity__isset __isset;

  void __set_entityId(const EntityID val);

  void __set_buildingId(const BuildingID& val);

  void __set_x(const Coordinate val);

  void __set_y(const Coordinate val);

  void __set_rotated(const bool val);

  bool operator == (const StartingKingdomEntity & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(buildingId == rhs.buildingId))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (__isset.rotated != rhs.__isset.rotated)
      return false;
    else if (__isset.rotated && !(rotated == rhs.rotated))
      return false;
    return true;
  }
  bool operator != (const StartingKingdomEntity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartingKingdomEntity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StartingKingdomEntity &a, StartingKingdomEntity &b);

std::ostream& operator<<(std::ostream& out, const StartingKingdomEntity& obj);

typedef struct _PresetKingdomEntity__isset {
  _PresetKingdomEntity__isset() : rotated(false) {}
  bool rotated :1;
} _PresetKingdomEntity__isset;

class PresetKingdomEntity : public virtual ::apache::thrift::TBase {
 public:

  PresetKingdomEntity(const PresetKingdomEntity&);
  PresetKingdomEntity& operator=(const PresetKingdomEntity&);
  PresetKingdomEntity() : presetKingdomId(), entityId(0), buildingId(), x(0), y(0), rotated(0) {
  }

  virtual ~PresetKingdomEntity() throw();
  PresetKingdomID presetKingdomId;
  EntityID entityId;
  BuildingID buildingId;
  Coordinate x;
  Coordinate y;
  bool rotated;

  _PresetKingdomEntity__isset __isset;

  void __set_presetKingdomId(const PresetKingdomID& val);

  void __set_entityId(const EntityID val);

  void __set_buildingId(const BuildingID& val);

  void __set_x(const Coordinate val);

  void __set_y(const Coordinate val);

  void __set_rotated(const bool val);

  bool operator == (const PresetKingdomEntity & rhs) const
  {
    if (!(presetKingdomId == rhs.presetKingdomId))
      return false;
    if (!(entityId == rhs.entityId))
      return false;
    if (!(buildingId == rhs.buildingId))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (__isset.rotated != rhs.__isset.rotated)
      return false;
    else if (__isset.rotated && !(rotated == rhs.rotated))
      return false;
    return true;
  }
  bool operator != (const PresetKingdomEntity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PresetKingdomEntity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PresetKingdomEntity &a, PresetKingdomEntity &b);

std::ostream& operator<<(std::ostream& out, const PresetKingdomEntity& obj);

typedef struct _Color__isset {
  _Color__isset() : colorId(false), red(false), green(false), blue(false), alpha(false) {}
  bool colorId :1;
  bool red :1;
  bool green :1;
  bool blue :1;
  bool alpha :1;
} _Color__isset;

class Color : public virtual ::apache::thrift::TBase {
 public:

  Color(const Color&);
  Color& operator=(const Color&);
  Color() : colorId(), red(0), green(0), blue(0), alpha(0) {
  }

  virtual ~Color() throw();
  ColorID colorId;
  int32_t red;
  int32_t green;
  int32_t blue;
  int32_t alpha;

  _Color__isset __isset;

  void __set_colorId(const ColorID& val);

  void __set_red(const int32_t val);

  void __set_green(const int32_t val);

  void __set_blue(const int32_t val);

  void __set_alpha(const int32_t val);

  bool operator == (const Color & rhs) const
  {
    if (__isset.colorId != rhs.__isset.colorId)
      return false;
    else if (__isset.colorId && !(colorId == rhs.colorId))
      return false;
    if (__isset.red != rhs.__isset.red)
      return false;
    else if (__isset.red && !(red == rhs.red))
      return false;
    if (__isset.green != rhs.__isset.green)
      return false;
    else if (__isset.green && !(green == rhs.green))
      return false;
    if (__isset.blue != rhs.__isset.blue)
      return false;
    else if (__isset.blue && !(blue == rhs.blue))
      return false;
    if (__isset.alpha != rhs.__isset.alpha)
      return false;
    else if (__isset.alpha && !(alpha == rhs.alpha))
      return false;
    return true;
  }
  bool operator != (const Color &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Color & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Color &a, Color &b);

std::ostream& operator<<(std::ostream& out, const Color& obj);

typedef struct _IslandSettings__isset {
  _IslandSettings__isset() : islandBackLayerGroup(false), islandMiddleLayerGroup(false) {}
  bool islandBackLayerGroup :1;
  bool islandMiddleLayerGroup :1;
} _IslandSettings__isset;

class IslandSettings : public virtual ::apache::thrift::TBase {
 public:

  IslandSettings(const IslandSettings&);
  IslandSettings& operator=(const IslandSettings&);
  IslandSettings() : islandBackLayerGroup(), islandMiddleLayerGroup() {
  }

  virtual ~IslandSettings() throw();
  std::string islandBackLayerGroup;
  std::string islandMiddleLayerGroup;

  _IslandSettings__isset __isset;

  void __set_islandBackLayerGroup(const std::string& val);

  void __set_islandMiddleLayerGroup(const std::string& val);

  bool operator == (const IslandSettings & rhs) const
  {
    if (__isset.islandBackLayerGroup != rhs.__isset.islandBackLayerGroup)
      return false;
    else if (__isset.islandBackLayerGroup && !(islandBackLayerGroup == rhs.islandBackLayerGroup))
      return false;
    if (__isset.islandMiddleLayerGroup != rhs.__isset.islandMiddleLayerGroup)
      return false;
    else if (__isset.islandMiddleLayerGroup && !(islandMiddleLayerGroup == rhs.islandMiddleLayerGroup))
      return false;
    return true;
  }
  bool operator != (const IslandSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IslandSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IslandSettings &a, IslandSettings &b);

std::ostream& operator<<(std::ostream& out, const IslandSettings& obj);

typedef struct _IslandObject__isset {
  _IslandObject__isset() : islandObjectId(false), x(false), y(false), image(false), tintColorId(false), param(false), type(false), islandGroup(false) {}
  bool islandObjectId :1;
  bool x :1;
  bool y :1;
  bool image :1;
  bool tintColorId :1;
  bool param :1;
  bool type :1;
  bool islandGroup :1;
} _IslandObject__isset;

class IslandObject : public virtual ::apache::thrift::TBase {
 public:

  IslandObject(const IslandObject&);
  IslandObject& operator=(const IslandObject&);
  IslandObject() : islandObjectId(), x(0), y(0), image(), tintColorId(), param(), type((IslandObjectType::type)0), islandGroup() {
  }

  virtual ~IslandObject() throw();
  IslandObjectID islandObjectId;
  int32_t x;
  int32_t y;
  std::string image;
  ColorID tintColorId;
  std::string param;
  IslandObjectType::type type;
  std::string islandGroup;

  _IslandObject__isset __isset;

  void __set_islandObjectId(const IslandObjectID& val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_image(const std::string& val);

  void __set_tintColorId(const ColorID& val);

  void __set_param(const std::string& val);

  void __set_type(const IslandObjectType::type val);

  void __set_islandGroup(const std::string& val);

  bool operator == (const IslandObject & rhs) const
  {
    if (__isset.islandObjectId != rhs.__isset.islandObjectId)
      return false;
    else if (__isset.islandObjectId && !(islandObjectId == rhs.islandObjectId))
      return false;
    if (__isset.x != rhs.__isset.x)
      return false;
    else if (__isset.x && !(x == rhs.x))
      return false;
    if (__isset.y != rhs.__isset.y)
      return false;
    else if (__isset.y && !(y == rhs.y))
      return false;
    if (__isset.image != rhs.__isset.image)
      return false;
    else if (__isset.image && !(image == rhs.image))
      return false;
    if (__isset.tintColorId != rhs.__isset.tintColorId)
      return false;
    else if (__isset.tintColorId && !(tintColorId == rhs.tintColorId))
      return false;
    if (__isset.param != rhs.__isset.param)
      return false;
    else if (__isset.param && !(param == rhs.param))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.islandGroup != rhs.__isset.islandGroup)
      return false;
    else if (__isset.islandGroup && !(islandGroup == rhs.islandGroup))
      return false;
    return true;
  }
  bool operator != (const IslandObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IslandObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IslandObject &a, IslandObject &b);

std::ostream& operator<<(std::ostream& out, const IslandObject& obj);

typedef struct _Island__isset {
  _Island__isset() : newDisplay(false), nextIslandId(false), islandGroup(false), x(false), y(false) {}
  bool newDisplay :1;
  bool nextIslandId :1;
  bool islandGroup :1;
  bool x :1;
  bool y :1;
} _Island__isset;

class Island : public virtual ::apache::thrift::TBase {
 public:

  Island(const Island&);
  Island& operator=(const Island&);
  Island() : islandId(), pageNum(0), nextIslandId(), eventId(), tmxFilename(), islandImage(), islandGroup(), x(0), y(0) {
  }

  virtual ~Island() throw();
  IslandID islandId;
  int32_t pageNum;
  LocalizedString newDisplay;
  IslandID nextIslandId;
  std::string eventId;
  std::string tmxFilename;
  AssetPath islandImage;
  std::string islandGroup;
  int32_t x;
  int32_t y;

  _Island__isset __isset;

  void __set_islandId(const IslandID& val);

  void __set_pageNum(const int32_t val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_nextIslandId(const IslandID& val);

  void __set_eventId(const std::string& val);

  void __set_tmxFilename(const std::string& val);

  void __set_islandImage(const AssetPath& val);

  void __set_islandGroup(const std::string& val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  bool operator == (const Island & rhs) const
  {
    if (!(islandId == rhs.islandId))
      return false;
    if (!(pageNum == rhs.pageNum))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (__isset.nextIslandId != rhs.__isset.nextIslandId)
      return false;
    else if (__isset.nextIslandId && !(nextIslandId == rhs.nextIslandId))
      return false;
    if (!(eventId == rhs.eventId))
      return false;
    if (!(tmxFilename == rhs.tmxFilename))
      return false;
    if (!(islandImage == rhs.islandImage))
      return false;
    if (__isset.islandGroup != rhs.__isset.islandGroup)
      return false;
    else if (__isset.islandGroup && !(islandGroup == rhs.islandGroup))
      return false;
    if (__isset.x != rhs.__isset.x)
      return false;
    else if (__isset.x && !(x == rhs.x))
      return false;
    if (__isset.y != rhs.__isset.y)
      return false;
    else if (__isset.y && !(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Island &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Island & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Island &a, Island &b);

std::ostream& operator<<(std::ostream& out, const Island& obj);

typedef struct _Recipe__isset {
  _Recipe__isset() : catalogImage(false), newDisplay(false) {}
  bool catalogImage :1;
  bool newDisplay :1;
} _Recipe__isset;

class Recipe : public virtual ::apache::thrift::TBase {
 public:

  Recipe(const Recipe&);
  Recipe& operator=(const Recipe&);
  Recipe() : recipeId(), catalogImage() {
  }

  virtual ~Recipe() throw();
  RecipeID recipeId;
  AssetPath catalogImage;
  LocalizedString newDisplay;

  _Recipe__isset __isset;

  void __set_recipeId(const RecipeID& val);

  void __set_catalogImage(const AssetPath& val);

  void __set_newDisplay(const LocalizedString& val);

  bool operator == (const Recipe & rhs) const
  {
    if (!(recipeId == rhs.recipeId))
      return false;
    if (__isset.catalogImage != rhs.__isset.catalogImage)
      return false;
    else if (__isset.catalogImage && !(catalogImage == rhs.catalogImage))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    return true;
  }
  bool operator != (const Recipe &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Recipe & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Recipe &a, Recipe &b);

std::ostream& operator<<(std::ostream& out, const Recipe& obj);

typedef struct _InventoryTab__isset {
  _InventoryTab__isset() : title(false) {}
  bool title :1;
} _InventoryTab__isset;

class InventoryTab : public virtual ::apache::thrift::TBase {
 public:

  InventoryTab(const InventoryTab&);
  InventoryTab& operator=(const InventoryTab&);
  InventoryTab() : index(0), inventoryTabId(), image(), selectionSound() {
  }

  virtual ~InventoryTab() throw();
  int32_t index;
  InventoryTabID inventoryTabId;
  AssetPath image;
  std::string selectionSound;
  LocalizedString title;

  _InventoryTab__isset __isset;

  void __set_index(const int32_t val);

  void __set_inventoryTabId(const InventoryTabID& val);

  void __set_image(const AssetPath& val);

  void __set_selectionSound(const std::string& val);

  void __set_title(const LocalizedString& val);

  bool operator == (const InventoryTab & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(inventoryTabId == rhs.inventoryTabId))
      return false;
    if (!(image == rhs.image))
      return false;
    if (!(selectionSound == rhs.selectionSound))
      return false;
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    return true;
  }
  bool operator != (const InventoryTab &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InventoryTab & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InventoryTab &a, InventoryTab &b);

std::ostream& operator<<(std::ostream& out, const InventoryTab& obj);

typedef struct _Material__isset {
  _Material__isset() : rarityId(false), levelId(false), newDisplay(false), materialIds(false), materialCounts(false), craftCostCurrencyId(false), craftCost(false) {}
  bool rarityId :1;
  bool levelId :1;
  bool newDisplay :1;
  bool materialIds :1;
  bool materialCounts :1;
  bool craftCostCurrencyId :1;
  bool craftCost :1;
} _Material__isset;

class Material : public virtual ::apache::thrift::TBase {
 public:

  Material(const Material&);
  Material& operator=(const Material&);
  Material() : materialID(), rarityId(0), levelId(0), craftCostCurrencyId(), craftCost(0) {
  }

  virtual ~Material() throw();
  MaterialID materialID;
  RarityID rarityId;
  RankID levelId;
  LocalizedString newDisplay;
  std::vector<MaterialID>  materialIds;
  std::vector<int32_t>  materialCounts;
  CurrencyID craftCostCurrencyId;
  int32_t craftCost;

  _Material__isset __isset;

  void __set_materialID(const MaterialID& val);

  void __set_rarityId(const RarityID val);

  void __set_levelId(const RankID val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_materialIds(const std::vector<MaterialID> & val);

  void __set_materialCounts(const std::vector<int32_t> & val);

  void __set_craftCostCurrencyId(const CurrencyID& val);

  void __set_craftCost(const int32_t val);

  bool operator == (const Material & rhs) const
  {
    if (!(materialID == rhs.materialID))
      return false;
    if (__isset.rarityId != rhs.__isset.rarityId)
      return false;
    else if (__isset.rarityId && !(rarityId == rhs.rarityId))
      return false;
    if (__isset.levelId != rhs.__isset.levelId)
      return false;
    else if (__isset.levelId && !(levelId == rhs.levelId))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (__isset.materialIds != rhs.__isset.materialIds)
      return false;
    else if (__isset.materialIds && !(materialIds == rhs.materialIds))
      return false;
    if (__isset.materialCounts != rhs.__isset.materialCounts)
      return false;
    else if (__isset.materialCounts && !(materialCounts == rhs.materialCounts))
      return false;
    if (__isset.craftCostCurrencyId != rhs.__isset.craftCostCurrencyId)
      return false;
    else if (__isset.craftCostCurrencyId && !(craftCostCurrencyId == rhs.craftCostCurrencyId))
      return false;
    if (__isset.craftCost != rhs.__isset.craftCost)
      return false;
    else if (__isset.craftCost && !(craftCost == rhs.craftCost))
      return false;
    return true;
  }
  bool operator != (const Material &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Material & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Material &a, Material &b);

std::ostream& operator<<(std::ostream& out, const Material& obj);


class BusinessEvolution : public virtual ::apache::thrift::TBase {
 public:

  BusinessEvolution(const BusinessEvolution&);
  BusinessEvolution& operator=(const BusinessEvolution&);
  BusinessEvolution() : evolutionMaterialId() {
  }

  virtual ~BusinessEvolution() throw();
  EvolutionMaterialID evolutionMaterialId;
  std::vector<MaterialID>  gearList;
  std::vector<int32_t>  materialCounts;

  void __set_evolutionMaterialId(const EvolutionMaterialID& val);

  void __set_gearList(const std::vector<MaterialID> & val);

  void __set_materialCounts(const std::vector<int32_t> & val);

  bool operator == (const BusinessEvolution & rhs) const
  {
    if (!(evolutionMaterialId == rhs.evolutionMaterialId))
      return false;
    if (!(gearList == rhs.gearList))
      return false;
    if (!(materialCounts == rhs.materialCounts))
      return false;
    return true;
  }
  bool operator != (const BusinessEvolution &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessEvolution & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessEvolution &a, BusinessEvolution &b);

std::ostream& operator<<(std::ostream& out, const BusinessEvolution& obj);


class BusinessOrderList : public virtual ::apache::thrift::TBase {
 public:

  BusinessOrderList(const BusinessOrderList&);
  BusinessOrderList& operator=(const BusinessOrderList&);
  BusinessOrderList() : businessOrderListId() {
  }

  virtual ~BusinessOrderList() throw();
  BusinessOrderListID businessOrderListId;
  std::vector<BusinessOrderID>  businessOrderIds;

  void __set_businessOrderListId(const BusinessOrderListID& val);

  void __set_businessOrderIds(const std::vector<BusinessOrderID> & val);

  bool operator == (const BusinessOrderList & rhs) const
  {
    if (!(businessOrderListId == rhs.businessOrderListId))
      return false;
    if (!(businessOrderIds == rhs.businessOrderIds))
      return false;
    return true;
  }
  bool operator != (const BusinessOrderList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessOrderList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessOrderList &a, BusinessOrderList &b);

std::ostream& operator<<(std::ostream& out, const BusinessOrderList& obj);

typedef struct _Business__isset {
  _Business__isset() : evolutionMaterialId(false), evolveCostCurrencyId(false), evolveCost(false), npcId(false) {}
  bool evolutionMaterialId :1;
  bool evolveCostCurrencyId :1;
  bool evolveCost :1;
  bool npcId :1;
} _Business__isset;

class Business : public virtual ::apache::thrift::TBase {
 public:

  Business(const Business&);
  Business& operator=(const Business&);
  Business() : businessId(), buildingId(), evolutionMaterialId(), evolveCostCurrencyId(), evolveCost(0), npcId() {
  }

  virtual ~Business() throw();
  BusinessID businessId;
  BuildingID buildingId;
  EvolutionMaterialID evolutionMaterialId;
  CurrencyID evolveCostCurrencyId;
  int32_t evolveCost;
  std::string npcId;

  _Business__isset __isset;

  void __set_businessId(const BusinessID& val);

  void __set_buildingId(const BuildingID& val);

  void __set_evolutionMaterialId(const EvolutionMaterialID& val);

  void __set_evolveCostCurrencyId(const CurrencyID& val);

  void __set_evolveCost(const int32_t val);

  void __set_npcId(const std::string& val);

  bool operator == (const Business & rhs) const
  {
    if (!(businessId == rhs.businessId))
      return false;
    if (!(buildingId == rhs.buildingId))
      return false;
    if (__isset.evolutionMaterialId != rhs.__isset.evolutionMaterialId)
      return false;
    else if (__isset.evolutionMaterialId && !(evolutionMaterialId == rhs.evolutionMaterialId))
      return false;
    if (__isset.evolveCostCurrencyId != rhs.__isset.evolveCostCurrencyId)
      return false;
    else if (__isset.evolveCostCurrencyId && !(evolveCostCurrencyId == rhs.evolveCostCurrencyId))
      return false;
    if (__isset.evolveCost != rhs.__isset.evolveCost)
      return false;
    else if (__isset.evolveCost && !(evolveCost == rhs.evolveCost))
      return false;
    if (__isset.npcId != rhs.__isset.npcId)
      return false;
    else if (__isset.npcId && !(npcId == rhs.npcId))
      return false;
    return true;
  }
  bool operator != (const Business &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Business & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Business &a, Business &b);

std::ostream& operator<<(std::ostream& out, const Business& obj);

typedef struct _BusinessOrder__isset {
  _BusinessOrder__isset() : sortIndex(false), palPointsProduced(false), rushBonusPalPoints(false), xpProduced(false), socialGoldCost(false), gemCost(false), guildMatePalPointsProduced(false), guildMatePalPointsRushBonus(false), lootListId(false) {}
  bool sortIndex :1;
  bool palPointsProduced :1;
  bool rushBonusPalPoints :1;
  bool xpProduced :1;
  bool socialGoldCost :1;
  bool gemCost :1;
  bool guildMatePalPointsProduced :1;
  bool guildMatePalPointsRushBonus :1;
  bool lootListId :1;
} _BusinessOrder__isset;

class BusinessOrder : public virtual ::apache::thrift::TBase {
 public:

  BusinessOrder(const BusinessOrder&);
  BusinessOrder& operator=(const BusinessOrder&);
  BusinessOrder() : orderId(), sortIndex(0), recipeId(), orderCostCurrencyId(), orderCost(0), orderTimeBasis(0), earnedCurrencyId(), earned(0), rushCostCurrencyId(), rushCostBasis(0), palPointsProduced(0), rushBonusPalPoints(0), xpProduced(0), socialGoldCost(0), gemCost(0), guildMatePalPointsProduced(0), guildMatePalPointsRushBonus(0), lootListId() {
  }

  virtual ~BusinessOrder() throw();
  BusinessOrderID orderId;
  int32_t sortIndex;
  RecipeID recipeId;
  CurrencyID orderCostCurrencyId;
  int32_t orderCost;
  int32_t orderTimeBasis;
  CurrencyID earnedCurrencyId;
  int32_t earned;
  CurrencyID rushCostCurrencyId;
  int32_t rushCostBasis;
  int32_t palPointsProduced;
  int32_t rushBonusPalPoints;
  int32_t xpProduced;
  int32_t socialGoldCost;
  int32_t gemCost;
  int32_t guildMatePalPointsProduced;
  int32_t guildMatePalPointsRushBonus;
  WeightedLootListID lootListId;

  _BusinessOrder__isset __isset;

  void __set_orderId(const BusinessOrderID& val);

  void __set_sortIndex(const int32_t val);

  void __set_recipeId(const RecipeID& val);

  void __set_orderCostCurrencyId(const CurrencyID& val);

  void __set_orderCost(const int32_t val);

  void __set_orderTimeBasis(const int32_t val);

  void __set_earnedCurrencyId(const CurrencyID& val);

  void __set_earned(const int32_t val);

  void __set_rushCostCurrencyId(const CurrencyID& val);

  void __set_rushCostBasis(const int32_t val);

  void __set_palPointsProduced(const int32_t val);

  void __set_rushBonusPalPoints(const int32_t val);

  void __set_xpProduced(const int32_t val);

  void __set_socialGoldCost(const int32_t val);

  void __set_gemCost(const int32_t val);

  void __set_guildMatePalPointsProduced(const int32_t val);

  void __set_guildMatePalPointsRushBonus(const int32_t val);

  void __set_lootListId(const WeightedLootListID& val);

  bool operator == (const BusinessOrder & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (__isset.sortIndex != rhs.__isset.sortIndex)
      return false;
    else if (__isset.sortIndex && !(sortIndex == rhs.sortIndex))
      return false;
    if (!(recipeId == rhs.recipeId))
      return false;
    if (!(orderCostCurrencyId == rhs.orderCostCurrencyId))
      return false;
    if (!(orderCost == rhs.orderCost))
      return false;
    if (!(orderTimeBasis == rhs.orderTimeBasis))
      return false;
    if (!(earnedCurrencyId == rhs.earnedCurrencyId))
      return false;
    if (!(earned == rhs.earned))
      return false;
    if (!(rushCostCurrencyId == rhs.rushCostCurrencyId))
      return false;
    if (!(rushCostBasis == rhs.rushCostBasis))
      return false;
    if (__isset.palPointsProduced != rhs.__isset.palPointsProduced)
      return false;
    else if (__isset.palPointsProduced && !(palPointsProduced == rhs.palPointsProduced))
      return false;
    if (__isset.rushBonusPalPoints != rhs.__isset.rushBonusPalPoints)
      return false;
    else if (__isset.rushBonusPalPoints && !(rushBonusPalPoints == rhs.rushBonusPalPoints))
      return false;
    if (__isset.xpProduced != rhs.__isset.xpProduced)
      return false;
    else if (__isset.xpProduced && !(xpProduced == rhs.xpProduced))
      return false;
    if (__isset.socialGoldCost != rhs.__isset.socialGoldCost)
      return false;
    else if (__isset.socialGoldCost && !(socialGoldCost == rhs.socialGoldCost))
      return false;
    if (__isset.gemCost != rhs.__isset.gemCost)
      return false;
    else if (__isset.gemCost && !(gemCost == rhs.gemCost))
      return false;
    if (__isset.guildMatePalPointsProduced != rhs.__isset.guildMatePalPointsProduced)
      return false;
    else if (__isset.guildMatePalPointsProduced && !(guildMatePalPointsProduced == rhs.guildMatePalPointsProduced))
      return false;
    if (__isset.guildMatePalPointsRushBonus != rhs.__isset.guildMatePalPointsRushBonus)
      return false;
    else if (__isset.guildMatePalPointsRushBonus && !(guildMatePalPointsRushBonus == rhs.guildMatePalPointsRushBonus))
      return false;
    if (__isset.lootListId != rhs.__isset.lootListId)
      return false;
    else if (__isset.lootListId && !(lootListId == rhs.lootListId))
      return false;
    return true;
  }
  bool operator != (const BusinessOrder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessOrder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessOrder &a, BusinessOrder &b);

std::ostream& operator<<(std::ostream& out, const BusinessOrder& obj);

typedef struct _NewBusinessOrder__isset {
  _NewBusinessOrder__isset() : sortIndex(false), recipeId(false), orderCostCurrencyId(false), orderCost(false), palPointsProduced(false), rushBonusPalPoints(false), xpProduced(false), guildMatePalPointsProduced(false), guildMatePalPointsRushBonus(false), lootListId(false) {}
  bool sortIndex :1;
  bool recipeId :1;
  bool orderCostCurrencyId :1;
  bool orderCost :1;
  bool palPointsProduced :1;
  bool rushBonusPalPoints :1;
  bool xpProduced :1;
  bool guildMatePalPointsProduced :1;
  bool guildMatePalPointsRushBonus :1;
  bool lootListId :1;
} _NewBusinessOrder__isset;

class NewBusinessOrder : public virtual ::apache::thrift::TBase {
 public:

  NewBusinessOrder(const NewBusinessOrder&);
  NewBusinessOrder& operator=(const NewBusinessOrder&);
  NewBusinessOrder() : orderId(), businessId(), eventPhases((EventPhases::type)0), sortIndex(0), recipeId(), orderCostCurrencyId(), orderCost(0), orderTimeBasis(0), earnedCurrencyId(), earned(0), palPointsProduced(0), rushBonusPalPoints(0), xpProduced(0), guildMatePalPointsProduced(0), guildMatePalPointsRushBonus(0), lootListId() {
  }

  virtual ~NewBusinessOrder() throw();
  BusinessOrderID orderId;
  BuildingID businessId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t sortIndex;
  RecipeID recipeId;
  CurrencyID orderCostCurrencyId;
  int32_t orderCost;
  int32_t orderTimeBasis;
  CurrencyID earnedCurrencyId;
  int32_t earned;
  int32_t palPointsProduced;
  int32_t rushBonusPalPoints;
  int32_t xpProduced;
  int32_t guildMatePalPointsProduced;
  int32_t guildMatePalPointsRushBonus;
  WeightedLootListID lootListId;

  _NewBusinessOrder__isset __isset;

  void __set_orderId(const BusinessOrderID& val);

  void __set_businessId(const BuildingID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_sortIndex(const int32_t val);

  void __set_recipeId(const RecipeID& val);

  void __set_orderCostCurrencyId(const CurrencyID& val);

  void __set_orderCost(const int32_t val);

  void __set_orderTimeBasis(const int32_t val);

  void __set_earnedCurrencyId(const CurrencyID& val);

  void __set_earned(const int32_t val);

  void __set_palPointsProduced(const int32_t val);

  void __set_rushBonusPalPoints(const int32_t val);

  void __set_xpProduced(const int32_t val);

  void __set_guildMatePalPointsProduced(const int32_t val);

  void __set_guildMatePalPointsRushBonus(const int32_t val);

  void __set_lootListId(const WeightedLootListID& val);

  bool operator == (const NewBusinessOrder & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (!(businessId == rhs.businessId))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (__isset.sortIndex != rhs.__isset.sortIndex)
      return false;
    else if (__isset.sortIndex && !(sortIndex == rhs.sortIndex))
      return false;
    if (__isset.recipeId != rhs.__isset.recipeId)
      return false;
    else if (__isset.recipeId && !(recipeId == rhs.recipeId))
      return false;
    if (__isset.orderCostCurrencyId != rhs.__isset.orderCostCurrencyId)
      return false;
    else if (__isset.orderCostCurrencyId && !(orderCostCurrencyId == rhs.orderCostCurrencyId))
      return false;
    if (__isset.orderCost != rhs.__isset.orderCost)
      return false;
    else if (__isset.orderCost && !(orderCost == rhs.orderCost))
      return false;
    if (!(orderTimeBasis == rhs.orderTimeBasis))
      return false;
    if (!(earnedCurrencyId == rhs.earnedCurrencyId))
      return false;
    if (!(earned == rhs.earned))
      return false;
    if (__isset.palPointsProduced != rhs.__isset.palPointsProduced)
      return false;
    else if (__isset.palPointsProduced && !(palPointsProduced == rhs.palPointsProduced))
      return false;
    if (__isset.rushBonusPalPoints != rhs.__isset.rushBonusPalPoints)
      return false;
    else if (__isset.rushBonusPalPoints && !(rushBonusPalPoints == rhs.rushBonusPalPoints))
      return false;
    if (__isset.xpProduced != rhs.__isset.xpProduced)
      return false;
    else if (__isset.xpProduced && !(xpProduced == rhs.xpProduced))
      return false;
    if (__isset.guildMatePalPointsProduced != rhs.__isset.guildMatePalPointsProduced)
      return false;
    else if (__isset.guildMatePalPointsProduced && !(guildMatePalPointsProduced == rhs.guildMatePalPointsProduced))
      return false;
    if (__isset.guildMatePalPointsRushBonus != rhs.__isset.guildMatePalPointsRushBonus)
      return false;
    else if (__isset.guildMatePalPointsRushBonus && !(guildMatePalPointsRushBonus == rhs.guildMatePalPointsRushBonus))
      return false;
    if (__isset.lootListId != rhs.__isset.lootListId)
      return false;
    else if (__isset.lootListId && !(lootListId == rhs.lootListId))
      return false;
    return true;
  }
  bool operator != (const NewBusinessOrder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewBusinessOrder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NewBusinessOrder &a, NewBusinessOrder &b);

std::ostream& operator<<(std::ostream& out, const NewBusinessOrder& obj);

typedef struct _Deco__isset {
  _Deco__isset() : roadEditorGroup(false), isRiver(false) {}
  bool roadEditorGroup :1;
  bool isRiver :1;
} _Deco__isset;

class Deco : public virtual ::apache::thrift::TBase {
 public:

  Deco(const Deco&);
  Deco& operator=(const Deco&);
  Deco() : decoId(), buildingId(), bonusCurrencyId(), tier1(0), tier1Bonus(0), tier2(0), tier2Bonus(0), tier3(0), tier3Bonus(0), roadEditorGroup(0), isRiver(0) {
  }

  virtual ~Deco() throw();
  DecoID decoId;
  BuildingID buildingId;
  CurrencyID bonusCurrencyId;
  int32_t tier1;
  int32_t tier1Bonus;
  int32_t tier2;
  int32_t tier2Bonus;
  int32_t tier3;
  int32_t tier3Bonus;
  int32_t roadEditorGroup;
  bool isRiver;

  _Deco__isset __isset;

  void __set_decoId(const DecoID& val);

  void __set_buildingId(const BuildingID& val);

  void __set_bonusCurrencyId(const CurrencyID& val);

  void __set_tier1(const int32_t val);

  void __set_tier1Bonus(const int32_t val);

  void __set_tier2(const int32_t val);

  void __set_tier2Bonus(const int32_t val);

  void __set_tier3(const int32_t val);

  void __set_tier3Bonus(const int32_t val);

  void __set_roadEditorGroup(const int32_t val);

  void __set_isRiver(const bool val);

  bool operator == (const Deco & rhs) const
  {
    if (!(decoId == rhs.decoId))
      return false;
    if (!(buildingId == rhs.buildingId))
      return false;
    if (!(bonusCurrencyId == rhs.bonusCurrencyId))
      return false;
    if (!(tier1 == rhs.tier1))
      return false;
    if (!(tier1Bonus == rhs.tier1Bonus))
      return false;
    if (!(tier2 == rhs.tier2))
      return false;
    if (!(tier2Bonus == rhs.tier2Bonus))
      return false;
    if (!(tier3 == rhs.tier3))
      return false;
    if (!(tier3Bonus == rhs.tier3Bonus))
      return false;
    if (__isset.roadEditorGroup != rhs.__isset.roadEditorGroup)
      return false;
    else if (__isset.roadEditorGroup && !(roadEditorGroup == rhs.roadEditorGroup))
      return false;
    if (__isset.isRiver != rhs.__isset.isRiver)
      return false;
    else if (__isset.isRiver && !(isRiver == rhs.isRiver))
      return false;
    return true;
  }
  bool operator != (const Deco &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Deco & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Deco &a, Deco &b);

std::ostream& operator<<(std::ostream& out, const Deco& obj);


class Blocker : public virtual ::apache::thrift::TBase {
 public:

  Blocker(const Blocker&);
  Blocker& operator=(const Blocker&);
  Blocker() : buildingId(), removeCurrencyId(), removeCost(0) {
  }

  virtual ~Blocker() throw();
  BuildingID buildingId;
  CurrencyID removeCurrencyId;
  int32_t removeCost;

  void __set_buildingId(const BuildingID& val);

  void __set_removeCurrencyId(const CurrencyID& val);

  void __set_removeCost(const int32_t val);

  bool operator == (const Blocker & rhs) const
  {
    if (!(buildingId == rhs.buildingId))
      return false;
    if (!(removeCurrencyId == rhs.removeCurrencyId))
      return false;
    if (!(removeCost == rhs.removeCost))
      return false;
    return true;
  }
  bool operator != (const Blocker &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Blocker & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Blocker &a, Blocker &b);

std::ostream& operator<<(std::ostream& out, const Blocker& obj);

typedef struct _WeightedLoot__isset {
  _WeightedLoot__isset() : itemId(false), eventId(false), bonusProbability(false), bonusMultiplier(false), probabilityMultiplier(false) {}
  bool itemId :1;
  bool eventId :1;
  bool bonusProbability :1;
  bool bonusMultiplier :1;
  bool probabilityMultiplier :1;
} _WeightedLoot__isset;

class WeightedLoot : public virtual ::apache::thrift::TBase {
 public:

  WeightedLoot(const WeightedLoot&);
  WeightedLoot& operator=(const WeightedLoot&);
  WeightedLoot() : lootListId(), itemId(), itemType((LootItemType::type)0), eventId(), itemAmount(0), probability(0), bonusProbability(0), bonusMultiplier(0), probabilityMultiplier(0) {
  }

  virtual ~WeightedLoot() throw();
  WeightedLootListID lootListId;
  CurrencyID itemId;
  LootItemType::type itemType;
  EventID eventId;
  int32_t itemAmount;
  double probability;
  double bonusProbability;
  double bonusMultiplier;
  double probabilityMultiplier;

  _WeightedLoot__isset __isset;

  void __set_lootListId(const WeightedLootListID& val);

  void __set_itemId(const CurrencyID& val);

  void __set_itemType(const LootItemType::type val);

  void __set_eventId(const EventID& val);

  void __set_itemAmount(const int32_t val);

  void __set_probability(const double val);

  void __set_bonusProbability(const double val);

  void __set_bonusMultiplier(const double val);

  void __set_probabilityMultiplier(const double val);

  bool operator == (const WeightedLoot & rhs) const
  {
    if (!(lootListId == rhs.lootListId))
      return false;
    if (__isset.itemId != rhs.__isset.itemId)
      return false;
    else if (__isset.itemId && !(itemId == rhs.itemId))
      return false;
    if (!(itemType == rhs.itemType))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    if (!(itemAmount == rhs.itemAmount))
      return false;
    if (!(probability == rhs.probability))
      return false;
    if (__isset.bonusProbability != rhs.__isset.bonusProbability)
      return false;
    else if (__isset.bonusProbability && !(bonusProbability == rhs.bonusProbability))
      return false;
    if (__isset.bonusMultiplier != rhs.__isset.bonusMultiplier)
      return false;
    else if (__isset.bonusMultiplier && !(bonusMultiplier == rhs.bonusMultiplier))
      return false;
    if (__isset.probabilityMultiplier != rhs.__isset.probabilityMultiplier)
      return false;
    else if (__isset.probabilityMultiplier && !(probabilityMultiplier == rhs.probabilityMultiplier))
      return false;
    return true;
  }
  bool operator != (const WeightedLoot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WeightedLoot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WeightedLoot &a, WeightedLoot &b);

std::ostream& operator<<(std::ostream& out, const WeightedLoot& obj);

typedef struct _GachaGroup__isset {
  _GachaGroup__isset() : newDisplay(false), badge(false), bundleId(false), newDescription(false), detailCardHaveRays(false), badge2(false), badge2Sticker(false), moduleImage(false), moduleCakeboxImage(false), moduleRewardBuildingId(false), moduleRewardImage(false), detailCardFullscreenBg(false), detailCardFullscreenBgBottom(false), cardCountTextSingular(false), cardCountTextPlural(false) {}
  bool newDisplay :1;
  bool badge :1;
  bool bundleId :1;
  bool newDescription :1;
  bool detailCardHaveRays :1;
  bool badge2 :1;
  bool badge2Sticker :1;
  bool moduleImage :1;
  bool moduleCakeboxImage :1;
  bool moduleRewardBuildingId :1;
  bool moduleRewardImage :1;
  bool detailCardFullscreenBg :1;
  bool detailCardFullscreenBgBottom :1;
  bool cardCountTextSingular :1;
  bool cardCountTextPlural :1;
} _GachaGroup__isset;

class GachaGroup : public virtual ::apache::thrift::TBase {
 public:

  GachaGroup(const GachaGroup&);
  GachaGroup& operator=(const GachaGroup&);
  GachaGroup() : gachaGroupId(), index(0), description(), cardImage(), badge(), overlayImage(), bundleId(), detailCardBg9(), detailCardHaveRays(0), detailCardBizAreaBg(), detailCardBizAreaTextBg(), badge2Sticker(), moduleImage(), moduleCakeboxImage(), moduleRewardBuildingId(), moduleRewardImage(), detailCardFullscreenBg(), detailCardFullscreenBgBottom() {
  }

  virtual ~GachaGroup() throw();
  GachaGroupID gachaGroupId;
  int32_t index;
  std::vector<GachaOfferID>  gachaOffers;
  std::string description;
  LocalizedString newDisplay;
  AssetPath cardImage;
  std::string badge;
  AssetPath overlayImage;
  std::string bundleId;
  LocalizedString newDescription;
  AssetPath detailCardBg9;
  bool detailCardHaveRays;
  std::string detailCardBizAreaBg;
  std::string detailCardBizAreaTextBg;
  LocalizedString badge2;
  std::string badge2Sticker;
  AssetPath moduleImage;
  AssetPath moduleCakeboxImage;
  BuildingID moduleRewardBuildingId;
  AssetPath moduleRewardImage;
  AssetPath detailCardFullscreenBg;
  AssetPath detailCardFullscreenBgBottom;
  LocalizedString cardCountTextSingular;
  LocalizedString cardCountTextPlural;

  _GachaGroup__isset __isset;

  void __set_gachaGroupId(const GachaGroupID& val);

  void __set_index(const int32_t val);

  void __set_gachaOffers(const std::vector<GachaOfferID> & val);

  void __set_description(const std::string& val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_cardImage(const AssetPath& val);

  void __set_badge(const std::string& val);

  void __set_overlayImage(const AssetPath& val);

  void __set_bundleId(const std::string& val);

  void __set_newDescription(const LocalizedString& val);

  void __set_detailCardBg9(const AssetPath& val);

  void __set_detailCardHaveRays(const bool val);

  void __set_detailCardBizAreaBg(const std::string& val);

  void __set_detailCardBizAreaTextBg(const std::string& val);

  void __set_badge2(const LocalizedString& val);

  void __set_badge2Sticker(const std::string& val);

  void __set_moduleImage(const AssetPath& val);

  void __set_moduleCakeboxImage(const AssetPath& val);

  void __set_moduleRewardBuildingId(const BuildingID& val);

  void __set_moduleRewardImage(const AssetPath& val);

  void __set_detailCardFullscreenBg(const AssetPath& val);

  void __set_detailCardFullscreenBgBottom(const AssetPath& val);

  void __set_cardCountTextSingular(const LocalizedString& val);

  void __set_cardCountTextPlural(const LocalizedString& val);

  bool operator == (const GachaGroup & rhs) const
  {
    if (!(gachaGroupId == rhs.gachaGroupId))
      return false;
    if (!(index == rhs.index))
      return false;
    if (!(gachaOffers == rhs.gachaOffers))
      return false;
    if (!(description == rhs.description))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (!(cardImage == rhs.cardImage))
      return false;
    if (__isset.badge != rhs.__isset.badge)
      return false;
    else if (__isset.badge && !(badge == rhs.badge))
      return false;
    if (!(overlayImage == rhs.overlayImage))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.newDescription != rhs.__isset.newDescription)
      return false;
    else if (__isset.newDescription && !(newDescription == rhs.newDescription))
      return false;
    if (!(detailCardBg9 == rhs.detailCardBg9))
      return false;
    if (__isset.detailCardHaveRays != rhs.__isset.detailCardHaveRays)
      return false;
    else if (__isset.detailCardHaveRays && !(detailCardHaveRays == rhs.detailCardHaveRays))
      return false;
    if (!(detailCardBizAreaBg == rhs.detailCardBizAreaBg))
      return false;
    if (!(detailCardBizAreaTextBg == rhs.detailCardBizAreaTextBg))
      return false;
    if (__isset.badge2 != rhs.__isset.badge2)
      return false;
    else if (__isset.badge2 && !(badge2 == rhs.badge2))
      return false;
    if (__isset.badge2Sticker != rhs.__isset.badge2Sticker)
      return false;
    else if (__isset.badge2Sticker && !(badge2Sticker == rhs.badge2Sticker))
      return false;
    if (__isset.moduleImage != rhs.__isset.moduleImage)
      return false;
    else if (__isset.moduleImage && !(moduleImage == rhs.moduleImage))
      return false;
    if (__isset.moduleCakeboxImage != rhs.__isset.moduleCakeboxImage)
      return false;
    else if (__isset.moduleCakeboxImage && !(moduleCakeboxImage == rhs.moduleCakeboxImage))
      return false;
    if (__isset.moduleRewardBuildingId != rhs.__isset.moduleRewardBuildingId)
      return false;
    else if (__isset.moduleRewardBuildingId && !(moduleRewardBuildingId == rhs.moduleRewardBuildingId))
      return false;
    if (__isset.moduleRewardImage != rhs.__isset.moduleRewardImage)
      return false;
    else if (__isset.moduleRewardImage && !(moduleRewardImage == rhs.moduleRewardImage))
      return false;
    if (__isset.detailCardFullscreenBg != rhs.__isset.detailCardFullscreenBg)
      return false;
    else if (__isset.detailCardFullscreenBg && !(detailCardFullscreenBg == rhs.detailCardFullscreenBg))
      return false;
    if (__isset.detailCardFullscreenBgBottom != rhs.__isset.detailCardFullscreenBgBottom)
      return false;
    else if (__isset.detailCardFullscreenBgBottom && !(detailCardFullscreenBgBottom == rhs.detailCardFullscreenBgBottom))
      return false;
    if (__isset.cardCountTextSingular != rhs.__isset.cardCountTextSingular)
      return false;
    else if (__isset.cardCountTextSingular && !(cardCountTextSingular == rhs.cardCountTextSingular))
      return false;
    if (__isset.cardCountTextPlural != rhs.__isset.cardCountTextPlural)
      return false;
    else if (__isset.cardCountTextPlural && !(cardCountTextPlural == rhs.cardCountTextPlural))
      return false;
    return true;
  }
  bool operator != (const GachaGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GachaGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GachaGroup &a, GachaGroup &b);

std::ostream& operator<<(std::ostream& out, const GachaGroup& obj);

typedef struct _GachaBanner__isset {
  _GachaBanner__isset() : display(false), targetGachaGroupId(false), messageAction(false), messageActionParameter(false), bundleId(false), targetGachaOfferId(false), eventIds(false), eventPhases(false), showRank(false), hideRank(false) {}
  bool display :1;
  bool targetGachaGroupId :1;
  bool messageAction :1;
  bool messageActionParameter :1;
  bool bundleId :1;
  bool targetGachaOfferId :1;
  bool eventIds :1;
  bool eventPhases :1;
  bool showRank :1;
  bool hideRank :1;
} _GachaBanner__isset;

class GachaBanner : public virtual ::apache::thrift::TBase {
 public:

  GachaBanner(const GachaBanner&);
  GachaBanner& operator=(const GachaBanner&);
  GachaBanner() : gachaBannerId(), order(0), image(), enabled(0), targetGachaGroupId(), messageAction((MessageButtonAction::type)0), messageActionParameter(), bundleId(), targetGachaOfferId(), eventPhases((EventPhases::type)0), showRank(0), hideRank(0) {
  }

  virtual ~GachaBanner() throw();
  GachaBannerID gachaBannerId;
  int32_t order;
  LocalizedString display;
  AssetPath image;
  bool enabled;
  GachaGroupID targetGachaGroupId;
  MessageButtonAction::type messageAction;
  std::string messageActionParameter;
  std::string bundleId;
  GachaOfferID targetGachaOfferId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t showRank;
  int32_t hideRank;

  _GachaBanner__isset __isset;

  void __set_gachaBannerId(const GachaBannerID& val);

  void __set_order(const int32_t val);

  void __set_display(const LocalizedString& val);

  void __set_image(const AssetPath& val);

  void __set_enabled(const bool val);

  void __set_targetGachaGroupId(const GachaGroupID& val);

  void __set_messageAction(const MessageButtonAction::type val);

  void __set_messageActionParameter(const std::string& val);

  void __set_bundleId(const std::string& val);

  void __set_targetGachaOfferId(const GachaOfferID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_showRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  bool operator == (const GachaBanner & rhs) const
  {
    if (!(gachaBannerId == rhs.gachaBannerId))
      return false;
    if (!(order == rhs.order))
      return false;
    if (__isset.display != rhs.__isset.display)
      return false;
    else if (__isset.display && !(display == rhs.display))
      return false;
    if (!(image == rhs.image))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    if (__isset.targetGachaGroupId != rhs.__isset.targetGachaGroupId)
      return false;
    else if (__isset.targetGachaGroupId && !(targetGachaGroupId == rhs.targetGachaGroupId))
      return false;
    if (__isset.messageAction != rhs.__isset.messageAction)
      return false;
    else if (__isset.messageAction && !(messageAction == rhs.messageAction))
      return false;
    if (__isset.messageActionParameter != rhs.__isset.messageActionParameter)
      return false;
    else if (__isset.messageActionParameter && !(messageActionParameter == rhs.messageActionParameter))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.targetGachaOfferId != rhs.__isset.targetGachaOfferId)
      return false;
    else if (__isset.targetGachaOfferId && !(targetGachaOfferId == rhs.targetGachaOfferId))
      return false;
    if (__isset.eventIds != rhs.__isset.eventIds)
      return false;
    else if (__isset.eventIds && !(eventIds == rhs.eventIds))
      return false;
    if (__isset.eventPhases != rhs.__isset.eventPhases)
      return false;
    else if (__isset.eventPhases && !(eventPhases == rhs.eventPhases))
      return false;
    if (__isset.showRank != rhs.__isset.showRank)
      return false;
    else if (__isset.showRank && !(showRank == rhs.showRank))
      return false;
    if (__isset.hideRank != rhs.__isset.hideRank)
      return false;
    else if (__isset.hideRank && !(hideRank == rhs.hideRank))
      return false;
    return true;
  }
  bool operator != (const GachaBanner &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GachaBanner & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GachaBanner &a, GachaBanner &b);

std::ostream& operator<<(std::ostream& out, const GachaBanner& obj);

typedef struct _GachaOffer__isset {
  _GachaOffer__isset() : requiredLevelId(false), cakeboxLevelDotId(false), boxImage(false), openBoxImage(false), purchaseSound(false), notifyFreeSpinIndex(false), eventLockId(false), doesNotRestock(false), display(false), description(false), storeIndex(false), badge(false), badge2(false), badge2Sticker(false), storeCardImage(false), storeCakeboxImage(false), storeRewardBuildingId(false), storeRewardImage(false), detailCardFullscreenBg(false), detailCardFullscreenBgBottom(false), storeCardCountTextSingular(false), storeCardCountTextPlural(false), eventIds(false), eventPhases(false), showRank(false), hideRank(false), offerBackgroundImage(false), cardImage(false), productIcon(false), ribbonImage(false), ribbonText(false), showBuildingIds(false), showTierInfo(false), tierYouGetBuildingId(false), tierTopRewardBuildingId(false), tierYouGetText(false), tierTopRewardText(false), tierBannerText(false), tierBannerImage(false), tierRarityText(false), detailCardHaveRays(false), discountedPrice(false), upsellInBuildMenu(false), floorClearRewardCurrencyIds(false), floorClearRewardCurrencyAmounts(false), detailScreenHeader(false), eventStoreImage(false), bundleId(false), gradientColor1(false), gradientColor2(false), baseTerrainImage(false), featureImage(false), unlockRank(false), showGuildRank(false), hideGuildRank(false), unlockGuildRank(false) {}
  bool requiredLevelId :1;
  bool cakeboxLevelDotId :1;
  bool boxImage :1;
  bool openBoxImage :1;
  bool purchaseSound :1;
  bool notifyFreeSpinIndex :1;
  bool eventLockId :1;
  bool doesNotRestock :1;
  bool display :1;
  bool description :1;
  bool storeIndex :1;
  bool badge :1;
  bool badge2 :1;
  bool badge2Sticker :1;
  bool storeCardImage :1;
  bool storeCakeboxImage :1;
  bool storeRewardBuildingId :1;
  bool storeRewardImage :1;
  bool detailCardFullscreenBg :1;
  bool detailCardFullscreenBgBottom :1;
  bool storeCardCountTextSingular :1;
  bool storeCardCountTextPlural :1;
  bool eventIds :1;
  bool eventPhases :1;
  bool showRank :1;
  bool hideRank :1;
  bool offerBackgroundImage :1;
  bool cardImage :1;
  bool productIcon :1;
  bool ribbonImage :1;
  bool ribbonText :1;
  bool showBuildingIds :1;
  bool showTierInfo :1;
  bool tierYouGetBuildingId :1;
  bool tierTopRewardBuildingId :1;
  bool tierYouGetText :1;
  bool tierTopRewardText :1;
  bool tierBannerText :1;
  bool tierBannerImage :1;
  bool tierRarityText :1;
  bool detailCardHaveRays :1;
  bool discountedPrice :1;
  bool upsellInBuildMenu :1;
  bool floorClearRewardCurrencyIds :1;
  bool floorClearRewardCurrencyAmounts :1;
  bool detailScreenHeader :1;
  bool eventStoreImage :1;
  bool bundleId :1;
  bool gradientColor1 :1;
  bool gradientColor2 :1;
  bool baseTerrainImage :1;
  bool featureImage :1;
  bool unlockRank :1;
  bool showGuildRank :1;
  bool hideGuildRank :1;
  bool unlockGuildRank :1;
} _GachaOffer__isset;

class GachaOffer : public virtual ::apache::thrift::TBase {
 public:

  GachaOffer(const GachaOffer&);
  GachaOffer& operator=(const GachaOffer&);
  GachaOffer() : gachaOfferId(), costCurrencyId(), costAmount(0), maxSpins(0), maxFreeSpinsPerDay(0), freeSpinCooldown(0), requiredLevelId(), cakeboxLevelDotId(), boxImage(), openBoxImage(), purchaseSound(), notifyFreeSpinIndex(0), eventLockId(), doesNotRestock(0), storeIndex(0), badge2Sticker(), storeCardImage(), storeCakeboxImage(), storeRewardBuildingId(), storeRewardImage(), detailCardFullscreenBg(), detailCardFullscreenBgBottom(), eventPhases((EventPhases::type)0), showRank(0), hideRank(0), offerBackgroundImage(), cardImage(), productIcon(), ribbonImage(), showTierInfo(0), tierYouGetBuildingId(), tierTopRewardBuildingId(), tierBannerImage(), detailCardHaveRays(0), discountedPrice(0), upsellInBuildMenu(0), eventStoreImage(), iapProductId(), bundleId(), gradientColor1(), gradientColor2(), baseTerrainImage(), featureImage(), unlockRank(0), showGuildRank(0), hideGuildRank(0), unlockGuildRank(0) {
  }

  virtual ~GachaOffer() throw();
  GachaOfferID gachaOfferId;
  CurrencyID costCurrencyId;
  int32_t costAmount;
  std::vector<GachaPackID>  gachaPackIds;
  std::vector<int32_t>  gachaPackSpins;
  std::vector<GachaOfferID>  unlockGachaOfferIds;
  int32_t maxSpins;
  int32_t maxFreeSpinsPerDay;
  int32_t freeSpinCooldown;
  LevelID requiredLevelId;
  LevelDotID cakeboxLevelDotId;
  AssetPath boxImage;
  AssetPath openBoxImage;
  std::string purchaseSound;
  int32_t notifyFreeSpinIndex;
  EventLockID eventLockId;
  bool doesNotRestock;
  LocalizedString display;
  LocalizedString description;
  int32_t storeIndex;
  LocalizedString badge;
  LocalizedString badge2;
  AssetPath badge2Sticker;
  AssetPath storeCardImage;
  AssetPath storeCakeboxImage;
  BuildingID storeRewardBuildingId;
  AssetPath storeRewardImage;
  AssetPath detailCardFullscreenBg;
  AssetPath detailCardFullscreenBgBottom;
  LocalizedString storeCardCountTextSingular;
  LocalizedString storeCardCountTextPlural;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t showRank;
  int32_t hideRank;
  std::string offerBackgroundImage;
  std::string cardImage;
  std::string productIcon;
  std::string ribbonImage;
  LocalizedString ribbonText;
  std::vector<BuildingID>  showBuildingIds;
  bool showTierInfo;
  BuildingID tierYouGetBuildingId;
  BuildingID tierTopRewardBuildingId;
  LocalizedString tierYouGetText;
  LocalizedString tierTopRewardText;
  LocalizedString tierBannerText;
  std::string tierBannerImage;
  LocalizedString tierRarityText;
  bool detailCardHaveRays;
  int32_t discountedPrice;
  bool upsellInBuildMenu;
  std::vector<CurrencyID>  floorClearRewardCurrencyIds;
  std::vector<int32_t>  floorClearRewardCurrencyAmounts;
  LocalizedString detailScreenHeader;
  std::string eventStoreImage;
  IAPProductID iapProductId;
  BundleID bundleId;
  std::string gradientColor1;
  std::string gradientColor2;
  AssetPath baseTerrainImage;
  AssetPath featureImage;
  int32_t unlockRank;
  int32_t showGuildRank;
  int32_t hideGuildRank;
  int32_t unlockGuildRank;

  _GachaOffer__isset __isset;

  void __set_gachaOfferId(const GachaOfferID& val);

  void __set_costCurrencyId(const CurrencyID& val);

  void __set_costAmount(const int32_t val);

  void __set_gachaPackIds(const std::vector<GachaPackID> & val);

  void __set_gachaPackSpins(const std::vector<int32_t> & val);

  void __set_unlockGachaOfferIds(const std::vector<GachaOfferID> & val);

  void __set_maxSpins(const int32_t val);

  void __set_maxFreeSpinsPerDay(const int32_t val);

  void __set_freeSpinCooldown(const int32_t val);

  void __set_requiredLevelId(const LevelID& val);

  void __set_cakeboxLevelDotId(const LevelDotID& val);

  void __set_boxImage(const AssetPath& val);

  void __set_openBoxImage(const AssetPath& val);

  void __set_purchaseSound(const std::string& val);

  void __set_notifyFreeSpinIndex(const int32_t val);

  void __set_eventLockId(const EventLockID& val);

  void __set_doesNotRestock(const bool val);

  void __set_display(const LocalizedString& val);

  void __set_description(const LocalizedString& val);

  void __set_storeIndex(const int32_t val);

  void __set_badge(const LocalizedString& val);

  void __set_badge2(const LocalizedString& val);

  void __set_badge2Sticker(const AssetPath& val);

  void __set_storeCardImage(const AssetPath& val);

  void __set_storeCakeboxImage(const AssetPath& val);

  void __set_storeRewardBuildingId(const BuildingID& val);

  void __set_storeRewardImage(const AssetPath& val);

  void __set_detailCardFullscreenBg(const AssetPath& val);

  void __set_detailCardFullscreenBgBottom(const AssetPath& val);

  void __set_storeCardCountTextSingular(const LocalizedString& val);

  void __set_storeCardCountTextPlural(const LocalizedString& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_showRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_offerBackgroundImage(const std::string& val);

  void __set_cardImage(const std::string& val);

  void __set_productIcon(const std::string& val);

  void __set_ribbonImage(const std::string& val);

  void __set_ribbonText(const LocalizedString& val);

  void __set_showBuildingIds(const std::vector<BuildingID> & val);

  void __set_showTierInfo(const bool val);

  void __set_tierYouGetBuildingId(const BuildingID& val);

  void __set_tierTopRewardBuildingId(const BuildingID& val);

  void __set_tierYouGetText(const LocalizedString& val);

  void __set_tierTopRewardText(const LocalizedString& val);

  void __set_tierBannerText(const LocalizedString& val);

  void __set_tierBannerImage(const std::string& val);

  void __set_tierRarityText(const LocalizedString& val);

  void __set_detailCardHaveRays(const bool val);

  void __set_discountedPrice(const int32_t val);

  void __set_upsellInBuildMenu(const bool val);

  void __set_floorClearRewardCurrencyIds(const std::vector<CurrencyID> & val);

  void __set_floorClearRewardCurrencyAmounts(const std::vector<int32_t> & val);

  void __set_detailScreenHeader(const LocalizedString& val);

  void __set_eventStoreImage(const std::string& val);

  void __set_iapProductId(const IAPProductID& val);

  void __set_bundleId(const BundleID& val);

  void __set_gradientColor1(const std::string& val);

  void __set_gradientColor2(const std::string& val);

  void __set_baseTerrainImage(const AssetPath& val);

  void __set_featureImage(const AssetPath& val);

  void __set_unlockRank(const int32_t val);

  void __set_showGuildRank(const int32_t val);

  void __set_hideGuildRank(const int32_t val);

  void __set_unlockGuildRank(const int32_t val);

  bool operator == (const GachaOffer & rhs) const
  {
    if (!(gachaOfferId == rhs.gachaOfferId))
      return false;
    if (!(costCurrencyId == rhs.costCurrencyId))
      return false;
    if (!(costAmount == rhs.costAmount))
      return false;
    if (!(gachaPackIds == rhs.gachaPackIds))
      return false;
    if (!(gachaPackSpins == rhs.gachaPackSpins))
      return false;
    if (!(unlockGachaOfferIds == rhs.unlockGachaOfferIds))
      return false;
    if (!(maxSpins == rhs.maxSpins))
      return false;
    if (!(maxFreeSpinsPerDay == rhs.maxFreeSpinsPerDay))
      return false;
    if (!(freeSpinCooldown == rhs.freeSpinCooldown))
      return false;
    if (__isset.requiredLevelId != rhs.__isset.requiredLevelId)
      return false;
    else if (__isset.requiredLevelId && !(requiredLevelId == rhs.requiredLevelId))
      return false;
    if (__isset.cakeboxLevelDotId != rhs.__isset.cakeboxLevelDotId)
      return false;
    else if (__isset.cakeboxLevelDotId && !(cakeboxLevelDotId == rhs.cakeboxLevelDotId))
      return false;
    if (__isset.boxImage != rhs.__isset.boxImage)
      return false;
    else if (__isset.boxImage && !(boxImage == rhs.boxImage))
      return false;
    if (__isset.openBoxImage != rhs.__isset.openBoxImage)
      return false;
    else if (__isset.openBoxImage && !(openBoxImage == rhs.openBoxImage))
      return false;
    if (__isset.purchaseSound != rhs.__isset.purchaseSound)
      return false;
    else if (__isset.purchaseSound && !(purchaseSound == rhs.purchaseSound))
      return false;
    if (__isset.notifyFreeSpinIndex != rhs.__isset.notifyFreeSpinIndex)
      return false;
    else if (__isset.notifyFreeSpinIndex && !(notifyFreeSpinIndex == rhs.notifyFreeSpinIndex))
      return false;
    if (__isset.eventLockId != rhs.__isset.eventLockId)
      return false;
    else if (__isset.eventLockId && !(eventLockId == rhs.eventLockId))
      return false;
    if (__isset.doesNotRestock != rhs.__isset.doesNotRestock)
      return false;
    else if (__isset.doesNotRestock && !(doesNotRestock == rhs.doesNotRestock))
      return false;
    if (__isset.display != rhs.__isset.display)
      return false;
    else if (__isset.display && !(display == rhs.display))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.storeIndex != rhs.__isset.storeIndex)
      return false;
    else if (__isset.storeIndex && !(storeIndex == rhs.storeIndex))
      return false;
    if (__isset.badge != rhs.__isset.badge)
      return false;
    else if (__isset.badge && !(badge == rhs.badge))
      return false;
    if (__isset.badge2 != rhs.__isset.badge2)
      return false;
    else if (__isset.badge2 && !(badge2 == rhs.badge2))
      return false;
    if (__isset.badge2Sticker != rhs.__isset.badge2Sticker)
      return false;
    else if (__isset.badge2Sticker && !(badge2Sticker == rhs.badge2Sticker))
      return false;
    if (__isset.storeCardImage != rhs.__isset.storeCardImage)
      return false;
    else if (__isset.storeCardImage && !(storeCardImage == rhs.storeCardImage))
      return false;
    if (__isset.storeCakeboxImage != rhs.__isset.storeCakeboxImage)
      return false;
    else if (__isset.storeCakeboxImage && !(storeCakeboxImage == rhs.storeCakeboxImage))
      return false;
    if (__isset.storeRewardBuildingId != rhs.__isset.storeRewardBuildingId)
      return false;
    else if (__isset.storeRewardBuildingId && !(storeRewardBuildingId == rhs.storeRewardBuildingId))
      return false;
    if (__isset.storeRewardImage != rhs.__isset.storeRewardImage)
      return false;
    else if (__isset.storeRewardImage && !(storeRewardImage == rhs.storeRewardImage))
      return false;
    if (__isset.detailCardFullscreenBg != rhs.__isset.detailCardFullscreenBg)
      return false;
    else if (__isset.detailCardFullscreenBg && !(detailCardFullscreenBg == rhs.detailCardFullscreenBg))
      return false;
    if (__isset.detailCardFullscreenBgBottom != rhs.__isset.detailCardFullscreenBgBottom)
      return false;
    else if (__isset.detailCardFullscreenBgBottom && !(detailCardFullscreenBgBottom == rhs.detailCardFullscreenBgBottom))
      return false;
    if (__isset.storeCardCountTextSingular != rhs.__isset.storeCardCountTextSingular)
      return false;
    else if (__isset.storeCardCountTextSingular && !(storeCardCountTextSingular == rhs.storeCardCountTextSingular))
      return false;
    if (__isset.storeCardCountTextPlural != rhs.__isset.storeCardCountTextPlural)
      return false;
    else if (__isset.storeCardCountTextPlural && !(storeCardCountTextPlural == rhs.storeCardCountTextPlural))
      return false;
    if (__isset.eventIds != rhs.__isset.eventIds)
      return false;
    else if (__isset.eventIds && !(eventIds == rhs.eventIds))
      return false;
    if (__isset.eventPhases != rhs.__isset.eventPhases)
      return false;
    else if (__isset.eventPhases && !(eventPhases == rhs.eventPhases))
      return false;
    if (__isset.showRank != rhs.__isset.showRank)
      return false;
    else if (__isset.showRank && !(showRank == rhs.showRank))
      return false;
    if (__isset.hideRank != rhs.__isset.hideRank)
      return false;
    else if (__isset.hideRank && !(hideRank == rhs.hideRank))
      return false;
    if (__isset.offerBackgroundImage != rhs.__isset.offerBackgroundImage)
      return false;
    else if (__isset.offerBackgroundImage && !(offerBackgroundImage == rhs.offerBackgroundImage))
      return false;
    if (__isset.cardImage != rhs.__isset.cardImage)
      return false;
    else if (__isset.cardImage && !(cardImage == rhs.cardImage))
      return false;
    if (__isset.productIcon != rhs.__isset.productIcon)
      return false;
    else if (__isset.productIcon && !(productIcon == rhs.productIcon))
      return false;
    if (__isset.ribbonImage != rhs.__isset.ribbonImage)
      return false;
    else if (__isset.ribbonImage && !(ribbonImage == rhs.ribbonImage))
      return false;
    if (__isset.ribbonText != rhs.__isset.ribbonText)
      return false;
    else if (__isset.ribbonText && !(ribbonText == rhs.ribbonText))
      return false;
    if (__isset.showBuildingIds != rhs.__isset.showBuildingIds)
      return false;
    else if (__isset.showBuildingIds && !(showBuildingIds == rhs.showBuildingIds))
      return false;
    if (__isset.showTierInfo != rhs.__isset.showTierInfo)
      return false;
    else if (__isset.showTierInfo && !(showTierInfo == rhs.showTierInfo))
      return false;
    if (__isset.tierYouGetBuildingId != rhs.__isset.tierYouGetBuildingId)
      return false;
    else if (__isset.tierYouGetBuildingId && !(tierYouGetBuildingId == rhs.tierYouGetBuildingId))
      return false;
    if (__isset.tierTopRewardBuildingId != rhs.__isset.tierTopRewardBuildingId)
      return false;
    else if (__isset.tierTopRewardBuildingId && !(tierTopRewardBuildingId == rhs.tierTopRewardBuildingId))
      return false;
    if (__isset.tierYouGetText != rhs.__isset.tierYouGetText)
      return false;
    else if (__isset.tierYouGetText && !(tierYouGetText == rhs.tierYouGetText))
      return false;
    if (__isset.tierTopRewardText != rhs.__isset.tierTopRewardText)
      return false;
    else if (__isset.tierTopRewardText && !(tierTopRewardText == rhs.tierTopRewardText))
      return false;
    if (__isset.tierBannerText != rhs.__isset.tierBannerText)
      return false;
    else if (__isset.tierBannerText && !(tierBannerText == rhs.tierBannerText))
      return false;
    if (__isset.tierBannerImage != rhs.__isset.tierBannerImage)
      return false;
    else if (__isset.tierBannerImage && !(tierBannerImage == rhs.tierBannerImage))
      return false;
    if (__isset.tierRarityText != rhs.__isset.tierRarityText)
      return false;
    else if (__isset.tierRarityText && !(tierRarityText == rhs.tierRarityText))
      return false;
    if (__isset.detailCardHaveRays != rhs.__isset.detailCardHaveRays)
      return false;
    else if (__isset.detailCardHaveRays && !(detailCardHaveRays == rhs.detailCardHaveRays))
      return false;
    if (__isset.discountedPrice != rhs.__isset.discountedPrice)
      return false;
    else if (__isset.discountedPrice && !(discountedPrice == rhs.discountedPrice))
      return false;
    if (__isset.upsellInBuildMenu != rhs.__isset.upsellInBuildMenu)
      return false;
    else if (__isset.upsellInBuildMenu && !(upsellInBuildMenu == rhs.upsellInBuildMenu))
      return false;
    if (__isset.floorClearRewardCurrencyIds != rhs.__isset.floorClearRewardCurrencyIds)
      return false;
    else if (__isset.floorClearRewardCurrencyIds && !(floorClearRewardCurrencyIds == rhs.floorClearRewardCurrencyIds))
      return false;
    if (__isset.floorClearRewardCurrencyAmounts != rhs.__isset.floorClearRewardCurrencyAmounts)
      return false;
    else if (__isset.floorClearRewardCurrencyAmounts && !(floorClearRewardCurrencyAmounts == rhs.floorClearRewardCurrencyAmounts))
      return false;
    if (__isset.detailScreenHeader != rhs.__isset.detailScreenHeader)
      return false;
    else if (__isset.detailScreenHeader && !(detailScreenHeader == rhs.detailScreenHeader))
      return false;
    if (__isset.eventStoreImage != rhs.__isset.eventStoreImage)
      return false;
    else if (__isset.eventStoreImage && !(eventStoreImage == rhs.eventStoreImage))
      return false;
    if (!(iapProductId == rhs.iapProductId))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.gradientColor1 != rhs.__isset.gradientColor1)
      return false;
    else if (__isset.gradientColor1 && !(gradientColor1 == rhs.gradientColor1))
      return false;
    if (__isset.gradientColor2 != rhs.__isset.gradientColor2)
      return false;
    else if (__isset.gradientColor2 && !(gradientColor2 == rhs.gradientColor2))
      return false;
    if (__isset.baseTerrainImage != rhs.__isset.baseTerrainImage)
      return false;
    else if (__isset.baseTerrainImage && !(baseTerrainImage == rhs.baseTerrainImage))
      return false;
    if (__isset.featureImage != rhs.__isset.featureImage)
      return false;
    else if (__isset.featureImage && !(featureImage == rhs.featureImage))
      return false;
    if (__isset.unlockRank != rhs.__isset.unlockRank)
      return false;
    else if (__isset.unlockRank && !(unlockRank == rhs.unlockRank))
      return false;
    if (__isset.showGuildRank != rhs.__isset.showGuildRank)
      return false;
    else if (__isset.showGuildRank && !(showGuildRank == rhs.showGuildRank))
      return false;
    if (__isset.hideGuildRank != rhs.__isset.hideGuildRank)
      return false;
    else if (__isset.hideGuildRank && !(hideGuildRank == rhs.hideGuildRank))
      return false;
    if (__isset.unlockGuildRank != rhs.__isset.unlockGuildRank)
      return false;
    else if (__isset.unlockGuildRank && !(unlockGuildRank == rhs.unlockGuildRank))
      return false;
    return true;
  }
  bool operator != (const GachaOffer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GachaOffer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GachaOffer &a, GachaOffer &b);

std::ostream& operator<<(std::ostream& out, const GachaOffer& obj);


class GachaPack : public virtual ::apache::thrift::TBase {
 public:

  GachaPack(const GachaPack&);
  GachaPack& operator=(const GachaPack&);
  GachaPack() : gachaPackId() {
  }

  virtual ~GachaPack() throw();
  GachaPackID gachaPackId;
  std::vector<LootTableID>  lootTableIds;
  std::vector<int32_t>  lootTableSpins;

  void __set_gachaPackId(const GachaPackID& val);

  void __set_lootTableIds(const std::vector<LootTableID> & val);

  void __set_lootTableSpins(const std::vector<int32_t> & val);

  bool operator == (const GachaPack & rhs) const
  {
    if (!(gachaPackId == rhs.gachaPackId))
      return false;
    if (!(lootTableIds == rhs.lootTableIds))
      return false;
    if (!(lootTableSpins == rhs.lootTableSpins))
      return false;
    return true;
  }
  bool operator != (const GachaPack &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GachaPack & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GachaPack &a, GachaPack &b);

std::ostream& operator<<(std::ostream& out, const GachaPack& obj);


class LootTable : public virtual ::apache::thrift::TBase {
 public:

  LootTable(const LootTable&);
  LootTable& operator=(const LootTable&);
  LootTable() : lootTableId(), weight(0), itemType((LootItemType::type)0), amount(0) {
  }

  virtual ~LootTable() throw();
  LootTableID lootTableId;
  double weight;
  LootItemType::type itemType;
  std::vector<std::string>  itemGroupIds;
  int32_t amount;

  void __set_lootTableId(const LootTableID& val);

  void __set_weight(const double val);

  void __set_itemType(const LootItemType::type val);

  void __set_itemGroupIds(const std::vector<std::string> & val);

  void __set_amount(const int32_t val);

  bool operator == (const LootTable & rhs) const
  {
    if (!(lootTableId == rhs.lootTableId))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(itemType == rhs.itemType))
      return false;
    if (!(itemGroupIds == rhs.itemGroupIds))
      return false;
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const LootTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LootTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LootTable &a, LootTable &b);

std::ostream& operator<<(std::ostream& out, const LootTable& obj);


class LootCurrencyGroup : public virtual ::apache::thrift::TBase {
 public:

  LootCurrencyGroup(const LootCurrencyGroup&);
  LootCurrencyGroup& operator=(const LootCurrencyGroup&);
  LootCurrencyGroup() : groupId() {
  }

  virtual ~LootCurrencyGroup() throw();
  LootCurrencyGroupID groupId;
  std::vector<CurrencyID>  currencyIds;

  void __set_groupId(const LootCurrencyGroupID& val);

  void __set_currencyIds(const std::vector<CurrencyID> & val);

  bool operator == (const LootCurrencyGroup & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(currencyIds == rhs.currencyIds))
      return false;
    return true;
  }
  bool operator != (const LootCurrencyGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LootCurrencyGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LootCurrencyGroup &a, LootCurrencyGroup &b);

std::ostream& operator<<(std::ostream& out, const LootCurrencyGroup& obj);


class LootBuildingGroup : public virtual ::apache::thrift::TBase {
 public:

  LootBuildingGroup(const LootBuildingGroup&);
  LootBuildingGroup& operator=(const LootBuildingGroup&);
  LootBuildingGroup() : groupId() {
  }

  virtual ~LootBuildingGroup() throw();
  LootBuildingGroupID groupId;
  std::vector<BuildingID>  buildingIds;

  void __set_groupId(const LootBuildingGroupID& val);

  void __set_buildingIds(const std::vector<BuildingID> & val);

  bool operator == (const LootBuildingGroup & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(buildingIds == rhs.buildingIds))
      return false;
    return true;
  }
  bool operator != (const LootBuildingGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LootBuildingGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LootBuildingGroup &a, LootBuildingGroup &b);

std::ostream& operator<<(std::ostream& out, const LootBuildingGroup& obj);

typedef struct _ExpansionType__isset {
  _ExpansionType__isset() : spritesheet(false), imagePrefix(false) {}
  bool spritesheet :1;
  bool imagePrefix :1;
} _ExpansionType__isset;

class ExpansionType : public virtual ::apache::thrift::TBase {
 public:

  ExpansionType(const ExpansionType&);
  ExpansionType& operator=(const ExpansionType&);
  ExpansionType() : expansionTypeId(), spritesheet(), imagePrefix() {
  }

  virtual ~ExpansionType() throw();
  ExpansionTypeID expansionTypeId;
  std::string spritesheet;
  std::string imagePrefix;

  _ExpansionType__isset __isset;

  void __set_expansionTypeId(const ExpansionTypeID& val);

  void __set_spritesheet(const std::string& val);

  void __set_imagePrefix(const std::string& val);

  bool operator == (const ExpansionType & rhs) const
  {
    if (!(expansionTypeId == rhs.expansionTypeId))
      return false;
    if (__isset.spritesheet != rhs.__isset.spritesheet)
      return false;
    else if (__isset.spritesheet && !(spritesheet == rhs.spritesheet))
      return false;
    if (__isset.imagePrefix != rhs.__isset.imagePrefix)
      return false;
    else if (__isset.imagePrefix && !(imagePrefix == rhs.imagePrefix))
      return false;
    return true;
  }
  bool operator != (const ExpansionType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExpansionType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ExpansionType &a, ExpansionType &b);

std::ostream& operator<<(std::ostream& out, const ExpansionType& obj);

typedef struct _Expansion__isset {
  _Expansion__isset() : blockerId(false), buildingId(false), costCurrencyIds(false), costCurrencyAmounts(false), expansionTypeId(false), spritesheet(false), imagePrefix(false) {}
  bool blockerId :1;
  bool buildingId :1;
  bool costCurrencyIds :1;
  bool costCurrencyAmounts :1;
  bool expansionTypeId :1;
  bool spritesheet :1;
  bool imagePrefix :1;
} _Expansion__isset;

class Expansion : public virtual ::apache::thrift::TBase {
 public:

  Expansion(const Expansion&);
  Expansion& operator=(const Expansion&);
  Expansion() : expansionId(), blockerId(), buildingId(), expansionTypeId(), spritesheet(), imagePrefix() {
  }

  virtual ~Expansion() throw();
  ExpansionID expansionId;
  BuildingID blockerId;
  BuildingID buildingId;
  std::vector<CurrencyID>  costCurrencyIds;
  std::vector<int32_t>  costCurrencyAmounts;
  ExpansionTypeID expansionTypeId;
  std::string spritesheet;
  std::string imagePrefix;

  _Expansion__isset __isset;

  void __set_expansionId(const ExpansionID& val);

  void __set_blockerId(const BuildingID& val);

  void __set_buildingId(const BuildingID& val);

  void __set_costCurrencyIds(const std::vector<CurrencyID> & val);

  void __set_costCurrencyAmounts(const std::vector<int32_t> & val);

  void __set_expansionTypeId(const ExpansionTypeID& val);

  void __set_spritesheet(const std::string& val);

  void __set_imagePrefix(const std::string& val);

  bool operator == (const Expansion & rhs) const
  {
    if (!(expansionId == rhs.expansionId))
      return false;
    if (__isset.blockerId != rhs.__isset.blockerId)
      return false;
    else if (__isset.blockerId && !(blockerId == rhs.blockerId))
      return false;
    if (__isset.buildingId != rhs.__isset.buildingId)
      return false;
    else if (__isset.buildingId && !(buildingId == rhs.buildingId))
      return false;
    if (__isset.costCurrencyIds != rhs.__isset.costCurrencyIds)
      return false;
    else if (__isset.costCurrencyIds && !(costCurrencyIds == rhs.costCurrencyIds))
      return false;
    if (__isset.costCurrencyAmounts != rhs.__isset.costCurrencyAmounts)
      return false;
    else if (__isset.costCurrencyAmounts && !(costCurrencyAmounts == rhs.costCurrencyAmounts))
      return false;
    if (__isset.expansionTypeId != rhs.__isset.expansionTypeId)
      return false;
    else if (__isset.expansionTypeId && !(expansionTypeId == rhs.expansionTypeId))
      return false;
    if (__isset.spritesheet != rhs.__isset.spritesheet)
      return false;
    else if (__isset.spritesheet && !(spritesheet == rhs.spritesheet))
      return false;
    if (__isset.imagePrefix != rhs.__isset.imagePrefix)
      return false;
    else if (__isset.imagePrefix && !(imagePrefix == rhs.imagePrefix))
      return false;
    return true;
  }
  bool operator != (const Expansion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Expansion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Expansion &a, Expansion &b);

std::ostream& operator<<(std::ostream& out, const Expansion& obj);

typedef struct _Rank__isset {
  _Rank__isset() : rankUpCurrencyRewardId(false), rankUpCurrencyRewardAmount(false), awardedStamina(false), xpNeeded(false), newDisplay(false), requiredPlacedBuildingScore(false), unlockedBuildingIds(false), unlockedBuildingAmounts(false), lootTableIds(false), lootTableSpins(false) {}
  bool rankUpCurrencyRewardId :1;
  bool rankUpCurrencyRewardAmount :1;
  bool awardedStamina :1;
  bool xpNeeded :1;
  bool newDisplay :1;
  bool requiredPlacedBuildingScore :1;
  bool unlockedBuildingIds :1;
  bool unlockedBuildingAmounts :1;
  bool lootTableIds :1;
  bool lootTableSpins :1;
} _Rank__isset;

class Rank : public virtual ::apache::thrift::TBase {
 public:

  Rank(const Rank&);
  Rank& operator=(const Rank&);
  Rank() : rankId(0), xp(0), maxFriends(0), maxBuildings(0), maxStamina(0), maxKingdomLikes(0), maxKingdomLikesGiftId(), rankUpCurrencyRewardId(), rankUpCurrencyRewardAmount(0), awardedStamina(0), xpNeeded(0), newDisplay(), requiredPlacedBuildingScore(0) {
  }

  virtual ~Rank() throw();
  RankID rankId;
  int32_t xp;
  int32_t maxFriends;
  int32_t maxBuildings;
  int32_t maxStamina;
  int32_t maxKingdomLikes;
  KingdomLikeGiftID maxKingdomLikesGiftId;
  CurrencyID rankUpCurrencyRewardId;
  int32_t rankUpCurrencyRewardAmount;
  int32_t awardedStamina;
  int32_t xpNeeded;
  std::string newDisplay;
  int32_t requiredPlacedBuildingScore;
  std::vector<BuildingID>  unlockedBuildingIds;
  std::vector<int32_t>  unlockedBuildingAmounts;
  std::vector<LootTableID>  lootTableIds;
  std::vector<int32_t>  lootTableSpins;

  _Rank__isset __isset;

  void __set_rankId(const RankID val);

  void __set_xp(const int32_t val);

  void __set_maxFriends(const int32_t val);

  void __set_maxBuildings(const int32_t val);

  void __set_maxStamina(const int32_t val);

  void __set_maxKingdomLikes(const int32_t val);

  void __set_maxKingdomLikesGiftId(const KingdomLikeGiftID& val);

  void __set_rankUpCurrencyRewardId(const CurrencyID& val);

  void __set_rankUpCurrencyRewardAmount(const int32_t val);

  void __set_awardedStamina(const int32_t val);

  void __set_xpNeeded(const int32_t val);

  void __set_newDisplay(const std::string& val);

  void __set_requiredPlacedBuildingScore(const int32_t val);

  void __set_unlockedBuildingIds(const std::vector<BuildingID> & val);

  void __set_unlockedBuildingAmounts(const std::vector<int32_t> & val);

  void __set_lootTableIds(const std::vector<LootTableID> & val);

  void __set_lootTableSpins(const std::vector<int32_t> & val);

  bool operator == (const Rank & rhs) const
  {
    if (!(rankId == rhs.rankId))
      return false;
    if (!(xp == rhs.xp))
      return false;
    if (!(maxFriends == rhs.maxFriends))
      return false;
    if (!(maxBuildings == rhs.maxBuildings))
      return false;
    if (!(maxStamina == rhs.maxStamina))
      return false;
    if (!(maxKingdomLikes == rhs.maxKingdomLikes))
      return false;
    if (!(maxKingdomLikesGiftId == rhs.maxKingdomLikesGiftId))
      return false;
    if (__isset.rankUpCurrencyRewardId != rhs.__isset.rankUpCurrencyRewardId)
      return false;
    else if (__isset.rankUpCurrencyRewardId && !(rankUpCurrencyRewardId == rhs.rankUpCurrencyRewardId))
      return false;
    if (__isset.rankUpCurrencyRewardAmount != rhs.__isset.rankUpCurrencyRewardAmount)
      return false;
    else if (__isset.rankUpCurrencyRewardAmount && !(rankUpCurrencyRewardAmount == rhs.rankUpCurrencyRewardAmount))
      return false;
    if (__isset.awardedStamina != rhs.__isset.awardedStamina)
      return false;
    else if (__isset.awardedStamina && !(awardedStamina == rhs.awardedStamina))
      return false;
    if (__isset.xpNeeded != rhs.__isset.xpNeeded)
      return false;
    else if (__isset.xpNeeded && !(xpNeeded == rhs.xpNeeded))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (__isset.requiredPlacedBuildingScore != rhs.__isset.requiredPlacedBuildingScore)
      return false;
    else if (__isset.requiredPlacedBuildingScore && !(requiredPlacedBuildingScore == rhs.requiredPlacedBuildingScore))
      return false;
    if (__isset.unlockedBuildingIds != rhs.__isset.unlockedBuildingIds)
      return false;
    else if (__isset.unlockedBuildingIds && !(unlockedBuildingIds == rhs.unlockedBuildingIds))
      return false;
    if (__isset.unlockedBuildingAmounts != rhs.__isset.unlockedBuildingAmounts)
      return false;
    else if (__isset.unlockedBuildingAmounts && !(unlockedBuildingAmounts == rhs.unlockedBuildingAmounts))
      return false;
    if (__isset.lootTableIds != rhs.__isset.lootTableIds)
      return false;
    else if (__isset.lootTableIds && !(lootTableIds == rhs.lootTableIds))
      return false;
    if (__isset.lootTableSpins != rhs.__isset.lootTableSpins)
      return false;
    else if (__isset.lootTableSpins && !(lootTableSpins == rhs.lootTableSpins))
      return false;
    return true;
  }
  bool operator != (const Rank &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rank & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rank &a, Rank &b);

std::ostream& operator<<(std::ostream& out, const Rank& obj);

typedef struct _GuildRank__isset {
  _GuildRank__isset() : guildHallImage(false), realHeight(false) {}
  bool guildHallImage :1;
  bool realHeight :1;
} _GuildRank__isset;

class GuildRank : public virtual ::apache::thrift::TBase {
 public:

  GuildRank(const GuildRank&);
  GuildRank& operator=(const GuildRank&);
  GuildRank() : rankId(0), pointsForRank(0), guildHallImage(), realHeight(0) {
  }

  virtual ~GuildRank() throw();
  RankID rankId;
  int64_t pointsForRank;
  AssetPath guildHallImage;
  int32_t realHeight;

  _GuildRank__isset __isset;

  void __set_rankId(const RankID val);

  void __set_pointsForRank(const int64_t val);

  void __set_guildHallImage(const AssetPath& val);

  void __set_realHeight(const int32_t val);

  bool operator == (const GuildRank & rhs) const
  {
    if (!(rankId == rhs.rankId))
      return false;
    if (!(pointsForRank == rhs.pointsForRank))
      return false;
    if (__isset.guildHallImage != rhs.__isset.guildHallImage)
      return false;
    else if (__isset.guildHallImage && !(guildHallImage == rhs.guildHallImage))
      return false;
    if (__isset.realHeight != rhs.__isset.realHeight)
      return false;
    else if (__isset.realHeight && !(realHeight == rhs.realHeight))
      return false;
    return true;
  }
  bool operator != (const GuildRank &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildRank & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildRank &a, GuildRank &b);

std::ostream& operator<<(std::ostream& out, const GuildRank& obj);

typedef struct _Boost__isset {
  _Boost__isset() : unlockLevelId(false), minRank(false), tutorialFlag(false), hudText(false), newDisplay(false), newDescription(false), enablePredicate(false), anim(false), blastUpgrade(false), conditional(false), priority(false), matrix(false), needsPlacement(false), predicate(false), selectionPredicate(false), immuneCellTypes(false), order(false), sealImage(false), buttonImage(false), buttonSelectedImage(false), useGetCurrencyDialog(false), animFileName(false), soundFile(false), eventIds(false), eventPhases(false) {}
  bool unlockLevelId :1;
  bool minRank :1;
  bool tutorialFlag :1;
  bool hudText :1;
  bool newDisplay :1;
  bool newDescription :1;
  bool enablePredicate :1;
  bool anim :1;
  bool blastUpgrade :1;
  bool conditional :1;
  bool priority :1;
  bool matrix :1;
  bool needsPlacement :1;
  bool predicate :1;
  bool selectionPredicate :1;
  bool immuneCellTypes :1;
  bool order :1;
  bool sealImage :1;
  bool buttonImage :1;
  bool buttonSelectedImage :1;
  bool useGetCurrencyDialog :1;
  bool animFileName :1;
  bool soundFile :1;
  bool eventIds :1;
  bool eventPhases :1;
} _Boost__isset;

class Boost : public virtual ::apache::thrift::TBase {
 public:

  Boost(const Boost&);
  Boost& operator=(const Boost&);
  Boost() : boostId(), boostTypeId(), unlockLevelId(), minRank(0), tutorialFlag(), hudText(), enablePredicate(), anim(), blastUpgrade(), conditional(), priority(0), matrix(), needsPlacement(0), predicate(), selectionPredicate(), order(0), sealImage(), buttonImage(), buttonSelectedImage(), useGetCurrencyDialog(0), animFileName(), soundFile(), eventPhases((EventPhases::type)0) {
  }

  virtual ~Boost() throw();
  BoostID boostId;
  BoostTypeID boostTypeId;
  std::string unlockLevelId;
  int32_t minRank;
  std::string tutorialFlag;
  std::string hudText;
  LocalizedString newDisplay;
  LocalizedString newDescription;
  std::string enablePredicate;
  std::string anim;
  std::string blastUpgrade;
  std::string conditional;
  int32_t priority;
  std::string matrix;
  bool needsPlacement;
  std::string predicate;
  std::string selectionPredicate;
  std::vector<CellTypeID>  immuneCellTypes;
  int32_t order;
  AssetPath sealImage;
  AssetPath buttonImage;
  AssetPath buttonSelectedImage;
  bool useGetCurrencyDialog;
  std::string animFileName;
  std::string soundFile;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;

  _Boost__isset __isset;

  void __set_boostId(const BoostID& val);

  void __set_boostTypeId(const BoostTypeID& val);

  void __set_unlockLevelId(const std::string& val);

  void __set_minRank(const int32_t val);

  void __set_tutorialFlag(const std::string& val);

  void __set_hudText(const std::string& val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_newDescription(const LocalizedString& val);

  void __set_enablePredicate(const std::string& val);

  void __set_anim(const std::string& val);

  void __set_blastUpgrade(const std::string& val);

  void __set_conditional(const std::string& val);

  void __set_priority(const int32_t val);

  void __set_matrix(const std::string& val);

  void __set_needsPlacement(const bool val);

  void __set_predicate(const std::string& val);

  void __set_selectionPredicate(const std::string& val);

  void __set_immuneCellTypes(const std::vector<CellTypeID> & val);

  void __set_order(const int32_t val);

  void __set_sealImage(const AssetPath& val);

  void __set_buttonImage(const AssetPath& val);

  void __set_buttonSelectedImage(const AssetPath& val);

  void __set_useGetCurrencyDialog(const bool val);

  void __set_animFileName(const std::string& val);

  void __set_soundFile(const std::string& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  bool operator == (const Boost & rhs) const
  {
    if (!(boostId == rhs.boostId))
      return false;
    if (!(boostTypeId == rhs.boostTypeId))
      return false;
    if (__isset.unlockLevelId != rhs.__isset.unlockLevelId)
      return false;
    else if (__isset.unlockLevelId && !(unlockLevelId == rhs.unlockLevelId))
      return false;
    if (__isset.minRank != rhs.__isset.minRank)
      return false;
    else if (__isset.minRank && !(minRank == rhs.minRank))
      return false;
    if (__isset.tutorialFlag != rhs.__isset.tutorialFlag)
      return false;
    else if (__isset.tutorialFlag && !(tutorialFlag == rhs.tutorialFlag))
      return false;
    if (__isset.hudText != rhs.__isset.hudText)
      return false;
    else if (__isset.hudText && !(hudText == rhs.hudText))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (__isset.newDescription != rhs.__isset.newDescription)
      return false;
    else if (__isset.newDescription && !(newDescription == rhs.newDescription))
      return false;
    if (__isset.enablePredicate != rhs.__isset.enablePredicate)
      return false;
    else if (__isset.enablePredicate && !(enablePredicate == rhs.enablePredicate))
      return false;
    if (__isset.anim != rhs.__isset.anim)
      return false;
    else if (__isset.anim && !(anim == rhs.anim))
      return false;
    if (__isset.blastUpgrade != rhs.__isset.blastUpgrade)
      return false;
    else if (__isset.blastUpgrade && !(blastUpgrade == rhs.blastUpgrade))
      return false;
    if (__isset.conditional != rhs.__isset.conditional)
      return false;
    else if (__isset.conditional && !(conditional == rhs.conditional))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    if (__isset.matrix != rhs.__isset.matrix)
      return false;
    else if (__isset.matrix && !(matrix == rhs.matrix))
      return false;
    if (__isset.needsPlacement != rhs.__isset.needsPlacement)
      return false;
    else if (__isset.needsPlacement && !(needsPlacement == rhs.needsPlacement))
      return false;
    if (__isset.predicate != rhs.__isset.predicate)
      return false;
    else if (__isset.predicate && !(predicate == rhs.predicate))
      return false;
    if (__isset.selectionPredicate != rhs.__isset.selectionPredicate)
      return false;
    else if (__isset.selectionPredicate && !(selectionPredicate == rhs.selectionPredicate))
      return false;
    if (__isset.immuneCellTypes != rhs.__isset.immuneCellTypes)
      return false;
    else if (__isset.immuneCellTypes && !(immuneCellTypes == rhs.immuneCellTypes))
      return false;
    if (__isset.order != rhs.__isset.order)
      return false;
    else if (__isset.order && !(order == rhs.order))
      return false;
    if (__isset.sealImage != rhs.__isset.sealImage)
      return false;
    else if (__isset.sealImage && !(sealImage == rhs.sealImage))
      return false;
    if (__isset.buttonImage != rhs.__isset.buttonImage)
      return false;
    else if (__isset.buttonImage && !(buttonImage == rhs.buttonImage))
      return false;
    if (__isset.buttonSelectedImage != rhs.__isset.buttonSelectedImage)
      return false;
    else if (__isset.buttonSelectedImage && !(buttonSelectedImage == rhs.buttonSelectedImage))
      return false;
    if (__isset.useGetCurrencyDialog != rhs.__isset.useGetCurrencyDialog)
      return false;
    else if (__isset.useGetCurrencyDialog && !(useGetCurrencyDialog == rhs.useGetCurrencyDialog))
      return false;
    if (__isset.animFileName != rhs.__isset.animFileName)
      return false;
    else if (__isset.animFileName && !(animFileName == rhs.animFileName))
      return false;
    if (__isset.soundFile != rhs.__isset.soundFile)
      return false;
    else if (__isset.soundFile && !(soundFile == rhs.soundFile))
      return false;
    if (__isset.eventIds != rhs.__isset.eventIds)
      return false;
    else if (__isset.eventIds && !(eventIds == rhs.eventIds))
      return false;
    if (__isset.eventPhases != rhs.__isset.eventPhases)
      return false;
    else if (__isset.eventPhases && !(eventPhases == rhs.eventPhases))
      return false;
    return true;
  }
  bool operator != (const Boost &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Boost & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Boost &a, Boost &b);

std::ostream& operator<<(std::ostream& out, const Boost& obj);

typedef struct _EventLock__isset {
  _EventLock__isset() : override(false), enabled(false), minRank(false), maxRank(false), period(false), duration(false), gateCurrencyId(false), requiredBaseBuildingId(false) {}
  bool override :1;
  bool enabled :1;
  bool minRank :1;
  bool maxRank :1;
  bool period :1;
  bool duration :1;
  bool gateCurrencyId :1;
  bool requiredBaseBuildingId :1;
} _EventLock__isset;

class EventLock : public virtual ::apache::thrift::TBase {
 public:

  EventLock(const EventLock&);
  EventLock& operator=(const EventLock&);
  EventLock() : eventLockId(), override(0), enabled(0), minRank(0), maxRank(0), startTime(), endTime(), period(0), duration(0), gateCurrencyId(), requiredBaseBuildingId() {
  }

  virtual ~EventLock() throw();
  EventLockID eventLockId;
  bool override;
  bool enabled;
  int32_t minRank;
  int32_t maxRank;
  std::string startTime;
  std::string endTime;
  int32_t period;
  int32_t duration;
  CurrencyID gateCurrencyId;
  BuildingID requiredBaseBuildingId;

  _EventLock__isset __isset;

  void __set_eventLockId(const EventLockID& val);

  void __set_override(const bool val);

  void __set_enabled(const bool val);

  void __set_minRank(const int32_t val);

  void __set_maxRank(const int32_t val);

  void __set_startTime(const std::string& val);

  void __set_endTime(const std::string& val);

  void __set_period(const int32_t val);

  void __set_duration(const int32_t val);

  void __set_gateCurrencyId(const CurrencyID& val);

  void __set_requiredBaseBuildingId(const BuildingID& val);

  bool operator == (const EventLock & rhs) const
  {
    if (!(eventLockId == rhs.eventLockId))
      return false;
    if (__isset.override != rhs.__isset.override)
      return false;
    else if (__isset.override && !(override == rhs.override))
      return false;
    if (__isset.enabled != rhs.__isset.enabled)
      return false;
    else if (__isset.enabled && !(enabled == rhs.enabled))
      return false;
    if (__isset.minRank != rhs.__isset.minRank)
      return false;
    else if (__isset.minRank && !(minRank == rhs.minRank))
      return false;
    if (__isset.maxRank != rhs.__isset.maxRank)
      return false;
    else if (__isset.maxRank && !(maxRank == rhs.maxRank))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (__isset.period != rhs.__isset.period)
      return false;
    else if (__isset.period && !(period == rhs.period))
      return false;
    if (__isset.duration != rhs.__isset.duration)
      return false;
    else if (__isset.duration && !(duration == rhs.duration))
      return false;
    if (__isset.gateCurrencyId != rhs.__isset.gateCurrencyId)
      return false;
    else if (__isset.gateCurrencyId && !(gateCurrencyId == rhs.gateCurrencyId))
      return false;
    if (__isset.requiredBaseBuildingId != rhs.__isset.requiredBaseBuildingId)
      return false;
    else if (__isset.requiredBaseBuildingId && !(requiredBaseBuildingId == rhs.requiredBaseBuildingId))
      return false;
    return true;
  }
  bool operator != (const EventLock &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventLock & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EventLock &a, EventLock &b);

std::ostream& operator<<(std::ostream& out, const EventLock& obj);

typedef struct _BuildMenuSpecialCard__isset {
  _BuildMenuSpecialCard__isset() : eventLockId(false), soundFile(false), messageAction(false), messageActionParameter(false), requiredLevelId(false), enabled(false), bundleId(false), contentImageFile(false), withSpinningRays(false) {}
  bool eventLockId :1;
  bool soundFile :1;
  bool messageAction :1;
  bool messageActionParameter :1;
  bool requiredLevelId :1;
  bool enabled :1;
  bool bundleId :1;
  bool contentImageFile :1;
  bool withSpinningRays :1;
} _BuildMenuSpecialCard__isset;

class BuildMenuSpecialCard : public virtual ::apache::thrift::TBase {
 public:

  BuildMenuSpecialCard(const BuildMenuSpecialCard&);
  BuildMenuSpecialCard& operator=(const BuildMenuSpecialCard&);
  BuildMenuSpecialCard() : cardId(), order(0), imageFile(), eventLockId(), soundFile(), messageAction((MessageButtonAction::type)0), messageActionParameter(), requiredLevelId(), enabled(0), bundleId(), contentImageFile(), withSpinningRays(0) {
  }

  virtual ~BuildMenuSpecialCard() throw();
  BuildMenuSpecialCardID cardId;
  int32_t order;
  std::string imageFile;
  LocalizedString caption;
  EventLockID eventLockId;
  std::string soundFile;
  MessageButtonAction::type messageAction;
  std::string messageActionParameter;
  LevelID requiredLevelId;
  bool enabled;
  std::string bundleId;
  std::string contentImageFile;
  bool withSpinningRays;

  _BuildMenuSpecialCard__isset __isset;

  void __set_cardId(const BuildMenuSpecialCardID& val);

  void __set_order(const int32_t val);

  void __set_imageFile(const std::string& val);

  void __set_caption(const LocalizedString& val);

  void __set_eventLockId(const EventLockID& val);

  void __set_soundFile(const std::string& val);

  void __set_messageAction(const MessageButtonAction::type val);

  void __set_messageActionParameter(const std::string& val);

  void __set_requiredLevelId(const LevelID& val);

  void __set_enabled(const bool val);

  void __set_bundleId(const std::string& val);

  void __set_contentImageFile(const std::string& val);

  void __set_withSpinningRays(const bool val);

  bool operator == (const BuildMenuSpecialCard & rhs) const
  {
    if (!(cardId == rhs.cardId))
      return false;
    if (!(order == rhs.order))
      return false;
    if (!(imageFile == rhs.imageFile))
      return false;
    if (!(caption == rhs.caption))
      return false;
    if (__isset.eventLockId != rhs.__isset.eventLockId)
      return false;
    else if (__isset.eventLockId && !(eventLockId == rhs.eventLockId))
      return false;
    if (__isset.soundFile != rhs.__isset.soundFile)
      return false;
    else if (__isset.soundFile && !(soundFile == rhs.soundFile))
      return false;
    if (__isset.messageAction != rhs.__isset.messageAction)
      return false;
    else if (__isset.messageAction && !(messageAction == rhs.messageAction))
      return false;
    if (__isset.messageActionParameter != rhs.__isset.messageActionParameter)
      return false;
    else if (__isset.messageActionParameter && !(messageActionParameter == rhs.messageActionParameter))
      return false;
    if (__isset.requiredLevelId != rhs.__isset.requiredLevelId)
      return false;
    else if (__isset.requiredLevelId && !(requiredLevelId == rhs.requiredLevelId))
      return false;
    if (__isset.enabled != rhs.__isset.enabled)
      return false;
    else if (__isset.enabled && !(enabled == rhs.enabled))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.contentImageFile != rhs.__isset.contentImageFile)
      return false;
    else if (__isset.contentImageFile && !(contentImageFile == rhs.contentImageFile))
      return false;
    if (__isset.withSpinningRays != rhs.__isset.withSpinningRays)
      return false;
    else if (__isset.withSpinningRays && !(withSpinningRays == rhs.withSpinningRays))
      return false;
    return true;
  }
  bool operator != (const BuildMenuSpecialCard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuildMenuSpecialCard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuildMenuSpecialCard &a, BuildMenuSpecialCard &b);

std::ostream& operator<<(std::ostream& out, const BuildMenuSpecialCard& obj);

typedef struct _LevelDot__isset {
  _LevelDot__isset() : levelOpenImage(false), levelLockImage(false), level1StarImage(false), level2StarImage(false), level3StarImage(false), levelRankLockImage(false), levelFirstRankLockImage(false), levelFirstLockImage(false), levelCurrentLockImage(false) {}
  bool levelOpenImage :1;
  bool levelLockImage :1;
  bool level1StarImage :1;
  bool level2StarImage :1;
  bool level3StarImage :1;
  bool levelRankLockImage :1;
  bool levelFirstRankLockImage :1;
  bool levelFirstLockImage :1;
  bool levelCurrentLockImage :1;
} _LevelDot__isset;

class LevelDot : public virtual ::apache::thrift::TBase {
 public:

  LevelDot(const LevelDot&);
  LevelDot& operator=(const LevelDot&);
  LevelDot() : levelDotId(), levelOpenImage(), levelLockImage(), level1StarImage(), level2StarImage(), level3StarImage(), levelRankLockImage(), levelFirstRankLockImage(), levelFirstLockImage(), levelCurrentLockImage() {
  }

  virtual ~LevelDot() throw();
  LevelDotID levelDotId;
  AssetPath levelOpenImage;
  AssetPath levelLockImage;
  AssetPath level1StarImage;
  AssetPath level2StarImage;
  AssetPath level3StarImage;
  AssetPath levelRankLockImage;
  AssetPath levelFirstRankLockImage;
  AssetPath levelFirstLockImage;
  AssetPath levelCurrentLockImage;

  _LevelDot__isset __isset;

  void __set_levelDotId(const LevelDotID& val);

  void __set_levelOpenImage(const AssetPath& val);

  void __set_levelLockImage(const AssetPath& val);

  void __set_level1StarImage(const AssetPath& val);

  void __set_level2StarImage(const AssetPath& val);

  void __set_level3StarImage(const AssetPath& val);

  void __set_levelRankLockImage(const AssetPath& val);

  void __set_levelFirstRankLockImage(const AssetPath& val);

  void __set_levelFirstLockImage(const AssetPath& val);

  void __set_levelCurrentLockImage(const AssetPath& val);

  bool operator == (const LevelDot & rhs) const
  {
    if (!(levelDotId == rhs.levelDotId))
      return false;
    if (__isset.levelOpenImage != rhs.__isset.levelOpenImage)
      return false;
    else if (__isset.levelOpenImage && !(levelOpenImage == rhs.levelOpenImage))
      return false;
    if (__isset.levelLockImage != rhs.__isset.levelLockImage)
      return false;
    else if (__isset.levelLockImage && !(levelLockImage == rhs.levelLockImage))
      return false;
    if (__isset.level1StarImage != rhs.__isset.level1StarImage)
      return false;
    else if (__isset.level1StarImage && !(level1StarImage == rhs.level1StarImage))
      return false;
    if (__isset.level2StarImage != rhs.__isset.level2StarImage)
      return false;
    else if (__isset.level2StarImage && !(level2StarImage == rhs.level2StarImage))
      return false;
    if (__isset.level3StarImage != rhs.__isset.level3StarImage)
      return false;
    else if (__isset.level3StarImage && !(level3StarImage == rhs.level3StarImage))
      return false;
    if (__isset.levelRankLockImage != rhs.__isset.levelRankLockImage)
      return false;
    else if (__isset.levelRankLockImage && !(levelRankLockImage == rhs.levelRankLockImage))
      return false;
    if (__isset.levelFirstRankLockImage != rhs.__isset.levelFirstRankLockImage)
      return false;
    else if (__isset.levelFirstRankLockImage && !(levelFirstRankLockImage == rhs.levelFirstRankLockImage))
      return false;
    if (__isset.levelFirstLockImage != rhs.__isset.levelFirstLockImage)
      return false;
    else if (__isset.levelFirstLockImage && !(levelFirstLockImage == rhs.levelFirstLockImage))
      return false;
    if (__isset.levelCurrentLockImage != rhs.__isset.levelCurrentLockImage)
      return false;
    else if (__isset.levelCurrentLockImage && !(levelCurrentLockImage == rhs.levelCurrentLockImage))
      return false;
    return true;
  }
  bool operator != (const LevelDot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LevelDot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LevelDot &a, LevelDot &b);

std::ostream& operator<<(std::ostream& out, const LevelDot& obj);

typedef struct _LevelDotV2__isset {
  _LevelDotV2__isset() : postLevelDotAction(false), postLevelDotActionParameters(false) {}
  bool postLevelDotAction :1;
  bool postLevelDotActionParameters :1;
} _LevelDotV2__isset;

class LevelDotV2 : public virtual ::apache::thrift::TBase {
 public:

  LevelDotV2(const LevelDotV2&);
  LevelDotV2& operator=(const LevelDotV2&);
  LevelDotV2() : levelDotId(), unlockLevelImage(), lockLevelImage(), wonLevelImage(), currentLevelImage(), emptyStarImage(), fullStarImage(), postLevelDotAction((MessageButtonAction::type)0) {
  }

  virtual ~LevelDotV2() throw();
  LevelDotID levelDotId;
  std::string unlockLevelImage;
  std::string lockLevelImage;
  std::string wonLevelImage;
  std::string currentLevelImage;
  std::string emptyStarImage;
  std::string fullStarImage;
  MessageButtonAction::type postLevelDotAction;
  std::vector<std::string>  postLevelDotActionParameters;

  _LevelDotV2__isset __isset;

  void __set_levelDotId(const LevelDotID& val);

  void __set_unlockLevelImage(const std::string& val);

  void __set_lockLevelImage(const std::string& val);

  void __set_wonLevelImage(const std::string& val);

  void __set_currentLevelImage(const std::string& val);

  void __set_emptyStarImage(const std::string& val);

  void __set_fullStarImage(const std::string& val);

  void __set_postLevelDotAction(const MessageButtonAction::type val);

  void __set_postLevelDotActionParameters(const std::vector<std::string> & val);

  bool operator == (const LevelDotV2 & rhs) const
  {
    if (!(levelDotId == rhs.levelDotId))
      return false;
    if (!(unlockLevelImage == rhs.unlockLevelImage))
      return false;
    if (!(lockLevelImage == rhs.lockLevelImage))
      return false;
    if (!(wonLevelImage == rhs.wonLevelImage))
      return false;
    if (!(currentLevelImage == rhs.currentLevelImage))
      return false;
    if (!(emptyStarImage == rhs.emptyStarImage))
      return false;
    if (!(fullStarImage == rhs.fullStarImage))
      return false;
    if (__isset.postLevelDotAction != rhs.__isset.postLevelDotAction)
      return false;
    else if (__isset.postLevelDotAction && !(postLevelDotAction == rhs.postLevelDotAction))
      return false;
    if (__isset.postLevelDotActionParameters != rhs.__isset.postLevelDotActionParameters)
      return false;
    else if (__isset.postLevelDotActionParameters && !(postLevelDotActionParameters == rhs.postLevelDotActionParameters))
      return false;
    return true;
  }
  bool operator != (const LevelDotV2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LevelDotV2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LevelDotV2 &a, LevelDotV2 &b);

std::ostream& operator<<(std::ostream& out, const LevelDotV2& obj);

typedef struct _Level__isset {
  _Level__isset() : levelRequirements(false), buildingId(false), islandId(false), villainThrowLimit(false), levelNumber(false), eventIds(false), rankMin(false), starScores(false), tutorial(false), levelDotId(false), closedText(false), playText1Star(false), playText2Star(false), playText3Star(false), winText1Star(false), winText2Star(false), winText3Star(false), winText1StarReplay(false), winText2StarReplay(false), winText3StarReplay(false), newDisplay(false), startText0Star(false), startText1Star(false), startText2Star(false), startText3Star(false), successText1Star(false), successText2Star(false), successText3Star(false), firstTimeCurrencyRewardIds(false), firstTimeCurrencyRewardAmounts(false), icon(false) {}
  bool levelRequirements :1;
  bool buildingId :1;
  bool islandId :1;
  bool villainThrowLimit :1;
  bool levelNumber :1;
  bool eventIds :1;
  bool rankMin :1;
  bool starScores :1;
  bool tutorial :1;
  bool levelDotId :1;
  bool closedText :1;
  bool playText1Star :1;
  bool playText2Star :1;
  bool playText3Star :1;
  bool winText1Star :1;
  bool winText2Star :1;
  bool winText3Star :1;
  bool winText1StarReplay :1;
  bool winText2StarReplay :1;
  bool winText3StarReplay :1;
  bool newDisplay :1;
  bool startText0Star :1;
  bool startText1Star :1;
  bool startText2Star :1;
  bool startText3Star :1;
  bool successText1Star :1;
  bool successText2Star :1;
  bool successText3Star :1;
  bool firstTimeCurrencyRewardIds :1;
  bool firstTimeCurrencyRewardAmounts :1;
  bool icon :1;
} _Level__isset;

class Level : public virtual ::apache::thrift::TBase {
 public:

  Level(const Level&);
  Level& operator=(const Level&);
  Level() : levelId(), levelName(), buildingId(), islandId(), villainThrowLimit(0), levelNumber(0), rankMin(0), tutorial(0), oneStarRewardListId(), twoStarRewardListId(), threeStarRewardListId(), staminaCost(0), ticketBonusCurrencyId(), ticketBonus(0), levelDotId(), npcId(), closedText(), playText1Star(), playText2Star(), playText3Star(), winText1Star(), winText2Star(), winText3Star(), winText1StarReplay(), winText2StarReplay(), winText3StarReplay(), icon() {
  }

  virtual ~Level() throw();
  LevelID levelId;
  LevelName levelName;
  std::vector<LevelID>  levelRequirements;
  std::string buildingId;
  IslandID islandId;
  int32_t villainThrowLimit;
  int32_t levelNumber;
  std::vector<EventID>  eventIds;
  int32_t rankMin;
  std::vector<int32_t>  starScores;
  bool tutorial;
  WeightedLootListID oneStarRewardListId;
  WeightedLootListID twoStarRewardListId;
  WeightedLootListID threeStarRewardListId;
  int32_t staminaCost;
  CurrencyID ticketBonusCurrencyId;
  int32_t ticketBonus;
  std::vector<ExpansionID>  expansionRewardIds;
  std::vector<int32_t>  expansionRewardAmounts;
  LevelDotID levelDotId;
  NpcID npcId;
  std::string closedText;
  std::string playText1Star;
  std::string playText2Star;
  std::string playText3Star;
  std::string winText1Star;
  std::string winText2Star;
  std::string winText3Star;
  std::string winText1StarReplay;
  std::string winText2StarReplay;
  std::string winText3StarReplay;
  LocalizedString newDisplay;
  LocalizedString startText0Star;
  LocalizedString startText1Star;
  LocalizedString startText2Star;
  LocalizedString startText3Star;
  LocalizedString successText1Star;
  LocalizedString successText2Star;
  LocalizedString successText3Star;
  std::vector<CurrencyID>  firstTimeCurrencyRewardIds;
  std::vector<int32_t>  firstTimeCurrencyRewardAmounts;
  std::string icon;

  _Level__isset __isset;

  void __set_levelId(const LevelID& val);

  void __set_levelName(const LevelName& val);

  void __set_levelRequirements(const std::vector<LevelID> & val);

  void __set_buildingId(const std::string& val);

  void __set_islandId(const IslandID& val);

  void __set_villainThrowLimit(const int32_t val);

  void __set_levelNumber(const int32_t val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_rankMin(const int32_t val);

  void __set_starScores(const std::vector<int32_t> & val);

  void __set_tutorial(const bool val);

  void __set_oneStarRewardListId(const WeightedLootListID& val);

  void __set_twoStarRewardListId(const WeightedLootListID& val);

  void __set_threeStarRewardListId(const WeightedLootListID& val);

  void __set_staminaCost(const int32_t val);

  void __set_ticketBonusCurrencyId(const CurrencyID& val);

  void __set_ticketBonus(const int32_t val);

  void __set_expansionRewardIds(const std::vector<ExpansionID> & val);

  void __set_expansionRewardAmounts(const std::vector<int32_t> & val);

  void __set_levelDotId(const LevelDotID& val);

  void __set_npcId(const NpcID& val);

  void __set_closedText(const std::string& val);

  void __set_playText1Star(const std::string& val);

  void __set_playText2Star(const std::string& val);

  void __set_playText3Star(const std::string& val);

  void __set_winText1Star(const std::string& val);

  void __set_winText2Star(const std::string& val);

  void __set_winText3Star(const std::string& val);

  void __set_winText1StarReplay(const std::string& val);

  void __set_winText2StarReplay(const std::string& val);

  void __set_winText3StarReplay(const std::string& val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_startText0Star(const LocalizedString& val);

  void __set_startText1Star(const LocalizedString& val);

  void __set_startText2Star(const LocalizedString& val);

  void __set_startText3Star(const LocalizedString& val);

  void __set_successText1Star(const LocalizedString& val);

  void __set_successText2Star(const LocalizedString& val);

  void __set_successText3Star(const LocalizedString& val);

  void __set_firstTimeCurrencyRewardIds(const std::vector<CurrencyID> & val);

  void __set_firstTimeCurrencyRewardAmounts(const std::vector<int32_t> & val);

  void __set_icon(const std::string& val);

  bool operator == (const Level & rhs) const
  {
    if (!(levelId == rhs.levelId))
      return false;
    if (!(levelName == rhs.levelName))
      return false;
    if (__isset.levelRequirements != rhs.__isset.levelRequirements)
      return false;
    else if (__isset.levelRequirements && !(levelRequirements == rhs.levelRequirements))
      return false;
    if (__isset.buildingId != rhs.__isset.buildingId)
      return false;
    else if (__isset.buildingId && !(buildingId == rhs.buildingId))
      return false;
    if (__isset.islandId != rhs.__isset.islandId)
      return false;
    else if (__isset.islandId && !(islandId == rhs.islandId))
      return false;
    if (__isset.villainThrowLimit != rhs.__isset.villainThrowLimit)
      return false;
    else if (__isset.villainThrowLimit && !(villainThrowLimit == rhs.villainThrowLimit))
      return false;
    if (__isset.levelNumber != rhs.__isset.levelNumber)
      return false;
    else if (__isset.levelNumber && !(levelNumber == rhs.levelNumber))
      return false;
    if (__isset.eventIds != rhs.__isset.eventIds)
      return false;
    else if (__isset.eventIds && !(eventIds == rhs.eventIds))
      return false;
    if (__isset.rankMin != rhs.__isset.rankMin)
      return false;
    else if (__isset.rankMin && !(rankMin == rhs.rankMin))
      return false;
    if (__isset.starScores != rhs.__isset.starScores)
      return false;
    else if (__isset.starScores && !(starScores == rhs.starScores))
      return false;
    if (__isset.tutorial != rhs.__isset.tutorial)
      return false;
    else if (__isset.tutorial && !(tutorial == rhs.tutorial))
      return false;
    if (!(oneStarRewardListId == rhs.oneStarRewardListId))
      return false;
    if (!(twoStarRewardListId == rhs.twoStarRewardListId))
      return false;
    if (!(threeStarRewardListId == rhs.threeStarRewardListId))
      return false;
    if (!(staminaCost == rhs.staminaCost))
      return false;
    if (!(ticketBonusCurrencyId == rhs.ticketBonusCurrencyId))
      return false;
    if (!(ticketBonus == rhs.ticketBonus))
      return false;
    if (!(expansionRewardIds == rhs.expansionRewardIds))
      return false;
    if (!(expansionRewardAmounts == rhs.expansionRewardAmounts))
      return false;
    if (__isset.levelDotId != rhs.__isset.levelDotId)
      return false;
    else if (__isset.levelDotId && !(levelDotId == rhs.levelDotId))
      return false;
    if (!(npcId == rhs.npcId))
      return false;
    if (__isset.closedText != rhs.__isset.closedText)
      return false;
    else if (__isset.closedText && !(closedText == rhs.closedText))
      return false;
    if (__isset.playText1Star != rhs.__isset.playText1Star)
      return false;
    else if (__isset.playText1Star && !(playText1Star == rhs.playText1Star))
      return false;
    if (__isset.playText2Star != rhs.__isset.playText2Star)
      return false;
    else if (__isset.playText2Star && !(playText2Star == rhs.playText2Star))
      return false;
    if (__isset.playText3Star != rhs.__isset.playText3Star)
      return false;
    else if (__isset.playText3Star && !(playText3Star == rhs.playText3Star))
      return false;
    if (__isset.winText1Star != rhs.__isset.winText1Star)
      return false;
    else if (__isset.winText1Star && !(winText1Star == rhs.winText1Star))
      return false;
    if (__isset.winText2Star != rhs.__isset.winText2Star)
      return false;
    else if (__isset.winText2Star && !(winText2Star == rhs.winText2Star))
      return false;
    if (__isset.winText3Star != rhs.__isset.winText3Star)
      return false;
    else if (__isset.winText3Star && !(winText3Star == rhs.winText3Star))
      return false;
    if (__isset.winText1StarReplay != rhs.__isset.winText1StarReplay)
      return false;
    else if (__isset.winText1StarReplay && !(winText1StarReplay == rhs.winText1StarReplay))
      return false;
    if (__isset.winText2StarReplay != rhs.__isset.winText2StarReplay)
      return false;
    else if (__isset.winText2StarReplay && !(winText2StarReplay == rhs.winText2StarReplay))
      return false;
    if (__isset.winText3StarReplay != rhs.__isset.winText3StarReplay)
      return false;
    else if (__isset.winText3StarReplay && !(winText3StarReplay == rhs.winText3StarReplay))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (__isset.startText0Star != rhs.__isset.startText0Star)
      return false;
    else if (__isset.startText0Star && !(startText0Star == rhs.startText0Star))
      return false;
    if (__isset.startText1Star != rhs.__isset.startText1Star)
      return false;
    else if (__isset.startText1Star && !(startText1Star == rhs.startText1Star))
      return false;
    if (__isset.startText2Star != rhs.__isset.startText2Star)
      return false;
    else if (__isset.startText2Star && !(startText2Star == rhs.startText2Star))
      return false;
    if (__isset.startText3Star != rhs.__isset.startText3Star)
      return false;
    else if (__isset.startText3Star && !(startText3Star == rhs.startText3Star))
      return false;
    if (__isset.successText1Star != rhs.__isset.successText1Star)
      return false;
    else if (__isset.successText1Star && !(successText1Star == rhs.successText1Star))
      return false;
    if (__isset.successText2Star != rhs.__isset.successText2Star)
      return false;
    else if (__isset.successText2Star && !(successText2Star == rhs.successText2Star))
      return false;
    if (__isset.successText3Star != rhs.__isset.successText3Star)
      return false;
    else if (__isset.successText3Star && !(successText3Star == rhs.successText3Star))
      return false;
    if (__isset.firstTimeCurrencyRewardIds != rhs.__isset.firstTimeCurrencyRewardIds)
      return false;
    else if (__isset.firstTimeCurrencyRewardIds && !(firstTimeCurrencyRewardIds == rhs.firstTimeCurrencyRewardIds))
      return false;
    if (__isset.firstTimeCurrencyRewardAmounts != rhs.__isset.firstTimeCurrencyRewardAmounts)
      return false;
    else if (__isset.firstTimeCurrencyRewardAmounts && !(firstTimeCurrencyRewardAmounts == rhs.firstTimeCurrencyRewardAmounts))
      return false;
    if (__isset.icon != rhs.__isset.icon)
      return false;
    else if (__isset.icon && !(icon == rhs.icon))
      return false;
    return true;
  }
  bool operator != (const Level &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Level & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Level &a, Level &b);

std::ostream& operator<<(std::ostream& out, const Level& obj);

typedef struct _NewLevel__isset {
  _NewLevel__isset() : levelRequirements(false), buildingId(false), islandId(false), villainThrowLimit(false), levelType(false), levelNumber(false), eventIds(false), rankMin(false), newEventIds(false), eventPhases(false), starScores(false), tutorial(false), levelDotId(false), closedText(false), playText1Star(false), playText2Star(false), playText3Star(false), winText1Star(false), winText2Star(false), winText3Star(false), winText1StarReplay(false), winText2StarReplay(false), winText3StarReplay(false), newDisplay(false), startText0Star(false), startText1Star(false), startText2Star(false), startText3Star(false), successText1Star(false), successText2Star(false), successText3Star(false), firstTimeCurrencyRewardIds(false), firstTimeCurrencyRewardAmounts(false), icon(false), backgroundImage(false), cloudImage1(false), cloudImage2(false), cloudImage3(false) {}
  bool levelRequirements :1;
  bool buildingId :1;
  bool islandId :1;
  bool villainThrowLimit :1;
  bool levelType :1;
  bool levelNumber :1;
  bool eventIds :1;
  bool rankMin :1;
  bool newEventIds :1;
  bool eventPhases :1;
  bool starScores :1;
  bool tutorial :1;
  bool levelDotId :1;
  bool closedText :1;
  bool playText1Star :1;
  bool playText2Star :1;
  bool playText3Star :1;
  bool winText1Star :1;
  bool winText2Star :1;
  bool winText3Star :1;
  bool winText1StarReplay :1;
  bool winText2StarReplay :1;
  bool winText3StarReplay :1;
  bool newDisplay :1;
  bool startText0Star :1;
  bool startText1Star :1;
  bool startText2Star :1;
  bool startText3Star :1;
  bool successText1Star :1;
  bool successText2Star :1;
  bool successText3Star :1;
  bool firstTimeCurrencyRewardIds :1;
  bool firstTimeCurrencyRewardAmounts :1;
  bool icon :1;
  bool backgroundImage :1;
  bool cloudImage1 :1;
  bool cloudImage2 :1;
  bool cloudImage3 :1;
} _NewLevel__isset;

class NewLevel : public virtual ::apache::thrift::TBase {
 public:

  NewLevel(const NewLevel&);
  NewLevel& operator=(const NewLevel&);
  NewLevel() : levelId(), levelName(), buildingId(), islandId(), villainThrowLimit(0), levelType((LevelType::type)0), levelNumber(0), rankMin(0), eventPhases((EventPhases::type)0), tutorial(0), oneStarRewardListId(), twoStarRewardListId(), threeStarRewardListId(), staminaCost(0), ticketBonusCurrencyId(), ticketBonus(0), levelDotId(), npcId(), closedText(), playText1Star(), playText2Star(), playText3Star(), winText1Star(), winText2Star(), winText3Star(), winText1StarReplay(), winText2StarReplay(), winText3StarReplay(), icon(), backgroundImage(), cloudImage1(), cloudImage2(), cloudImage3(), parentType((LevelParentType::type)0), parentId() {
  }

  virtual ~NewLevel() throw();
  LevelID levelId;
  LevelName levelName;
  std::vector<LevelID>  levelRequirements;
  std::string buildingId;
  IslandID islandId;
  int32_t villainThrowLimit;
  LevelType::type levelType;
  int32_t levelNumber;
  std::vector<EventID>  eventIds;
  int32_t rankMin;
  std::vector<EventID>  newEventIds;
  EventPhases::type eventPhases;
  std::vector<int32_t>  starScores;
  bool tutorial;
  WeightedLootListID oneStarRewardListId;
  WeightedLootListID twoStarRewardListId;
  WeightedLootListID threeStarRewardListId;
  int32_t staminaCost;
  CurrencyID ticketBonusCurrencyId;
  int32_t ticketBonus;
  std::vector<ExpansionID>  expansionRewardIds;
  std::vector<int32_t>  expansionRewardAmounts;
  LevelDotID levelDotId;
  NpcID npcId;
  std::string closedText;
  std::string playText1Star;
  std::string playText2Star;
  std::string playText3Star;
  std::string winText1Star;
  std::string winText2Star;
  std::string winText3Star;
  std::string winText1StarReplay;
  std::string winText2StarReplay;
  std::string winText3StarReplay;
  LocalizedString newDisplay;
  LocalizedString startText0Star;
  LocalizedString startText1Star;
  LocalizedString startText2Star;
  LocalizedString startText3Star;
  LocalizedString successText1Star;
  LocalizedString successText2Star;
  LocalizedString successText3Star;
  std::vector<CurrencyID>  firstTimeCurrencyRewardIds;
  std::vector<int32_t>  firstTimeCurrencyRewardAmounts;
  std::string icon;
  AssetPath backgroundImage;
  AssetPath cloudImage1;
  AssetPath cloudImage2;
  AssetPath cloudImage3;
  LevelParentType::type parentType;
  std::string parentId;
  std::vector<CurrencyID>  consolationPrizeCurrencyIds;
  std::vector<int32_t>  consolationPrizeCurrencyAmounts;

  _NewLevel__isset __isset;

  void __set_levelId(const LevelID& val);

  void __set_levelName(const LevelName& val);

  void __set_levelRequirements(const std::vector<LevelID> & val);

  void __set_buildingId(const std::string& val);

  void __set_islandId(const IslandID& val);

  void __set_villainThrowLimit(const int32_t val);

  void __set_levelType(const LevelType::type val);

  void __set_levelNumber(const int32_t val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_rankMin(const int32_t val);

  void __set_newEventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_starScores(const std::vector<int32_t> & val);

  void __set_tutorial(const bool val);

  void __set_oneStarRewardListId(const WeightedLootListID& val);

  void __set_twoStarRewardListId(const WeightedLootListID& val);

  void __set_threeStarRewardListId(const WeightedLootListID& val);

  void __set_staminaCost(const int32_t val);

  void __set_ticketBonusCurrencyId(const CurrencyID& val);

  void __set_ticketBonus(const int32_t val);

  void __set_expansionRewardIds(const std::vector<ExpansionID> & val);

  void __set_expansionRewardAmounts(const std::vector<int32_t> & val);

  void __set_levelDotId(const LevelDotID& val);

  void __set_npcId(const NpcID& val);

  void __set_closedText(const std::string& val);

  void __set_playText1Star(const std::string& val);

  void __set_playText2Star(const std::string& val);

  void __set_playText3Star(const std::string& val);

  void __set_winText1Star(const std::string& val);

  void __set_winText2Star(const std::string& val);

  void __set_winText3Star(const std::string& val);

  void __set_winText1StarReplay(const std::string& val);

  void __set_winText2StarReplay(const std::string& val);

  void __set_winText3StarReplay(const std::string& val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_startText0Star(const LocalizedString& val);

  void __set_startText1Star(const LocalizedString& val);

  void __set_startText2Star(const LocalizedString& val);

  void __set_startText3Star(const LocalizedString& val);

  void __set_successText1Star(const LocalizedString& val);

  void __set_successText2Star(const LocalizedString& val);

  void __set_successText3Star(const LocalizedString& val);

  void __set_firstTimeCurrencyRewardIds(const std::vector<CurrencyID> & val);

  void __set_firstTimeCurrencyRewardAmounts(const std::vector<int32_t> & val);

  void __set_icon(const std::string& val);

  void __set_backgroundImage(const AssetPath& val);

  void __set_cloudImage1(const AssetPath& val);

  void __set_cloudImage2(const AssetPath& val);

  void __set_cloudImage3(const AssetPath& val);

  void __set_parentType(const LevelParentType::type val);

  void __set_parentId(const std::string& val);

  void __set_consolationPrizeCurrencyIds(const std::vector<CurrencyID> & val);

  void __set_consolationPrizeCurrencyAmounts(const std::vector<int32_t> & val);

  bool operator == (const NewLevel & rhs) const
  {
    if (!(levelId == rhs.levelId))
      return false;
    if (!(levelName == rhs.levelName))
      return false;
    if (__isset.levelRequirements != rhs.__isset.levelRequirements)
      return false;
    else if (__isset.levelRequirements && !(levelRequirements == rhs.levelRequirements))
      return false;
    if (__isset.buildingId != rhs.__isset.buildingId)
      return false;
    else if (__isset.buildingId && !(buildingId == rhs.buildingId))
      return false;
    if (__isset.islandId != rhs.__isset.islandId)
      return false;
    else if (__isset.islandId && !(islandId == rhs.islandId))
      return false;
    if (__isset.villainThrowLimit != rhs.__isset.villainThrowLimit)
      return false;
    else if (__isset.villainThrowLimit && !(villainThrowLimit == rhs.villainThrowLimit))
      return false;
    if (__isset.levelType != rhs.__isset.levelType)
      return false;
    else if (__isset.levelType && !(levelType == rhs.levelType))
      return false;
    if (__isset.levelNumber != rhs.__isset.levelNumber)
      return false;
    else if (__isset.levelNumber && !(levelNumber == rhs.levelNumber))
      return false;
    if (__isset.eventIds != rhs.__isset.eventIds)
      return false;
    else if (__isset.eventIds && !(eventIds == rhs.eventIds))
      return false;
    if (__isset.rankMin != rhs.__isset.rankMin)
      return false;
    else if (__isset.rankMin && !(rankMin == rhs.rankMin))
      return false;
    if (__isset.newEventIds != rhs.__isset.newEventIds)
      return false;
    else if (__isset.newEventIds && !(newEventIds == rhs.newEventIds))
      return false;
    if (__isset.eventPhases != rhs.__isset.eventPhases)
      return false;
    else if (__isset.eventPhases && !(eventPhases == rhs.eventPhases))
      return false;
    if (__isset.starScores != rhs.__isset.starScores)
      return false;
    else if (__isset.starScores && !(starScores == rhs.starScores))
      return false;
    if (__isset.tutorial != rhs.__isset.tutorial)
      return false;
    else if (__isset.tutorial && !(tutorial == rhs.tutorial))
      return false;
    if (!(oneStarRewardListId == rhs.oneStarRewardListId))
      return false;
    if (!(twoStarRewardListId == rhs.twoStarRewardListId))
      return false;
    if (!(threeStarRewardListId == rhs.threeStarRewardListId))
      return false;
    if (!(staminaCost == rhs.staminaCost))
      return false;
    if (!(ticketBonusCurrencyId == rhs.ticketBonusCurrencyId))
      return false;
    if (!(ticketBonus == rhs.ticketBonus))
      return false;
    if (!(expansionRewardIds == rhs.expansionRewardIds))
      return false;
    if (!(expansionRewardAmounts == rhs.expansionRewardAmounts))
      return false;
    if (__isset.levelDotId != rhs.__isset.levelDotId)
      return false;
    else if (__isset.levelDotId && !(levelDotId == rhs.levelDotId))
      return false;
    if (!(npcId == rhs.npcId))
      return false;
    if (__isset.closedText != rhs.__isset.closedText)
      return false;
    else if (__isset.closedText && !(closedText == rhs.closedText))
      return false;
    if (__isset.playText1Star != rhs.__isset.playText1Star)
      return false;
    else if (__isset.playText1Star && !(playText1Star == rhs.playText1Star))
      return false;
    if (__isset.playText2Star != rhs.__isset.playText2Star)
      return false;
    else if (__isset.playText2Star && !(playText2Star == rhs.playText2Star))
      return false;
    if (__isset.playText3Star != rhs.__isset.playText3Star)
      return false;
    else if (__isset.playText3Star && !(playText3Star == rhs.playText3Star))
      return false;
    if (__isset.winText1Star != rhs.__isset.winText1Star)
      return false;
    else if (__isset.winText1Star && !(winText1Star == rhs.winText1Star))
      return false;
    if (__isset.winText2Star != rhs.__isset.winText2Star)
      return false;
    else if (__isset.winText2Star && !(winText2Star == rhs.winText2Star))
      return false;
    if (__isset.winText3Star != rhs.__isset.winText3Star)
      return false;
    else if (__isset.winText3Star && !(winText3Star == rhs.winText3Star))
      return false;
    if (__isset.winText1StarReplay != rhs.__isset.winText1StarReplay)
      return false;
    else if (__isset.winText1StarReplay && !(winText1StarReplay == rhs.winText1StarReplay))
      return false;
    if (__isset.winText2StarReplay != rhs.__isset.winText2StarReplay)
      return false;
    else if (__isset.winText2StarReplay && !(winText2StarReplay == rhs.winText2StarReplay))
      return false;
    if (__isset.winText3StarReplay != rhs.__isset.winText3StarReplay)
      return false;
    else if (__isset.winText3StarReplay && !(winText3StarReplay == rhs.winText3StarReplay))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (__isset.startText0Star != rhs.__isset.startText0Star)
      return false;
    else if (__isset.startText0Star && !(startText0Star == rhs.startText0Star))
      return false;
    if (__isset.startText1Star != rhs.__isset.startText1Star)
      return false;
    else if (__isset.startText1Star && !(startText1Star == rhs.startText1Star))
      return false;
    if (__isset.startText2Star != rhs.__isset.startText2Star)
      return false;
    else if (__isset.startText2Star && !(startText2Star == rhs.startText2Star))
      return false;
    if (__isset.startText3Star != rhs.__isset.startText3Star)
      return false;
    else if (__isset.startText3Star && !(startText3Star == rhs.startText3Star))
      return false;
    if (__isset.successText1Star != rhs.__isset.successText1Star)
      return false;
    else if (__isset.successText1Star && !(successText1Star == rhs.successText1Star))
      return false;
    if (__isset.successText2Star != rhs.__isset.successText2Star)
      return false;
    else if (__isset.successText2Star && !(successText2Star == rhs.successText2Star))
      return false;
    if (__isset.successText3Star != rhs.__isset.successText3Star)
      return false;
    else if (__isset.successText3Star && !(successText3Star == rhs.successText3Star))
      return false;
    if (__isset.firstTimeCurrencyRewardIds != rhs.__isset.firstTimeCurrencyRewardIds)
      return false;
    else if (__isset.firstTimeCurrencyRewardIds && !(firstTimeCurrencyRewardIds == rhs.firstTimeCurrencyRewardIds))
      return false;
    if (__isset.firstTimeCurrencyRewardAmounts != rhs.__isset.firstTimeCurrencyRewardAmounts)
      return false;
    else if (__isset.firstTimeCurrencyRewardAmounts && !(firstTimeCurrencyRewardAmounts == rhs.firstTimeCurrencyRewardAmounts))
      return false;
    if (__isset.icon != rhs.__isset.icon)
      return false;
    else if (__isset.icon && !(icon == rhs.icon))
      return false;
    if (__isset.backgroundImage != rhs.__isset.backgroundImage)
      return false;
    else if (__isset.backgroundImage && !(backgroundImage == rhs.backgroundImage))
      return false;
    if (__isset.cloudImage1 != rhs.__isset.cloudImage1)
      return false;
    else if (__isset.cloudImage1 && !(cloudImage1 == rhs.cloudImage1))
      return false;
    if (__isset.cloudImage2 != rhs.__isset.cloudImage2)
      return false;
    else if (__isset.cloudImage2 && !(cloudImage2 == rhs.cloudImage2))
      return false;
    if (__isset.cloudImage3 != rhs.__isset.cloudImage3)
      return false;
    else if (__isset.cloudImage3 && !(cloudImage3 == rhs.cloudImage3))
      return false;
    if (!(parentType == rhs.parentType))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(consolationPrizeCurrencyIds == rhs.consolationPrizeCurrencyIds))
      return false;
    if (!(consolationPrizeCurrencyAmounts == rhs.consolationPrizeCurrencyAmounts))
      return false;
    return true;
  }
  bool operator != (const NewLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NewLevel &a, NewLevel &b);

std::ostream& operator<<(std::ostream& out, const NewLevel& obj);

typedef struct _MatchThreeData__isset {
  _MatchThreeData__isset() : extraCount(false), villainId(false), villainF(false), villainN(false), villainMechanicMin(false), villainMechanicMax(false), villainMargin(false), villainStartDelay(false), villainThrowZoneArt(false), extraLua(false), orderCount(false), orderCountType(false), introuced(false), hiddenCellDropsPermil(false), giftDropsPermil(false), uselessDropsPermil(false), carrotDropsPermil(false), eggplantDropsPermil(false), tomatoDropsPermil(false), eventPointDropsPermil(false), slimeArt(false), slimeString(false), conveyorart(false), bottomfenceart(false), rightfenceart(false), spriteart(false), freezeart(false), cellart(false), blueWeight(false), greenWeight(false), orangeWeight(false), chocoWeight(false), pinkWeight(false), clearWeight(false), villainThrowTypes(false), villainThrowWeights(false) {}
  bool extraCount :1;
  bool villainId :1;
  bool villainF :1;
  bool villainN :1;
  bool villainMechanicMin :1;
  bool villainMechanicMax :1;
  bool villainMargin :1;
  bool villainStartDelay :1;
  bool villainThrowZoneArt :1;
  bool extraLua :1;
  bool orderCount :1;
  bool orderCountType :1;
  bool introuced :1;
  bool hiddenCellDropsPermil :1;
  bool giftDropsPermil :1;
  bool uselessDropsPermil :1;
  bool carrotDropsPermil :1;
  bool eggplantDropsPermil :1;
  bool tomatoDropsPermil :1;
  bool eventPointDropsPermil :1;
  bool slimeArt :1;
  bool slimeString :1;
  bool conveyorart :1;
  bool bottomfenceart :1;
  bool rightfenceart :1;
  bool spriteart :1;
  bool freezeart :1;
  bool cellart :1;
  bool blueWeight :1;
  bool greenWeight :1;
  bool orangeWeight :1;
  bool chocoWeight :1;
  bool pinkWeight :1;
  bool clearWeight :1;
  bool villainThrowTypes :1;
  bool villainThrowWeights :1;
} _MatchThreeData__isset;

class MatchThreeData : public virtual ::apache::thrift::TBase {
 public:

  MatchThreeData(const MatchThreeData&);
  MatchThreeData& operator=(const MatchThreeData&);
  MatchThreeData() : levelName(), numMoves(0), numRows(0), numColumns(0), numColors(0), extraCount(0), villainId(), villainF(0), villainN(0), villainMechanicMin(0), villainMechanicMax(0), villainMargin(0), villainStartDelay(0), villainThrowZoneArt(), extraLua(), introuced(), hiddenCellDropsPermil(0), giftDropsPermil(0), uselessDropsPermil(0), carrotDropsPermil(0), eggplantDropsPermil(0), tomatoDropsPermil(0), eventPointDropsPermil(0), slimeArt(), slimeString(), conveyorart(), bottomfenceart(), rightfenceart(), spriteart(), freezeart(), cellart(), blueWeight(0), greenWeight(0), orangeWeight(0), chocoWeight(0), pinkWeight(0), clearWeight(0) {
  }

  virtual ~MatchThreeData() throw();
  LevelName levelName;
  int32_t numMoves;
  std::vector<int32_t>  starScores;
  int32_t numRows;
  int32_t numColumns;
  int32_t numColors;
  int32_t extraCount;
  VillainID villainId;
  int32_t villainF;
  int32_t villainN;
  int32_t villainMechanicMin;
  int32_t villainMechanicMax;
  int32_t villainMargin;
  int32_t villainStartDelay;
  std::string villainThrowZoneArt;
  std::string extraLua;
  std::vector<int32_t>  orderCount;
  std::vector<std::string>  orderCountType;
  std::string introuced;
  int32_t hiddenCellDropsPermil;
  int32_t giftDropsPermil;
  int32_t uselessDropsPermil;
  int32_t carrotDropsPermil;
  int32_t eggplantDropsPermil;
  int32_t tomatoDropsPermil;
  int32_t eventPointDropsPermil;
  std::string slimeArt;
  std::string slimeString;
  std::string conveyorart;
  std::string bottomfenceart;
  std::string rightfenceart;
  std::string spriteart;
  std::string freezeart;
  std::string cellart;
  int32_t blueWeight;
  int32_t greenWeight;
  int32_t orangeWeight;
  int32_t chocoWeight;
  int32_t pinkWeight;
  int32_t clearWeight;
  std::vector<std::string>  villainThrowTypes;
  std::vector<int32_t>  villainThrowWeights;

  _MatchThreeData__isset __isset;

  void __set_levelName(const LevelName& val);

  void __set_numMoves(const int32_t val);

  void __set_starScores(const std::vector<int32_t> & val);

  void __set_numRows(const int32_t val);

  void __set_numColumns(const int32_t val);

  void __set_numColors(const int32_t val);

  void __set_extraCount(const int32_t val);

  void __set_villainId(const VillainID& val);

  void __set_villainF(const int32_t val);

  void __set_villainN(const int32_t val);

  void __set_villainMechanicMin(const int32_t val);

  void __set_villainMechanicMax(const int32_t val);

  void __set_villainMargin(const int32_t val);

  void __set_villainStartDelay(const int32_t val);

  void __set_villainThrowZoneArt(const std::string& val);

  void __set_extraLua(const std::string& val);

  void __set_orderCount(const std::vector<int32_t> & val);

  void __set_orderCountType(const std::vector<std::string> & val);

  void __set_introuced(const std::string& val);

  void __set_hiddenCellDropsPermil(const int32_t val);

  void __set_giftDropsPermil(const int32_t val);

  void __set_uselessDropsPermil(const int32_t val);

  void __set_carrotDropsPermil(const int32_t val);

  void __set_eggplantDropsPermil(const int32_t val);

  void __set_tomatoDropsPermil(const int32_t val);

  void __set_eventPointDropsPermil(const int32_t val);

  void __set_slimeArt(const std::string& val);

  void __set_slimeString(const std::string& val);

  void __set_conveyorart(const std::string& val);

  void __set_bottomfenceart(const std::string& val);

  void __set_rightfenceart(const std::string& val);

  void __set_spriteart(const std::string& val);

  void __set_freezeart(const std::string& val);

  void __set_cellart(const std::string& val);

  void __set_blueWeight(const int32_t val);

  void __set_greenWeight(const int32_t val);

  void __set_orangeWeight(const int32_t val);

  void __set_chocoWeight(const int32_t val);

  void __set_pinkWeight(const int32_t val);

  void __set_clearWeight(const int32_t val);

  void __set_villainThrowTypes(const std::vector<std::string> & val);

  void __set_villainThrowWeights(const std::vector<int32_t> & val);

  bool operator == (const MatchThreeData & rhs) const
  {
    if (!(levelName == rhs.levelName))
      return false;
    if (!(numMoves == rhs.numMoves))
      return false;
    if (!(starScores == rhs.starScores))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    if (!(numColumns == rhs.numColumns))
      return false;
    if (!(numColors == rhs.numColors))
      return false;
    if (__isset.extraCount != rhs.__isset.extraCount)
      return false;
    else if (__isset.extraCount && !(extraCount == rhs.extraCount))
      return false;
    if (__isset.villainId != rhs.__isset.villainId)
      return false;
    else if (__isset.villainId && !(villainId == rhs.villainId))
      return false;
    if (__isset.villainF != rhs.__isset.villainF)
      return false;
    else if (__isset.villainF && !(villainF == rhs.villainF))
      return false;
    if (__isset.villainN != rhs.__isset.villainN)
      return false;
    else if (__isset.villainN && !(villainN == rhs.villainN))
      return false;
    if (__isset.villainMechanicMin != rhs.__isset.villainMechanicMin)
      return false;
    else if (__isset.villainMechanicMin && !(villainMechanicMin == rhs.villainMechanicMin))
      return false;
    if (__isset.villainMechanicMax != rhs.__isset.villainMechanicMax)
      return false;
    else if (__isset.villainMechanicMax && !(villainMechanicMax == rhs.villainMechanicMax))
      return false;
    if (__isset.villainMargin != rhs.__isset.villainMargin)
      return false;
    else if (__isset.villainMargin && !(villainMargin == rhs.villainMargin))
      return false;
    if (__isset.villainStartDelay != rhs.__isset.villainStartDelay)
      return false;
    else if (__isset.villainStartDelay && !(villainStartDelay == rhs.villainStartDelay))
      return false;
    if (__isset.villainThrowZoneArt != rhs.__isset.villainThrowZoneArt)
      return false;
    else if (__isset.villainThrowZoneArt && !(villainThrowZoneArt == rhs.villainThrowZoneArt))
      return false;
    if (__isset.extraLua != rhs.__isset.extraLua)
      return false;
    else if (__isset.extraLua && !(extraLua == rhs.extraLua))
      return false;
    if (__isset.orderCount != rhs.__isset.orderCount)
      return false;
    else if (__isset.orderCount && !(orderCount == rhs.orderCount))
      return false;
    if (__isset.orderCountType != rhs.__isset.orderCountType)
      return false;
    else if (__isset.orderCountType && !(orderCountType == rhs.orderCountType))
      return false;
    if (__isset.introuced != rhs.__isset.introuced)
      return false;
    else if (__isset.introuced && !(introuced == rhs.introuced))
      return false;
    if (__isset.hiddenCellDropsPermil != rhs.__isset.hiddenCellDropsPermil)
      return false;
    else if (__isset.hiddenCellDropsPermil && !(hiddenCellDropsPermil == rhs.hiddenCellDropsPermil))
      return false;
    if (__isset.giftDropsPermil != rhs.__isset.giftDropsPermil)
      return false;
    else if (__isset.giftDropsPermil && !(giftDropsPermil == rhs.giftDropsPermil))
      return false;
    if (__isset.uselessDropsPermil != rhs.__isset.uselessDropsPermil)
      return false;
    else if (__isset.uselessDropsPermil && !(uselessDropsPermil == rhs.uselessDropsPermil))
      return false;
    if (__isset.carrotDropsPermil != rhs.__isset.carrotDropsPermil)
      return false;
    else if (__isset.carrotDropsPermil && !(carrotDropsPermil == rhs.carrotDropsPermil))
      return false;
    if (__isset.eggplantDropsPermil != rhs.__isset.eggplantDropsPermil)
      return false;
    else if (__isset.eggplantDropsPermil && !(eggplantDropsPermil == rhs.eggplantDropsPermil))
      return false;
    if (__isset.tomatoDropsPermil != rhs.__isset.tomatoDropsPermil)
      return false;
    else if (__isset.tomatoDropsPermil && !(tomatoDropsPermil == rhs.tomatoDropsPermil))
      return false;
    if (__isset.eventPointDropsPermil != rhs.__isset.eventPointDropsPermil)
      return false;
    else if (__isset.eventPointDropsPermil && !(eventPointDropsPermil == rhs.eventPointDropsPermil))
      return false;
    if (__isset.slimeArt != rhs.__isset.slimeArt)
      return false;
    else if (__isset.slimeArt && !(slimeArt == rhs.slimeArt))
      return false;
    if (__isset.slimeString != rhs.__isset.slimeString)
      return false;
    else if (__isset.slimeString && !(slimeString == rhs.slimeString))
      return false;
    if (__isset.conveyorart != rhs.__isset.conveyorart)
      return false;
    else if (__isset.conveyorart && !(conveyorart == rhs.conveyorart))
      return false;
    if (__isset.bottomfenceart != rhs.__isset.bottomfenceart)
      return false;
    else if (__isset.bottomfenceart && !(bottomfenceart == rhs.bottomfenceart))
      return false;
    if (__isset.rightfenceart != rhs.__isset.rightfenceart)
      return false;
    else if (__isset.rightfenceart && !(rightfenceart == rhs.rightfenceart))
      return false;
    if (__isset.spriteart != rhs.__isset.spriteart)
      return false;
    else if (__isset.spriteart && !(spriteart == rhs.spriteart))
      return false;
    if (__isset.freezeart != rhs.__isset.freezeart)
      return false;
    else if (__isset.freezeart && !(freezeart == rhs.freezeart))
      return false;
    if (__isset.cellart != rhs.__isset.cellart)
      return false;
    else if (__isset.cellart && !(cellart == rhs.cellart))
      return false;
    if (__isset.blueWeight != rhs.__isset.blueWeight)
      return false;
    else if (__isset.blueWeight && !(blueWeight == rhs.blueWeight))
      return false;
    if (__isset.greenWeight != rhs.__isset.greenWeight)
      return false;
    else if (__isset.greenWeight && !(greenWeight == rhs.greenWeight))
      return false;
    if (__isset.orangeWeight != rhs.__isset.orangeWeight)
      return false;
    else if (__isset.orangeWeight && !(orangeWeight == rhs.orangeWeight))
      return false;
    if (__isset.chocoWeight != rhs.__isset.chocoWeight)
      return false;
    else if (__isset.chocoWeight && !(chocoWeight == rhs.chocoWeight))
      return false;
    if (__isset.pinkWeight != rhs.__isset.pinkWeight)
      return false;
    else if (__isset.pinkWeight && !(pinkWeight == rhs.pinkWeight))
      return false;
    if (__isset.clearWeight != rhs.__isset.clearWeight)
      return false;
    else if (__isset.clearWeight && !(clearWeight == rhs.clearWeight))
      return false;
    if (__isset.villainThrowTypes != rhs.__isset.villainThrowTypes)
      return false;
    else if (__isset.villainThrowTypes && !(villainThrowTypes == rhs.villainThrowTypes))
      return false;
    if (__isset.villainThrowWeights != rhs.__isset.villainThrowWeights)
      return false;
    else if (__isset.villainThrowWeights && !(villainThrowWeights == rhs.villainThrowWeights))
      return false;
    return true;
  }
  bool operator != (const MatchThreeData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MatchThreeData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MatchThreeData &a, MatchThreeData &b);

std::ostream& operator<<(std::ostream& out, const MatchThreeData& obj);

typedef struct _Villain__isset {
  _Villain__isset() : villainThrowImage(false), animationName(false), villainThrowCells(false), throwCellLoseText(false), mechanicMin(false), mechanicMax(false) {}
  bool villainThrowImage :1;
  bool animationName :1;
  bool villainThrowCells :1;
  bool throwCellLoseText :1;
  bool mechanicMin :1;
  bool mechanicMax :1;
} _Villain__isset;

class Villain : public virtual ::apache::thrift::TBase {
 public:

  Villain(const Villain&);
  Villain& operator=(const Villain&);
  Villain() : villainId(), villainImage(), animationName(), throwCellLoseText(), mechanicMin(0), mechanicMax(0) {
  }

  virtual ~Villain() throw();
  VillainID villainId;
  AssetPath villainImage;
  std::vector<AssetPath>  villainThrowImage;
  std::string animationName;
  std::vector<std::string>  villainThrowCells;
  std::string throwCellLoseText;
  int32_t mechanicMin;
  int32_t mechanicMax;

  _Villain__isset __isset;

  void __set_villainId(const VillainID& val);

  void __set_villainImage(const AssetPath& val);

  void __set_villainThrowImage(const std::vector<AssetPath> & val);

  void __set_animationName(const std::string& val);

  void __set_villainThrowCells(const std::vector<std::string> & val);

  void __set_throwCellLoseText(const std::string& val);

  void __set_mechanicMin(const int32_t val);

  void __set_mechanicMax(const int32_t val);

  bool operator == (const Villain & rhs) const
  {
    if (!(villainId == rhs.villainId))
      return false;
    if (!(villainImage == rhs.villainImage))
      return false;
    if (__isset.villainThrowImage != rhs.__isset.villainThrowImage)
      return false;
    else if (__isset.villainThrowImage && !(villainThrowImage == rhs.villainThrowImage))
      return false;
    if (__isset.animationName != rhs.__isset.animationName)
      return false;
    else if (__isset.animationName && !(animationName == rhs.animationName))
      return false;
    if (__isset.villainThrowCells != rhs.__isset.villainThrowCells)
      return false;
    else if (__isset.villainThrowCells && !(villainThrowCells == rhs.villainThrowCells))
      return false;
    if (__isset.throwCellLoseText != rhs.__isset.throwCellLoseText)
      return false;
    else if (__isset.throwCellLoseText && !(throwCellLoseText == rhs.throwCellLoseText))
      return false;
    if (__isset.mechanicMin != rhs.__isset.mechanicMin)
      return false;
    else if (__isset.mechanicMin && !(mechanicMin == rhs.mechanicMin))
      return false;
    if (__isset.mechanicMax != rhs.__isset.mechanicMax)
      return false;
    else if (__isset.mechanicMax && !(mechanicMax == rhs.mechanicMax))
      return false;
    return true;
  }
  bool operator != (const Villain &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Villain & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Villain &a, Villain &b);

std::ostream& operator<<(std::ostream& out, const Villain& obj);

typedef struct _LevelCampaignStyle__isset {
  _LevelCampaignStyle__isset() : eventListTitleTextColor(false), eventListStarTextColor(false), eventListvillainID(false), topRewardText(false), topPlayerText(false), getMoreKeyText(false), specialBoosterText(false), eventStoreText(false), campaignMapPadding(false) {}
  bool eventListTitleTextColor :1;
  bool eventListStarTextColor :1;
  bool eventListvillainID :1;
  bool topRewardText :1;
  bool topPlayerText :1;
  bool getMoreKeyText :1;
  bool specialBoosterText :1;
  bool eventStoreText :1;
  bool campaignMapPadding :1;
} _LevelCampaignStyle__isset;

class LevelCampaignStyle : public virtual ::apache::thrift::TBase {
 public:

  LevelCampaignStyle(const LevelCampaignStyle&);
  LevelCampaignStyle& operator=(const LevelCampaignStyle&);
  LevelCampaignStyle() : levelCampaignStyleId(), campaignTMXFile(), characterNameBg(), myBalloonWithAvatar(), myBalloonWithoutAvatar(), hudButtonImage(), topHudBannerBg(), campaignTitleBg9(), campaignTimerBg9(), leaderboardChestOnBanner(), infoButtonImage(), leaderboardTrophyImageOnHudButton(), eventStoreImageOnHudButton(), rewardChestTextBg(), eventListBanner(), eventListTitleTextColor(), eventListStarTextColor(), eventListvillainID(), campaignBackground(), campaignMapPadding(0) {
  }

  virtual ~LevelCampaignStyle() throw();
  LevelCampaignStyleID levelCampaignStyleId;
  std::string campaignTMXFile;
  std::string characterNameBg;
  std::string myBalloonWithAvatar;
  std::string myBalloonWithoutAvatar;
  std::string hudButtonImage;
  std::string topHudBannerBg;
  std::string campaignTitleBg9;
  std::string campaignTimerBg9;
  std::string leaderboardChestOnBanner;
  std::string infoButtonImage;
  std::string leaderboardTrophyImageOnHudButton;
  std::string eventStoreImageOnHudButton;
  std::string rewardChestTextBg;
  std::string eventListBanner;
  std::string eventListTitleTextColor;
  std::string eventListStarTextColor;
  VillainID eventListvillainID;
  LocalizedString topRewardText;
  LocalizedString topPlayerText;
  LocalizedString getMoreKeyText;
  LocalizedString specialBoosterText;
  LocalizedString eventStoreText;
  AssetPath campaignBackground;
  int32_t campaignMapPadding;

  _LevelCampaignStyle__isset __isset;

  void __set_levelCampaignStyleId(const LevelCampaignStyleID& val);

  void __set_campaignTMXFile(const std::string& val);

  void __set_characterNameBg(const std::string& val);

  void __set_myBalloonWithAvatar(const std::string& val);

  void __set_myBalloonWithoutAvatar(const std::string& val);

  void __set_hudButtonImage(const std::string& val);

  void __set_topHudBannerBg(const std::string& val);

  void __set_campaignTitleBg9(const std::string& val);

  void __set_campaignTimerBg9(const std::string& val);

  void __set_leaderboardChestOnBanner(const std::string& val);

  void __set_infoButtonImage(const std::string& val);

  void __set_leaderboardTrophyImageOnHudButton(const std::string& val);

  void __set_eventStoreImageOnHudButton(const std::string& val);

  void __set_rewardChestTextBg(const std::string& val);

  void __set_eventListBanner(const std::string& val);

  void __set_eventListTitleTextColor(const std::string& val);

  void __set_eventListStarTextColor(const std::string& val);

  void __set_eventListvillainID(const VillainID& val);

  void __set_topRewardText(const LocalizedString& val);

  void __set_topPlayerText(const LocalizedString& val);

  void __set_getMoreKeyText(const LocalizedString& val);

  void __set_specialBoosterText(const LocalizedString& val);

  void __set_eventStoreText(const LocalizedString& val);

  void __set_campaignBackground(const AssetPath& val);

  void __set_campaignMapPadding(const int32_t val);

  bool operator == (const LevelCampaignStyle & rhs) const
  {
    if (!(levelCampaignStyleId == rhs.levelCampaignStyleId))
      return false;
    if (!(campaignTMXFile == rhs.campaignTMXFile))
      return false;
    if (!(characterNameBg == rhs.characterNameBg))
      return false;
    if (!(myBalloonWithAvatar == rhs.myBalloonWithAvatar))
      return false;
    if (!(myBalloonWithoutAvatar == rhs.myBalloonWithoutAvatar))
      return false;
    if (!(hudButtonImage == rhs.hudButtonImage))
      return false;
    if (!(topHudBannerBg == rhs.topHudBannerBg))
      return false;
    if (!(campaignTitleBg9 == rhs.campaignTitleBg9))
      return false;
    if (!(campaignTimerBg9 == rhs.campaignTimerBg9))
      return false;
    if (!(leaderboardChestOnBanner == rhs.leaderboardChestOnBanner))
      return false;
    if (!(infoButtonImage == rhs.infoButtonImage))
      return false;
    if (!(leaderboardTrophyImageOnHudButton == rhs.leaderboardTrophyImageOnHudButton))
      return false;
    if (!(eventStoreImageOnHudButton == rhs.eventStoreImageOnHudButton))
      return false;
    if (!(rewardChestTextBg == rhs.rewardChestTextBg))
      return false;
    if (!(eventListBanner == rhs.eventListBanner))
      return false;
    if (__isset.eventListTitleTextColor != rhs.__isset.eventListTitleTextColor)
      return false;
    else if (__isset.eventListTitleTextColor && !(eventListTitleTextColor == rhs.eventListTitleTextColor))
      return false;
    if (__isset.eventListStarTextColor != rhs.__isset.eventListStarTextColor)
      return false;
    else if (__isset.eventListStarTextColor && !(eventListStarTextColor == rhs.eventListStarTextColor))
      return false;
    if (__isset.eventListvillainID != rhs.__isset.eventListvillainID)
      return false;
    else if (__isset.eventListvillainID && !(eventListvillainID == rhs.eventListvillainID))
      return false;
    if (__isset.topRewardText != rhs.__isset.topRewardText)
      return false;
    else if (__isset.topRewardText && !(topRewardText == rhs.topRewardText))
      return false;
    if (__isset.topPlayerText != rhs.__isset.topPlayerText)
      return false;
    else if (__isset.topPlayerText && !(topPlayerText == rhs.topPlayerText))
      return false;
    if (__isset.getMoreKeyText != rhs.__isset.getMoreKeyText)
      return false;
    else if (__isset.getMoreKeyText && !(getMoreKeyText == rhs.getMoreKeyText))
      return false;
    if (__isset.specialBoosterText != rhs.__isset.specialBoosterText)
      return false;
    else if (__isset.specialBoosterText && !(specialBoosterText == rhs.specialBoosterText))
      return false;
    if (__isset.eventStoreText != rhs.__isset.eventStoreText)
      return false;
    else if (__isset.eventStoreText && !(eventStoreText == rhs.eventStoreText))
      return false;
    if (!(campaignBackground == rhs.campaignBackground))
      return false;
    if (__isset.campaignMapPadding != rhs.__isset.campaignMapPadding)
      return false;
    else if (__isset.campaignMapPadding && !(campaignMapPadding == rhs.campaignMapPadding))
      return false;
    return true;
  }
  bool operator != (const LevelCampaignStyle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LevelCampaignStyle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LevelCampaignStyle &a, LevelCampaignStyle &b);

std::ostream& operator<<(std::ostream& out, const LevelCampaignStyle& obj);

typedef struct _LevelCampaign__isset {
  _LevelCampaign__isset() : display(false), bundleId(false) {}
  bool display :1;
  bool bundleId :1;
} _LevelCampaign__isset;

class LevelCampaign : public virtual ::apache::thrift::TBase {
 public:

  LevelCampaign(const LevelCampaign&);
  LevelCampaign& operator=(const LevelCampaign&);
  LevelCampaign() : levelCampaignId(), campaignType((LevelParentType::type)0), displayOrder(0), eventPhases((EventPhases::type)0), availability((LevelAvailability::type)0), showRank(0), unlockRank(0), hideRank(0), numberOfFloors(0), visibleFloors(0), hidden(0), hideWhenComplete(0), eventIslandId(), levelCampaignStyleID(), bundleId(), match3ThemeId() {
  }

  virtual ~LevelCampaign() throw();
  LevelCampaignID levelCampaignId;
  LevelParentType::type campaignType;
  int32_t displayOrder;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  LevelAvailability::type availability;
  int32_t showRank;
  int32_t unlockRank;
  int32_t hideRank;
  int32_t numberOfFloors;
  int32_t visibleFloors;
  bool hidden;
  bool hideWhenComplete;
  EventIslandID eventIslandId;
  LevelCampaignStyleID levelCampaignStyleID;
  LocalizedString display;
  BundleID bundleId;
  Match3ThemeId match3ThemeId;

  _LevelCampaign__isset __isset;

  void __set_levelCampaignId(const LevelCampaignID& val);

  void __set_campaignType(const LevelParentType::type val);

  void __set_displayOrder(const int32_t val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_availability(const LevelAvailability::type val);

  void __set_showRank(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_numberOfFloors(const int32_t val);

  void __set_visibleFloors(const int32_t val);

  void __set_hidden(const bool val);

  void __set_hideWhenComplete(const bool val);

  void __set_eventIslandId(const EventIslandID& val);

  void __set_levelCampaignStyleID(const LevelCampaignStyleID& val);

  void __set_display(const LocalizedString& val);

  void __set_bundleId(const BundleID& val);

  void __set_match3ThemeId(const Match3ThemeId& val);

  bool operator == (const LevelCampaign & rhs) const
  {
    if (!(levelCampaignId == rhs.levelCampaignId))
      return false;
    if (!(campaignType == rhs.campaignType))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(availability == rhs.availability))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(unlockRank == rhs.unlockRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (!(numberOfFloors == rhs.numberOfFloors))
      return false;
    if (!(visibleFloors == rhs.visibleFloors))
      return false;
    if (!(hidden == rhs.hidden))
      return false;
    if (!(hideWhenComplete == rhs.hideWhenComplete))
      return false;
    if (!(eventIslandId == rhs.eventIslandId))
      return false;
    if (!(levelCampaignStyleID == rhs.levelCampaignStyleID))
      return false;
    if (__isset.display != rhs.__isset.display)
      return false;
    else if (__isset.display && !(display == rhs.display))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (!(match3ThemeId == rhs.match3ThemeId))
      return false;
    return true;
  }
  bool operator != (const LevelCampaign &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LevelCampaign & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LevelCampaign &a, LevelCampaign &b);

std::ostream& operator<<(std::ostream& out, const LevelCampaign& obj);


class LevelCampaignLevelsList : public virtual ::apache::thrift::TBase {
 public:

  LevelCampaignLevelsList(const LevelCampaignLevelsList&);
  LevelCampaignLevelsList& operator=(const LevelCampaignLevelsList&);
  LevelCampaignLevelsList() : levelCampaignId() {
  }

  virtual ~LevelCampaignLevelsList() throw();
  LevelCampaignID levelCampaignId;
  std::vector<LevelID>  levelIds;

  void __set_levelCampaignId(const LevelCampaignID& val);

  void __set_levelIds(const std::vector<LevelID> & val);

  bool operator == (const LevelCampaignLevelsList & rhs) const
  {
    if (!(levelCampaignId == rhs.levelCampaignId))
      return false;
    if (!(levelIds == rhs.levelIds))
      return false;
    return true;
  }
  bool operator != (const LevelCampaignLevelsList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LevelCampaignLevelsList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LevelCampaignLevelsList &a, LevelCampaignLevelsList &b);

std::ostream& operator<<(std::ostream& out, const LevelCampaignLevelsList& obj);


class BusinessLevelsList : public virtual ::apache::thrift::TBase {
 public:

  BusinessLevelsList(const BusinessLevelsList&);
  BusinessLevelsList& operator=(const BusinessLevelsList&);
  BusinessLevelsList() : levelCampaignId() {
  }

  virtual ~BusinessLevelsList() throw();
  LevelCampaignID levelCampaignId;
  std::vector<LevelID>  levelIds;

  void __set_levelCampaignId(const LevelCampaignID& val);

  void __set_levelIds(const std::vector<LevelID> & val);

  bool operator == (const BusinessLevelsList & rhs) const
  {
    if (!(levelCampaignId == rhs.levelCampaignId))
      return false;
    if (!(levelIds == rhs.levelIds))
      return false;
    return true;
  }
  bool operator != (const BusinessLevelsList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessLevelsList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessLevelsList &a, BusinessLevelsList &b);

std::ostream& operator<<(std::ostream& out, const BusinessLevelsList& obj);


class CastleEventLevelsList : public virtual ::apache::thrift::TBase {
 public:

  CastleEventLevelsList(const CastleEventLevelsList&);
  CastleEventLevelsList& operator=(const CastleEventLevelsList&);
  CastleEventLevelsList() : levelCampaignId() {
  }

  virtual ~CastleEventLevelsList() throw();
  LevelCampaignID levelCampaignId;
  std::vector<LevelID>  levelIds;

  void __set_levelCampaignId(const LevelCampaignID& val);

  void __set_levelIds(const std::vector<LevelID> & val);

  bool operator == (const CastleEventLevelsList & rhs) const
  {
    if (!(levelCampaignId == rhs.levelCampaignId))
      return false;
    if (!(levelIds == rhs.levelIds))
      return false;
    return true;
  }
  bool operator != (const CastleEventLevelsList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleEventLevelsList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CastleEventLevelsList &a, CastleEventLevelsList &b);

std::ostream& operator<<(std::ostream& out, const CastleEventLevelsList& obj);

typedef struct _CampaignSettings__isset {
  _CampaignSettings__isset() : starterCampaignWidgetPrefix(false) {}
  bool starterCampaignWidgetPrefix :1;
} _CampaignSettings__isset;

class CampaignSettings : public virtual ::apache::thrift::TBase {
 public:

  CampaignSettings(const CampaignSettings&);
  CampaignSettings& operator=(const CampaignSettings&);
  CampaignSettings() : starterCampaignId(), starterCampaignLengthDays(0), starterCampaignWidgetPrefix() {
  }

  virtual ~CampaignSettings() throw();
  LevelCampaignID starterCampaignId;
  int32_t starterCampaignLengthDays;
  std::string starterCampaignWidgetPrefix;

  _CampaignSettings__isset __isset;

  void __set_starterCampaignId(const LevelCampaignID& val);

  void __set_starterCampaignLengthDays(const int32_t val);

  void __set_starterCampaignWidgetPrefix(const std::string& val);

  bool operator == (const CampaignSettings & rhs) const
  {
    if (!(starterCampaignId == rhs.starterCampaignId))
      return false;
    if (!(starterCampaignLengthDays == rhs.starterCampaignLengthDays))
      return false;
    if (__isset.starterCampaignWidgetPrefix != rhs.__isset.starterCampaignWidgetPrefix)
      return false;
    else if (__isset.starterCampaignWidgetPrefix && !(starterCampaignWidgetPrefix == rhs.starterCampaignWidgetPrefix))
      return false;
    return true;
  }
  bool operator != (const CampaignSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CampaignSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CampaignSettings &a, CampaignSettings &b);

std::ostream& operator<<(std::ostream& out, const CampaignSettings& obj);


class FTUESettings : public virtual ::apache::thrift::TBase {
 public:

  FTUESettings(const FTUESettings&);
  FTUESettings& operator=(const FTUESettings&);
  FTUESettings() : donutQuestId(), sundaeQuestId(), starterEventQuestId(), disableFtue(0), mainShopEntryId(), businessBuildingId(), decoBuildingId(), evolveDonutStandQuestId() {
  }

  virtual ~FTUESettings() throw();
  std::string donutQuestId;
  std::string sundaeQuestId;
  std::string starterEventQuestId;
  bool disableFtue;
  MainShopEntryID mainShopEntryId;
  BuildingID businessBuildingId;
  BuildingID decoBuildingId;
  QuestID evolveDonutStandQuestId;

  void __set_donutQuestId(const std::string& val);

  void __set_sundaeQuestId(const std::string& val);

  void __set_starterEventQuestId(const std::string& val);

  void __set_disableFtue(const bool val);

  void __set_mainShopEntryId(const MainShopEntryID& val);

  void __set_businessBuildingId(const BuildingID& val);

  void __set_decoBuildingId(const BuildingID& val);

  void __set_evolveDonutStandQuestId(const QuestID& val);

  bool operator == (const FTUESettings & rhs) const
  {
    if (!(donutQuestId == rhs.donutQuestId))
      return false;
    if (!(sundaeQuestId == rhs.sundaeQuestId))
      return false;
    if (!(starterEventQuestId == rhs.starterEventQuestId))
      return false;
    if (!(disableFtue == rhs.disableFtue))
      return false;
    if (!(mainShopEntryId == rhs.mainShopEntryId))
      return false;
    if (!(businessBuildingId == rhs.businessBuildingId))
      return false;
    if (!(decoBuildingId == rhs.decoBuildingId))
      return false;
    if (!(evolveDonutStandQuestId == rhs.evolveDonutStandQuestId))
      return false;
    return true;
  }
  bool operator != (const FTUESettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FTUESettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FTUESettings &a, FTUESettings &b);

std::ostream& operator<<(std::ostream& out, const FTUESettings& obj);

typedef struct _StartingGameState__isset {
  _StartingGameState__isset() : kingdomVersion(false), demoKingdomVersion(false), demoKingdomZoomDuration(false) {}
  bool kingdomVersion :1;
  bool demoKingdomVersion :1;
  bool demoKingdomZoomDuration :1;
} _StartingGameState__isset;

class StartingGameState : public virtual ::apache::thrift::TBase {
 public:

  StartingGameState(const StartingGameState&);
  StartingGameState& operator=(const StartingGameState&);
  StartingGameState() : gems(0), gold(0), ticket(0), kingdomVersion(), demoKingdomVersion(), demoKingdomZoomDuration(0) {
  }

  virtual ~StartingGameState() throw();
  int32_t gems;
  int32_t gold;
  int32_t ticket;
  PresetKingdomID kingdomVersion;
  PresetKingdomID demoKingdomVersion;
  double demoKingdomZoomDuration;
  std::vector<BusinessID>  freeRushOrderBusinessIds;
  std::vector<int32_t>  freeRushOrderAmounts;

  _StartingGameState__isset __isset;

  void __set_gems(const int32_t val);

  void __set_gold(const int32_t val);

  void __set_ticket(const int32_t val);

  void __set_kingdomVersion(const PresetKingdomID& val);

  void __set_demoKingdomVersion(const PresetKingdomID& val);

  void __set_demoKingdomZoomDuration(const double val);

  void __set_freeRushOrderBusinessIds(const std::vector<BusinessID> & val);

  void __set_freeRushOrderAmounts(const std::vector<int32_t> & val);

  bool operator == (const StartingGameState & rhs) const
  {
    if (!(gems == rhs.gems))
      return false;
    if (!(gold == rhs.gold))
      return false;
    if (!(ticket == rhs.ticket))
      return false;
    if (__isset.kingdomVersion != rhs.__isset.kingdomVersion)
      return false;
    else if (__isset.kingdomVersion && !(kingdomVersion == rhs.kingdomVersion))
      return false;
    if (__isset.demoKingdomVersion != rhs.__isset.demoKingdomVersion)
      return false;
    else if (__isset.demoKingdomVersion && !(demoKingdomVersion == rhs.demoKingdomVersion))
      return false;
    if (__isset.demoKingdomZoomDuration != rhs.__isset.demoKingdomZoomDuration)
      return false;
    else if (__isset.demoKingdomZoomDuration && !(demoKingdomZoomDuration == rhs.demoKingdomZoomDuration))
      return false;
    if (!(freeRushOrderBusinessIds == rhs.freeRushOrderBusinessIds))
      return false;
    if (!(freeRushOrderAmounts == rhs.freeRushOrderAmounts))
      return false;
    return true;
  }
  bool operator != (const StartingGameState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartingGameState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StartingGameState &a, StartingGameState &b);

std::ostream& operator<<(std::ostream& out, const StartingGameState& obj);


class SocialUnlockReward : public virtual ::apache::thrift::TBase {
 public:

  SocialUnlockReward(const SocialUnlockReward&);
  SocialUnlockReward& operator=(const SocialUnlockReward&);
  SocialUnlockReward() : rewardId(), currencyId(), currencyAmount(0) {
  }

  virtual ~SocialUnlockReward() throw();
  SocialUnlockRewardID rewardId;
  CurrencyID currencyId;
  int32_t currencyAmount;

  void __set_rewardId(const SocialUnlockRewardID& val);

  void __set_currencyId(const CurrencyID& val);

  void __set_currencyAmount(const int32_t val);

  bool operator == (const SocialUnlockReward & rhs) const
  {
    if (!(rewardId == rhs.rewardId))
      return false;
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(currencyAmount == rhs.currencyAmount))
      return false;
    return true;
  }
  bool operator != (const SocialUnlockReward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SocialUnlockReward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SocialUnlockReward &a, SocialUnlockReward &b);

std::ostream& operator<<(std::ostream& out, const SocialUnlockReward& obj);

typedef struct _BusinessMenuSettings__isset {
  _BusinessMenuSettings__isset() : getGearGachaGroupId(false), getBusinessGachaGroupId(false), getGearGachaOfferId(false), getBusinessGachaOfferId(false), getGearImage(false), getGearText(false) {}
  bool getGearGachaGroupId :1;
  bool getBusinessGachaGroupId :1;
  bool getGearGachaOfferId :1;
  bool getBusinessGachaOfferId :1;
  bool getGearImage :1;
  bool getGearText :1;
} _BusinessMenuSettings__isset;

class BusinessMenuSettings : public virtual ::apache::thrift::TBase {
 public:

  BusinessMenuSettings(const BusinessMenuSettings&);
  BusinessMenuSettings& operator=(const BusinessMenuSettings&);
  BusinessMenuSettings() : getGearGachaGroupId(), getBusinessGachaGroupId(), getGearGachaOfferId(), getBusinessGachaOfferId(), getGearImage() {
  }

  virtual ~BusinessMenuSettings() throw();
  GachaGroupID getGearGachaGroupId;
  GachaGroupID getBusinessGachaGroupId;
  GachaOfferID getGearGachaOfferId;
  GachaOfferID getBusinessGachaOfferId;
  AssetID getGearImage;
  LocalizedString getGearText;

  _BusinessMenuSettings__isset __isset;

  void __set_getGearGachaGroupId(const GachaGroupID& val);

  void __set_getBusinessGachaGroupId(const GachaGroupID& val);

  void __set_getGearGachaOfferId(const GachaOfferID& val);

  void __set_getBusinessGachaOfferId(const GachaOfferID& val);

  void __set_getGearImage(const AssetID& val);

  void __set_getGearText(const LocalizedString& val);

  bool operator == (const BusinessMenuSettings & rhs) const
  {
    if (__isset.getGearGachaGroupId != rhs.__isset.getGearGachaGroupId)
      return false;
    else if (__isset.getGearGachaGroupId && !(getGearGachaGroupId == rhs.getGearGachaGroupId))
      return false;
    if (__isset.getBusinessGachaGroupId != rhs.__isset.getBusinessGachaGroupId)
      return false;
    else if (__isset.getBusinessGachaGroupId && !(getBusinessGachaGroupId == rhs.getBusinessGachaGroupId))
      return false;
    if (__isset.getGearGachaOfferId != rhs.__isset.getGearGachaOfferId)
      return false;
    else if (__isset.getGearGachaOfferId && !(getGearGachaOfferId == rhs.getGearGachaOfferId))
      return false;
    if (__isset.getBusinessGachaOfferId != rhs.__isset.getBusinessGachaOfferId)
      return false;
    else if (__isset.getBusinessGachaOfferId && !(getBusinessGachaOfferId == rhs.getBusinessGachaOfferId))
      return false;
    if (__isset.getGearImage != rhs.__isset.getGearImage)
      return false;
    else if (__isset.getGearImage && !(getGearImage == rhs.getGearImage))
      return false;
    if (__isset.getGearText != rhs.__isset.getGearText)
      return false;
    else if (__isset.getGearText && !(getGearText == rhs.getGearText))
      return false;
    return true;
  }
  bool operator != (const BusinessMenuSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessMenuSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessMenuSettings &a, BusinessMenuSettings &b);

std::ostream& operator<<(std::ostream& out, const BusinessMenuSettings& obj);

typedef struct _Settings__isset {
  _Settings__isset() : disableFtue(false), disableBusinessIdleBullets(false), disableGoldStopgapMinRank(false), defaultRegularLevelDotID(false), defaultIngredientLevelDotID(false), defaultCakeBoxLevelDotID(false), trackedCurrencies(false), kingdomAmbientSounds(false), kingdomAmbientMusic(false), localNotificationTimeSlots(false), dailyDecoBonusNotificationHour(false), dailyDecoBonusNotificationRepeatDays(false), socialMaxInactiveMinutes(false), pollIntervalSeconds(false), socialUnlockRewardId(false), maxKingdomSizeX(false), maxKingdomSizeY(false), iOSRateGameURL1(false), iOSRateGameURL2(false), androidRateGameURL1(false), androidRateGameURL2(false), feedbackURL(false), supportURL(false), analyticsSchemaId(false), watchAdCooldown(false), iOSReRateGameBuildNumber(false), androidReRateGameBuildNumber(false), gachaFtueGachaGroupId(false), gachaFtueRareGachaGroupId(false), recipeIslandFirstRareCakebox(false), gachaFtueGachaOfferId(false), gachaFtueRareGachaOfferId(false), socialMenuMinRank(false), gachaStoreMinRank(false), gachaStorePopoverMinLevel(false), inboxPopoverMinRank(false), gachaBannerDuration(false), placedBuildingStatId(false), spendGemsFTUETriggerOnObjectiveId(false), lockLinearObjectiveProgressionUntilCompleteObjectiveId(false), playerDisplayMaxLength(false), playerDisplayAllowedCharacters(false), autoPopulatePlayerName(false), disableGuild(false), placedBusinessScoreStatId(false), earnedCurrencyBonus(false), keyGearGetMoreText(false), disableEvolveBullet(false), additionalNpcsWalkingOnKingdom(false) {}
  bool disableFtue :1;
  bool disableBusinessIdleBullets :1;
  bool disableGoldStopgapMinRank :1;
  bool defaultRegularLevelDotID :1;
  bool defaultIngredientLevelDotID :1;
  bool defaultCakeBoxLevelDotID :1;
  bool trackedCurrencies :1;
  bool kingdomAmbientSounds :1;
  bool kingdomAmbientMusic :1;
  bool localNotificationTimeSlots :1;
  bool dailyDecoBonusNotificationHour :1;
  bool dailyDecoBonusNotificationRepeatDays :1;
  bool socialMaxInactiveMinutes :1;
  bool pollIntervalSeconds :1;
  bool socialUnlockRewardId :1;
  bool maxKingdomSizeX :1;
  bool maxKingdomSizeY :1;
  bool iOSRateGameURL1 :1;
  bool iOSRateGameURL2 :1;
  bool androidRateGameURL1 :1;
  bool androidRateGameURL2 :1;
  bool feedbackURL :1;
  bool supportURL :1;
  bool analyticsSchemaId :1;
  bool watchAdCooldown :1;
  bool iOSReRateGameBuildNumber :1;
  bool androidReRateGameBuildNumber :1;
  bool gachaFtueGachaGroupId :1;
  bool gachaFtueRareGachaGroupId :1;
  bool recipeIslandFirstRareCakebox :1;
  bool gachaFtueGachaOfferId :1;
  bool gachaFtueRareGachaOfferId :1;
  bool socialMenuMinRank :1;
  bool gachaStoreMinRank :1;
  bool gachaStorePopoverMinLevel :1;
  bool inboxPopoverMinRank :1;
  bool gachaBannerDuration :1;
  bool placedBuildingStatId :1;
  bool spendGemsFTUETriggerOnObjectiveId :1;
  bool lockLinearObjectiveProgressionUntilCompleteObjectiveId :1;
  bool playerDisplayMaxLength :1;
  bool playerDisplayAllowedCharacters :1;
  bool autoPopulatePlayerName :1;
  bool disableGuild :1;
  bool placedBusinessScoreStatId :1;
  bool earnedCurrencyBonus :1;
  bool keyGearGetMoreText :1;
  bool disableEvolveBullet :1;
  bool additionalNpcsWalkingOnKingdom :1;
} _Settings__isset;

class Settings : public virtual ::apache::thrift::TBase {
 public:

  Settings(const Settings&);
  Settings& operator=(const Settings&);
  Settings() : numBusinessMaterialSlots(0), staminaCurrencyId(), goldCurrencyId(), xpStatId(), gemCurrencyId(), maxFriendInvites(0), disableFtue(0), disableBusinessIdleBullets(0), palPointsCurrencyId(), disableGoldStopgapMinRank(0), maxAllowedClockChanges(0), maxAllowedClockChangesPeriod(0), refreshMarketOrdersCurrency(), refreshMarketOrdersCost(0), ticketCurrencyId(), maxRarity(0), defaultRegularLevelDotID(), defaultIngredientLevelDotID(), defaultCakeBoxLevelDotID(), defaultLevelDotID(), ticketsMinRank(0), staminaRechargeRate(0), orderBoardSize(0), dailyDecoBonusNotificationHour(0), dailyDecoBonusNotificationRepeatDays(0), socialMaxInactiveMinutes(0), pollIntervalSeconds(0), socialUnlockRewardId(), maxKingdomSizeX(0), maxKingdomSizeY(0), privacyPolicyURL(), termsOfUseURL(), legalURL(), iOSRateGameURL1(), iOSRateGameURL2(), androidRateGameURL1(), androidRateGameURL2(), feedbackURL(), supportURL(), analyticsSchemaId(0), centerKingdomEntityId(0), watchAdCooldown(0), iOSReRateGameBuildNumber(), androidReRateGameBuildNumber(), gachaFtueGachaGroupId(), gachaFtueRareGachaGroupId(), recipeIslandFirstRareCakebox(), gachaFtueGachaOfferId(), gachaFtueRareGachaOfferId(), socialMenuMinRank(0), gachaStoreMinRank(0), gachaStorePopoverMinLevel(), inboxPopoverMinRank(0), gachaBannerDuration(0), placedBuildingStatId(), spendGemsFTUETriggerOnObjectiveId(), lockLinearObjectiveProgressionUntilCompleteObjectiveId(), playerDisplayMaxLength(0), playerDisplayAllowedCharacters(), autoPopulatePlayerName(0), disableGuild(0), placedBusinessScoreStatId(), earnedCurrencyBonus(0), disableEvolveBullet(0), generalStoreId() {
  }

  virtual ~Settings() throw();
  int32_t numBusinessMaterialSlots;
  std::string staminaCurrencyId;
  std::string goldCurrencyId;
  std::string xpStatId;
  std::string gemCurrencyId;
  int32_t maxFriendInvites;
  bool disableFtue;
  bool disableBusinessIdleBullets;
  std::string palPointsCurrencyId;
  int32_t disableGoldStopgapMinRank;
  int32_t maxAllowedClockChanges;
  int32_t maxAllowedClockChangesPeriod;
  std::string refreshMarketOrdersCurrency;
  int32_t refreshMarketOrdersCost;
  std::string ticketCurrencyId;
  RarityID maxRarity;
  LevelDotID defaultRegularLevelDotID;
  LevelDotID defaultIngredientLevelDotID;
  LevelDotID defaultCakeBoxLevelDotID;
  LevelDotID defaultLevelDotID;
  std::vector<CurrencyID>  trackedCurrencies;
  int32_t ticketsMinRank;
  std::vector<std::string>  defaultDimensions;
  int32_t staminaRechargeRate;
  int32_t orderBoardSize;
  std::vector<std::string>  kingdomAmbientSounds;
  std::vector<std::string>  kingdomAmbientMusic;
  std::vector<int32_t>  localNotificationTimeSlots;
  int32_t dailyDecoBonusNotificationHour;
  int32_t dailyDecoBonusNotificationRepeatDays;
  int32_t socialMaxInactiveMinutes;
  int32_t pollIntervalSeconds;
  SocialUnlockRewardID socialUnlockRewardId;
  int32_t maxKingdomSizeX;
  int32_t maxKingdomSizeY;
  std::string privacyPolicyURL;
  std::string termsOfUseURL;
  std::string legalURL;
  std::string iOSRateGameURL1;
  std::string iOSRateGameURL2;
  std::string androidRateGameURL1;
  std::string androidRateGameURL2;
  std::string feedbackURL;
  std::string supportURL;
  int32_t analyticsSchemaId;
  int32_t centerKingdomEntityId;
  int32_t watchAdCooldown;
  std::string iOSReRateGameBuildNumber;
  std::string androidReRateGameBuildNumber;
  std::string gachaFtueGachaGroupId;
  std::string gachaFtueRareGachaGroupId;
  std::string recipeIslandFirstRareCakebox;
  std::string gachaFtueGachaOfferId;
  std::string gachaFtueRareGachaOfferId;
  int32_t socialMenuMinRank;
  int32_t gachaStoreMinRank;
  LevelID gachaStorePopoverMinLevel;
  int32_t inboxPopoverMinRank;
  int32_t gachaBannerDuration;
  std::string placedBuildingStatId;
  AchievementID spendGemsFTUETriggerOnObjectiveId;
  AchievementID lockLinearObjectiveProgressionUntilCompleteObjectiveId;
  int32_t playerDisplayMaxLength;
  std::string playerDisplayAllowedCharacters;
  bool autoPopulatePlayerName;
  bool disableGuild;
  std::string placedBusinessScoreStatId;
  int32_t earnedCurrencyBonus;
  LocalizedString keyGearGetMoreText;
  bool disableEvolveBullet;
  StoreID generalStoreId;
  std::vector<NpcID>  additionalNpcsWalkingOnKingdom;

  _Settings__isset __isset;

  void __set_numBusinessMaterialSlots(const int32_t val);

  void __set_staminaCurrencyId(const std::string& val);

  void __set_goldCurrencyId(const std::string& val);

  void __set_xpStatId(const std::string& val);

  void __set_gemCurrencyId(const std::string& val);

  void __set_maxFriendInvites(const int32_t val);

  void __set_disableFtue(const bool val);

  void __set_disableBusinessIdleBullets(const bool val);

  void __set_palPointsCurrencyId(const std::string& val);

  void __set_disableGoldStopgapMinRank(const int32_t val);

  void __set_maxAllowedClockChanges(const int32_t val);

  void __set_maxAllowedClockChangesPeriod(const int32_t val);

  void __set_refreshMarketOrdersCurrency(const std::string& val);

  void __set_refreshMarketOrdersCost(const int32_t val);

  void __set_ticketCurrencyId(const std::string& val);

  void __set_maxRarity(const RarityID val);

  void __set_defaultRegularLevelDotID(const LevelDotID& val);

  void __set_defaultIngredientLevelDotID(const LevelDotID& val);

  void __set_defaultCakeBoxLevelDotID(const LevelDotID& val);

  void __set_defaultLevelDotID(const LevelDotID& val);

  void __set_trackedCurrencies(const std::vector<CurrencyID> & val);

  void __set_ticketsMinRank(const int32_t val);

  void __set_defaultDimensions(const std::vector<std::string> & val);

  void __set_staminaRechargeRate(const int32_t val);

  void __set_orderBoardSize(const int32_t val);

  void __set_kingdomAmbientSounds(const std::vector<std::string> & val);

  void __set_kingdomAmbientMusic(const std::vector<std::string> & val);

  void __set_localNotificationTimeSlots(const std::vector<int32_t> & val);

  void __set_dailyDecoBonusNotificationHour(const int32_t val);

  void __set_dailyDecoBonusNotificationRepeatDays(const int32_t val);

  void __set_socialMaxInactiveMinutes(const int32_t val);

  void __set_pollIntervalSeconds(const int32_t val);

  void __set_socialUnlockRewardId(const SocialUnlockRewardID& val);

  void __set_maxKingdomSizeX(const int32_t val);

  void __set_maxKingdomSizeY(const int32_t val);

  void __set_privacyPolicyURL(const std::string& val);

  void __set_termsOfUseURL(const std::string& val);

  void __set_legalURL(const std::string& val);

  void __set_iOSRateGameURL1(const std::string& val);

  void __set_iOSRateGameURL2(const std::string& val);

  void __set_androidRateGameURL1(const std::string& val);

  void __set_androidRateGameURL2(const std::string& val);

  void __set_feedbackURL(const std::string& val);

  void __set_supportURL(const std::string& val);

  void __set_analyticsSchemaId(const int32_t val);

  void __set_centerKingdomEntityId(const int32_t val);

  void __set_watchAdCooldown(const int32_t val);

  void __set_iOSReRateGameBuildNumber(const std::string& val);

  void __set_androidReRateGameBuildNumber(const std::string& val);

  void __set_gachaFtueGachaGroupId(const std::string& val);

  void __set_gachaFtueRareGachaGroupId(const std::string& val);

  void __set_recipeIslandFirstRareCakebox(const std::string& val);

  void __set_gachaFtueGachaOfferId(const std::string& val);

  void __set_gachaFtueRareGachaOfferId(const std::string& val);

  void __set_socialMenuMinRank(const int32_t val);

  void __set_gachaStoreMinRank(const int32_t val);

  void __set_gachaStorePopoverMinLevel(const LevelID& val);

  void __set_inboxPopoverMinRank(const int32_t val);

  void __set_gachaBannerDuration(const int32_t val);

  void __set_placedBuildingStatId(const std::string& val);

  void __set_spendGemsFTUETriggerOnObjectiveId(const AchievementID& val);

  void __set_lockLinearObjectiveProgressionUntilCompleteObjectiveId(const AchievementID& val);

  void __set_playerDisplayMaxLength(const int32_t val);

  void __set_playerDisplayAllowedCharacters(const std::string& val);

  void __set_autoPopulatePlayerName(const bool val);

  void __set_disableGuild(const bool val);

  void __set_placedBusinessScoreStatId(const std::string& val);

  void __set_earnedCurrencyBonus(const int32_t val);

  void __set_keyGearGetMoreText(const LocalizedString& val);

  void __set_disableEvolveBullet(const bool val);

  void __set_generalStoreId(const StoreID& val);

  void __set_additionalNpcsWalkingOnKingdom(const std::vector<NpcID> & val);

  bool operator == (const Settings & rhs) const
  {
    if (!(numBusinessMaterialSlots == rhs.numBusinessMaterialSlots))
      return false;
    if (!(staminaCurrencyId == rhs.staminaCurrencyId))
      return false;
    if (!(goldCurrencyId == rhs.goldCurrencyId))
      return false;
    if (!(xpStatId == rhs.xpStatId))
      return false;
    if (!(gemCurrencyId == rhs.gemCurrencyId))
      return false;
    if (!(maxFriendInvites == rhs.maxFriendInvites))
      return false;
    if (__isset.disableFtue != rhs.__isset.disableFtue)
      return false;
    else if (__isset.disableFtue && !(disableFtue == rhs.disableFtue))
      return false;
    if (__isset.disableBusinessIdleBullets != rhs.__isset.disableBusinessIdleBullets)
      return false;
    else if (__isset.disableBusinessIdleBullets && !(disableBusinessIdleBullets == rhs.disableBusinessIdleBullets))
      return false;
    if (!(palPointsCurrencyId == rhs.palPointsCurrencyId))
      return false;
    if (__isset.disableGoldStopgapMinRank != rhs.__isset.disableGoldStopgapMinRank)
      return false;
    else if (__isset.disableGoldStopgapMinRank && !(disableGoldStopgapMinRank == rhs.disableGoldStopgapMinRank))
      return false;
    if (!(maxAllowedClockChanges == rhs.maxAllowedClockChanges))
      return false;
    if (!(maxAllowedClockChangesPeriod == rhs.maxAllowedClockChangesPeriod))
      return false;
    if (!(refreshMarketOrdersCurrency == rhs.refreshMarketOrdersCurrency))
      return false;
    if (!(refreshMarketOrdersCost == rhs.refreshMarketOrdersCost))
      return false;
    if (!(ticketCurrencyId == rhs.ticketCurrencyId))
      return false;
    if (!(maxRarity == rhs.maxRarity))
      return false;
    if (__isset.defaultRegularLevelDotID != rhs.__isset.defaultRegularLevelDotID)
      return false;
    else if (__isset.defaultRegularLevelDotID && !(defaultRegularLevelDotID == rhs.defaultRegularLevelDotID))
      return false;
    if (__isset.defaultIngredientLevelDotID != rhs.__isset.defaultIngredientLevelDotID)
      return false;
    else if (__isset.defaultIngredientLevelDotID && !(defaultIngredientLevelDotID == rhs.defaultIngredientLevelDotID))
      return false;
    if (__isset.defaultCakeBoxLevelDotID != rhs.__isset.defaultCakeBoxLevelDotID)
      return false;
    else if (__isset.defaultCakeBoxLevelDotID && !(defaultCakeBoxLevelDotID == rhs.defaultCakeBoxLevelDotID))
      return false;
    if (!(defaultLevelDotID == rhs.defaultLevelDotID))
      return false;
    if (__isset.trackedCurrencies != rhs.__isset.trackedCurrencies)
      return false;
    else if (__isset.trackedCurrencies && !(trackedCurrencies == rhs.trackedCurrencies))
      return false;
    if (!(ticketsMinRank == rhs.ticketsMinRank))
      return false;
    if (!(defaultDimensions == rhs.defaultDimensions))
      return false;
    if (!(staminaRechargeRate == rhs.staminaRechargeRate))
      return false;
    if (!(orderBoardSize == rhs.orderBoardSize))
      return false;
    if (__isset.kingdomAmbientSounds != rhs.__isset.kingdomAmbientSounds)
      return false;
    else if (__isset.kingdomAmbientSounds && !(kingdomAmbientSounds == rhs.kingdomAmbientSounds))
      return false;
    if (__isset.kingdomAmbientMusic != rhs.__isset.kingdomAmbientMusic)
      return false;
    else if (__isset.kingdomAmbientMusic && !(kingdomAmbientMusic == rhs.kingdomAmbientMusic))
      return false;
    if (__isset.localNotificationTimeSlots != rhs.__isset.localNotificationTimeSlots)
      return false;
    else if (__isset.localNotificationTimeSlots && !(localNotificationTimeSlots == rhs.localNotificationTimeSlots))
      return false;
    if (__isset.dailyDecoBonusNotificationHour != rhs.__isset.dailyDecoBonusNotificationHour)
      return false;
    else if (__isset.dailyDecoBonusNotificationHour && !(dailyDecoBonusNotificationHour == rhs.dailyDecoBonusNotificationHour))
      return false;
    if (__isset.dailyDecoBonusNotificationRepeatDays != rhs.__isset.dailyDecoBonusNotificationRepeatDays)
      return false;
    else if (__isset.dailyDecoBonusNotificationRepeatDays && !(dailyDecoBonusNotificationRepeatDays == rhs.dailyDecoBonusNotificationRepeatDays))
      return false;
    if (__isset.socialMaxInactiveMinutes != rhs.__isset.socialMaxInactiveMinutes)
      return false;
    else if (__isset.socialMaxInactiveMinutes && !(socialMaxInactiveMinutes == rhs.socialMaxInactiveMinutes))
      return false;
    if (__isset.pollIntervalSeconds != rhs.__isset.pollIntervalSeconds)
      return false;
    else if (__isset.pollIntervalSeconds && !(pollIntervalSeconds == rhs.pollIntervalSeconds))
      return false;
    if (__isset.socialUnlockRewardId != rhs.__isset.socialUnlockRewardId)
      return false;
    else if (__isset.socialUnlockRewardId && !(socialUnlockRewardId == rhs.socialUnlockRewardId))
      return false;
    if (__isset.maxKingdomSizeX != rhs.__isset.maxKingdomSizeX)
      return false;
    else if (__isset.maxKingdomSizeX && !(maxKingdomSizeX == rhs.maxKingdomSizeX))
      return false;
    if (__isset.maxKingdomSizeY != rhs.__isset.maxKingdomSizeY)
      return false;
    else if (__isset.maxKingdomSizeY && !(maxKingdomSizeY == rhs.maxKingdomSizeY))
      return false;
    if (!(privacyPolicyURL == rhs.privacyPolicyURL))
      return false;
    if (!(termsOfUseURL == rhs.termsOfUseURL))
      return false;
    if (!(legalURL == rhs.legalURL))
      return false;
    if (__isset.iOSRateGameURL1 != rhs.__isset.iOSRateGameURL1)
      return false;
    else if (__isset.iOSRateGameURL1 && !(iOSRateGameURL1 == rhs.iOSRateGameURL1))
      return false;
    if (__isset.iOSRateGameURL2 != rhs.__isset.iOSRateGameURL2)
      return false;
    else if (__isset.iOSRateGameURL2 && !(iOSRateGameURL2 == rhs.iOSRateGameURL2))
      return false;
    if (__isset.androidRateGameURL1 != rhs.__isset.androidRateGameURL1)
      return false;
    else if (__isset.androidRateGameURL1 && !(androidRateGameURL1 == rhs.androidRateGameURL1))
      return false;
    if (__isset.androidRateGameURL2 != rhs.__isset.androidRateGameURL2)
      return false;
    else if (__isset.androidRateGameURL2 && !(androidRateGameURL2 == rhs.androidRateGameURL2))
      return false;
    if (__isset.feedbackURL != rhs.__isset.feedbackURL)
      return false;
    else if (__isset.feedbackURL && !(feedbackURL == rhs.feedbackURL))
      return false;
    if (__isset.supportURL != rhs.__isset.supportURL)
      return false;
    else if (__isset.supportURL && !(supportURL == rhs.supportURL))
      return false;
    if (__isset.analyticsSchemaId != rhs.__isset.analyticsSchemaId)
      return false;
    else if (__isset.analyticsSchemaId && !(analyticsSchemaId == rhs.analyticsSchemaId))
      return false;
    if (!(centerKingdomEntityId == rhs.centerKingdomEntityId))
      return false;
    if (__isset.watchAdCooldown != rhs.__isset.watchAdCooldown)
      return false;
    else if (__isset.watchAdCooldown && !(watchAdCooldown == rhs.watchAdCooldown))
      return false;
    if (__isset.iOSReRateGameBuildNumber != rhs.__isset.iOSReRateGameBuildNumber)
      return false;
    else if (__isset.iOSReRateGameBuildNumber && !(iOSReRateGameBuildNumber == rhs.iOSReRateGameBuildNumber))
      return false;
    if (__isset.androidReRateGameBuildNumber != rhs.__isset.androidReRateGameBuildNumber)
      return false;
    else if (__isset.androidReRateGameBuildNumber && !(androidReRateGameBuildNumber == rhs.androidReRateGameBuildNumber))
      return false;
    if (__isset.gachaFtueGachaGroupId != rhs.__isset.gachaFtueGachaGroupId)
      return false;
    else if (__isset.gachaFtueGachaGroupId && !(gachaFtueGachaGroupId == rhs.gachaFtueGachaGroupId))
      return false;
    if (__isset.gachaFtueRareGachaGroupId != rhs.__isset.gachaFtueRareGachaGroupId)
      return false;
    else if (__isset.gachaFtueRareGachaGroupId && !(gachaFtueRareGachaGroupId == rhs.gachaFtueRareGachaGroupId))
      return false;
    if (__isset.recipeIslandFirstRareCakebox != rhs.__isset.recipeIslandFirstRareCakebox)
      return false;
    else if (__isset.recipeIslandFirstRareCakebox && !(recipeIslandFirstRareCakebox == rhs.recipeIslandFirstRareCakebox))
      return false;
    if (__isset.gachaFtueGachaOfferId != rhs.__isset.gachaFtueGachaOfferId)
      return false;
    else if (__isset.gachaFtueGachaOfferId && !(gachaFtueGachaOfferId == rhs.gachaFtueGachaOfferId))
      return false;
    if (__isset.gachaFtueRareGachaOfferId != rhs.__isset.gachaFtueRareGachaOfferId)
      return false;
    else if (__isset.gachaFtueRareGachaOfferId && !(gachaFtueRareGachaOfferId == rhs.gachaFtueRareGachaOfferId))
      return false;
    if (__isset.socialMenuMinRank != rhs.__isset.socialMenuMinRank)
      return false;
    else if (__isset.socialMenuMinRank && !(socialMenuMinRank == rhs.socialMenuMinRank))
      return false;
    if (__isset.gachaStoreMinRank != rhs.__isset.gachaStoreMinRank)
      return false;
    else if (__isset.gachaStoreMinRank && !(gachaStoreMinRank == rhs.gachaStoreMinRank))
      return false;
    if (__isset.gachaStorePopoverMinLevel != rhs.__isset.gachaStorePopoverMinLevel)
      return false;
    else if (__isset.gachaStorePopoverMinLevel && !(gachaStorePopoverMinLevel == rhs.gachaStorePopoverMinLevel))
      return false;
    if (__isset.inboxPopoverMinRank != rhs.__isset.inboxPopoverMinRank)
      return false;
    else if (__isset.inboxPopoverMinRank && !(inboxPopoverMinRank == rhs.inboxPopoverMinRank))
      return false;
    if (__isset.gachaBannerDuration != rhs.__isset.gachaBannerDuration)
      return false;
    else if (__isset.gachaBannerDuration && !(gachaBannerDuration == rhs.gachaBannerDuration))
      return false;
    if (__isset.placedBuildingStatId != rhs.__isset.placedBuildingStatId)
      return false;
    else if (__isset.placedBuildingStatId && !(placedBuildingStatId == rhs.placedBuildingStatId))
      return false;
    if (__isset.spendGemsFTUETriggerOnObjectiveId != rhs.__isset.spendGemsFTUETriggerOnObjectiveId)
      return false;
    else if (__isset.spendGemsFTUETriggerOnObjectiveId && !(spendGemsFTUETriggerOnObjectiveId == rhs.spendGemsFTUETriggerOnObjectiveId))
      return false;
    if (__isset.lockLinearObjectiveProgressionUntilCompleteObjectiveId != rhs.__isset.lockLinearObjectiveProgressionUntilCompleteObjectiveId)
      return false;
    else if (__isset.lockLinearObjectiveProgressionUntilCompleteObjectiveId && !(lockLinearObjectiveProgressionUntilCompleteObjectiveId == rhs.lockLinearObjectiveProgressionUntilCompleteObjectiveId))
      return false;
    if (__isset.playerDisplayMaxLength != rhs.__isset.playerDisplayMaxLength)
      return false;
    else if (__isset.playerDisplayMaxLength && !(playerDisplayMaxLength == rhs.playerDisplayMaxLength))
      return false;
    if (__isset.playerDisplayAllowedCharacters != rhs.__isset.playerDisplayAllowedCharacters)
      return false;
    else if (__isset.playerDisplayAllowedCharacters && !(playerDisplayAllowedCharacters == rhs.playerDisplayAllowedCharacters))
      return false;
    if (__isset.autoPopulatePlayerName != rhs.__isset.autoPopulatePlayerName)
      return false;
    else if (__isset.autoPopulatePlayerName && !(autoPopulatePlayerName == rhs.autoPopulatePlayerName))
      return false;
    if (__isset.disableGuild != rhs.__isset.disableGuild)
      return false;
    else if (__isset.disableGuild && !(disableGuild == rhs.disableGuild))
      return false;
    if (__isset.placedBusinessScoreStatId != rhs.__isset.placedBusinessScoreStatId)
      return false;
    else if (__isset.placedBusinessScoreStatId && !(placedBusinessScoreStatId == rhs.placedBusinessScoreStatId))
      return false;
    if (__isset.earnedCurrencyBonus != rhs.__isset.earnedCurrencyBonus)
      return false;
    else if (__isset.earnedCurrencyBonus && !(earnedCurrencyBonus == rhs.earnedCurrencyBonus))
      return false;
    if (__isset.keyGearGetMoreText != rhs.__isset.keyGearGetMoreText)
      return false;
    else if (__isset.keyGearGetMoreText && !(keyGearGetMoreText == rhs.keyGearGetMoreText))
      return false;
    if (__isset.disableEvolveBullet != rhs.__isset.disableEvolveBullet)
      return false;
    else if (__isset.disableEvolveBullet && !(disableEvolveBullet == rhs.disableEvolveBullet))
      return false;
    if (!(generalStoreId == rhs.generalStoreId))
      return false;
    if (__isset.additionalNpcsWalkingOnKingdom != rhs.__isset.additionalNpcsWalkingOnKingdom)
      return false;
    else if (__isset.additionalNpcsWalkingOnKingdom && !(additionalNpcsWalkingOnKingdom == rhs.additionalNpcsWalkingOnKingdom))
      return false;
    return true;
  }
  bool operator != (const Settings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Settings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Settings &a, Settings &b);

std::ostream& operator<<(std::ostream& out, const Settings& obj);


class PollSettings : public virtual ::apache::thrift::TBase {
 public:

  PollSettings(const PollSettings&);
  PollSettings& operator=(const PollSettings&);
  PollSettings() : kingomIntervalSeconds(0), eventIntervalSeconds(0), gachaIntervalSeconds(0), guildIntervalSeconds(0), guildChatIntervalSeconds(0), inboxIntervalSeconds(0), questMenuIntervalSeconds(0) {
  }

  virtual ~PollSettings() throw();
  int32_t kingomIntervalSeconds;
  int32_t eventIntervalSeconds;
  int32_t gachaIntervalSeconds;
  int32_t guildIntervalSeconds;
  int32_t guildChatIntervalSeconds;
  int32_t inboxIntervalSeconds;
  int32_t questMenuIntervalSeconds;

  void __set_kingomIntervalSeconds(const int32_t val);

  void __set_eventIntervalSeconds(const int32_t val);

  void __set_gachaIntervalSeconds(const int32_t val);

  void __set_guildIntervalSeconds(const int32_t val);

  void __set_guildChatIntervalSeconds(const int32_t val);

  void __set_inboxIntervalSeconds(const int32_t val);

  void __set_questMenuIntervalSeconds(const int32_t val);

  bool operator == (const PollSettings & rhs) const
  {
    if (!(kingomIntervalSeconds == rhs.kingomIntervalSeconds))
      return false;
    if (!(eventIntervalSeconds == rhs.eventIntervalSeconds))
      return false;
    if (!(gachaIntervalSeconds == rhs.gachaIntervalSeconds))
      return false;
    if (!(guildIntervalSeconds == rhs.guildIntervalSeconds))
      return false;
    if (!(guildChatIntervalSeconds == rhs.guildChatIntervalSeconds))
      return false;
    if (!(inboxIntervalSeconds == rhs.inboxIntervalSeconds))
      return false;
    if (!(questMenuIntervalSeconds == rhs.questMenuIntervalSeconds))
      return false;
    return true;
  }
  bool operator != (const PollSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PollSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PollSettings &a, PollSettings &b);

std::ostream& operator<<(std::ostream& out, const PollSettings& obj);

typedef struct _HappinessSettings__isset {
  _HappinessSettings__isset() : happinessSuperHappy(false), happinessMediumHappy(false), happinessNormal(false) {}
  bool happinessSuperHappy :1;
  bool happinessMediumHappy :1;
  bool happinessNormal :1;
} _HappinessSettings__isset;

class HappinessSettings : public virtual ::apache::thrift::TBase {
 public:

  HappinessSettings(const HappinessSettings&);
  HappinessSettings& operator=(const HappinessSettings&);
  HappinessSettings() : happinessSuperHappy(0), happinessMediumHappy(0), happinessNormal(0) {
  }

  virtual ~HappinessSettings() throw();
  int32_t happinessSuperHappy;
  int32_t happinessMediumHappy;
  int32_t happinessNormal;

  _HappinessSettings__isset __isset;

  void __set_happinessSuperHappy(const int32_t val);

  void __set_happinessMediumHappy(const int32_t val);

  void __set_happinessNormal(const int32_t val);

  bool operator == (const HappinessSettings & rhs) const
  {
    if (__isset.happinessSuperHappy != rhs.__isset.happinessSuperHappy)
      return false;
    else if (__isset.happinessSuperHappy && !(happinessSuperHappy == rhs.happinessSuperHappy))
      return false;
    if (__isset.happinessMediumHappy != rhs.__isset.happinessMediumHappy)
      return false;
    else if (__isset.happinessMediumHappy && !(happinessMediumHappy == rhs.happinessMediumHappy))
      return false;
    if (__isset.happinessNormal != rhs.__isset.happinessNormal)
      return false;
    else if (__isset.happinessNormal && !(happinessNormal == rhs.happinessNormal))
      return false;
    return true;
  }
  bool operator != (const HappinessSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HappinessSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HappinessSettings &a, HappinessSettings &b);

std::ostream& operator<<(std::ostream& out, const HappinessSettings& obj);


class LevelBlob : public virtual ::apache::thrift::TBase {
 public:

  LevelBlob(const LevelBlob&);
  LevelBlob& operator=(const LevelBlob&);
  LevelBlob() : blobId() {
  }

  virtual ~LevelBlob() throw();
  BlobID blobId;
  std::map<std::string, std::string>  keyValuePairs;

  void __set_blobId(const BlobID& val);

  void __set_keyValuePairs(const std::map<std::string, std::string> & val);

  bool operator == (const LevelBlob & rhs) const
  {
    if (!(blobId == rhs.blobId))
      return false;
    if (!(keyValuePairs == rhs.keyValuePairs))
      return false;
    return true;
  }
  bool operator != (const LevelBlob &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LevelBlob & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LevelBlob &a, LevelBlob &b);

std::ostream& operator<<(std::ostream& out, const LevelBlob& obj);


class ScreenNameMapping : public virtual ::apache::thrift::TBase {
 public:

  ScreenNameMapping(const ScreenNameMapping&);
  ScreenNameMapping& operator=(const ScreenNameMapping&);
  ScreenNameMapping() : luaFilenameOrCustomName(), analyticsScreenName() {
  }

  virtual ~ScreenNameMapping() throw();
  std::string luaFilenameOrCustomName;
  std::string analyticsScreenName;

  void __set_luaFilenameOrCustomName(const std::string& val);

  void __set_analyticsScreenName(const std::string& val);

  bool operator == (const ScreenNameMapping & rhs) const
  {
    if (!(luaFilenameOrCustomName == rhs.luaFilenameOrCustomName))
      return false;
    if (!(analyticsScreenName == rhs.analyticsScreenName))
      return false;
    return true;
  }
  bool operator != (const ScreenNameMapping &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScreenNameMapping & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScreenNameMapping &a, ScreenNameMapping &b);

std::ostream& operator<<(std::ostream& out, const ScreenNameMapping& obj);

typedef struct _Avatar__isset {
  _Avatar__isset() : eventMapImage(false) {}
  bool eventMapImage :1;
} _Avatar__isset;

class Avatar : public virtual ::apache::thrift::TBase {
 public:

  Avatar(const Avatar&);
  Avatar& operator=(const Avatar&);
  Avatar() : avatarId(), npcId(), emotionId(), index(0), eventMapImage() {
  }

  virtual ~Avatar() throw();
  AvatarID avatarId;
  NpcID npcId;
  std::string emotionId;
  int32_t index;
  std::string eventMapImage;

  _Avatar__isset __isset;

  void __set_avatarId(const AvatarID& val);

  void __set_npcId(const NpcID& val);

  void __set_emotionId(const std::string& val);

  void __set_index(const int32_t val);

  void __set_eventMapImage(const std::string& val);

  bool operator == (const Avatar & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(npcId == rhs.npcId))
      return false;
    if (!(emotionId == rhs.emotionId))
      return false;
    if (!(index == rhs.index))
      return false;
    if (__isset.eventMapImage != rhs.__isset.eventMapImage)
      return false;
    else if (__isset.eventMapImage && !(eventMapImage == rhs.eventMapImage))
      return false;
    return true;
  }
  bool operator != (const Avatar &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Avatar & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Avatar &a, Avatar &b);

std::ostream& operator<<(std::ostream& out, const Avatar& obj);

typedef struct _AnalyticsEvent__isset {
  _AnalyticsEvent__isset() : payload(false) {}
  bool payload :1;
} _AnalyticsEvent__isset;

class AnalyticsEvent : public virtual ::apache::thrift::TBase {
 public:

  AnalyticsEvent(const AnalyticsEvent&);
  AnalyticsEvent& operator=(const AnalyticsEvent&);
  AnalyticsEvent() : analyticsEventId(), category(), label(), value(0) {
  }

  virtual ~AnalyticsEvent() throw();
  AnalyticsEventID analyticsEventId;
  std::string category;
  std::string label;
  int32_t value;
  std::vector<std::string>  payload;

  _AnalyticsEvent__isset __isset;

  void __set_analyticsEventId(const AnalyticsEventID& val);

  void __set_category(const std::string& val);

  void __set_label(const std::string& val);

  void __set_value(const int32_t val);

  void __set_payload(const std::vector<std::string> & val);

  bool operator == (const AnalyticsEvent & rhs) const
  {
    if (!(analyticsEventId == rhs.analyticsEventId))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(label == rhs.label))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const AnalyticsEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnalyticsEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AnalyticsEvent &a, AnalyticsEvent &b);

std::ostream& operator<<(std::ostream& out, const AnalyticsEvent& obj);

typedef struct _AnalyticsDimension__isset {
  _AnalyticsDimension__isset() : shortName(false), pooleSchemaKey(false) {}
  bool shortName :1;
  bool pooleSchemaKey :1;
} _AnalyticsDimension__isset;

class AnalyticsDimension : public virtual ::apache::thrift::TBase {
 public:

  AnalyticsDimension(const AnalyticsDimension&);
  AnalyticsDimension& operator=(const AnalyticsDimension&);
  AnalyticsDimension() : analyticsDimensionId(), shortName(), googleDimensionIndex(0), pooleSchemaKey() {
  }

  virtual ~AnalyticsDimension() throw();
  AnalyticsDimensionID analyticsDimensionId;
  std::string shortName;
  int32_t googleDimensionIndex;
  std::string pooleSchemaKey;

  _AnalyticsDimension__isset __isset;

  void __set_analyticsDimensionId(const AnalyticsDimensionID& val);

  void __set_shortName(const std::string& val);

  void __set_googleDimensionIndex(const int32_t val);

  void __set_pooleSchemaKey(const std::string& val);

  bool operator == (const AnalyticsDimension & rhs) const
  {
    if (!(analyticsDimensionId == rhs.analyticsDimensionId))
      return false;
    if (__isset.shortName != rhs.__isset.shortName)
      return false;
    else if (__isset.shortName && !(shortName == rhs.shortName))
      return false;
    if (!(googleDimensionIndex == rhs.googleDimensionIndex))
      return false;
    if (__isset.pooleSchemaKey != rhs.__isset.pooleSchemaKey)
      return false;
    else if (__isset.pooleSchemaKey && !(pooleSchemaKey == rhs.pooleSchemaKey))
      return false;
    return true;
  }
  bool operator != (const AnalyticsDimension &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnalyticsDimension & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AnalyticsDimension &a, AnalyticsDimension &b);

std::ostream& operator<<(std::ostream& out, const AnalyticsDimension& obj);


class AppBoyEvent : public virtual ::apache::thrift::TBase {
 public:

  AppBoyEvent(const AppBoyEvent&);
  AppBoyEvent& operator=(const AppBoyEvent&);
  AppBoyEvent() : analyticsEventId() {
  }

  virtual ~AppBoyEvent() throw();
  AnalyticsEventID analyticsEventId;

  void __set_analyticsEventId(const AnalyticsEventID& val);

  bool operator == (const AppBoyEvent & rhs) const
  {
    if (!(analyticsEventId == rhs.analyticsEventId))
      return false;
    return true;
  }
  bool operator != (const AppBoyEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppBoyEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppBoyEvent &a, AppBoyEvent &b);

std::ostream& operator<<(std::ostream& out, const AppBoyEvent& obj);


class ApsalarEvent : public virtual ::apache::thrift::TBase {
 public:

  ApsalarEvent(const ApsalarEvent&);
  ApsalarEvent& operator=(const ApsalarEvent&);
  ApsalarEvent() : analyticsEventId() {
  }

  virtual ~ApsalarEvent() throw();
  AnalyticsEventID analyticsEventId;

  void __set_analyticsEventId(const AnalyticsEventID& val);

  bool operator == (const ApsalarEvent & rhs) const
  {
    if (!(analyticsEventId == rhs.analyticsEventId))
      return false;
    return true;
  }
  bool operator != (const ApsalarEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApsalarEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApsalarEvent &a, ApsalarEvent &b);

std::ostream& operator<<(std::ostream& out, const ApsalarEvent& obj);

typedef struct _PopupTemplate__isset {
  _PopupTemplate__isset() : background(false), overlay(false), buttonImages(false), buttonTexts(false), buttonActions(false), buttonParameters(false), bundleId(false), avatarId(false), inboxHideRewards(false), inboxMessageIcon(false), luaFile(false), showEventTimer(false), backgroundLandscape(false), overlayLandscape(false) {}
  bool background :1;
  bool overlay :1;
  bool buttonImages :1;
  bool buttonTexts :1;
  bool buttonActions :1;
  bool buttonParameters :1;
  bool bundleId :1;
  bool avatarId :1;
  bool inboxHideRewards :1;
  bool inboxMessageIcon :1;
  bool luaFile :1;
  bool showEventTimer :1;
  bool backgroundLandscape :1;
  bool overlayLandscape :1;
} _PopupTemplate__isset;

class PopupTemplate : public virtual ::apache::thrift::TBase {
 public:

  PopupTemplate(const PopupTemplate&);
  PopupTemplate& operator=(const PopupTemplate&);
  PopupTemplate() : templateId(), background(), overlay(), bundleId(), avatarId(), inboxHideRewards(0), inboxMessageIcon(), luaFile(), showEventTimer(0), backgroundLandscape(), overlayLandscape() {
  }

  virtual ~PopupTemplate() throw();
  TemplateID templateId;
  std::string background;
  std::string overlay;
  std::vector<std::string>  buttonImages;
  std::vector<std::string>  buttonTexts;
  std::vector<MessageButtonAction::type>  buttonActions;
  std::vector<std::string>  buttonParameters;
  std::string bundleId;
  std::string avatarId;
  bool inboxHideRewards;
  AssetID inboxMessageIcon;
  std::string luaFile;
  bool showEventTimer;
  std::string backgroundLandscape;
  std::string overlayLandscape;

  _PopupTemplate__isset __isset;

  void __set_templateId(const TemplateID& val);

  void __set_background(const std::string& val);

  void __set_overlay(const std::string& val);

  void __set_buttonImages(const std::vector<std::string> & val);

  void __set_buttonTexts(const std::vector<std::string> & val);

  void __set_buttonActions(const std::vector<MessageButtonAction::type> & val);

  void __set_buttonParameters(const std::vector<std::string> & val);

  void __set_bundleId(const std::string& val);

  void __set_avatarId(const std::string& val);

  void __set_inboxHideRewards(const bool val);

  void __set_inboxMessageIcon(const AssetID& val);

  void __set_luaFile(const std::string& val);

  void __set_showEventTimer(const bool val);

  void __set_backgroundLandscape(const std::string& val);

  void __set_overlayLandscape(const std::string& val);

  bool operator == (const PopupTemplate & rhs) const
  {
    if (!(templateId == rhs.templateId))
      return false;
    if (__isset.background != rhs.__isset.background)
      return false;
    else if (__isset.background && !(background == rhs.background))
      return false;
    if (__isset.overlay != rhs.__isset.overlay)
      return false;
    else if (__isset.overlay && !(overlay == rhs.overlay))
      return false;
    if (__isset.buttonImages != rhs.__isset.buttonImages)
      return false;
    else if (__isset.buttonImages && !(buttonImages == rhs.buttonImages))
      return false;
    if (__isset.buttonTexts != rhs.__isset.buttonTexts)
      return false;
    else if (__isset.buttonTexts && !(buttonTexts == rhs.buttonTexts))
      return false;
    if (__isset.buttonActions != rhs.__isset.buttonActions)
      return false;
    else if (__isset.buttonActions && !(buttonActions == rhs.buttonActions))
      return false;
    if (__isset.buttonParameters != rhs.__isset.buttonParameters)
      return false;
    else if (__isset.buttonParameters && !(buttonParameters == rhs.buttonParameters))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.avatarId != rhs.__isset.avatarId)
      return false;
    else if (__isset.avatarId && !(avatarId == rhs.avatarId))
      return false;
    if (__isset.inboxHideRewards != rhs.__isset.inboxHideRewards)
      return false;
    else if (__isset.inboxHideRewards && !(inboxHideRewards == rhs.inboxHideRewards))
      return false;
    if (__isset.inboxMessageIcon != rhs.__isset.inboxMessageIcon)
      return false;
    else if (__isset.inboxMessageIcon && !(inboxMessageIcon == rhs.inboxMessageIcon))
      return false;
    if (__isset.luaFile != rhs.__isset.luaFile)
      return false;
    else if (__isset.luaFile && !(luaFile == rhs.luaFile))
      return false;
    if (__isset.showEventTimer != rhs.__isset.showEventTimer)
      return false;
    else if (__isset.showEventTimer && !(showEventTimer == rhs.showEventTimer))
      return false;
    if (__isset.backgroundLandscape != rhs.__isset.backgroundLandscape)
      return false;
    else if (__isset.backgroundLandscape && !(backgroundLandscape == rhs.backgroundLandscape))
      return false;
    if (__isset.overlayLandscape != rhs.__isset.overlayLandscape)
      return false;
    else if (__isset.overlayLandscape && !(overlayLandscape == rhs.overlayLandscape))
      return false;
    return true;
  }
  bool operator != (const PopupTemplate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PopupTemplate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PopupTemplate &a, PopupTemplate &b);

std::ostream& operator<<(std::ostream& out, const PopupTemplate& obj);


class DefaultTemplate : public virtual ::apache::thrift::TBase {
 public:

  DefaultTemplate(const DefaultTemplate&);
  DefaultTemplate& operator=(const DefaultTemplate&);
  DefaultTemplate() : popupTemplateType((PopupTemplateType::type)0), templateId() {
  }

  virtual ~DefaultTemplate() throw();
  PopupTemplateType::type popupTemplateType;
  TemplateID templateId;

  void __set_popupTemplateType(const PopupTemplateType::type val);

  void __set_templateId(const TemplateID& val);

  bool operator == (const DefaultTemplate & rhs) const
  {
    if (!(popupTemplateType == rhs.popupTemplateType))
      return false;
    if (!(templateId == rhs.templateId))
      return false;
    return true;
  }
  bool operator != (const DefaultTemplate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DefaultTemplate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DefaultTemplate &a, DefaultTemplate &b);

std::ostream& operator<<(std::ostream& out, const DefaultTemplate& obj);


class MessageTemplateModifier : public virtual ::apache::thrift::TBase {
 public:

  MessageTemplateModifier(const MessageTemplateModifier&);
  MessageTemplateModifier& operator=(const MessageTemplateModifier&);
  MessageTemplateModifier() : popupMessageId(), nodeName(), fieldName(), value() {
  }

  virtual ~MessageTemplateModifier() throw();
  PopupMessageID popupMessageId;
  std::string nodeName;
  std::string fieldName;
  std::string value;

  void __set_popupMessageId(const PopupMessageID& val);

  void __set_nodeName(const std::string& val);

  void __set_fieldName(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const MessageTemplateModifier & rhs) const
  {
    if (!(popupMessageId == rhs.popupMessageId))
      return false;
    if (!(nodeName == rhs.nodeName))
      return false;
    if (!(fieldName == rhs.fieldName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MessageTemplateModifier &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageTemplateModifier & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageTemplateModifier &a, MessageTemplateModifier &b);

std::ostream& operator<<(std::ostream& out, const MessageTemplateModifier& obj);

typedef struct _AdminMessage__isset {
  _AdminMessage__isset() : priority(false), openable(false), openTitle(false), openBody(false), autoOpen(false), giftCurrencyIds(false), giftCurrencyAmounts(false), startTimeOfDay(false), duration(false), enabled(false), minRank(false), templateId(false), oneTimeOnly(false), openCharacterImage(false), openBackground(false), openButtonAction(false), openButtonParameters(false), openOverlay(false), openButtonText(false), gachaOfferId(false), bundleId(false), giftMessageType(false) {}
  bool priority :1;
  bool openable :1;
  bool openTitle :1;
  bool openBody :1;
  bool autoOpen :1;
  bool giftCurrencyIds :1;
  bool giftCurrencyAmounts :1;
  bool startTimeOfDay :1;
  bool duration :1;
  bool enabled :1;
  bool minRank :1;
  bool templateId :1;
  bool oneTimeOnly :1;
  bool openCharacterImage :1;
  bool openBackground :1;
  bool openButtonAction :1;
  bool openButtonParameters :1;
  bool openOverlay :1;
  bool openButtonText :1;
  bool gachaOfferId :1;
  bool bundleId :1;
  bool giftMessageType :1;
} _AdminMessage__isset;

class AdminMessage : public virtual ::apache::thrift::TBase {
 public:

  AdminMessage(const AdminMessage&);
  AdminMessage& operator=(const AdminMessage&);
  AdminMessage() : adminMessageId(), priority(0), eventLockId(), title(), body(), openable(0), openTitle(), openBody(), autoOpen(0), startTimeOfDay(0), duration(0), enabled(0), minRank(0), templateId(), oneTimeOnly(0), characterId(), openCharacterImage(), openBackground(), openButtonAction((MessageButtonAction::type)0), openOverlay(), openButtonText(), gachaOfferId(), bundleId(), giftMessageType((GiftMessageType::type)0) {
  }

  virtual ~AdminMessage() throw();
  AdminMessageID adminMessageId;
  int32_t priority;
  EventLockID eventLockId;
  std::string title;
  std::string body;
  bool openable;
  std::string openTitle;
  std::string openBody;
  bool autoOpen;
  std::vector<CurrencyID>  giftCurrencyIds;
  std::vector<int32_t>  giftCurrencyAmounts;
  int32_t startTimeOfDay;
  int32_t duration;
  bool enabled;
  int32_t minRank;
  TemplateID templateId;
  bool oneTimeOnly;
  std::string characterId;
  std::string openCharacterImage;
  std::string openBackground;
  MessageButtonAction::type openButtonAction;
  std::vector<std::string>  openButtonParameters;
  std::string openOverlay;
  std::string openButtonText;
  GachaOfferID gachaOfferId;
  BundleID bundleId;
  GiftMessageType::type giftMessageType;

  _AdminMessage__isset __isset;

  void __set_adminMessageId(const AdminMessageID& val);

  void __set_priority(const int32_t val);

  void __set_eventLockId(const EventLockID& val);

  void __set_title(const std::string& val);

  void __set_body(const std::string& val);

  void __set_openable(const bool val);

  void __set_openTitle(const std::string& val);

  void __set_openBody(const std::string& val);

  void __set_autoOpen(const bool val);

  void __set_giftCurrencyIds(const std::vector<CurrencyID> & val);

  void __set_giftCurrencyAmounts(const std::vector<int32_t> & val);

  void __set_startTimeOfDay(const int32_t val);

  void __set_duration(const int32_t val);

  void __set_enabled(const bool val);

  void __set_minRank(const int32_t val);

  void __set_templateId(const TemplateID& val);

  void __set_oneTimeOnly(const bool val);

  void __set_characterId(const std::string& val);

  void __set_openCharacterImage(const std::string& val);

  void __set_openBackground(const std::string& val);

  void __set_openButtonAction(const MessageButtonAction::type val);

  void __set_openButtonParameters(const std::vector<std::string> & val);

  void __set_openOverlay(const std::string& val);

  void __set_openButtonText(const std::string& val);

  void __set_gachaOfferId(const GachaOfferID& val);

  void __set_bundleId(const BundleID& val);

  void __set_giftMessageType(const GiftMessageType::type val);

  bool operator == (const AdminMessage & rhs) const
  {
    if (!(adminMessageId == rhs.adminMessageId))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    if (!(eventLockId == rhs.eventLockId))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(body == rhs.body))
      return false;
    if (__isset.openable != rhs.__isset.openable)
      return false;
    else if (__isset.openable && !(openable == rhs.openable))
      return false;
    if (__isset.openTitle != rhs.__isset.openTitle)
      return false;
    else if (__isset.openTitle && !(openTitle == rhs.openTitle))
      return false;
    if (__isset.openBody != rhs.__isset.openBody)
      return false;
    else if (__isset.openBody && !(openBody == rhs.openBody))
      return false;
    if (__isset.autoOpen != rhs.__isset.autoOpen)
      return false;
    else if (__isset.autoOpen && !(autoOpen == rhs.autoOpen))
      return false;
    if (__isset.giftCurrencyIds != rhs.__isset.giftCurrencyIds)
      return false;
    else if (__isset.giftCurrencyIds && !(giftCurrencyIds == rhs.giftCurrencyIds))
      return false;
    if (__isset.giftCurrencyAmounts != rhs.__isset.giftCurrencyAmounts)
      return false;
    else if (__isset.giftCurrencyAmounts && !(giftCurrencyAmounts == rhs.giftCurrencyAmounts))
      return false;
    if (__isset.startTimeOfDay != rhs.__isset.startTimeOfDay)
      return false;
    else if (__isset.startTimeOfDay && !(startTimeOfDay == rhs.startTimeOfDay))
      return false;
    if (__isset.duration != rhs.__isset.duration)
      return false;
    else if (__isset.duration && !(duration == rhs.duration))
      return false;
    if (__isset.enabled != rhs.__isset.enabled)
      return false;
    else if (__isset.enabled && !(enabled == rhs.enabled))
      return false;
    if (__isset.minRank != rhs.__isset.minRank)
      return false;
    else if (__isset.minRank && !(minRank == rhs.minRank))
      return false;
    if (__isset.templateId != rhs.__isset.templateId)
      return false;
    else if (__isset.templateId && !(templateId == rhs.templateId))
      return false;
    if (__isset.oneTimeOnly != rhs.__isset.oneTimeOnly)
      return false;
    else if (__isset.oneTimeOnly && !(oneTimeOnly == rhs.oneTimeOnly))
      return false;
    if (!(characterId == rhs.characterId))
      return false;
    if (__isset.openCharacterImage != rhs.__isset.openCharacterImage)
      return false;
    else if (__isset.openCharacterImage && !(openCharacterImage == rhs.openCharacterImage))
      return false;
    if (__isset.openBackground != rhs.__isset.openBackground)
      return false;
    else if (__isset.openBackground && !(openBackground == rhs.openBackground))
      return false;
    if (__isset.openButtonAction != rhs.__isset.openButtonAction)
      return false;
    else if (__isset.openButtonAction && !(openButtonAction == rhs.openButtonAction))
      return false;
    if (__isset.openButtonParameters != rhs.__isset.openButtonParameters)
      return false;
    else if (__isset.openButtonParameters && !(openButtonParameters == rhs.openButtonParameters))
      return false;
    if (__isset.openOverlay != rhs.__isset.openOverlay)
      return false;
    else if (__isset.openOverlay && !(openOverlay == rhs.openOverlay))
      return false;
    if (__isset.openButtonText != rhs.__isset.openButtonText)
      return false;
    else if (__isset.openButtonText && !(openButtonText == rhs.openButtonText))
      return false;
    if (__isset.gachaOfferId != rhs.__isset.gachaOfferId)
      return false;
    else if (__isset.gachaOfferId && !(gachaOfferId == rhs.gachaOfferId))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.giftMessageType != rhs.__isset.giftMessageType)
      return false;
    else if (__isset.giftMessageType && !(giftMessageType == rhs.giftMessageType))
      return false;
    return true;
  }
  bool operator != (const AdminMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AdminMessage &a, AdminMessage &b);

std::ostream& operator<<(std::ostream& out, const AdminMessage& obj);

typedef struct _Npc__isset {
  _Npc__isset() : eyesLidBodyOffsetX(false), eyesLidBodyOffsetY(false), eyesLidLargeOffsetX(false), eyesLidLargeOffsetY(false), name(false), kingdomAnimation(false), kingdomAnimationFile(false), kingdomAnimationFile2(false), bigImage(false) {}
  bool eyesLidBodyOffsetX :1;
  bool eyesLidBodyOffsetY :1;
  bool eyesLidLargeOffsetX :1;
  bool eyesLidLargeOffsetY :1;
  bool name :1;
  bool kingdomAnimation :1;
  bool kingdomAnimationFile :1;
  bool kingdomAnimationFile2 :1;
  bool bigImage :1;
} _Npc__isset;

class Npc : public virtual ::apache::thrift::TBase {
 public:

  Npc(const Npc&);
  Npc& operator=(const Npc&);
  Npc() : npcId(), eyesLidBodyOffsetX(0), eyesLidBodyOffsetY(0), eyesLidLargeOffsetX(0), eyesLidLargeOffsetY(0), name(), kingdomAnimation(), kingdomAnimationFile(), kingdomAnimationFile2(), bigImage() {
  }

  virtual ~Npc() throw();
  NpcID npcId;
  int32_t eyesLidBodyOffsetX;
  int32_t eyesLidBodyOffsetY;
  int32_t eyesLidLargeOffsetX;
  int32_t eyesLidLargeOffsetY;
  std::string name;
  std::string kingdomAnimation;
  std::string kingdomAnimationFile;
  std::string kingdomAnimationFile2;
  std::string bigImage;

  _Npc__isset __isset;

  void __set_npcId(const NpcID& val);

  void __set_eyesLidBodyOffsetX(const int32_t val);

  void __set_eyesLidBodyOffsetY(const int32_t val);

  void __set_eyesLidLargeOffsetX(const int32_t val);

  void __set_eyesLidLargeOffsetY(const int32_t val);

  void __set_name(const std::string& val);

  void __set_kingdomAnimation(const std::string& val);

  void __set_kingdomAnimationFile(const std::string& val);

  void __set_kingdomAnimationFile2(const std::string& val);

  void __set_bigImage(const std::string& val);

  bool operator == (const Npc & rhs) const
  {
    if (!(npcId == rhs.npcId))
      return false;
    if (__isset.eyesLidBodyOffsetX != rhs.__isset.eyesLidBodyOffsetX)
      return false;
    else if (__isset.eyesLidBodyOffsetX && !(eyesLidBodyOffsetX == rhs.eyesLidBodyOffsetX))
      return false;
    if (__isset.eyesLidBodyOffsetY != rhs.__isset.eyesLidBodyOffsetY)
      return false;
    else if (__isset.eyesLidBodyOffsetY && !(eyesLidBodyOffsetY == rhs.eyesLidBodyOffsetY))
      return false;
    if (__isset.eyesLidLargeOffsetX != rhs.__isset.eyesLidLargeOffsetX)
      return false;
    else if (__isset.eyesLidLargeOffsetX && !(eyesLidLargeOffsetX == rhs.eyesLidLargeOffsetX))
      return false;
    if (__isset.eyesLidLargeOffsetY != rhs.__isset.eyesLidLargeOffsetY)
      return false;
    else if (__isset.eyesLidLargeOffsetY && !(eyesLidLargeOffsetY == rhs.eyesLidLargeOffsetY))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.kingdomAnimation != rhs.__isset.kingdomAnimation)
      return false;
    else if (__isset.kingdomAnimation && !(kingdomAnimation == rhs.kingdomAnimation))
      return false;
    if (__isset.kingdomAnimationFile != rhs.__isset.kingdomAnimationFile)
      return false;
    else if (__isset.kingdomAnimationFile && !(kingdomAnimationFile == rhs.kingdomAnimationFile))
      return false;
    if (__isset.kingdomAnimationFile2 != rhs.__isset.kingdomAnimationFile2)
      return false;
    else if (__isset.kingdomAnimationFile2 && !(kingdomAnimationFile2 == rhs.kingdomAnimationFile2))
      return false;
    if (__isset.bigImage != rhs.__isset.bigImage)
      return false;
    else if (__isset.bigImage && !(bigImage == rhs.bigImage))
      return false;
    return true;
  }
  bool operator != (const Npc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Npc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Npc &a, Npc &b);

std::ostream& operator<<(std::ostream& out, const Npc& obj);


class PurchasableOffer : public virtual ::apache::thrift::TBase {
 public:

  PurchasableOffer(const PurchasableOffer&);
  PurchasableOffer& operator=(const PurchasableOffer&);
  PurchasableOffer() : offerType((PurchasableOfferType::type)0), offerId() {
  }

  virtual ~PurchasableOffer() throw();
  PurchasableOfferType::type offerType;
  std::string offerId;

  void __set_offerType(const PurchasableOfferType::type val);

  void __set_offerId(const std::string& val);

  bool operator == (const PurchasableOffer & rhs) const
  {
    if (!(offerType == rhs.offerType))
      return false;
    if (!(offerId == rhs.offerId))
      return false;
    return true;
  }
  bool operator != (const PurchasableOffer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PurchasableOffer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PurchasableOffer &a, PurchasableOffer &b);

std::ostream& operator<<(std::ostream& out, const PurchasableOffer& obj);

typedef struct _IAPProduct__isset {
  _IAPProduct__isset() : offer(false) {}
  bool offer :1;
} _IAPProduct__isset;

class IAPProduct : public virtual ::apache::thrift::TBase {
 public:

  IAPProduct(const IAPProduct&);
  IAPProduct& operator=(const IAPProduct&);
  IAPProduct() : iapProductId(), appleProductId(), googleProductId() {
  }

  virtual ~IAPProduct() throw();
  IAPProductID iapProductId;
  AppleProductID appleProductId;
  GoogleProductID googleProductId;
  PurchasableOffer offer;

  _IAPProduct__isset __isset;

  void __set_iapProductId(const IAPProductID& val);

  void __set_appleProductId(const AppleProductID& val);

  void __set_googleProductId(const GoogleProductID& val);

  void __set_offer(const PurchasableOffer& val);

  bool operator == (const IAPProduct & rhs) const
  {
    if (!(iapProductId == rhs.iapProductId))
      return false;
    if (!(appleProductId == rhs.appleProductId))
      return false;
    if (!(googleProductId == rhs.googleProductId))
      return false;
    if (__isset.offer != rhs.__isset.offer)
      return false;
    else if (__isset.offer && !(offer == rhs.offer))
      return false;
    return true;
  }
  bool operator != (const IAPProduct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IAPProduct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IAPProduct &a, IAPProduct &b);

std::ostream& operator<<(std::ostream& out, const IAPProduct& obj);

typedef struct _CardOffer__isset {
  _CardOffer__isset() : displayRewardsReceived(false), showGuildRank(false), hideGuildRank(false), unlockGuildRank(false), offerBackgroundImage(false), cardImage(false), productIcon(false), ribbonImage(false), ribbonText(false), titleText(false), bodyText(false) {}
  bool displayRewardsReceived :1;
  bool showGuildRank :1;
  bool hideGuildRank :1;
  bool unlockGuildRank :1;
  bool offerBackgroundImage :1;
  bool cardImage :1;
  bool productIcon :1;
  bool ribbonImage :1;
  bool ribbonText :1;
  bool titleText :1;
  bool bodyText :1;
} _CardOffer__isset;

class CardOffer : public virtual ::apache::thrift::TBase {
 public:

  CardOffer(const CardOffer&);
  CardOffer& operator=(const CardOffer&);
  CardOffer() : cardOfferId(), currencyId(), currencyCost(0), unlockCardOfferId(), maxInventory(0), doesNotRestock(0), displayRewardsReceived(0), showRank(0), hideRank(0), unlockRank(0), showGuildRank(0), hideGuildRank(0), unlockGuildRank(0), productType((LootItemType::type)0), productId(), productAmount(0), iapProductId(), offerBackgroundImage(), cardImage(), productIcon(), ribbonImage() {
  }

  virtual ~CardOffer() throw();
  CardOfferID cardOfferId;
  CurrencyID currencyId;
  int32_t currencyCost;
  CardOfferID unlockCardOfferId;
  int32_t maxInventory;
  bool doesNotRestock;
  LocalizedString name;
  LocalizedString description;
  bool displayRewardsReceived;
  int32_t showRank;
  int32_t hideRank;
  int32_t unlockRank;
  int32_t showGuildRank;
  int32_t hideGuildRank;
  int32_t unlockGuildRank;
  LootItemType::type productType;
  std::string productId;
  int32_t productAmount;
  IAPProductID iapProductId;
  std::string offerBackgroundImage;
  std::string cardImage;
  std::string productIcon;
  std::string ribbonImage;
  LocalizedString ribbonText;
  LocalizedString titleText;
  LocalizedString bodyText;

  _CardOffer__isset __isset;

  void __set_cardOfferId(const CardOfferID& val);

  void __set_currencyId(const CurrencyID& val);

  void __set_currencyCost(const int32_t val);

  void __set_unlockCardOfferId(const CardOfferID& val);

  void __set_maxInventory(const int32_t val);

  void __set_doesNotRestock(const bool val);

  void __set_name(const LocalizedString& val);

  void __set_description(const LocalizedString& val);

  void __set_displayRewardsReceived(const bool val);

  void __set_showRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_showGuildRank(const int32_t val);

  void __set_hideGuildRank(const int32_t val);

  void __set_unlockGuildRank(const int32_t val);

  void __set_productType(const LootItemType::type val);

  void __set_productId(const std::string& val);

  void __set_productAmount(const int32_t val);

  void __set_iapProductId(const IAPProductID& val);

  void __set_offerBackgroundImage(const std::string& val);

  void __set_cardImage(const std::string& val);

  void __set_productIcon(const std::string& val);

  void __set_ribbonImage(const std::string& val);

  void __set_ribbonText(const LocalizedString& val);

  void __set_titleText(const LocalizedString& val);

  void __set_bodyText(const LocalizedString& val);

  bool operator == (const CardOffer & rhs) const
  {
    if (!(cardOfferId == rhs.cardOfferId))
      return false;
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(currencyCost == rhs.currencyCost))
      return false;
    if (!(unlockCardOfferId == rhs.unlockCardOfferId))
      return false;
    if (!(maxInventory == rhs.maxInventory))
      return false;
    if (!(doesNotRestock == rhs.doesNotRestock))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(description == rhs.description))
      return false;
    if (__isset.displayRewardsReceived != rhs.__isset.displayRewardsReceived)
      return false;
    else if (__isset.displayRewardsReceived && !(displayRewardsReceived == rhs.displayRewardsReceived))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (!(unlockRank == rhs.unlockRank))
      return false;
    if (__isset.showGuildRank != rhs.__isset.showGuildRank)
      return false;
    else if (__isset.showGuildRank && !(showGuildRank == rhs.showGuildRank))
      return false;
    if (__isset.hideGuildRank != rhs.__isset.hideGuildRank)
      return false;
    else if (__isset.hideGuildRank && !(hideGuildRank == rhs.hideGuildRank))
      return false;
    if (__isset.unlockGuildRank != rhs.__isset.unlockGuildRank)
      return false;
    else if (__isset.unlockGuildRank && !(unlockGuildRank == rhs.unlockGuildRank))
      return false;
    if (!(productType == rhs.productType))
      return false;
    if (!(productId == rhs.productId))
      return false;
    if (!(productAmount == rhs.productAmount))
      return false;
    if (!(iapProductId == rhs.iapProductId))
      return false;
    if (__isset.offerBackgroundImage != rhs.__isset.offerBackgroundImage)
      return false;
    else if (__isset.offerBackgroundImage && !(offerBackgroundImage == rhs.offerBackgroundImage))
      return false;
    if (__isset.cardImage != rhs.__isset.cardImage)
      return false;
    else if (__isset.cardImage && !(cardImage == rhs.cardImage))
      return false;
    if (__isset.productIcon != rhs.__isset.productIcon)
      return false;
    else if (__isset.productIcon && !(productIcon == rhs.productIcon))
      return false;
    if (__isset.ribbonImage != rhs.__isset.ribbonImage)
      return false;
    else if (__isset.ribbonImage && !(ribbonImage == rhs.ribbonImage))
      return false;
    if (__isset.ribbonText != rhs.__isset.ribbonText)
      return false;
    else if (__isset.ribbonText && !(ribbonText == rhs.ribbonText))
      return false;
    if (__isset.titleText != rhs.__isset.titleText)
      return false;
    else if (__isset.titleText && !(titleText == rhs.titleText))
      return false;
    if (__isset.bodyText != rhs.__isset.bodyText)
      return false;
    else if (__isset.bodyText && !(bodyText == rhs.bodyText))
      return false;
    return true;
  }
  bool operator != (const CardOffer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardOffer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CardOffer &a, CardOffer &b);

std::ostream& operator<<(std::ostream& out, const CardOffer& obj);

typedef struct _StoreTab__isset {
  _StoreTab__isset() : selectionSound(false) {}
  bool selectionSound :1;
} _StoreTab__isset;

class StoreTab : public virtual ::apache::thrift::TBase {
 public:

  StoreTab(const StoreTab&);
  StoreTab& operator=(const StoreTab&);
  StoreTab() : storeTabId(), image(), selectionSound() {
  }

  virtual ~StoreTab() throw();
  StoreTabID storeTabId;
  AssetPath image;
  std::string selectionSound;
  LocalizedString title;

  _StoreTab__isset __isset;

  void __set_storeTabId(const StoreTabID& val);

  void __set_image(const AssetPath& val);

  void __set_selectionSound(const std::string& val);

  void __set_title(const LocalizedString& val);

  bool operator == (const StoreTab & rhs) const
  {
    if (!(storeTabId == rhs.storeTabId))
      return false;
    if (!(image == rhs.image))
      return false;
    if (__isset.selectionSound != rhs.__isset.selectionSound)
      return false;
    else if (__isset.selectionSound && !(selectionSound == rhs.selectionSound))
      return false;
    if (!(title == rhs.title))
      return false;
    return true;
  }
  bool operator != (const StoreTab &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreTab & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StoreTab &a, StoreTab &b);

std::ostream& operator<<(std::ostream& out, const StoreTab& obj);

typedef struct _Store__isset {
  _Store__isset() : localizedDisplay(false), oneItemPerLine(false), outOfStockMessage(false), description(false), storeCardImage(false), bundleId(false), buttonImage(false), awningImage(false), storeTabIds(false) {}
  bool localizedDisplay :1;
  bool oneItemPerLine :1;
  bool outOfStockMessage :1;
  bool description :1;
  bool storeCardImage :1;
  bool bundleId :1;
  bool buttonImage :1;
  bool awningImage :1;
  bool storeTabIds :1;
} _Store__isset;

class Store : public virtual ::apache::thrift::TBase {
 public:

  Store(const Store&);
  Store& operator=(const Store&);
  Store() : storeId(), localizedDisplay(), oneItemPerLine(0), eventPhases((EventPhases::type)0), showRank(0), hideRank(0), restockTimerMinutes(0), restockCurrencyId(), restockCurrencyAmount(0), storeCardImage(), bundleId(), buttonImage(), awningImage() {
  }

  virtual ~Store() throw();
  StoreID storeId;
  std::vector<CurrencyID>  currencyIds;
  std::string localizedDisplay;
  bool oneItemPerLine;
  LocalizedString display;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t showRank;
  int32_t hideRank;
  int32_t restockTimerMinutes;
  CurrencyID restockCurrencyId;
  int32_t restockCurrencyAmount;
  LocalizedString unaffordableMessage;
  LocalizedString outOfStockMessage;
  LocalizedString description;
  AssetPath storeCardImage;
  BundleID bundleId;
  std::string buttonImage;
  std::string awningImage;
  std::vector<StoreTabID>  storeTabIds;

  _Store__isset __isset;

  void __set_storeId(const StoreID& val);

  void __set_currencyIds(const std::vector<CurrencyID> & val);

  void __set_localizedDisplay(const std::string& val);

  void __set_oneItemPerLine(const bool val);

  void __set_display(const LocalizedString& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_showRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_restockTimerMinutes(const int32_t val);

  void __set_restockCurrencyId(const CurrencyID& val);

  void __set_restockCurrencyAmount(const int32_t val);

  void __set_unaffordableMessage(const LocalizedString& val);

  void __set_outOfStockMessage(const LocalizedString& val);

  void __set_description(const LocalizedString& val);

  void __set_storeCardImage(const AssetPath& val);

  void __set_bundleId(const BundleID& val);

  void __set_buttonImage(const std::string& val);

  void __set_awningImage(const std::string& val);

  void __set_storeTabIds(const std::vector<StoreTabID> & val);

  bool operator == (const Store & rhs) const
  {
    if (!(storeId == rhs.storeId))
      return false;
    if (!(currencyIds == rhs.currencyIds))
      return false;
    if (__isset.localizedDisplay != rhs.__isset.localizedDisplay)
      return false;
    else if (__isset.localizedDisplay && !(localizedDisplay == rhs.localizedDisplay))
      return false;
    if (__isset.oneItemPerLine != rhs.__isset.oneItemPerLine)
      return false;
    else if (__isset.oneItemPerLine && !(oneItemPerLine == rhs.oneItemPerLine))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (!(restockTimerMinutes == rhs.restockTimerMinutes))
      return false;
    if (!(restockCurrencyId == rhs.restockCurrencyId))
      return false;
    if (!(restockCurrencyAmount == rhs.restockCurrencyAmount))
      return false;
    if (!(unaffordableMessage == rhs.unaffordableMessage))
      return false;
    if (__isset.outOfStockMessage != rhs.__isset.outOfStockMessage)
      return false;
    else if (__isset.outOfStockMessage && !(outOfStockMessage == rhs.outOfStockMessage))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.storeCardImage != rhs.__isset.storeCardImage)
      return false;
    else if (__isset.storeCardImage && !(storeCardImage == rhs.storeCardImage))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.buttonImage != rhs.__isset.buttonImage)
      return false;
    else if (__isset.buttonImage && !(buttonImage == rhs.buttonImage))
      return false;
    if (__isset.awningImage != rhs.__isset.awningImage)
      return false;
    else if (__isset.awningImage && !(awningImage == rhs.awningImage))
      return false;
    if (__isset.storeTabIds != rhs.__isset.storeTabIds)
      return false;
    else if (__isset.storeTabIds && !(storeTabIds == rhs.storeTabIds))
      return false;
    return true;
  }
  bool operator != (const Store &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Store & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Store &a, Store &b);

std::ostream& operator<<(std::ostream& out, const Store& obj);

typedef struct _StoreInventoryItem__isset {
  _StoreInventoryItem__isset() : storeTabId(false) {}
  bool storeTabId :1;
} _StoreInventoryItem__isset;

class StoreInventoryItem : public virtual ::apache::thrift::TBase {
 public:

  StoreInventoryItem(const StoreInventoryItem&);
  StoreInventoryItem& operator=(const StoreInventoryItem&);
  StoreInventoryItem() : storeId(), offerType((OfferType::type)0), offerId(), eventPhases((EventPhases::type)0), displayOrder(0), storeTabId() {
  }

  virtual ~StoreInventoryItem() throw();
  StoreID storeId;
  OfferType::type offerType;
  std::string offerId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t displayOrder;
  LocalizedString display;
  StoreTabID storeTabId;

  _StoreInventoryItem__isset __isset;

  void __set_storeId(const StoreID& val);

  void __set_offerType(const OfferType::type val);

  void __set_offerId(const std::string& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_displayOrder(const int32_t val);

  void __set_display(const LocalizedString& val);

  void __set_storeTabId(const StoreTabID& val);

  bool operator == (const StoreInventoryItem & rhs) const
  {
    if (!(storeId == rhs.storeId))
      return false;
    if (!(offerType == rhs.offerType))
      return false;
    if (!(offerId == rhs.offerId))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(display == rhs.display))
      return false;
    if (__isset.storeTabId != rhs.__isset.storeTabId)
      return false;
    else if (__isset.storeTabId && !(storeTabId == rhs.storeTabId))
      return false;
    return true;
  }
  bool operator != (const StoreInventoryItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreInventoryItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StoreInventoryItem &a, StoreInventoryItem &b);

std::ostream& operator<<(std::ostream& out, const StoreInventoryItem& obj);

typedef struct _VendorProduct__isset {
  _VendorProduct__isset() : appleProductId(false), googleProductId(false) {}
  bool appleProductId :1;
  bool googleProductId :1;
} _VendorProduct__isset;

class VendorProduct : public virtual ::apache::thrift::TBase {
 public:

  VendorProduct(const VendorProduct&);
  VendorProduct& operator=(const VendorProduct&);
  VendorProduct() : storeProductId(), appleProductId(), googleProductId() {
  }

  virtual ~VendorProduct() throw();
  StoreProductID storeProductId;
  AppleProductID appleProductId;
  GoogleProductID googleProductId;

  _VendorProduct__isset __isset;

  void __set_storeProductId(const StoreProductID& val);

  void __set_appleProductId(const AppleProductID& val);

  void __set_googleProductId(const GoogleProductID& val);

  bool operator == (const VendorProduct & rhs) const
  {
    if (!(storeProductId == rhs.storeProductId))
      return false;
    if (__isset.appleProductId != rhs.__isset.appleProductId)
      return false;
    else if (__isset.appleProductId && !(appleProductId == rhs.appleProductId))
      return false;
    if (__isset.googleProductId != rhs.__isset.googleProductId)
      return false;
    else if (__isset.googleProductId && !(googleProductId == rhs.googleProductId))
      return false;
    return true;
  }
  bool operator != (const VendorProduct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VendorProduct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VendorProduct &a, VendorProduct &b);

std::ostream& operator<<(std::ostream& out, const VendorProduct& obj);

typedef struct _StoreProduct__isset {
  _StoreProduct__isset() : billingCurrencyId(false), billingPrice(false), icon(false), listOrder(false), newDisplay(false), bundleId(false), debugPrice(false), details(false), disabled(false) {}
  bool billingCurrencyId :1;
  bool billingPrice :1;
  bool icon :1;
  bool listOrder :1;
  bool newDisplay :1;
  bool bundleId :1;
  bool debugPrice :1;
  bool details :1;
  bool disabled :1;
} _StoreProduct__isset;

class StoreProduct : public virtual ::apache::thrift::TBase {
 public:

  StoreProduct(const StoreProduct&);
  StoreProduct& operator=(const StoreProduct&);
  StoreProduct() : storeProductId(), itemType((LootItemType::type)0), itemId(), amount(0), billingType((StoreProductBillingType::type)0), billingCurrencyId(), billingPrice(0), icon(), listOrder(0), bundleId(), debugPrice(), disabled(0) {
  }

  virtual ~StoreProduct() throw();
  StoreProductID storeProductId;
  LootItemType::type itemType;
  CurrencyID itemId;
  int32_t amount;
  StoreProductBillingType::type billingType;
  CurrencyID billingCurrencyId;
  int32_t billingPrice;
  AssetPath icon;
  int32_t listOrder;
  LocalizedString newDisplay;
  BundleID bundleId;
  std::string debugPrice;
  std::vector<LootTableID>  lootTableIds;
  std::vector<int32_t>  lootTableSpins;
  LocalizedString details;
  bool disabled;

  _StoreProduct__isset __isset;

  void __set_storeProductId(const StoreProductID& val);

  void __set_itemType(const LootItemType::type val);

  void __set_itemId(const CurrencyID& val);

  void __set_amount(const int32_t val);

  void __set_billingType(const StoreProductBillingType::type val);

  void __set_billingCurrencyId(const CurrencyID& val);

  void __set_billingPrice(const int32_t val);

  void __set_icon(const AssetPath& val);

  void __set_listOrder(const int32_t val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_bundleId(const BundleID& val);

  void __set_debugPrice(const std::string& val);

  void __set_lootTableIds(const std::vector<LootTableID> & val);

  void __set_lootTableSpins(const std::vector<int32_t> & val);

  void __set_details(const LocalizedString& val);

  void __set_disabled(const bool val);

  bool operator == (const StoreProduct & rhs) const
  {
    if (!(storeProductId == rhs.storeProductId))
      return false;
    if (!(itemType == rhs.itemType))
      return false;
    if (!(itemId == rhs.itemId))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(billingType == rhs.billingType))
      return false;
    if (__isset.billingCurrencyId != rhs.__isset.billingCurrencyId)
      return false;
    else if (__isset.billingCurrencyId && !(billingCurrencyId == rhs.billingCurrencyId))
      return false;
    if (__isset.billingPrice != rhs.__isset.billingPrice)
      return false;
    else if (__isset.billingPrice && !(billingPrice == rhs.billingPrice))
      return false;
    if (__isset.icon != rhs.__isset.icon)
      return false;
    else if (__isset.icon && !(icon == rhs.icon))
      return false;
    if (__isset.listOrder != rhs.__isset.listOrder)
      return false;
    else if (__isset.listOrder && !(listOrder == rhs.listOrder))
      return false;
    if (__isset.newDisplay != rhs.__isset.newDisplay)
      return false;
    else if (__isset.newDisplay && !(newDisplay == rhs.newDisplay))
      return false;
    if (__isset.bundleId != rhs.__isset.bundleId)
      return false;
    else if (__isset.bundleId && !(bundleId == rhs.bundleId))
      return false;
    if (__isset.debugPrice != rhs.__isset.debugPrice)
      return false;
    else if (__isset.debugPrice && !(debugPrice == rhs.debugPrice))
      return false;
    if (!(lootTableIds == rhs.lootTableIds))
      return false;
    if (!(lootTableSpins == rhs.lootTableSpins))
      return false;
    if (__isset.details != rhs.__isset.details)
      return false;
    else if (__isset.details && !(details == rhs.details))
      return false;
    if (__isset.disabled != rhs.__isset.disabled)
      return false;
    else if (__isset.disabled && !(disabled == rhs.disabled))
      return false;
    return true;
  }
  bool operator != (const StoreProduct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreProduct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StoreProduct &a, StoreProduct &b);

std::ostream& operator<<(std::ostream& out, const StoreProduct& obj);


class BuyItemOrder : public virtual ::apache::thrift::TBase {
 public:

  BuyItemOrder(const BuyItemOrder&);
  BuyItemOrder& operator=(const BuyItemOrder&);
  BuyItemOrder() : orderId(), marketType((MarketType::type)0), buyCurrencyId(), buyCurrencyAmount(0), priceCurrencyId(), price(0), eventLockId() {
  }

  virtual ~BuyItemOrder() throw();
  MarketOrderID orderId;
  MarketType::type marketType;
  CurrencyID buyCurrencyId;
  int32_t buyCurrencyAmount;
  CurrencyID priceCurrencyId;
  int32_t price;
  EventLockID eventLockId;

  void __set_orderId(const MarketOrderID& val);

  void __set_marketType(const MarketType::type val);

  void __set_buyCurrencyId(const CurrencyID& val);

  void __set_buyCurrencyAmount(const int32_t val);

  void __set_priceCurrencyId(const CurrencyID& val);

  void __set_price(const int32_t val);

  void __set_eventLockId(const EventLockID& val);

  bool operator == (const BuyItemOrder & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (!(marketType == rhs.marketType))
      return false;
    if (!(buyCurrencyId == rhs.buyCurrencyId))
      return false;
    if (!(buyCurrencyAmount == rhs.buyCurrencyAmount))
      return false;
    if (!(priceCurrencyId == rhs.priceCurrencyId))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(eventLockId == rhs.eventLockId))
      return false;
    return true;
  }
  bool operator != (const BuyItemOrder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuyItemOrder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuyItemOrder &a, BuyItemOrder &b);

std::ostream& operator<<(std::ostream& out, const BuyItemOrder& obj);

typedef struct _Market__isset {
  _Market__isset() : numberOfSlots(false), openForInSecs(false) {}
  bool numberOfSlots :1;
  bool openForInSecs :1;
} _Market__isset;

class Market : public virtual ::apache::thrift::TBase {
 public:

  Market(const Market&);
  Market& operator=(const Market&);
  Market() : marketTypeId((MarketType::type)0), numberOfSlots(0), openForInSecs(0) {
  }

  virtual ~Market() throw();
  MarketType::type marketTypeId;
  int32_t numberOfSlots;
  int32_t openForInSecs;

  _Market__isset __isset;

  void __set_marketTypeId(const MarketType::type val);

  void __set_numberOfSlots(const int32_t val);

  void __set_openForInSecs(const int32_t val);

  bool operator == (const Market & rhs) const
  {
    if (!(marketTypeId == rhs.marketTypeId))
      return false;
    if (__isset.numberOfSlots != rhs.__isset.numberOfSlots)
      return false;
    else if (__isset.numberOfSlots && !(numberOfSlots == rhs.numberOfSlots))
      return false;
    if (__isset.openForInSecs != rhs.__isset.openForInSecs)
      return false;
    else if (__isset.openForInSecs && !(openForInSecs == rhs.openForInSecs))
      return false;
    return true;
  }
  bool operator != (const Market &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Market & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Market &a, Market &b);

std::ostream& operator<<(std::ostream& out, const Market& obj);

typedef struct _Achievement__isset {
  _Achievement__isset() : minRank(false), param(false), rewardCurrencyIds(false), rewardAmounts(false), achievementGroupId(false), achievementGroupOrder(false), goButtonFtue(false), catalogImage(false), forceShowMe(false), noAutoPop(false) {}
  bool minRank :1;
  bool param :1;
  bool rewardCurrencyIds :1;
  bool rewardAmounts :1;
  bool achievementGroupId :1;
  bool achievementGroupOrder :1;
  bool goButtonFtue :1;
  bool catalogImage :1;
  bool forceShowMe :1;
  bool noAutoPop :1;
} _Achievement__isset;

class Achievement : public virtual ::apache::thrift::TBase {
 public:

  Achievement(const Achievement&);
  Achievement& operator=(const Achievement&);
  Achievement() : achievementId(), minRank(0), achievementType((AchievementType::type)0), requiredAmount(0), param(), achievementGroupId(), achievementGroupOrder(0), goButtonFtue(), catalogImage(), forceShowMe(0), noAutoPop(0) {
  }

  virtual ~Achievement() throw();
  AchievementID achievementId;
  int32_t minRank;
  AchievementType::type achievementType;
  int32_t requiredAmount;
  LocalizedString newDisplay;
  LocalizedString newDescription;
  std::string param;
  std::vector<CurrencyID>  rewardCurrencyIds;
  std::vector<int32_t>  rewardAmounts;
  AchievementGroupID achievementGroupId;
  int32_t achievementGroupOrder;
  std::string goButtonFtue;
  AssetPath catalogImage;
  bool forceShowMe;
  bool noAutoPop;

  _Achievement__isset __isset;

  void __set_achievementId(const AchievementID& val);

  void __set_minRank(const int32_t val);

  void __set_achievementType(const AchievementType::type val);

  void __set_requiredAmount(const int32_t val);

  void __set_newDisplay(const LocalizedString& val);

  void __set_newDescription(const LocalizedString& val);

  void __set_param(const std::string& val);

  void __set_rewardCurrencyIds(const std::vector<CurrencyID> & val);

  void __set_rewardAmounts(const std::vector<int32_t> & val);

  void __set_achievementGroupId(const AchievementGroupID& val);

  void __set_achievementGroupOrder(const int32_t val);

  void __set_goButtonFtue(const std::string& val);

  void __set_catalogImage(const AssetPath& val);

  void __set_forceShowMe(const bool val);

  void __set_noAutoPop(const bool val);

  bool operator == (const Achievement & rhs) const
  {
    if (!(achievementId == rhs.achievementId))
      return false;
    if (__isset.minRank != rhs.__isset.minRank)
      return false;
    else if (__isset.minRank && !(minRank == rhs.minRank))
      return false;
    if (!(achievementType == rhs.achievementType))
      return false;
    if (!(requiredAmount == rhs.requiredAmount))
      return false;
    if (!(newDisplay == rhs.newDisplay))
      return false;
    if (!(newDescription == rhs.newDescription))
      return false;
    if (__isset.param != rhs.__isset.param)
      return false;
    else if (__isset.param && !(param == rhs.param))
      return false;
    if (__isset.rewardCurrencyIds != rhs.__isset.rewardCurrencyIds)
      return false;
    else if (__isset.rewardCurrencyIds && !(rewardCurrencyIds == rhs.rewardCurrencyIds))
      return false;
    if (__isset.rewardAmounts != rhs.__isset.rewardAmounts)
      return false;
    else if (__isset.rewardAmounts && !(rewardAmounts == rhs.rewardAmounts))
      return false;
    if (__isset.achievementGroupId != rhs.__isset.achievementGroupId)
      return false;
    else if (__isset.achievementGroupId && !(achievementGroupId == rhs.achievementGroupId))
      return false;
    if (__isset.achievementGroupOrder != rhs.__isset.achievementGroupOrder)
      return false;
    else if (__isset.achievementGroupOrder && !(achievementGroupOrder == rhs.achievementGroupOrder))
      return false;
    if (__isset.goButtonFtue != rhs.__isset.goButtonFtue)
      return false;
    else if (__isset.goButtonFtue && !(goButtonFtue == rhs.goButtonFtue))
      return false;
    if (__isset.catalogImage != rhs.__isset.catalogImage)
      return false;
    else if (__isset.catalogImage && !(catalogImage == rhs.catalogImage))
      return false;
    if (__isset.forceShowMe != rhs.__isset.forceShowMe)
      return false;
    else if (__isset.forceShowMe && !(forceShowMe == rhs.forceShowMe))
      return false;
    if (__isset.noAutoPop != rhs.__isset.noAutoPop)
      return false;
    else if (__isset.noAutoPop && !(noAutoPop == rhs.noAutoPop))
      return false;
    return true;
  }
  bool operator != (const Achievement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Achievement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Achievement &a, Achievement &b);

std::ostream& operator<<(std::ostream& out, const Achievement& obj);

typedef struct _AchievementGroup__isset {
  _AchievementGroup__isset() : eventLockId(false), order(false) {}
  bool eventLockId :1;
  bool order :1;
} _AchievementGroup__isset;

class AchievementGroup : public virtual ::apache::thrift::TBase {
 public:

  AchievementGroup(const AchievementGroup&);
  AchievementGroup& operator=(const AchievementGroup&);
  AchievementGroup() : achievementGroupId(), eventLockId(), order(0) {
  }

  virtual ~AchievementGroup() throw();
  AchievementGroupID achievementGroupId;
  EventLockID eventLockId;
  int32_t order;

  _AchievementGroup__isset __isset;

  void __set_achievementGroupId(const AchievementGroupID& val);

  void __set_eventLockId(const EventLockID& val);

  void __set_order(const int32_t val);

  bool operator == (const AchievementGroup & rhs) const
  {
    if (!(achievementGroupId == rhs.achievementGroupId))
      return false;
    if (__isset.eventLockId != rhs.__isset.eventLockId)
      return false;
    else if (__isset.eventLockId && !(eventLockId == rhs.eventLockId))
      return false;
    if (__isset.order != rhs.__isset.order)
      return false;
    else if (__isset.order && !(order == rhs.order))
      return false;
    return true;
  }
  bool operator != (const AchievementGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AchievementGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AchievementGroup &a, AchievementGroup &b);

std::ostream& operator<<(std::ostream& out, const AchievementGroup& obj);

typedef struct _Goal__isset {
  _Goal__isset() : requiredRank(false), eventIds(false), eventPhases(false), levelId(false), buildingType(false), buildingId(false), rarity(false), evoLevel(false), gearId(false), boosterId(false), cellTypes(false), levelStars(false), offerId(false) {}
  bool requiredRank :1;
  bool eventIds :1;
  bool eventPhases :1;
  bool levelId :1;
  bool buildingType :1;
  bool buildingId :1;
  bool rarity :1;
  bool evoLevel :1;
  bool gearId :1;
  bool boosterId :1;
  bool cellTypes :1;
  bool levelStars :1;
  bool offerId :1;
} _Goal__isset;

class Goal : public virtual ::apache::thrift::TBase {
 public:

  Goal(const Goal&);
  Goal& operator=(const Goal&);
  Goal() : goalId(), questId(), orderIndex(0), goalType((GoalType::type)0), requiredProgress(0), requiredRank(0), eventPhases((EventPhases::type)0), levelId(), buildingType((BuildingType::type)0), buildingId(), rarity(0), evoLevel(0), gearId(), boosterId(), levelStars(0), offerId() {
  }

  virtual ~Goal() throw();
  GoalID goalId;
  LocalizedString displayText;
  QuestID questId;
  int32_t orderIndex;
  GoalType::type goalType;
  int32_t requiredProgress;
  RankID requiredRank;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  LevelID levelId;
  BuildingType::type buildingType;
  BuildingID buildingId;
  RarityID rarity;
  int32_t evoLevel;
  CurrencyID gearId;
  BoostID boosterId;
  std::vector<CellTypeID>  cellTypes;
  int32_t levelStars;
  GachaOfferID offerId;

  _Goal__isset __isset;

  void __set_goalId(const GoalID& val);

  void __set_displayText(const LocalizedString& val);

  void __set_questId(const QuestID& val);

  void __set_orderIndex(const int32_t val);

  void __set_goalType(const GoalType::type val);

  void __set_requiredProgress(const int32_t val);

  void __set_requiredRank(const RankID val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_levelId(const LevelID& val);

  void __set_buildingType(const BuildingType::type val);

  void __set_buildingId(const BuildingID& val);

  void __set_rarity(const RarityID val);

  void __set_evoLevel(const int32_t val);

  void __set_gearId(const CurrencyID& val);

  void __set_boosterId(const BoostID& val);

  void __set_cellTypes(const std::vector<CellTypeID> & val);

  void __set_levelStars(const int32_t val);

  void __set_offerId(const GachaOfferID& val);

  bool operator == (const Goal & rhs) const
  {
    if (!(goalId == rhs.goalId))
      return false;
    if (!(displayText == rhs.displayText))
      return false;
    if (!(questId == rhs.questId))
      return false;
    if (!(orderIndex == rhs.orderIndex))
      return false;
    if (!(goalType == rhs.goalType))
      return false;
    if (!(requiredProgress == rhs.requiredProgress))
      return false;
    if (__isset.requiredRank != rhs.__isset.requiredRank)
      return false;
    else if (__isset.requiredRank && !(requiredRank == rhs.requiredRank))
      return false;
    if (__isset.eventIds != rhs.__isset.eventIds)
      return false;
    else if (__isset.eventIds && !(eventIds == rhs.eventIds))
      return false;
    if (__isset.eventPhases != rhs.__isset.eventPhases)
      return false;
    else if (__isset.eventPhases && !(eventPhases == rhs.eventPhases))
      return false;
    if (__isset.levelId != rhs.__isset.levelId)
      return false;
    else if (__isset.levelId && !(levelId == rhs.levelId))
      return false;
    if (__isset.buildingType != rhs.__isset.buildingType)
      return false;
    else if (__isset.buildingType && !(buildingType == rhs.buildingType))
      return false;
    if (__isset.buildingId != rhs.__isset.buildingId)
      return false;
    else if (__isset.buildingId && !(buildingId == rhs.buildingId))
      return false;
    if (__isset.rarity != rhs.__isset.rarity)
      return false;
    else if (__isset.rarity && !(rarity == rhs.rarity))
      return false;
    if (__isset.evoLevel != rhs.__isset.evoLevel)
      return false;
    else if (__isset.evoLevel && !(evoLevel == rhs.evoLevel))
      return false;
    if (__isset.gearId != rhs.__isset.gearId)
      return false;
    else if (__isset.gearId && !(gearId == rhs.gearId))
      return false;
    if (__isset.boosterId != rhs.__isset.boosterId)
      return false;
    else if (__isset.boosterId && !(boosterId == rhs.boosterId))
      return false;
    if (__isset.cellTypes != rhs.__isset.cellTypes)
      return false;
    else if (__isset.cellTypes && !(cellTypes == rhs.cellTypes))
      return false;
    if (__isset.levelStars != rhs.__isset.levelStars)
      return false;
    else if (__isset.levelStars && !(levelStars == rhs.levelStars))
      return false;
    if (__isset.offerId != rhs.__isset.offerId)
      return false;
    else if (__isset.offerId && !(offerId == rhs.offerId))
      return false;
    return true;
  }
  bool operator != (const Goal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Goal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Goal &a, Goal &b);

std::ostream& operator<<(std::ostream& out, const Goal& obj);

typedef struct _QuestNpc__isset {
  _QuestNpc__isset() : backgroundImage(false) {}
  bool backgroundImage :1;
} _QuestNpc__isset;

class QuestNpc : public virtual ::apache::thrift::TBase {
 public:

  QuestNpc(const QuestNpc&);
  QuestNpc& operator=(const QuestNpc&);
  QuestNpc() : questNpcId(), npcId(), backgroundImage() {
  }

  virtual ~QuestNpc() throw();
  QuestNpcID questNpcId;
  NpcID npcId;
  LocalizedString questDescriptionText;
  LocalizedString questCompletedText;
  AssetPath backgroundImage;

  _QuestNpc__isset __isset;

  void __set_questNpcId(const QuestNpcID& val);

  void __set_npcId(const NpcID& val);

  void __set_questDescriptionText(const LocalizedString& val);

  void __set_questCompletedText(const LocalizedString& val);

  void __set_backgroundImage(const AssetPath& val);

  bool operator == (const QuestNpc & rhs) const
  {
    if (!(questNpcId == rhs.questNpcId))
      return false;
    if (!(npcId == rhs.npcId))
      return false;
    if (!(questDescriptionText == rhs.questDescriptionText))
      return false;
    if (!(questCompletedText == rhs.questCompletedText))
      return false;
    if (__isset.backgroundImage != rhs.__isset.backgroundImage)
      return false;
    else if (__isset.backgroundImage && !(backgroundImage == rhs.backgroundImage))
      return false;
    return true;
  }
  bool operator != (const QuestNpc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuestNpc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QuestNpc &a, QuestNpc &b);

std::ostream& operator<<(std::ostream& out, const QuestNpc& obj);


class BusinessQuestNpc : public virtual ::apache::thrift::TBase {
 public:

  BusinessQuestNpc(const BusinessQuestNpc&);
  BusinessQuestNpc& operator=(const BusinessQuestNpc&);
  BusinessQuestNpc() : baseBusinessId(), questNpcId() {
  }

  virtual ~BusinessQuestNpc() throw();
  BuildingID baseBusinessId;
  QuestNpcID questNpcId;

  void __set_baseBusinessId(const BuildingID& val);

  void __set_questNpcId(const QuestNpcID& val);

  bool operator == (const BusinessQuestNpc & rhs) const
  {
    if (!(baseBusinessId == rhs.baseBusinessId))
      return false;
    if (!(questNpcId == rhs.questNpcId))
      return false;
    return true;
  }
  bool operator != (const BusinessQuestNpc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessQuestNpc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessQuestNpc &a, BusinessQuestNpc &b);

std::ostream& operator<<(std::ostream& out, const BusinessQuestNpc& obj);


class GuildQuestReward : public virtual ::apache::thrift::TBase {
 public:

  GuildQuestReward(const GuildQuestReward&);
  GuildQuestReward& operator=(const GuildQuestReward&);
  GuildQuestReward() : guildQuestRewardId(), rewardRecipientType((GuildQuestRewardType::type)0) {
  }

  virtual ~GuildQuestReward() throw();
  GuildQuestRewardID guildQuestRewardId;
  GuildQuestRewardType::type rewardRecipientType;
  std::vector<LootTableID>  lootTableIds;
  std::vector<int32_t>  lootTableSpins;

  void __set_guildQuestRewardId(const GuildQuestRewardID& val);

  void __set_rewardRecipientType(const GuildQuestRewardType::type val);

  void __set_lootTableIds(const std::vector<LootTableID> & val);

  void __set_lootTableSpins(const std::vector<int32_t> & val);

  bool operator == (const GuildQuestReward & rhs) const
  {
    if (!(guildQuestRewardId == rhs.guildQuestRewardId))
      return false;
    if (!(rewardRecipientType == rhs.rewardRecipientType))
      return false;
    if (!(lootTableIds == rhs.lootTableIds))
      return false;
    if (!(lootTableSpins == rhs.lootTableSpins))
      return false;
    return true;
  }
  bool operator != (const GuildQuestReward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildQuestReward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildQuestReward &a, GuildQuestReward &b);

std::ostream& operator<<(std::ostream& out, const GuildQuestReward& obj);

typedef struct _Quest__isset {
  _Quest__isset() : eventIds(false), eventPhases(false), disabled(false), chained(false), unlockedByBusiness(false), periodic(false), showRank(false), hideRank(false), unlockRank(false), countPerPeriod(false), period(false), unlockedByQuest(false), rewardCurrencyIds(false), rewardCurrencyAmounts(false), buildingId(false), guildQuest(false), showGuildRank(false), hideGuildRank(false), unlockGuildRank(false), guildQuestRewardId(false), displayCurrencyId(false), displayCurrencyAmount(false), goals(false) {}
  bool eventIds :1;
  bool eventPhases :1;
  bool disabled :1;
  bool chained :1;
  bool unlockedByBusiness :1;
  bool periodic :1;
  bool showRank :1;
  bool hideRank :1;
  bool unlockRank :1;
  bool countPerPeriod :1;
  bool period :1;
  bool unlockedByQuest :1;
  bool rewardCurrencyIds :1;
  bool rewardCurrencyAmounts :1;
  bool buildingId :1;
  bool guildQuest :1;
  bool showGuildRank :1;
  bool hideGuildRank :1;
  bool unlockGuildRank :1;
  bool guildQuestRewardId :1;
  bool displayCurrencyId :1;
  bool displayCurrencyAmount :1;
  bool goals :1;
} _Quest__isset;

class Quest : public virtual ::apache::thrift::TBase {
 public:

  Quest(const Quest&);
  Quest& operator=(const Quest&);
  Quest() : questId(), orderIndex(0), questNpcId(), eventPhases((EventPhases::type)0), disabled(0), chained(0), unlockedByBusiness(0), periodic(0), showRank(0), hideRank(0), unlockRank(0), countPerPeriod(0), period(0), unlockedByQuest(), xpReward(0), buildingId(), guildQuest(0), showGuildRank(0), hideGuildRank(0), unlockGuildRank(0), guildQuestRewardId(), displayCurrencyId(), displayCurrencyAmount(0) {
  }

  virtual ~Quest() throw();
  QuestID questId;
  int32_t orderIndex;
  QuestNpcID questNpcId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  bool disabled;
  bool chained;
  bool unlockedByBusiness;
  bool periodic;
  int32_t showRank;
  int32_t hideRank;
  int32_t unlockRank;
  int32_t countPerPeriod;
  int64_t period;
  QuestID unlockedByQuest;
  int32_t xpReward;
  std::vector<CurrencyID>  rewardCurrencyIds;
  std::vector<int32_t>  rewardCurrencyAmounts;
  LocalizedString titleText;
  LocalizedString descriptionText;
  BuildingID buildingId;
  bool guildQuest;
  int32_t showGuildRank;
  int32_t hideGuildRank;
  int32_t unlockGuildRank;
  GuildQuestRewardID guildQuestRewardId;
  CurrencyID displayCurrencyId;
  int32_t displayCurrencyAmount;
  std::map<GoalID, Goal>  goals;

  _Quest__isset __isset;

  void __set_questId(const QuestID& val);

  void __set_orderIndex(const int32_t val);

  void __set_questNpcId(const QuestNpcID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_disabled(const bool val);

  void __set_chained(const bool val);

  void __set_unlockedByBusiness(const bool val);

  void __set_periodic(const bool val);

  void __set_showRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_countPerPeriod(const int32_t val);

  void __set_period(const int64_t val);

  void __set_unlockedByQuest(const QuestID& val);

  void __set_xpReward(const int32_t val);

  void __set_rewardCurrencyIds(const std::vector<CurrencyID> & val);

  void __set_rewardCurrencyAmounts(const std::vector<int32_t> & val);

  void __set_titleText(const LocalizedString& val);

  void __set_descriptionText(const LocalizedString& val);

  void __set_buildingId(const BuildingID& val);

  void __set_guildQuest(const bool val);

  void __set_showGuildRank(const int32_t val);

  void __set_hideGuildRank(const int32_t val);

  void __set_unlockGuildRank(const int32_t val);

  void __set_guildQuestRewardId(const GuildQuestRewardID& val);

  void __set_displayCurrencyId(const CurrencyID& val);

  void __set_displayCurrencyAmount(const int32_t val);

  void __set_goals(const std::map<GoalID, Goal> & val);

  bool operator == (const Quest & rhs) const
  {
    if (!(questId == rhs.questId))
      return false;
    if (!(orderIndex == rhs.orderIndex))
      return false;
    if (!(questNpcId == rhs.questNpcId))
      return false;
    if (__isset.eventIds != rhs.__isset.eventIds)
      return false;
    else if (__isset.eventIds && !(eventIds == rhs.eventIds))
      return false;
    if (__isset.eventPhases != rhs.__isset.eventPhases)
      return false;
    else if (__isset.eventPhases && !(eventPhases == rhs.eventPhases))
      return false;
    if (__isset.disabled != rhs.__isset.disabled)
      return false;
    else if (__isset.disabled && !(disabled == rhs.disabled))
      return false;
    if (__isset.chained != rhs.__isset.chained)
      return false;
    else if (__isset.chained && !(chained == rhs.chained))
      return false;
    if (__isset.unlockedByBusiness != rhs.__isset.unlockedByBusiness)
      return false;
    else if (__isset.unlockedByBusiness && !(unlockedByBusiness == rhs.unlockedByBusiness))
      return false;
    if (__isset.periodic != rhs.__isset.periodic)
      return false;
    else if (__isset.periodic && !(periodic == rhs.periodic))
      return false;
    if (__isset.showRank != rhs.__isset.showRank)
      return false;
    else if (__isset.showRank && !(showRank == rhs.showRank))
      return false;
    if (__isset.hideRank != rhs.__isset.hideRank)
      return false;
    else if (__isset.hideRank && !(hideRank == rhs.hideRank))
      return false;
    if (__isset.unlockRank != rhs.__isset.unlockRank)
      return false;
    else if (__isset.unlockRank && !(unlockRank == rhs.unlockRank))
      return false;
    if (__isset.countPerPeriod != rhs.__isset.countPerPeriod)
      return false;
    else if (__isset.countPerPeriod && !(countPerPeriod == rhs.countPerPeriod))
      return false;
    if (__isset.period != rhs.__isset.period)
      return false;
    else if (__isset.period && !(period == rhs.period))
      return false;
    if (__isset.unlockedByQuest != rhs.__isset.unlockedByQuest)
      return false;
    else if (__isset.unlockedByQuest && !(unlockedByQuest == rhs.unlockedByQuest))
      return false;
    if (!(xpReward == rhs.xpReward))
      return false;
    if (__isset.rewardCurrencyIds != rhs.__isset.rewardCurrencyIds)
      return false;
    else if (__isset.rewardCurrencyIds && !(rewardCurrencyIds == rhs.rewardCurrencyIds))
      return false;
    if (__isset.rewardCurrencyAmounts != rhs.__isset.rewardCurrencyAmounts)
      return false;
    else if (__isset.rewardCurrencyAmounts && !(rewardCurrencyAmounts == rhs.rewardCurrencyAmounts))
      return false;
    if (!(titleText == rhs.titleText))
      return false;
    if (!(descriptionText == rhs.descriptionText))
      return false;
    if (__isset.buildingId != rhs.__isset.buildingId)
      return false;
    else if (__isset.buildingId && !(buildingId == rhs.buildingId))
      return false;
    if (__isset.guildQuest != rhs.__isset.guildQuest)
      return false;
    else if (__isset.guildQuest && !(guildQuest == rhs.guildQuest))
      return false;
    if (__isset.showGuildRank != rhs.__isset.showGuildRank)
      return false;
    else if (__isset.showGuildRank && !(showGuildRank == rhs.showGuildRank))
      return false;
    if (__isset.hideGuildRank != rhs.__isset.hideGuildRank)
      return false;
    else if (__isset.hideGuildRank && !(hideGuildRank == rhs.hideGuildRank))
      return false;
    if (__isset.unlockGuildRank != rhs.__isset.unlockGuildRank)
      return false;
    else if (__isset.unlockGuildRank && !(unlockGuildRank == rhs.unlockGuildRank))
      return false;
    if (__isset.guildQuestRewardId != rhs.__isset.guildQuestRewardId)
      return false;
    else if (__isset.guildQuestRewardId && !(guildQuestRewardId == rhs.guildQuestRewardId))
      return false;
    if (__isset.displayCurrencyId != rhs.__isset.displayCurrencyId)
      return false;
    else if (__isset.displayCurrencyId && !(displayCurrencyId == rhs.displayCurrencyId))
      return false;
    if (__isset.displayCurrencyAmount != rhs.__isset.displayCurrencyAmount)
      return false;
    else if (__isset.displayCurrencyAmount && !(displayCurrencyAmount == rhs.displayCurrencyAmount))
      return false;
    if (__isset.goals != rhs.__isset.goals)
      return false;
    else if (__isset.goals && !(goals == rhs.goals))
      return false;
    return true;
  }
  bool operator != (const Quest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Quest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Quest &a, Quest &b);

std::ostream& operator<<(std::ostream& out, const Quest& obj);


class GoalDisplayTemplate : public virtual ::apache::thrift::TBase {
 public:

  GoalDisplayTemplate(const GoalDisplayTemplate&);
  GoalDisplayTemplate& operator=(const GoalDisplayTemplate&);
  GoalDisplayTemplate() : goalType((GoalType::type)0) {
  }

  virtual ~GoalDisplayTemplate() throw();
  GoalType::type goalType;
  LocalizedString text;
  LocalizedString textPlural;

  void __set_goalType(const GoalType::type val);

  void __set_text(const LocalizedString& val);

  void __set_textPlural(const LocalizedString& val);

  bool operator == (const GoalDisplayTemplate & rhs) const
  {
    if (!(goalType == rhs.goalType))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(textPlural == rhs.textPlural))
      return false;
    return true;
  }
  bool operator != (const GoalDisplayTemplate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GoalDisplayTemplate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GoalDisplayTemplate &a, GoalDisplayTemplate &b);

std::ostream& operator<<(std::ostream& out, const GoalDisplayTemplate& obj);


class QuestDisplayTemplate : public virtual ::apache::thrift::TBase {
 public:

  QuestDisplayTemplate(const QuestDisplayTemplate&);
  QuestDisplayTemplate& operator=(const QuestDisplayTemplate&);
  QuestDisplayTemplate() : goalType((GoalType::type)0), templateId(0) {
  }

  virtual ~QuestDisplayTemplate() throw();
  GoalType::type goalType;
  QuestDisplayTemplateID templateId;
  LocalizedString titleText;

  void __set_goalType(const GoalType::type val);

  void __set_templateId(const QuestDisplayTemplateID val);

  void __set_titleText(const LocalizedString& val);

  bool operator == (const QuestDisplayTemplate & rhs) const
  {
    if (!(goalType == rhs.goalType))
      return false;
    if (!(templateId == rhs.templateId))
      return false;
    if (!(titleText == rhs.titleText))
      return false;
    return true;
  }
  bool operator != (const QuestDisplayTemplate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuestDisplayTemplate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QuestDisplayTemplate &a, QuestDisplayTemplate &b);

std::ostream& operator<<(std::ostream& out, const QuestDisplayTemplate& obj);


class QuestSettings : public virtual ::apache::thrift::TBase {
 public:

  QuestSettings(const QuestSettings&);
  QuestSettings& operator=(const QuestSettings&);
  QuestSettings() : refreshPeriodSeconds(0), maxAllowedHarvests(0), maxAllowedHarvestTimeSeconds(0), generatedQuestsEnabled(0) {
  }

  virtual ~QuestSettings() throw();
  int32_t refreshPeriodSeconds;
  int32_t maxAllowedHarvests;
  int32_t maxAllowedHarvestTimeSeconds;
  bool generatedQuestsEnabled;

  void __set_refreshPeriodSeconds(const int32_t val);

  void __set_maxAllowedHarvests(const int32_t val);

  void __set_maxAllowedHarvestTimeSeconds(const int32_t val);

  void __set_generatedQuestsEnabled(const bool val);

  bool operator == (const QuestSettings & rhs) const
  {
    if (!(refreshPeriodSeconds == rhs.refreshPeriodSeconds))
      return false;
    if (!(maxAllowedHarvests == rhs.maxAllowedHarvests))
      return false;
    if (!(maxAllowedHarvestTimeSeconds == rhs.maxAllowedHarvestTimeSeconds))
      return false;
    if (!(generatedQuestsEnabled == rhs.generatedQuestsEnabled))
      return false;
    return true;
  }
  bool operator != (const QuestSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuestSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QuestSettings &a, QuestSettings &b);

std::ostream& operator<<(std::ostream& out, const QuestSettings& obj);


class QuestRankSettings : public virtual ::apache::thrift::TBase {
 public:

  QuestRankSettings(const QuestRankSettings&);
  QuestRankSettings& operator=(const QuestRankSettings&);
  QuestRankSettings() : rankId(0), xpToGenerate(0), numberOfSlots(0), harvestSpecificBusiness(0), completeLevel(0), autoPlaySpecificLevel(0), socialLikeKingdom(0), socialVisitKingdom(0), socialPlaceOrderGuildMate(0), socialCompleteOrder(0), matchTiles(0), placeDeco(0), equipAnyGearOnAnyBusiness(0), equipSpecificGearOnSpecificBusiness(0), harvestMinTimeSeconds(0), harvestMaxTimeSeconds(0), placeDecoMin(0), placeDecoMax(0), socialLikeMinProgress(0), socialLikeMaxProgress(0), socialVisitMinProgress(0), socialVisitMaxProgress(0), socialPlaceOrderMinProgress(0), socialPlaceOrderMaxProgress(0), socialCompleteOrderMinProgress(0), socialCompleteOrderMaxProgress(0), matchTilesCells(), matchTilesMinProgress(0), matchTilesMaxProgress(0) {
  }

  virtual ~QuestRankSettings() throw();
  RankID rankId;
  int32_t xpToGenerate;
  int32_t numberOfSlots;
  int32_t harvestSpecificBusiness;
  int32_t completeLevel;
  int32_t autoPlaySpecificLevel;
  int32_t socialLikeKingdom;
  int32_t socialVisitKingdom;
  int32_t socialPlaceOrderGuildMate;
  int32_t socialCompleteOrder;
  int32_t matchTiles;
  int32_t placeDeco;
  int32_t equipAnyGearOnAnyBusiness;
  int32_t equipSpecificGearOnSpecificBusiness;
  int32_t harvestMinTimeSeconds;
  int32_t harvestMaxTimeSeconds;
  int32_t placeDecoMin;
  int32_t placeDecoMax;
  int32_t socialLikeMinProgress;
  int32_t socialLikeMaxProgress;
  int32_t socialVisitMinProgress;
  int32_t socialVisitMaxProgress;
  int32_t socialPlaceOrderMinProgress;
  int32_t socialPlaceOrderMaxProgress;
  int32_t socialCompleteOrderMinProgress;
  int32_t socialCompleteOrderMaxProgress;
  std::string matchTilesCells;
  int32_t matchTilesMinProgress;
  int32_t matchTilesMaxProgress;

  void __set_rankId(const RankID val);

  void __set_xpToGenerate(const int32_t val);

  void __set_numberOfSlots(const int32_t val);

  void __set_harvestSpecificBusiness(const int32_t val);

  void __set_completeLevel(const int32_t val);

  void __set_autoPlaySpecificLevel(const int32_t val);

  void __set_socialLikeKingdom(const int32_t val);

  void __set_socialVisitKingdom(const int32_t val);

  void __set_socialPlaceOrderGuildMate(const int32_t val);

  void __set_socialCompleteOrder(const int32_t val);

  void __set_matchTiles(const int32_t val);

  void __set_placeDeco(const int32_t val);

  void __set_equipAnyGearOnAnyBusiness(const int32_t val);

  void __set_equipSpecificGearOnSpecificBusiness(const int32_t val);

  void __set_harvestMinTimeSeconds(const int32_t val);

  void __set_harvestMaxTimeSeconds(const int32_t val);

  void __set_placeDecoMin(const int32_t val);

  void __set_placeDecoMax(const int32_t val);

  void __set_socialLikeMinProgress(const int32_t val);

  void __set_socialLikeMaxProgress(const int32_t val);

  void __set_socialVisitMinProgress(const int32_t val);

  void __set_socialVisitMaxProgress(const int32_t val);

  void __set_socialPlaceOrderMinProgress(const int32_t val);

  void __set_socialPlaceOrderMaxProgress(const int32_t val);

  void __set_socialCompleteOrderMinProgress(const int32_t val);

  void __set_socialCompleteOrderMaxProgress(const int32_t val);

  void __set_matchTilesCells(const std::string& val);

  void __set_matchTilesMinProgress(const int32_t val);

  void __set_matchTilesMaxProgress(const int32_t val);

  bool operator == (const QuestRankSettings & rhs) const
  {
    if (!(rankId == rhs.rankId))
      return false;
    if (!(xpToGenerate == rhs.xpToGenerate))
      return false;
    if (!(numberOfSlots == rhs.numberOfSlots))
      return false;
    if (!(harvestSpecificBusiness == rhs.harvestSpecificBusiness))
      return false;
    if (!(completeLevel == rhs.completeLevel))
      return false;
    if (!(autoPlaySpecificLevel == rhs.autoPlaySpecificLevel))
      return false;
    if (!(socialLikeKingdom == rhs.socialLikeKingdom))
      return false;
    if (!(socialVisitKingdom == rhs.socialVisitKingdom))
      return false;
    if (!(socialPlaceOrderGuildMate == rhs.socialPlaceOrderGuildMate))
      return false;
    if (!(socialCompleteOrder == rhs.socialCompleteOrder))
      return false;
    if (!(matchTiles == rhs.matchTiles))
      return false;
    if (!(placeDeco == rhs.placeDeco))
      return false;
    if (!(equipAnyGearOnAnyBusiness == rhs.equipAnyGearOnAnyBusiness))
      return false;
    if (!(equipSpecificGearOnSpecificBusiness == rhs.equipSpecificGearOnSpecificBusiness))
      return false;
    if (!(harvestMinTimeSeconds == rhs.harvestMinTimeSeconds))
      return false;
    if (!(harvestMaxTimeSeconds == rhs.harvestMaxTimeSeconds))
      return false;
    if (!(placeDecoMin == rhs.placeDecoMin))
      return false;
    if (!(placeDecoMax == rhs.placeDecoMax))
      return false;
    if (!(socialLikeMinProgress == rhs.socialLikeMinProgress))
      return false;
    if (!(socialLikeMaxProgress == rhs.socialLikeMaxProgress))
      return false;
    if (!(socialVisitMinProgress == rhs.socialVisitMinProgress))
      return false;
    if (!(socialVisitMaxProgress == rhs.socialVisitMaxProgress))
      return false;
    if (!(socialPlaceOrderMinProgress == rhs.socialPlaceOrderMinProgress))
      return false;
    if (!(socialPlaceOrderMaxProgress == rhs.socialPlaceOrderMaxProgress))
      return false;
    if (!(socialCompleteOrderMinProgress == rhs.socialCompleteOrderMinProgress))
      return false;
    if (!(socialCompleteOrderMaxProgress == rhs.socialCompleteOrderMaxProgress))
      return false;
    if (!(matchTilesCells == rhs.matchTilesCells))
      return false;
    if (!(matchTilesMinProgress == rhs.matchTilesMinProgress))
      return false;
    if (!(matchTilesMaxProgress == rhs.matchTilesMaxProgress))
      return false;
    return true;
  }
  bool operator != (const QuestRankSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuestRankSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QuestRankSettings &a, QuestRankSettings &b);

std::ostream& operator<<(std::ostream& out, const QuestRankSettings& obj);


class BuildingTypeLocalization : public virtual ::apache::thrift::TBase {
 public:

  BuildingTypeLocalization(const BuildingTypeLocalization&);
  BuildingTypeLocalization& operator=(const BuildingTypeLocalization&);
  BuildingTypeLocalization() : buildingType((BuildingType::type)0) {
  }

  virtual ~BuildingTypeLocalization() throw();
  BuildingType::type buildingType;
  LocalizedString buildingTypeNameSingular;
  LocalizedString buildingTypeNamePlural;

  void __set_buildingType(const BuildingType::type val);

  void __set_buildingTypeNameSingular(const LocalizedString& val);

  void __set_buildingTypeNamePlural(const LocalizedString& val);

  bool operator == (const BuildingTypeLocalization & rhs) const
  {
    if (!(buildingType == rhs.buildingType))
      return false;
    if (!(buildingTypeNameSingular == rhs.buildingTypeNameSingular))
      return false;
    if (!(buildingTypeNamePlural == rhs.buildingTypeNamePlural))
      return false;
    return true;
  }
  bool operator != (const BuildingTypeLocalization &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuildingTypeLocalization & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuildingTypeLocalization &a, BuildingTypeLocalization &b);

std::ostream& operator<<(std::ostream& out, const BuildingTypeLocalization& obj);


class ForcedUpgrade : public virtual ::apache::thrift::TBase {
 public:

  ForcedUpgrade(const ForcedUpgrade&);
  ForcedUpgrade& operator=(const ForcedUpgrade&);
  ForcedUpgrade() : clientPlatform((ClientPlatform::type)0), minClientVersion(), minClientBuild(), title(), details(), buttonText(), url() {
  }

  virtual ~ForcedUpgrade() throw();
  ClientPlatform::type clientPlatform;
  std::string minClientVersion;
  std::string minClientBuild;
  std::string title;
  std::string details;
  std::string buttonText;
  std::string url;

  void __set_clientPlatform(const ClientPlatform::type val);

  void __set_minClientVersion(const std::string& val);

  void __set_minClientBuild(const std::string& val);

  void __set_title(const std::string& val);

  void __set_details(const std::string& val);

  void __set_buttonText(const std::string& val);

  void __set_url(const std::string& val);

  bool operator == (const ForcedUpgrade & rhs) const
  {
    if (!(clientPlatform == rhs.clientPlatform))
      return false;
    if (!(minClientVersion == rhs.minClientVersion))
      return false;
    if (!(minClientBuild == rhs.minClientBuild))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(details == rhs.details))
      return false;
    if (!(buttonText == rhs.buttonText))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const ForcedUpgrade &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ForcedUpgrade & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ForcedUpgrade &a, ForcedUpgrade &b);

std::ostream& operator<<(std::ostream& out, const ForcedUpgrade& obj);


class ErrorMessage : public virtual ::apache::thrift::TBase {
 public:

  ErrorMessage(const ErrorMessage&);
  ErrorMessage& operator=(const ErrorMessage&);
  ErrorMessage() : errorId(), details() {
  }

  virtual ~ErrorMessage() throw();
  ErrorId errorId;
  std::string details;

  void __set_errorId(const ErrorId& val);

  void __set_details(const std::string& val);

  bool operator == (const ErrorMessage & rhs) const
  {
    if (!(errorId == rhs.errorId))
      return false;
    if (!(details == rhs.details))
      return false;
    return true;
  }
  bool operator != (const ErrorMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ErrorMessage &a, ErrorMessage &b);

std::ostream& operator<<(std::ostream& out, const ErrorMessage& obj);

typedef struct _StrangerSettings__isset {
  _StrangerSettings__isset() : maxRankForHighRankStrangerList(false), fakeRankForHighRankStrangerList(false), enableHighRankStrangerList(false), enableLastActiveRankStrangerList(false) {}
  bool maxRankForHighRankStrangerList :1;
  bool fakeRankForHighRankStrangerList :1;
  bool enableHighRankStrangerList :1;
  bool enableLastActiveRankStrangerList :1;
} _StrangerSettings__isset;

class StrangerSettings : public virtual ::apache::thrift::TBase {
 public:

  StrangerSettings(const StrangerSettings&);
  StrangerSettings& operator=(const StrangerSettings&);
  StrangerSettings() : numberTotal(0), eligibleLastActiveSeconds(0), fakePlayerRankHigher(0), fakePlayerRankLower(0), maxRankForHighRankStrangerList(0), fakeRankForHighRankStrangerList(0), enableHighRankStrangerList(0), enableLastActiveRankStrangerList(0) {
  }

  virtual ~StrangerSettings() throw();
  int32_t numberTotal;
  int32_t eligibleLastActiveSeconds;
  int32_t fakePlayerRankHigher;
  int32_t fakePlayerRankLower;
  int32_t maxRankForHighRankStrangerList;
  int32_t fakeRankForHighRankStrangerList;
  bool enableHighRankStrangerList;
  bool enableLastActiveRankStrangerList;

  _StrangerSettings__isset __isset;

  void __set_numberTotal(const int32_t val);

  void __set_eligibleLastActiveSeconds(const int32_t val);

  void __set_fakePlayerRankHigher(const int32_t val);

  void __set_fakePlayerRankLower(const int32_t val);

  void __set_maxRankForHighRankStrangerList(const int32_t val);

  void __set_fakeRankForHighRankStrangerList(const int32_t val);

  void __set_enableHighRankStrangerList(const bool val);

  void __set_enableLastActiveRankStrangerList(const bool val);

  bool operator == (const StrangerSettings & rhs) const
  {
    if (!(numberTotal == rhs.numberTotal))
      return false;
    if (!(eligibleLastActiveSeconds == rhs.eligibleLastActiveSeconds))
      return false;
    if (!(fakePlayerRankHigher == rhs.fakePlayerRankHigher))
      return false;
    if (!(fakePlayerRankLower == rhs.fakePlayerRankLower))
      return false;
    if (__isset.maxRankForHighRankStrangerList != rhs.__isset.maxRankForHighRankStrangerList)
      return false;
    else if (__isset.maxRankForHighRankStrangerList && !(maxRankForHighRankStrangerList == rhs.maxRankForHighRankStrangerList))
      return false;
    if (__isset.fakeRankForHighRankStrangerList != rhs.__isset.fakeRankForHighRankStrangerList)
      return false;
    else if (__isset.fakeRankForHighRankStrangerList && !(fakeRankForHighRankStrangerList == rhs.fakeRankForHighRankStrangerList))
      return false;
    if (__isset.enableHighRankStrangerList != rhs.__isset.enableHighRankStrangerList)
      return false;
    else if (__isset.enableHighRankStrangerList && !(enableHighRankStrangerList == rhs.enableHighRankStrangerList))
      return false;
    if (__isset.enableLastActiveRankStrangerList != rhs.__isset.enableLastActiveRankStrangerList)
      return false;
    else if (__isset.enableLastActiveRankStrangerList && !(enableLastActiveRankStrangerList == rhs.enableLastActiveRankStrangerList))
      return false;
    return true;
  }
  bool operator != (const StrangerSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StrangerSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StrangerSettings &a, StrangerSettings &b);

std::ostream& operator<<(std::ostream& out, const StrangerSettings& obj);


class StrangerMatchSettings : public virtual ::apache::thrift::TBase {
 public:

  StrangerMatchSettings(const StrangerMatchSettings&);
  StrangerMatchSettings& operator=(const StrangerMatchSettings&);
  StrangerMatchSettings() : minRank(0), maxRank(0), playersPerBucket(0), bucketsHigher(0), bucketsLower(0) {
  }

  virtual ~StrangerMatchSettings() throw();
  int32_t minRank;
  int32_t maxRank;
  int32_t playersPerBucket;
  int32_t bucketsHigher;
  int32_t bucketsLower;

  void __set_minRank(const int32_t val);

  void __set_maxRank(const int32_t val);

  void __set_playersPerBucket(const int32_t val);

  void __set_bucketsHigher(const int32_t val);

  void __set_bucketsLower(const int32_t val);

  bool operator == (const StrangerMatchSettings & rhs) const
  {
    if (!(minRank == rhs.minRank))
      return false;
    if (!(maxRank == rhs.maxRank))
      return false;
    if (!(playersPerBucket == rhs.playersPerBucket))
      return false;
    if (!(bucketsHigher == rhs.bucketsHigher))
      return false;
    if (!(bucketsLower == rhs.bucketsLower))
      return false;
    return true;
  }
  bool operator != (const StrangerMatchSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StrangerMatchSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StrangerMatchSettings &a, StrangerMatchSettings &b);

std::ostream& operator<<(std::ostream& out, const StrangerMatchSettings& obj);


class PlayerMatchRankSettings : public virtual ::apache::thrift::TBase {
 public:

  PlayerMatchRankSettings(const PlayerMatchRankSettings&);
  PlayerMatchRankSettings& operator=(const PlayerMatchRankSettings&);
  PlayerMatchRankSettings() : currentLowerRank(0), currentUpperRank(0), numRanksUnder(0), numRanksOver(0) {
  }

  virtual ~PlayerMatchRankSettings() throw();
  int32_t currentLowerRank;
  int32_t currentUpperRank;
  int32_t numRanksUnder;
  int32_t numRanksOver;

  void __set_currentLowerRank(const int32_t val);

  void __set_currentUpperRank(const int32_t val);

  void __set_numRanksUnder(const int32_t val);

  void __set_numRanksOver(const int32_t val);

  bool operator == (const PlayerMatchRankSettings & rhs) const
  {
    if (!(currentLowerRank == rhs.currentLowerRank))
      return false;
    if (!(currentUpperRank == rhs.currentUpperRank))
      return false;
    if (!(numRanksUnder == rhs.numRanksUnder))
      return false;
    if (!(numRanksOver == rhs.numRanksOver))
      return false;
    return true;
  }
  bool operator != (const PlayerMatchRankSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerMatchRankSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlayerMatchRankSettings &a, PlayerMatchRankSettings &b);

std::ostream& operator<<(std::ostream& out, const PlayerMatchRankSettings& obj);


class FakeStrangerDisplay : public virtual ::apache::thrift::TBase {
 public:

  FakeStrangerDisplay(const FakeStrangerDisplay&);
  FakeStrangerDisplay& operator=(const FakeStrangerDisplay&);
  FakeStrangerDisplay() : display() {
  }

  virtual ~FakeStrangerDisplay() throw();
  std::string display;

  void __set_display(const std::string& val);

  bool operator == (const FakeStrangerDisplay & rhs) const
  {
    if (!(display == rhs.display))
      return false;
    return true;
  }
  bool operator != (const FakeStrangerDisplay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeStrangerDisplay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FakeStrangerDisplay &a, FakeStrangerDisplay &b);

std::ostream& operator<<(std::ostream& out, const FakeStrangerDisplay& obj);


class GiftMessageReward : public virtual ::apache::thrift::TBase {
 public:

  GiftMessageReward(const GiftMessageReward&);
  GiftMessageReward& operator=(const GiftMessageReward&);
  GiftMessageReward() : giftMessageRewardId(), itemType((LootItemType::type)0), itemId(), itemAmount(0) {
  }

  virtual ~GiftMessageReward() throw();
  GiftMessageRewardID giftMessageRewardId;
  LootItemType::type itemType;
  CurrencyID itemId;
  int32_t itemAmount;

  void __set_giftMessageRewardId(const GiftMessageRewardID& val);

  void __set_itemType(const LootItemType::type val);

  void __set_itemId(const CurrencyID& val);

  void __set_itemAmount(const int32_t val);

  bool operator == (const GiftMessageReward & rhs) const
  {
    if (!(giftMessageRewardId == rhs.giftMessageRewardId))
      return false;
    if (!(itemType == rhs.itemType))
      return false;
    if (!(itemId == rhs.itemId))
      return false;
    if (!(itemAmount == rhs.itemAmount))
      return false;
    return true;
  }
  bool operator != (const GiftMessageReward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GiftMessageReward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GiftMessageReward &a, GiftMessageReward &b);

std::ostream& operator<<(std::ostream& out, const GiftMessageReward& obj);


class KingdomLikeGift : public virtual ::apache::thrift::TBase {
 public:

  KingdomLikeGift(const KingdomLikeGift&);
  KingdomLikeGift& operator=(const KingdomLikeGift&);
  KingdomLikeGift() : kingdomLikeGiftId(), giftTitle(), giftBody() {
  }

  virtual ~KingdomLikeGift() throw();
  KingdomLikeGiftID kingdomLikeGiftId;
  std::vector<GiftMessageRewardID>  giftMessageRewardIds;
  std::string giftTitle;
  std::string giftBody;

  void __set_kingdomLikeGiftId(const KingdomLikeGiftID& val);

  void __set_giftMessageRewardIds(const std::vector<GiftMessageRewardID> & val);

  void __set_giftTitle(const std::string& val);

  void __set_giftBody(const std::string& val);

  bool operator == (const KingdomLikeGift & rhs) const
  {
    if (!(kingdomLikeGiftId == rhs.kingdomLikeGiftId))
      return false;
    if (!(giftMessageRewardIds == rhs.giftMessageRewardIds))
      return false;
    if (!(giftTitle == rhs.giftTitle))
      return false;
    if (!(giftBody == rhs.giftBody))
      return false;
    return true;
  }
  bool operator != (const KingdomLikeGift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KingdomLikeGift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KingdomLikeGift &a, KingdomLikeGift &b);

std::ostream& operator<<(std::ostream& out, const KingdomLikeGift& obj);


class PartialKingdomLikeGift : public virtual ::apache::thrift::TBase {
 public:

  PartialKingdomLikeGift(const PartialKingdomLikeGift&);
  PartialKingdomLikeGift& operator=(const PartialKingdomLikeGift&);
  PartialKingdomLikeGift() : partialLikeCount(0), kingdomLikeGiftId() {
  }

  virtual ~PartialKingdomLikeGift() throw();
  int32_t partialLikeCount;
  KingdomLikeGiftID kingdomLikeGiftId;

  void __set_partialLikeCount(const int32_t val);

  void __set_kingdomLikeGiftId(const KingdomLikeGiftID& val);

  bool operator == (const PartialKingdomLikeGift & rhs) const
  {
    if (!(partialLikeCount == rhs.partialLikeCount))
      return false;
    if (!(kingdomLikeGiftId == rhs.kingdomLikeGiftId))
      return false;
    return true;
  }
  bool operator != (const PartialKingdomLikeGift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartialKingdomLikeGift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartialKingdomLikeGift &a, PartialKingdomLikeGift &b);

std::ostream& operator<<(std::ostream& out, const PartialKingdomLikeGift& obj);

typedef struct _PushMessage__isset {
  _PushMessage__isset() : oldMessage(false) {}
  bool oldMessage :1;
} _PushMessage__isset;

class PushMessage : public virtual ::apache::thrift::TBase {
 public:

  PushMessage(const PushMessage&);
  PushMessage& operator=(const PushMessage&);
  PushMessage() : pushMessageId(), oldMessage() {
  }

  virtual ~PushMessage() throw();
  PushMessageID pushMessageId;
  std::string oldMessage;
  LocalizedString message;

  _PushMessage__isset __isset;

  void __set_pushMessageId(const PushMessageID& val);

  void __set_oldMessage(const std::string& val);

  void __set_message(const LocalizedString& val);

  bool operator == (const PushMessage & rhs) const
  {
    if (!(pushMessageId == rhs.pushMessageId))
      return false;
    if (__isset.oldMessage != rhs.__isset.oldMessage)
      return false;
    else if (__isset.oldMessage && !(oldMessage == rhs.oldMessage))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const PushMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PushMessage &a, PushMessage &b);

std::ostream& operator<<(std::ostream& out, const PushMessage& obj);

typedef struct _AdProvider__isset {
  _AdProvider__isset() : customParameters(false), priority(false) {}
  bool customParameters :1;
  bool priority :1;
} _AdProvider__isset;

class AdProvider : public virtual ::apache::thrift::TBase {
 public:

  AdProvider(const AdProvider&);
  AdProvider& operator=(const AdProvider&);
  AdProvider() : adPlatform((AdPlatform::type)0), adProvider((AdProviders::type)0), appId(), priority(0) {
  }

  virtual ~AdProvider() throw();
  AdPlatform::type adPlatform;
  AdProviders::type adProvider;
  std::string appId;
  std::vector<std::string>  customParameters;
  int32_t priority;

  _AdProvider__isset __isset;

  void __set_adPlatform(const AdPlatform::type val);

  void __set_adProvider(const AdProviders::type val);

  void __set_appId(const std::string& val);

  void __set_customParameters(const std::vector<std::string> & val);

  void __set_priority(const int32_t val);

  bool operator == (const AdProvider & rhs) const
  {
    if (!(adPlatform == rhs.adPlatform))
      return false;
    if (!(adProvider == rhs.adProvider))
      return false;
    if (!(appId == rhs.appId))
      return false;
    if (__isset.customParameters != rhs.__isset.customParameters)
      return false;
    else if (__isset.customParameters && !(customParameters == rhs.customParameters))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    return true;
  }
  bool operator != (const AdProvider &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdProvider & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AdProvider &a, AdProvider &b);

std::ostream& operator<<(std::ostream& out, const AdProvider& obj);

typedef struct _RushCostByRemainingTime__isset {
  _RushCostByRemainingTime__isset() : minRemainingTimeInSecs(false), maxRemainingTimeInSecs(false), gemCost(false) {}
  bool minRemainingTimeInSecs :1;
  bool maxRemainingTimeInSecs :1;
  bool gemCost :1;
} _RushCostByRemainingTime__isset;

class RushCostByRemainingTime : public virtual ::apache::thrift::TBase {
 public:

  RushCostByRemainingTime(const RushCostByRemainingTime&);
  RushCostByRemainingTime& operator=(const RushCostByRemainingTime&);
  RushCostByRemainingTime() : minRemainingTimeInSecs(0), maxRemainingTimeInSecs(0), gemCost(0) {
  }

  virtual ~RushCostByRemainingTime() throw();
  int32_t minRemainingTimeInSecs;
  int32_t maxRemainingTimeInSecs;
  int32_t gemCost;

  _RushCostByRemainingTime__isset __isset;

  void __set_minRemainingTimeInSecs(const int32_t val);

  void __set_maxRemainingTimeInSecs(const int32_t val);

  void __set_gemCost(const int32_t val);

  bool operator == (const RushCostByRemainingTime & rhs) const
  {
    if (__isset.minRemainingTimeInSecs != rhs.__isset.minRemainingTimeInSecs)
      return false;
    else if (__isset.minRemainingTimeInSecs && !(minRemainingTimeInSecs == rhs.minRemainingTimeInSecs))
      return false;
    if (__isset.maxRemainingTimeInSecs != rhs.__isset.maxRemainingTimeInSecs)
      return false;
    else if (__isset.maxRemainingTimeInSecs && !(maxRemainingTimeInSecs == rhs.maxRemainingTimeInSecs))
      return false;
    if (__isset.gemCost != rhs.__isset.gemCost)
      return false;
    else if (__isset.gemCost && !(gemCost == rhs.gemCost))
      return false;
    return true;
  }
  bool operator != (const RushCostByRemainingTime &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RushCostByRemainingTime & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RushCostByRemainingTime &a, RushCostByRemainingTime &b);

std::ostream& operator<<(std::ostream& out, const RushCostByRemainingTime& obj);

typedef struct _RewardMessage__isset {
  _RewardMessage__isset() : localizedTitle(false), localizedBody(false) {}
  bool localizedTitle :1;
  bool localizedBody :1;
} _RewardMessage__isset;

class RewardMessage : public virtual ::apache::thrift::TBase {
 public:

  RewardMessage(const RewardMessage&);
  RewardMessage& operator=(const RewardMessage&);
  RewardMessage() : rewardMessageId(), localizedTitle(), localizedBody(), priority(0), templateId() {
  }

  virtual ~RewardMessage() throw();
  RewardMessageID rewardMessageId;
  std::string localizedTitle;
  std::string localizedBody;
  LocalizedString title;
  LocalizedString body;
  int32_t priority;
  TemplateID templateId;

  _RewardMessage__isset __isset;

  void __set_rewardMessageId(const RewardMessageID& val);

  void __set_localizedTitle(const std::string& val);

  void __set_localizedBody(const std::string& val);

  void __set_title(const LocalizedString& val);

  void __set_body(const LocalizedString& val);

  void __set_priority(const int32_t val);

  void __set_templateId(const TemplateID& val);

  bool operator == (const RewardMessage & rhs) const
  {
    if (!(rewardMessageId == rhs.rewardMessageId))
      return false;
    if (__isset.localizedTitle != rhs.__isset.localizedTitle)
      return false;
    else if (__isset.localizedTitle && !(localizedTitle == rhs.localizedTitle))
      return false;
    if (__isset.localizedBody != rhs.__isset.localizedBody)
      return false;
    else if (__isset.localizedBody && !(localizedBody == rhs.localizedBody))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(body == rhs.body))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(templateId == rhs.templateId))
      return false;
    return true;
  }
  bool operator != (const RewardMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RewardMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RewardMessage &a, RewardMessage &b);

std::ostream& operator<<(std::ostream& out, const RewardMessage& obj);


class Event : public virtual ::apache::thrift::TBase {
 public:

  Event(const Event&);
  Event& operator=(const Event&);
  Event() : eventId(), repeatSeconds(0), parentEventId() {
  }

  virtual ~Event() throw();
  EventID eventId;
  DateTimeUTC previewStartTime;
  DateTimeUTC mainStartTime;
  DateTimeUTC mainEndTime;
  DateTimeUTC recapEndTime;
  int32_t repeatSeconds;
  EventID parentEventId;

  void __set_eventId(const EventID& val);

  void __set_previewStartTime(const DateTimeUTC& val);

  void __set_mainStartTime(const DateTimeUTC& val);

  void __set_mainEndTime(const DateTimeUTC& val);

  void __set_recapEndTime(const DateTimeUTC& val);

  void __set_repeatSeconds(const int32_t val);

  void __set_parentEventId(const EventID& val);

  bool operator == (const Event & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(previewStartTime == rhs.previewStartTime))
      return false;
    if (!(mainStartTime == rhs.mainStartTime))
      return false;
    if (!(mainEndTime == rhs.mainEndTime))
      return false;
    if (!(recapEndTime == rhs.recapEndTime))
      return false;
    if (!(repeatSeconds == rhs.repeatSeconds))
      return false;
    if (!(parentEventId == rhs.parentEventId))
      return false;
    return true;
  }
  bool operator != (const Event &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Event & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Event &a, Event &b);

std::ostream& operator<<(std::ostream& out, const Event& obj);

typedef struct _CellInfo__isset {
  _CellInfo__isset() : specialAnimationPath(false) {}
  bool specialAnimationPath :1;
} _CellInfo__isset;

class CellInfo : public virtual ::apache::thrift::TBase {
 public:

  CellInfo(const CellInfo&);
  CellInfo& operator=(const CellInfo&);
  CellInfo() : CellInfoMapId(), cellTypeId(), cellImagePath(), specialAnimationPath() {
  }

  virtual ~CellInfo() throw();
  CellInfoMapID CellInfoMapId;
  CellTypeID cellTypeId;
  std::string cellImagePath;
  std::string specialAnimationPath;

  _CellInfo__isset __isset;

  void __set_CellInfoMapId(const CellInfoMapID& val);

  void __set_cellTypeId(const CellTypeID& val);

  void __set_cellImagePath(const std::string& val);

  void __set_specialAnimationPath(const std::string& val);

  bool operator == (const CellInfo & rhs) const
  {
    if (!(CellInfoMapId == rhs.CellInfoMapId))
      return false;
    if (!(cellTypeId == rhs.cellTypeId))
      return false;
    if (!(cellImagePath == rhs.cellImagePath))
      return false;
    if (__isset.specialAnimationPath != rhs.__isset.specialAnimationPath)
      return false;
    else if (__isset.specialAnimationPath && !(specialAnimationPath == rhs.specialAnimationPath))
      return false;
    return true;
  }
  bool operator != (const CellInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CellInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CellInfo &a, CellInfo &b);

std::ostream& operator<<(std::ostream& out, const CellInfo& obj);

typedef struct _MatchThreeCellDefinition__isset {
  _MatchThreeCellDefinition__isset() : cellImagePath(false), affinityId(false), specialtyId(false), blastJsonFilename(false), blastAtlasFilename(false), blastAnimationName(false) {}
  bool cellImagePath :1;
  bool affinityId :1;
  bool specialtyId :1;
  bool blastJsonFilename :1;
  bool blastAtlasFilename :1;
  bool blastAnimationName :1;
} _MatchThreeCellDefinition__isset;

class MatchThreeCellDefinition : public virtual ::apache::thrift::TBase {
 public:

  MatchThreeCellDefinition(const MatchThreeCellDefinition&);
  MatchThreeCellDefinition& operator=(const MatchThreeCellDefinition&);
  MatchThreeCellDefinition() : match3ThemeId(), cellTypeId(), cellImagePath(), affinityId((AffinityID::type)0), specialtyId((SpecialtyID::type)0), blastJsonFilename(), blastAtlasFilename(), blastAnimationName() {
  }

  virtual ~MatchThreeCellDefinition() throw();
  Match3ThemeId match3ThemeId;
  CellTypeID cellTypeId;
  LocalizedString displayName;
  AssetPath cellImagePath;
  AffinityID::type affinityId;
  SpecialtyID::type specialtyId;
  std::string blastJsonFilename;
  std::string blastAtlasFilename;
  std::string blastAnimationName;

  _MatchThreeCellDefinition__isset __isset;

  void __set_match3ThemeId(const Match3ThemeId& val);

  void __set_cellTypeId(const CellTypeID& val);

  void __set_displayName(const LocalizedString& val);

  void __set_cellImagePath(const AssetPath& val);

  void __set_affinityId(const AffinityID::type val);

  void __set_specialtyId(const SpecialtyID::type val);

  void __set_blastJsonFilename(const std::string& val);

  void __set_blastAtlasFilename(const std::string& val);

  void __set_blastAnimationName(const std::string& val);

  bool operator == (const MatchThreeCellDefinition & rhs) const
  {
    if (!(match3ThemeId == rhs.match3ThemeId))
      return false;
    if (!(cellTypeId == rhs.cellTypeId))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (__isset.cellImagePath != rhs.__isset.cellImagePath)
      return false;
    else if (__isset.cellImagePath && !(cellImagePath == rhs.cellImagePath))
      return false;
    if (__isset.affinityId != rhs.__isset.affinityId)
      return false;
    else if (__isset.affinityId && !(affinityId == rhs.affinityId))
      return false;
    if (__isset.specialtyId != rhs.__isset.specialtyId)
      return false;
    else if (__isset.specialtyId && !(specialtyId == rhs.specialtyId))
      return false;
    if (__isset.blastJsonFilename != rhs.__isset.blastJsonFilename)
      return false;
    else if (__isset.blastJsonFilename && !(blastJsonFilename == rhs.blastJsonFilename))
      return false;
    if (__isset.blastAtlasFilename != rhs.__isset.blastAtlasFilename)
      return false;
    else if (__isset.blastAtlasFilename && !(blastAtlasFilename == rhs.blastAtlasFilename))
      return false;
    if (__isset.blastAnimationName != rhs.__isset.blastAnimationName)
      return false;
    else if (__isset.blastAnimationName && !(blastAnimationName == rhs.blastAnimationName))
      return false;
    return true;
  }
  bool operator != (const MatchThreeCellDefinition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MatchThreeCellDefinition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MatchThreeCellDefinition &a, MatchThreeCellDefinition &b);

std::ostream& operator<<(std::ostream& out, const MatchThreeCellDefinition& obj);

typedef struct _MatchThreeBlasterDefinition__isset {
  _MatchThreeBlasterDefinition__isset() : blasterTypeId(false), displayName(false), cellMatchCategory(false), blastJsonFilename(false), blastAtlasFilename(false), blastAnimationName(false) {}
  bool blasterTypeId :1;
  bool displayName :1;
  bool cellMatchCategory :1;
  bool blastJsonFilename :1;
  bool blastAtlasFilename :1;
  bool blastAnimationName :1;
} _MatchThreeBlasterDefinition__isset;

class MatchThreeBlasterDefinition : public virtual ::apache::thrift::TBase {
 public:

  MatchThreeBlasterDefinition(const MatchThreeBlasterDefinition&);
  MatchThreeBlasterDefinition& operator=(const MatchThreeBlasterDefinition&);
  MatchThreeBlasterDefinition() : match3ThemeId(), blasterTypeId(), cellMatchCategory(), blastJsonFilename(), blastAtlasFilename(), blastAnimationName() {
  }

  virtual ~MatchThreeBlasterDefinition() throw();
  Match3ThemeId match3ThemeId;
  BlasterTypeID blasterTypeId;
  LocalizedString displayName;
  std::string cellMatchCategory;
  std::string blastJsonFilename;
  std::string blastAtlasFilename;
  std::string blastAnimationName;

  _MatchThreeBlasterDefinition__isset __isset;

  void __set_match3ThemeId(const Match3ThemeId& val);

  void __set_blasterTypeId(const BlasterTypeID& val);

  void __set_displayName(const LocalizedString& val);

  void __set_cellMatchCategory(const std::string& val);

  void __set_blastJsonFilename(const std::string& val);

  void __set_blastAtlasFilename(const std::string& val);

  void __set_blastAnimationName(const std::string& val);

  bool operator == (const MatchThreeBlasterDefinition & rhs) const
  {
    if (!(match3ThemeId == rhs.match3ThemeId))
      return false;
    if (__isset.blasterTypeId != rhs.__isset.blasterTypeId)
      return false;
    else if (__isset.blasterTypeId && !(blasterTypeId == rhs.blasterTypeId))
      return false;
    if (__isset.displayName != rhs.__isset.displayName)
      return false;
    else if (__isset.displayName && !(displayName == rhs.displayName))
      return false;
    if (__isset.cellMatchCategory != rhs.__isset.cellMatchCategory)
      return false;
    else if (__isset.cellMatchCategory && !(cellMatchCategory == rhs.cellMatchCategory))
      return false;
    if (__isset.blastJsonFilename != rhs.__isset.blastJsonFilename)
      return false;
    else if (__isset.blastJsonFilename && !(blastJsonFilename == rhs.blastJsonFilename))
      return false;
    if (__isset.blastAtlasFilename != rhs.__isset.blastAtlasFilename)
      return false;
    else if (__isset.blastAtlasFilename && !(blastAtlasFilename == rhs.blastAtlasFilename))
      return false;
    if (__isset.blastAnimationName != rhs.__isset.blastAnimationName)
      return false;
    else if (__isset.blastAnimationName && !(blastAnimationName == rhs.blastAnimationName))
      return false;
    return true;
  }
  bool operator != (const MatchThreeBlasterDefinition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MatchThreeBlasterDefinition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MatchThreeBlasterDefinition &a, MatchThreeBlasterDefinition &b);

std::ostream& operator<<(std::ostream& out, const MatchThreeBlasterDefinition& obj);

typedef struct _CastleActivity__isset {
  _CastleActivity__isset() : localizedDisplay(false), eventHowToPlayId(false), eventMainMenuId(false), villainId(false), eventGachaOfferId(false), eventTicketGachaOfferId(false), guildLeaderboardId(false), endEventSequenceTriggerOnPopupMessageId(false), levelPerFloor(false), maxUnlockedFloor(false), cellInfoMapId(false), upsellCurrencyId(false), upsellCurrencyOpenGachaOfferId(false), upsellCurrencyNotEnoughText(false), autoPlayKeyCost(false), autoPlayEventPointMultiplier(false), keyCostPerLevelId(false), businessCountEventPointMultiplier(false), eventStoreId(false), eventStampStateChangeMultiplier(false), disableAutoPlay(false), hideEventPointsOnLevelDots(false), eventMainMenuWidgets(false), eventMainMenuWidgetPrefix(false), expansionId(false) {}
  bool localizedDisplay :1;
  bool eventHowToPlayId :1;
  bool eventMainMenuId :1;
  bool villainId :1;
  bool eventGachaOfferId :1;
  bool eventTicketGachaOfferId :1;
  bool guildLeaderboardId :1;
  bool endEventSequenceTriggerOnPopupMessageId :1;
  bool levelPerFloor :1;
  bool maxUnlockedFloor :1;
  bool cellInfoMapId :1;
  bool upsellCurrencyId :1;
  bool upsellCurrencyOpenGachaOfferId :1;
  bool upsellCurrencyNotEnoughText :1;
  bool autoPlayKeyCost :1;
  bool autoPlayEventPointMultiplier :1;
  bool keyCostPerLevelId :1;
  bool businessCountEventPointMultiplier :1;
  bool eventStoreId :1;
  bool eventStampStateChangeMultiplier :1;
  bool disableAutoPlay :1;
  bool hideEventPointsOnLevelDots :1;
  bool eventMainMenuWidgets :1;
  bool eventMainMenuWidgetPrefix :1;
  bool expansionId :1;
} _CastleActivity__isset;

class CastleActivity : public virtual ::apache::thrift::TBase {
 public:

  CastleActivity(const CastleActivity&);
  CastleActivity& operator=(const CastleActivity&);
  CastleActivity() : activityId(), eventPhases((EventPhases::type)0), keyCurrencyId(), showRank(0), unlockRank(0), hideRank(0), localizedDisplay(), eventIslandId(), eventPointCurrencyId(), eventHowToPlayId(), eventMainMenuId(), keyCost1(0), keyCost2(0), keyCost3(0), eventPointMultiplier1(0), eventPointMultiplier2(0), eventPointMultiplier3(0), eventBusinessBuildingId(), villainId(), eventGachaOfferId(), ticketCurrencyId(), eventTicketGachaOfferId(), soloLeaderboardId(), globalLeaderboardId(), guildLeaderboardId(), endEventSequenceTriggerOnPopupMessageId(), levelPerFloor(0), maxUnlockedFloor(0), cellInfoMapId(), upsellCurrencyId(), upsellCurrencyOpenGachaOfferId(), autoPlayKeyCost(0), autoPlayEventPointMultiplier(0), keyCostPerLevelId(), fountainBuildingId(), businessCountEventPointMultiplier(0), upsellKeyPopupMessageId(), eventStoreId(), eventStampStateChangeMultiplier(0), disableAutoPlay(0), hideEventPointsOnLevelDots(0), eventMainMenuWidgetPrefix(), expansionId() {
  }

  virtual ~CastleActivity() throw();
  CastleActivityID activityId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  CurrencyID keyCurrencyId;
  int32_t showRank;
  int32_t unlockRank;
  int32_t hideRank;
  std::string localizedDisplay;
  LocalizedString display;
  std::vector<BundleID>  bundleIds;
  EventIslandID eventIslandId;
  CurrencyID eventPointCurrencyId;
  EventHowToPlayID eventHowToPlayId;
  EventMainMenuID eventMainMenuId;
  int32_t keyCost1;
  int32_t keyCost2;
  int32_t keyCost3;
  int32_t eventPointMultiplier1;
  int32_t eventPointMultiplier2;
  int32_t eventPointMultiplier3;
  BuildingID eventBusinessBuildingId;
  VillainID villainId;
  GachaOfferID eventGachaOfferId;
  CurrencyID ticketCurrencyId;
  GachaOfferID eventTicketGachaOfferId;
  LeaderboardID soloLeaderboardId;
  LeaderboardID globalLeaderboardId;
  GuildLeaderboardID guildLeaderboardId;
  PopupMessageID endEventSequenceTriggerOnPopupMessageId;
  int32_t levelPerFloor;
  int32_t maxUnlockedFloor;
  CellInfoMapID cellInfoMapId;
  CurrencyID upsellCurrencyId;
  GachaOfferID upsellCurrencyOpenGachaOfferId;
  LocalizedString upsellCurrencyNotEnoughText;
  int32_t autoPlayKeyCost;
  int32_t autoPlayEventPointMultiplier;
  KeyCostPerLevelID keyCostPerLevelId;
  BuildingID fountainBuildingId;
  LocalizedString fountainNotificationText;
  int32_t businessCountEventPointMultiplier;
  PopupMessageID upsellKeyPopupMessageId;
  StoreID eventStoreId;
  int32_t eventStampStateChangeMultiplier;
  bool disableAutoPlay;
  bool hideEventPointsOnLevelDots;
  std::vector<EventMenuWidgetID>  eventMainMenuWidgets;
  std::string eventMainMenuWidgetPrefix;
  ExpansionID expansionId;

  _CastleActivity__isset __isset;

  void __set_activityId(const CastleActivityID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_keyCurrencyId(const CurrencyID& val);

  void __set_showRank(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_localizedDisplay(const std::string& val);

  void __set_display(const LocalizedString& val);

  void __set_bundleIds(const std::vector<BundleID> & val);

  void __set_eventIslandId(const EventIslandID& val);

  void __set_eventPointCurrencyId(const CurrencyID& val);

  void __set_eventHowToPlayId(const EventHowToPlayID& val);

  void __set_eventMainMenuId(const EventMainMenuID& val);

  void __set_keyCost1(const int32_t val);

  void __set_keyCost2(const int32_t val);

  void __set_keyCost3(const int32_t val);

  void __set_eventPointMultiplier1(const int32_t val);

  void __set_eventPointMultiplier2(const int32_t val);

  void __set_eventPointMultiplier3(const int32_t val);

  void __set_eventBusinessBuildingId(const BuildingID& val);

  void __set_villainId(const VillainID& val);

  void __set_eventGachaOfferId(const GachaOfferID& val);

  void __set_ticketCurrencyId(const CurrencyID& val);

  void __set_eventTicketGachaOfferId(const GachaOfferID& val);

  void __set_soloLeaderboardId(const LeaderboardID& val);

  void __set_globalLeaderboardId(const LeaderboardID& val);

  void __set_guildLeaderboardId(const GuildLeaderboardID& val);

  void __set_endEventSequenceTriggerOnPopupMessageId(const PopupMessageID& val);

  void __set_levelPerFloor(const int32_t val);

  void __set_maxUnlockedFloor(const int32_t val);

  void __set_cellInfoMapId(const CellInfoMapID& val);

  void __set_upsellCurrencyId(const CurrencyID& val);

  void __set_upsellCurrencyOpenGachaOfferId(const GachaOfferID& val);

  void __set_upsellCurrencyNotEnoughText(const LocalizedString& val);

  void __set_autoPlayKeyCost(const int32_t val);

  void __set_autoPlayEventPointMultiplier(const int32_t val);

  void __set_keyCostPerLevelId(const KeyCostPerLevelID& val);

  void __set_fountainBuildingId(const BuildingID& val);

  void __set_fountainNotificationText(const LocalizedString& val);

  void __set_businessCountEventPointMultiplier(const int32_t val);

  void __set_upsellKeyPopupMessageId(const PopupMessageID& val);

  void __set_eventStoreId(const StoreID& val);

  void __set_eventStampStateChangeMultiplier(const int32_t val);

  void __set_disableAutoPlay(const bool val);

  void __set_hideEventPointsOnLevelDots(const bool val);

  void __set_eventMainMenuWidgets(const std::vector<EventMenuWidgetID> & val);

  void __set_eventMainMenuWidgetPrefix(const std::string& val);

  void __set_expansionId(const ExpansionID& val);

  bool operator == (const CastleActivity & rhs) const
  {
    if (!(activityId == rhs.activityId))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(keyCurrencyId == rhs.keyCurrencyId))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(unlockRank == rhs.unlockRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (__isset.localizedDisplay != rhs.__isset.localizedDisplay)
      return false;
    else if (__isset.localizedDisplay && !(localizedDisplay == rhs.localizedDisplay))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(bundleIds == rhs.bundleIds))
      return false;
    if (!(eventIslandId == rhs.eventIslandId))
      return false;
    if (!(eventPointCurrencyId == rhs.eventPointCurrencyId))
      return false;
    if (__isset.eventHowToPlayId != rhs.__isset.eventHowToPlayId)
      return false;
    else if (__isset.eventHowToPlayId && !(eventHowToPlayId == rhs.eventHowToPlayId))
      return false;
    if (__isset.eventMainMenuId != rhs.__isset.eventMainMenuId)
      return false;
    else if (__isset.eventMainMenuId && !(eventMainMenuId == rhs.eventMainMenuId))
      return false;
    if (!(keyCost1 == rhs.keyCost1))
      return false;
    if (!(keyCost2 == rhs.keyCost2))
      return false;
    if (!(keyCost3 == rhs.keyCost3))
      return false;
    if (!(eventPointMultiplier1 == rhs.eventPointMultiplier1))
      return false;
    if (!(eventPointMultiplier2 == rhs.eventPointMultiplier2))
      return false;
    if (!(eventPointMultiplier3 == rhs.eventPointMultiplier3))
      return false;
    if (!(eventBusinessBuildingId == rhs.eventBusinessBuildingId))
      return false;
    if (__isset.villainId != rhs.__isset.villainId)
      return false;
    else if (__isset.villainId && !(villainId == rhs.villainId))
      return false;
    if (__isset.eventGachaOfferId != rhs.__isset.eventGachaOfferId)
      return false;
    else if (__isset.eventGachaOfferId && !(eventGachaOfferId == rhs.eventGachaOfferId))
      return false;
    if (!(ticketCurrencyId == rhs.ticketCurrencyId))
      return false;
    if (__isset.eventTicketGachaOfferId != rhs.__isset.eventTicketGachaOfferId)
      return false;
    else if (__isset.eventTicketGachaOfferId && !(eventTicketGachaOfferId == rhs.eventTicketGachaOfferId))
      return false;
    if (!(soloLeaderboardId == rhs.soloLeaderboardId))
      return false;
    if (!(globalLeaderboardId == rhs.globalLeaderboardId))
      return false;
    if (__isset.guildLeaderboardId != rhs.__isset.guildLeaderboardId)
      return false;
    else if (__isset.guildLeaderboardId && !(guildLeaderboardId == rhs.guildLeaderboardId))
      return false;
    if (__isset.endEventSequenceTriggerOnPopupMessageId != rhs.__isset.endEventSequenceTriggerOnPopupMessageId)
      return false;
    else if (__isset.endEventSequenceTriggerOnPopupMessageId && !(endEventSequenceTriggerOnPopupMessageId == rhs.endEventSequenceTriggerOnPopupMessageId))
      return false;
    if (__isset.levelPerFloor != rhs.__isset.levelPerFloor)
      return false;
    else if (__isset.levelPerFloor && !(levelPerFloor == rhs.levelPerFloor))
      return false;
    if (__isset.maxUnlockedFloor != rhs.__isset.maxUnlockedFloor)
      return false;
    else if (__isset.maxUnlockedFloor && !(maxUnlockedFloor == rhs.maxUnlockedFloor))
      return false;
    if (__isset.cellInfoMapId != rhs.__isset.cellInfoMapId)
      return false;
    else if (__isset.cellInfoMapId && !(cellInfoMapId == rhs.cellInfoMapId))
      return false;
    if (__isset.upsellCurrencyId != rhs.__isset.upsellCurrencyId)
      return false;
    else if (__isset.upsellCurrencyId && !(upsellCurrencyId == rhs.upsellCurrencyId))
      return false;
    if (__isset.upsellCurrencyOpenGachaOfferId != rhs.__isset.upsellCurrencyOpenGachaOfferId)
      return false;
    else if (__isset.upsellCurrencyOpenGachaOfferId && !(upsellCurrencyOpenGachaOfferId == rhs.upsellCurrencyOpenGachaOfferId))
      return false;
    if (__isset.upsellCurrencyNotEnoughText != rhs.__isset.upsellCurrencyNotEnoughText)
      return false;
    else if (__isset.upsellCurrencyNotEnoughText && !(upsellCurrencyNotEnoughText == rhs.upsellCurrencyNotEnoughText))
      return false;
    if (__isset.autoPlayKeyCost != rhs.__isset.autoPlayKeyCost)
      return false;
    else if (__isset.autoPlayKeyCost && !(autoPlayKeyCost == rhs.autoPlayKeyCost))
      return false;
    if (__isset.autoPlayEventPointMultiplier != rhs.__isset.autoPlayEventPointMultiplier)
      return false;
    else if (__isset.autoPlayEventPointMultiplier && !(autoPlayEventPointMultiplier == rhs.autoPlayEventPointMultiplier))
      return false;
    if (__isset.keyCostPerLevelId != rhs.__isset.keyCostPerLevelId)
      return false;
    else if (__isset.keyCostPerLevelId && !(keyCostPerLevelId == rhs.keyCostPerLevelId))
      return false;
    if (!(fountainBuildingId == rhs.fountainBuildingId))
      return false;
    if (!(fountainNotificationText == rhs.fountainNotificationText))
      return false;
    if (__isset.businessCountEventPointMultiplier != rhs.__isset.businessCountEventPointMultiplier)
      return false;
    else if (__isset.businessCountEventPointMultiplier && !(businessCountEventPointMultiplier == rhs.businessCountEventPointMultiplier))
      return false;
    if (!(upsellKeyPopupMessageId == rhs.upsellKeyPopupMessageId))
      return false;
    if (__isset.eventStoreId != rhs.__isset.eventStoreId)
      return false;
    else if (__isset.eventStoreId && !(eventStoreId == rhs.eventStoreId))
      return false;
    if (__isset.eventStampStateChangeMultiplier != rhs.__isset.eventStampStateChangeMultiplier)
      return false;
    else if (__isset.eventStampStateChangeMultiplier && !(eventStampStateChangeMultiplier == rhs.eventStampStateChangeMultiplier))
      return false;
    if (__isset.disableAutoPlay != rhs.__isset.disableAutoPlay)
      return false;
    else if (__isset.disableAutoPlay && !(disableAutoPlay == rhs.disableAutoPlay))
      return false;
    if (__isset.hideEventPointsOnLevelDots != rhs.__isset.hideEventPointsOnLevelDots)
      return false;
    else if (__isset.hideEventPointsOnLevelDots && !(hideEventPointsOnLevelDots == rhs.hideEventPointsOnLevelDots))
      return false;
    if (__isset.eventMainMenuWidgets != rhs.__isset.eventMainMenuWidgets)
      return false;
    else if (__isset.eventMainMenuWidgets && !(eventMainMenuWidgets == rhs.eventMainMenuWidgets))
      return false;
    if (__isset.eventMainMenuWidgetPrefix != rhs.__isset.eventMainMenuWidgetPrefix)
      return false;
    else if (__isset.eventMainMenuWidgetPrefix && !(eventMainMenuWidgetPrefix == rhs.eventMainMenuWidgetPrefix))
      return false;
    if (__isset.expansionId != rhs.__isset.expansionId)
      return false;
    else if (__isset.expansionId && !(expansionId == rhs.expansionId))
      return false;
    return true;
  }
  bool operator != (const CastleActivity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleActivity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CastleActivity &a, CastleActivity &b);

std::ostream& operator<<(std::ostream& out, const CastleActivity& obj);

typedef struct _RaidBossActivity__isset {
  _RaidBossActivity__isset() : bundleIds(false), eventIslandId(false), eventPointCurrencyId(false), eventHowToPlayId(false), eventMainMenuId(false), eventBusinessBuildingId(false), eventGachaOfferId(false), affinityBonus(false), specialtyBonus(false), ticketCurrencyId(false), eventTicketGachaOfferId(false), soloLeaderboardId(false), globalLeaderboardId(false), guildLeaderboardId(false), cellInfoMapId(false), upsellCurrencyId(false), upsellCurrencyOpenGachaOfferId(false), upsellCurrencyNotEnoughText(false), keyCostPerLevelId(false), fountainBuildingId(false), fountainNotificationText(false), upsellKeyPopupMessageId(false), eventStoreId(false), eventStampStateChangeMultiplier(false), eventMainMenuWidgetPrefix(false), expansionId(false) {}
  bool bundleIds :1;
  bool eventIslandId :1;
  bool eventPointCurrencyId :1;
  bool eventHowToPlayId :1;
  bool eventMainMenuId :1;
  bool eventBusinessBuildingId :1;
  bool eventGachaOfferId :1;
  bool affinityBonus :1;
  bool specialtyBonus :1;
  bool ticketCurrencyId :1;
  bool eventTicketGachaOfferId :1;
  bool soloLeaderboardId :1;
  bool globalLeaderboardId :1;
  bool guildLeaderboardId :1;
  bool cellInfoMapId :1;
  bool upsellCurrencyId :1;
  bool upsellCurrencyOpenGachaOfferId :1;
  bool upsellCurrencyNotEnoughText :1;
  bool keyCostPerLevelId :1;
  bool fountainBuildingId :1;
  bool fountainNotificationText :1;
  bool upsellKeyPopupMessageId :1;
  bool eventStoreId :1;
  bool eventStampStateChangeMultiplier :1;
  bool eventMainMenuWidgetPrefix :1;
  bool expansionId :1;
} _RaidBossActivity__isset;

class RaidBossActivity : public virtual ::apache::thrift::TBase {
 public:

  RaidBossActivity(const RaidBossActivity&);
  RaidBossActivity& operator=(const RaidBossActivity&);
  RaidBossActivity() : activityId(), eventPhases((EventPhases::type)0), keyCurrencyId(), showRank(0), unlockRank(0), hideRank(0), eventIslandId(), eventPointCurrencyId(), eventHowToPlayId(), eventMainMenuId(), eventBusinessBuildingId(), eventGachaOfferId(), ticketCurrencyId(), eventTicketGachaOfferId(), soloLeaderboardId(), globalLeaderboardId(), guildLeaderboardId(), cellInfoMapId(), upsellCurrencyId(), upsellCurrencyOpenGachaOfferId(), keyCostPerLevelId(), fountainBuildingId(), upsellKeyPopupMessageId(), eventStoreId(), eventStampStateChangeMultiplier(0), eventMainMenuWidgetPrefix(), expansionId() {
  }

  virtual ~RaidBossActivity() throw();
  CastleActivityID activityId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  CurrencyID keyCurrencyId;
  int32_t showRank;
  int32_t unlockRank;
  int32_t hideRank;
  LocalizedString display;
  std::vector<BundleID>  bundleIds;
  EventIslandID eventIslandId;
  CurrencyID eventPointCurrencyId;
  EventHowToPlayID eventHowToPlayId;
  EventMainMenuID eventMainMenuId;
  BuildingID eventBusinessBuildingId;
  GachaOfferID eventGachaOfferId;
  std::vector<int32_t>  affinityBonus;
  std::vector<int32_t>  specialtyBonus;
  CurrencyID ticketCurrencyId;
  GachaOfferID eventTicketGachaOfferId;
  LeaderboardID soloLeaderboardId;
  LeaderboardID globalLeaderboardId;
  GuildLeaderboardID guildLeaderboardId;
  CellInfoMapID cellInfoMapId;
  CurrencyID upsellCurrencyId;
  GachaOfferID upsellCurrencyOpenGachaOfferId;
  LocalizedString upsellCurrencyNotEnoughText;
  KeyCostPerLevelID keyCostPerLevelId;
  BuildingID fountainBuildingId;
  LocalizedString fountainNotificationText;
  PopupMessageID upsellKeyPopupMessageId;
  StoreID eventStoreId;
  int32_t eventStampStateChangeMultiplier;
  std::string eventMainMenuWidgetPrefix;
  ExpansionID expansionId;

  _RaidBossActivity__isset __isset;

  void __set_activityId(const CastleActivityID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_keyCurrencyId(const CurrencyID& val);

  void __set_showRank(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_display(const LocalizedString& val);

  void __set_bundleIds(const std::vector<BundleID> & val);

  void __set_eventIslandId(const EventIslandID& val);

  void __set_eventPointCurrencyId(const CurrencyID& val);

  void __set_eventHowToPlayId(const EventHowToPlayID& val);

  void __set_eventMainMenuId(const EventMainMenuID& val);

  void __set_eventBusinessBuildingId(const BuildingID& val);

  void __set_eventGachaOfferId(const GachaOfferID& val);

  void __set_affinityBonus(const std::vector<int32_t> & val);

  void __set_specialtyBonus(const std::vector<int32_t> & val);

  void __set_ticketCurrencyId(const CurrencyID& val);

  void __set_eventTicketGachaOfferId(const GachaOfferID& val);

  void __set_soloLeaderboardId(const LeaderboardID& val);

  void __set_globalLeaderboardId(const LeaderboardID& val);

  void __set_guildLeaderboardId(const GuildLeaderboardID& val);

  void __set_cellInfoMapId(const CellInfoMapID& val);

  void __set_upsellCurrencyId(const CurrencyID& val);

  void __set_upsellCurrencyOpenGachaOfferId(const GachaOfferID& val);

  void __set_upsellCurrencyNotEnoughText(const LocalizedString& val);

  void __set_keyCostPerLevelId(const KeyCostPerLevelID& val);

  void __set_fountainBuildingId(const BuildingID& val);

  void __set_fountainNotificationText(const LocalizedString& val);

  void __set_upsellKeyPopupMessageId(const PopupMessageID& val);

  void __set_eventStoreId(const StoreID& val);

  void __set_eventStampStateChangeMultiplier(const int32_t val);

  void __set_eventMainMenuWidgetPrefix(const std::string& val);

  void __set_expansionId(const ExpansionID& val);

  bool operator == (const RaidBossActivity & rhs) const
  {
    if (!(activityId == rhs.activityId))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(keyCurrencyId == rhs.keyCurrencyId))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(unlockRank == rhs.unlockRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (!(display == rhs.display))
      return false;
    if (__isset.bundleIds != rhs.__isset.bundleIds)
      return false;
    else if (__isset.bundleIds && !(bundleIds == rhs.bundleIds))
      return false;
    if (__isset.eventIslandId != rhs.__isset.eventIslandId)
      return false;
    else if (__isset.eventIslandId && !(eventIslandId == rhs.eventIslandId))
      return false;
    if (__isset.eventPointCurrencyId != rhs.__isset.eventPointCurrencyId)
      return false;
    else if (__isset.eventPointCurrencyId && !(eventPointCurrencyId == rhs.eventPointCurrencyId))
      return false;
    if (__isset.eventHowToPlayId != rhs.__isset.eventHowToPlayId)
      return false;
    else if (__isset.eventHowToPlayId && !(eventHowToPlayId == rhs.eventHowToPlayId))
      return false;
    if (__isset.eventMainMenuId != rhs.__isset.eventMainMenuId)
      return false;
    else if (__isset.eventMainMenuId && !(eventMainMenuId == rhs.eventMainMenuId))
      return false;
    if (__isset.eventBusinessBuildingId != rhs.__isset.eventBusinessBuildingId)
      return false;
    else if (__isset.eventBusinessBuildingId && !(eventBusinessBuildingId == rhs.eventBusinessBuildingId))
      return false;
    if (__isset.eventGachaOfferId != rhs.__isset.eventGachaOfferId)
      return false;
    else if (__isset.eventGachaOfferId && !(eventGachaOfferId == rhs.eventGachaOfferId))
      return false;
    if (__isset.affinityBonus != rhs.__isset.affinityBonus)
      return false;
    else if (__isset.affinityBonus && !(affinityBonus == rhs.affinityBonus))
      return false;
    if (__isset.specialtyBonus != rhs.__isset.specialtyBonus)
      return false;
    else if (__isset.specialtyBonus && !(specialtyBonus == rhs.specialtyBonus))
      return false;
    if (__isset.ticketCurrencyId != rhs.__isset.ticketCurrencyId)
      return false;
    else if (__isset.ticketCurrencyId && !(ticketCurrencyId == rhs.ticketCurrencyId))
      return false;
    if (__isset.eventTicketGachaOfferId != rhs.__isset.eventTicketGachaOfferId)
      return false;
    else if (__isset.eventTicketGachaOfferId && !(eventTicketGachaOfferId == rhs.eventTicketGachaOfferId))
      return false;
    if (__isset.soloLeaderboardId != rhs.__isset.soloLeaderboardId)
      return false;
    else if (__isset.soloLeaderboardId && !(soloLeaderboardId == rhs.soloLeaderboardId))
      return false;
    if (__isset.globalLeaderboardId != rhs.__isset.globalLeaderboardId)
      return false;
    else if (__isset.globalLeaderboardId && !(globalLeaderboardId == rhs.globalLeaderboardId))
      return false;
    if (__isset.guildLeaderboardId != rhs.__isset.guildLeaderboardId)
      return false;
    else if (__isset.guildLeaderboardId && !(guildLeaderboardId == rhs.guildLeaderboardId))
      return false;
    if (__isset.cellInfoMapId != rhs.__isset.cellInfoMapId)
      return false;
    else if (__isset.cellInfoMapId && !(cellInfoMapId == rhs.cellInfoMapId))
      return false;
    if (__isset.upsellCurrencyId != rhs.__isset.upsellCurrencyId)
      return false;
    else if (__isset.upsellCurrencyId && !(upsellCurrencyId == rhs.upsellCurrencyId))
      return false;
    if (__isset.upsellCurrencyOpenGachaOfferId != rhs.__isset.upsellCurrencyOpenGachaOfferId)
      return false;
    else if (__isset.upsellCurrencyOpenGachaOfferId && !(upsellCurrencyOpenGachaOfferId == rhs.upsellCurrencyOpenGachaOfferId))
      return false;
    if (__isset.upsellCurrencyNotEnoughText != rhs.__isset.upsellCurrencyNotEnoughText)
      return false;
    else if (__isset.upsellCurrencyNotEnoughText && !(upsellCurrencyNotEnoughText == rhs.upsellCurrencyNotEnoughText))
      return false;
    if (__isset.keyCostPerLevelId != rhs.__isset.keyCostPerLevelId)
      return false;
    else if (__isset.keyCostPerLevelId && !(keyCostPerLevelId == rhs.keyCostPerLevelId))
      return false;
    if (__isset.fountainBuildingId != rhs.__isset.fountainBuildingId)
      return false;
    else if (__isset.fountainBuildingId && !(fountainBuildingId == rhs.fountainBuildingId))
      return false;
    if (__isset.fountainNotificationText != rhs.__isset.fountainNotificationText)
      return false;
    else if (__isset.fountainNotificationText && !(fountainNotificationText == rhs.fountainNotificationText))
      return false;
    if (__isset.upsellKeyPopupMessageId != rhs.__isset.upsellKeyPopupMessageId)
      return false;
    else if (__isset.upsellKeyPopupMessageId && !(upsellKeyPopupMessageId == rhs.upsellKeyPopupMessageId))
      return false;
    if (__isset.eventStoreId != rhs.__isset.eventStoreId)
      return false;
    else if (__isset.eventStoreId && !(eventStoreId == rhs.eventStoreId))
      return false;
    if (__isset.eventStampStateChangeMultiplier != rhs.__isset.eventStampStateChangeMultiplier)
      return false;
    else if (__isset.eventStampStateChangeMultiplier && !(eventStampStateChangeMultiplier == rhs.eventStampStateChangeMultiplier))
      return false;
    if (__isset.eventMainMenuWidgetPrefix != rhs.__isset.eventMainMenuWidgetPrefix)
      return false;
    else if (__isset.eventMainMenuWidgetPrefix && !(eventMainMenuWidgetPrefix == rhs.eventMainMenuWidgetPrefix))
      return false;
    if (__isset.expansionId != rhs.__isset.expansionId)
      return false;
    else if (__isset.expansionId && !(expansionId == rhs.expansionId))
      return false;
    return true;
  }
  bool operator != (const RaidBossActivity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaidBossActivity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaidBossActivity &a, RaidBossActivity &b);

std::ostream& operator<<(std::ostream& out, const RaidBossActivity& obj);

typedef struct _KeyCostPerLevel__isset {
  _KeyCostPerLevel__isset() : costCurrencyId1(false), costCurrencyId2(false), costCurrencyId3(false) {}
  bool costCurrencyId1 :1;
  bool costCurrencyId2 :1;
  bool costCurrencyId3 :1;
} _KeyCostPerLevel__isset;

class KeyCostPerLevel : public virtual ::apache::thrift::TBase {
 public:

  KeyCostPerLevel(const KeyCostPerLevel&);
  KeyCostPerLevel& operator=(const KeyCostPerLevel&);
  KeyCostPerLevel() : keyCostPerLevelId(), levelId(), keyCost1(0), keyCost2(0), keyCost3(0), eventPointMultiplier1(0), eventPointMultiplier2(0), eventPointMultiplier3(0), autoPlayKeyCost(0), autoPlayEventPointMultiplier(0), autoPlayTicketCost(0), costCurrencyId1(), costCurrencyId2(), costCurrencyId3() {
  }

  virtual ~KeyCostPerLevel() throw();
  KeyCostPerLevelID keyCostPerLevelId;
  LevelID levelId;
  int32_t keyCost1;
  int32_t keyCost2;
  int32_t keyCost3;
  int32_t eventPointMultiplier1;
  int32_t eventPointMultiplier2;
  int32_t eventPointMultiplier3;
  int32_t autoPlayKeyCost;
  int32_t autoPlayEventPointMultiplier;
  int32_t autoPlayTicketCost;
  CurrencyID costCurrencyId1;
  CurrencyID costCurrencyId2;
  CurrencyID costCurrencyId3;

  _KeyCostPerLevel__isset __isset;

  void __set_keyCostPerLevelId(const KeyCostPerLevelID& val);

  void __set_levelId(const LevelID& val);

  void __set_keyCost1(const int32_t val);

  void __set_keyCost2(const int32_t val);

  void __set_keyCost3(const int32_t val);

  void __set_eventPointMultiplier1(const int32_t val);

  void __set_eventPointMultiplier2(const int32_t val);

  void __set_eventPointMultiplier3(const int32_t val);

  void __set_autoPlayKeyCost(const int32_t val);

  void __set_autoPlayEventPointMultiplier(const int32_t val);

  void __set_autoPlayTicketCost(const int32_t val);

  void __set_costCurrencyId1(const CurrencyID& val);

  void __set_costCurrencyId2(const CurrencyID& val);

  void __set_costCurrencyId3(const CurrencyID& val);

  bool operator == (const KeyCostPerLevel & rhs) const
  {
    if (!(keyCostPerLevelId == rhs.keyCostPerLevelId))
      return false;
    if (!(levelId == rhs.levelId))
      return false;
    if (!(keyCost1 == rhs.keyCost1))
      return false;
    if (!(keyCost2 == rhs.keyCost2))
      return false;
    if (!(keyCost3 == rhs.keyCost3))
      return false;
    if (!(eventPointMultiplier1 == rhs.eventPointMultiplier1))
      return false;
    if (!(eventPointMultiplier2 == rhs.eventPointMultiplier2))
      return false;
    if (!(eventPointMultiplier3 == rhs.eventPointMultiplier3))
      return false;
    if (!(autoPlayKeyCost == rhs.autoPlayKeyCost))
      return false;
    if (!(autoPlayEventPointMultiplier == rhs.autoPlayEventPointMultiplier))
      return false;
    if (!(autoPlayTicketCost == rhs.autoPlayTicketCost))
      return false;
    if (__isset.costCurrencyId1 != rhs.__isset.costCurrencyId1)
      return false;
    else if (__isset.costCurrencyId1 && !(costCurrencyId1 == rhs.costCurrencyId1))
      return false;
    if (__isset.costCurrencyId2 != rhs.__isset.costCurrencyId2)
      return false;
    else if (__isset.costCurrencyId2 && !(costCurrencyId2 == rhs.costCurrencyId2))
      return false;
    if (__isset.costCurrencyId3 != rhs.__isset.costCurrencyId3)
      return false;
    else if (__isset.costCurrencyId3 && !(costCurrencyId3 == rhs.costCurrencyId3))
      return false;
    return true;
  }
  bool operator != (const KeyCostPerLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyCostPerLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeyCostPerLevel &a, KeyCostPerLevel &b);

std::ostream& operator<<(std::ostream& out, const KeyCostPerLevel& obj);


class EventIsland : public virtual ::apache::thrift::TBase {
 public:

  EventIsland(const EventIsland&);
  EventIsland& operator=(const EventIsland&);
  EventIsland() : eventIslandId(), filename(), x(0), y(0), sizeX(0), sizeY(0), realHeight(0) {
  }

  virtual ~EventIsland() throw();
  EventIslandID eventIslandId;
  std::string filename;
  int32_t x;
  int32_t y;
  int32_t sizeX;
  int32_t sizeY;
  int32_t realHeight;

  void __set_eventIslandId(const EventIslandID& val);

  void __set_filename(const std::string& val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_sizeX(const int32_t val);

  void __set_sizeY(const int32_t val);

  void __set_realHeight(const int32_t val);

  bool operator == (const EventIsland & rhs) const
  {
    if (!(eventIslandId == rhs.eventIslandId))
      return false;
    if (!(filename == rhs.filename))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(sizeX == rhs.sizeX))
      return false;
    if (!(sizeY == rhs.sizeY))
      return false;
    if (!(realHeight == rhs.realHeight))
      return false;
    return true;
  }
  bool operator != (const EventIsland &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventIsland & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EventIsland &a, EventIsland &b);

std::ostream& operator<<(std::ostream& out, const EventIsland& obj);

typedef struct _EventHowToPlay__isset {
  _EventHowToPlay__isset() : step1Ftue(false), step2Ftue(false), step3Ftue(false), titleIcon(false) {}
  bool step1Ftue :1;
  bool step2Ftue :1;
  bool step3Ftue :1;
  bool titleIcon :1;
} _EventHowToPlay__isset;

class EventHowToPlay : public virtual ::apache::thrift::TBase {
 public:

  EventHowToPlay(const EventHowToPlay&);
  EventHowToPlay& operator=(const EventHowToPlay&);
  EventHowToPlay() : eventHowToPlayId(), backgroundImage(), templateFile(), titleBackgroundImage(), step1(), step1Icon(), step2(), step2Icon(), step3(), step3Icon(), stepBackgroundImage(), stepBurstImage(), businessBannerBackgroundBg9(), businessBannerText(), hintText(), step1Ftue(), step2Ftue(), step3Ftue(), titleIcon() {
  }

  virtual ~EventHowToPlay() throw();
  EventHowToPlayID eventHowToPlayId;
  AssetPath backgroundImage;
  std::string templateFile;
  AssetPath titleBackgroundImage;
  std::string step1;
  AssetPath step1Icon;
  std::string step2;
  AssetPath step2Icon;
  std::string step3;
  AssetPath step3Icon;
  AssetPath stepBackgroundImage;
  AssetPath stepBurstImage;
  AssetPath businessBannerBackgroundBg9;
  std::string businessBannerText;
  std::string hintText;
  std::string step1Ftue;
  std::string step2Ftue;
  std::string step3Ftue;
  AssetPath titleIcon;

  _EventHowToPlay__isset __isset;

  void __set_eventHowToPlayId(const EventHowToPlayID& val);

  void __set_backgroundImage(const AssetPath& val);

  void __set_templateFile(const std::string& val);

  void __set_titleBackgroundImage(const AssetPath& val);

  void __set_step1(const std::string& val);

  void __set_step1Icon(const AssetPath& val);

  void __set_step2(const std::string& val);

  void __set_step2Icon(const AssetPath& val);

  void __set_step3(const std::string& val);

  void __set_step3Icon(const AssetPath& val);

  void __set_stepBackgroundImage(const AssetPath& val);

  void __set_stepBurstImage(const AssetPath& val);

  void __set_businessBannerBackgroundBg9(const AssetPath& val);

  void __set_businessBannerText(const std::string& val);

  void __set_hintText(const std::string& val);

  void __set_step1Ftue(const std::string& val);

  void __set_step2Ftue(const std::string& val);

  void __set_step3Ftue(const std::string& val);

  void __set_titleIcon(const AssetPath& val);

  bool operator == (const EventHowToPlay & rhs) const
  {
    if (!(eventHowToPlayId == rhs.eventHowToPlayId))
      return false;
    if (!(backgroundImage == rhs.backgroundImage))
      return false;
    if (!(templateFile == rhs.templateFile))
      return false;
    if (!(titleBackgroundImage == rhs.titleBackgroundImage))
      return false;
    if (!(step1 == rhs.step1))
      return false;
    if (!(step1Icon == rhs.step1Icon))
      return false;
    if (!(step2 == rhs.step2))
      return false;
    if (!(step2Icon == rhs.step2Icon))
      return false;
    if (!(step3 == rhs.step3))
      return false;
    if (!(step3Icon == rhs.step3Icon))
      return false;
    if (!(stepBackgroundImage == rhs.stepBackgroundImage))
      return false;
    if (!(stepBurstImage == rhs.stepBurstImage))
      return false;
    if (!(businessBannerBackgroundBg9 == rhs.businessBannerBackgroundBg9))
      return false;
    if (!(businessBannerText == rhs.businessBannerText))
      return false;
    if (!(hintText == rhs.hintText))
      return false;
    if (__isset.step1Ftue != rhs.__isset.step1Ftue)
      return false;
    else if (__isset.step1Ftue && !(step1Ftue == rhs.step1Ftue))
      return false;
    if (__isset.step2Ftue != rhs.__isset.step2Ftue)
      return false;
    else if (__isset.step2Ftue && !(step2Ftue == rhs.step2Ftue))
      return false;
    if (__isset.step3Ftue != rhs.__isset.step3Ftue)
      return false;
    else if (__isset.step3Ftue && !(step3Ftue == rhs.step3Ftue))
      return false;
    if (__isset.titleIcon != rhs.__isset.titleIcon)
      return false;
    else if (__isset.titleIcon && !(titleIcon == rhs.titleIcon))
      return false;
    return true;
  }
  bool operator != (const EventHowToPlay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventHowToPlay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EventHowToPlay &a, EventHowToPlay &b);

std::ostream& operator<<(std::ostream& out, const EventHowToPlay& obj);

typedef struct _EventMainMenu__isset {
  _EventMainMenu__isset() : recapTextNotParticipated(false), bottomNavBuildingImage(false), bottomNavLeaderboardImage(false), hidePreviewPhaseGetNowButton(false), rankLockAndPreviewBackground(false), rankLockAndPreviewBackgroundLandscape(false), rankLockAndPreviewTimerBackground(false), rankLockAndPreviewTimerBackgroundLandscape(false), previewOverlay(false), previewOverlayLandscape(false), rankLockOverlay(false), rankLockOverlayLandscape(false), recapRibbonImage(false), recapTrophyTableImage(false) {}
  bool recapTextNotParticipated :1;
  bool bottomNavBuildingImage :1;
  bool bottomNavLeaderboardImage :1;
  bool hidePreviewPhaseGetNowButton :1;
  bool rankLockAndPreviewBackground :1;
  bool rankLockAndPreviewBackgroundLandscape :1;
  bool rankLockAndPreviewTimerBackground :1;
  bool rankLockAndPreviewTimerBackgroundLandscape :1;
  bool previewOverlay :1;
  bool previewOverlayLandscape :1;
  bool rankLockOverlay :1;
  bool rankLockOverlayLandscape :1;
  bool recapRibbonImage :1;
  bool recapTrophyTableImage :1;
} _EventMainMenu__isset;

class EventMainMenu : public virtual ::apache::thrift::TBase {
 public:

  EventMainMenu(const EventMainMenu&);
  EventMainMenu& operator=(const EventMainMenu&);
  EventMainMenu() : eventMainMenuId(), floorBackgroundImage(), topImagePortrait(), bottomImagePortrait(), topImageLandscape(), bottomImageLandscape(), timerScale9Image(), rankLockBackgroundImage(), previewImage(), rewardButtonImage(), floorRewardBg(), floorRewardChestClosed(), floorRewardChestOpen(), bottomNavBuildingImage(), bottomNavLeaderboardImage(), hidePreviewPhaseGetNowButton(0), rankLockAndPreviewBackground(), rankLockAndPreviewBackgroundLandscape(), rankLockAndPreviewTimerBackground(), rankLockAndPreviewTimerBackgroundLandscape(), previewOverlay(), previewOverlayLandscape(), rankLockOverlay(), rankLockOverlayLandscape(), recapRibbonImage(), recapTrophyTableImage() {
  }

  virtual ~EventMainMenu() throw();
  EventMainMenuID eventMainMenuId;
  AssetPath floorBackgroundImage;
  AssetPath topImagePortrait;
  AssetPath bottomImagePortrait;
  AssetPath topImageLandscape;
  AssetPath bottomImageLandscape;
  AssetPath timerScale9Image;
  LocalizedString hint;
  LocalizedString getBusinessText1;
  LocalizedString getBusinessText2;
  AssetPath rankLockBackgroundImage;
  LocalizedString previewText1;
  LocalizedString previewText2;
  AssetPath previewImage;
  LocalizedString recapText;
  LocalizedString recapTextNotParticipated;
  AssetPath rewardButtonImage;
  AssetPath floorRewardBg;
  AssetPath floorRewardChestClosed;
  AssetPath floorRewardChestOpen;
  AssetPath bottomNavBuildingImage;
  AssetPath bottomNavLeaderboardImage;
  bool hidePreviewPhaseGetNowButton;
  AssetPath rankLockAndPreviewBackground;
  AssetPath rankLockAndPreviewBackgroundLandscape;
  AssetPath rankLockAndPreviewTimerBackground;
  AssetPath rankLockAndPreviewTimerBackgroundLandscape;
  AssetPath previewOverlay;
  AssetPath previewOverlayLandscape;
  AssetPath rankLockOverlay;
  AssetPath rankLockOverlayLandscape;
  AssetPath recapRibbonImage;
  AssetPath recapTrophyTableImage;

  _EventMainMenu__isset __isset;

  void __set_eventMainMenuId(const EventMainMenuID& val);

  void __set_floorBackgroundImage(const AssetPath& val);

  void __set_topImagePortrait(const AssetPath& val);

  void __set_bottomImagePortrait(const AssetPath& val);

  void __set_topImageLandscape(const AssetPath& val);

  void __set_bottomImageLandscape(const AssetPath& val);

  void __set_timerScale9Image(const AssetPath& val);

  void __set_hint(const LocalizedString& val);

  void __set_getBusinessText1(const LocalizedString& val);

  void __set_getBusinessText2(const LocalizedString& val);

  void __set_rankLockBackgroundImage(const AssetPath& val);

  void __set_previewText1(const LocalizedString& val);

  void __set_previewText2(const LocalizedString& val);

  void __set_previewImage(const AssetPath& val);

  void __set_recapText(const LocalizedString& val);

  void __set_recapTextNotParticipated(const LocalizedString& val);

  void __set_rewardButtonImage(const AssetPath& val);

  void __set_floorRewardBg(const AssetPath& val);

  void __set_floorRewardChestClosed(const AssetPath& val);

  void __set_floorRewardChestOpen(const AssetPath& val);

  void __set_bottomNavBuildingImage(const AssetPath& val);

  void __set_bottomNavLeaderboardImage(const AssetPath& val);

  void __set_hidePreviewPhaseGetNowButton(const bool val);

  void __set_rankLockAndPreviewBackground(const AssetPath& val);

  void __set_rankLockAndPreviewBackgroundLandscape(const AssetPath& val);

  void __set_rankLockAndPreviewTimerBackground(const AssetPath& val);

  void __set_rankLockAndPreviewTimerBackgroundLandscape(const AssetPath& val);

  void __set_previewOverlay(const AssetPath& val);

  void __set_previewOverlayLandscape(const AssetPath& val);

  void __set_rankLockOverlay(const AssetPath& val);

  void __set_rankLockOverlayLandscape(const AssetPath& val);

  void __set_recapRibbonImage(const AssetPath& val);

  void __set_recapTrophyTableImage(const AssetPath& val);

  bool operator == (const EventMainMenu & rhs) const
  {
    if (!(eventMainMenuId == rhs.eventMainMenuId))
      return false;
    if (!(floorBackgroundImage == rhs.floorBackgroundImage))
      return false;
    if (!(topImagePortrait == rhs.topImagePortrait))
      return false;
    if (!(bottomImagePortrait == rhs.bottomImagePortrait))
      return false;
    if (!(topImageLandscape == rhs.topImageLandscape))
      return false;
    if (!(bottomImageLandscape == rhs.bottomImageLandscape))
      return false;
    if (!(timerScale9Image == rhs.timerScale9Image))
      return false;
    if (!(hint == rhs.hint))
      return false;
    if (!(getBusinessText1 == rhs.getBusinessText1))
      return false;
    if (!(getBusinessText2 == rhs.getBusinessText2))
      return false;
    if (!(rankLockBackgroundImage == rhs.rankLockBackgroundImage))
      return false;
    if (!(previewText1 == rhs.previewText1))
      return false;
    if (!(previewText2 == rhs.previewText2))
      return false;
    if (!(previewImage == rhs.previewImage))
      return false;
    if (!(recapText == rhs.recapText))
      return false;
    if (__isset.recapTextNotParticipated != rhs.__isset.recapTextNotParticipated)
      return false;
    else if (__isset.recapTextNotParticipated && !(recapTextNotParticipated == rhs.recapTextNotParticipated))
      return false;
    if (!(rewardButtonImage == rhs.rewardButtonImage))
      return false;
    if (!(floorRewardBg == rhs.floorRewardBg))
      return false;
    if (!(floorRewardChestClosed == rhs.floorRewardChestClosed))
      return false;
    if (!(floorRewardChestOpen == rhs.floorRewardChestOpen))
      return false;
    if (__isset.bottomNavBuildingImage != rhs.__isset.bottomNavBuildingImage)
      return false;
    else if (__isset.bottomNavBuildingImage && !(bottomNavBuildingImage == rhs.bottomNavBuildingImage))
      return false;
    if (__isset.bottomNavLeaderboardImage != rhs.__isset.bottomNavLeaderboardImage)
      return false;
    else if (__isset.bottomNavLeaderboardImage && !(bottomNavLeaderboardImage == rhs.bottomNavLeaderboardImage))
      return false;
    if (__isset.hidePreviewPhaseGetNowButton != rhs.__isset.hidePreviewPhaseGetNowButton)
      return false;
    else if (__isset.hidePreviewPhaseGetNowButton && !(hidePreviewPhaseGetNowButton == rhs.hidePreviewPhaseGetNowButton))
      return false;
    if (__isset.rankLockAndPreviewBackground != rhs.__isset.rankLockAndPreviewBackground)
      return false;
    else if (__isset.rankLockAndPreviewBackground && !(rankLockAndPreviewBackground == rhs.rankLockAndPreviewBackground))
      return false;
    if (__isset.rankLockAndPreviewBackgroundLandscape != rhs.__isset.rankLockAndPreviewBackgroundLandscape)
      return false;
    else if (__isset.rankLockAndPreviewBackgroundLandscape && !(rankLockAndPreviewBackgroundLandscape == rhs.rankLockAndPreviewBackgroundLandscape))
      return false;
    if (__isset.rankLockAndPreviewTimerBackground != rhs.__isset.rankLockAndPreviewTimerBackground)
      return false;
    else if (__isset.rankLockAndPreviewTimerBackground && !(rankLockAndPreviewTimerBackground == rhs.rankLockAndPreviewTimerBackground))
      return false;
    if (__isset.rankLockAndPreviewTimerBackgroundLandscape != rhs.__isset.rankLockAndPreviewTimerBackgroundLandscape)
      return false;
    else if (__isset.rankLockAndPreviewTimerBackgroundLandscape && !(rankLockAndPreviewTimerBackgroundLandscape == rhs.rankLockAndPreviewTimerBackgroundLandscape))
      return false;
    if (__isset.previewOverlay != rhs.__isset.previewOverlay)
      return false;
    else if (__isset.previewOverlay && !(previewOverlay == rhs.previewOverlay))
      return false;
    if (__isset.previewOverlayLandscape != rhs.__isset.previewOverlayLandscape)
      return false;
    else if (__isset.previewOverlayLandscape && !(previewOverlayLandscape == rhs.previewOverlayLandscape))
      return false;
    if (__isset.rankLockOverlay != rhs.__isset.rankLockOverlay)
      return false;
    else if (__isset.rankLockOverlay && !(rankLockOverlay == rhs.rankLockOverlay))
      return false;
    if (__isset.rankLockOverlayLandscape != rhs.__isset.rankLockOverlayLandscape)
      return false;
    else if (__isset.rankLockOverlayLandscape && !(rankLockOverlayLandscape == rhs.rankLockOverlayLandscape))
      return false;
    if (__isset.recapRibbonImage != rhs.__isset.recapRibbonImage)
      return false;
    else if (__isset.recapRibbonImage && !(recapRibbonImage == rhs.recapRibbonImage))
      return false;
    if (__isset.recapTrophyTableImage != rhs.__isset.recapTrophyTableImage)
      return false;
    else if (__isset.recapTrophyTableImage && !(recapTrophyTableImage == rhs.recapTrophyTableImage))
      return false;
    return true;
  }
  bool operator != (const EventMainMenu &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventMainMenu & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EventMainMenu &a, EventMainMenu &b);

std::ostream& operator<<(std::ostream& out, const EventMainMenu& obj);


class LeaderboardSettings : public virtual ::apache::thrift::TBase {
 public:

  LeaderboardSettings(const LeaderboardSettings&);
  LeaderboardSettings& operator=(const LeaderboardSettings&);
  LeaderboardSettings() : leaderboardGracePeriodSeconds(0), leaderboardPageSize(0), leaderboardOverlap(0) {
  }

  virtual ~LeaderboardSettings() throw();
  int32_t leaderboardGracePeriodSeconds;
  int32_t leaderboardPageSize;
  int32_t leaderboardOverlap;

  void __set_leaderboardGracePeriodSeconds(const int32_t val);

  void __set_leaderboardPageSize(const int32_t val);

  void __set_leaderboardOverlap(const int32_t val);

  bool operator == (const LeaderboardSettings & rhs) const
  {
    if (!(leaderboardGracePeriodSeconds == rhs.leaderboardGracePeriodSeconds))
      return false;
    if (!(leaderboardPageSize == rhs.leaderboardPageSize))
      return false;
    if (!(leaderboardOverlap == rhs.leaderboardOverlap))
      return false;
    return true;
  }
  bool operator != (const LeaderboardSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaderboardSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaderboardSettings &a, LeaderboardSettings &b);

std::ostream& operator<<(std::ostream& out, const LeaderboardSettings& obj);


class GuildLeaderboardSettings : public virtual ::apache::thrift::TBase {
 public:

  GuildLeaderboardSettings(const GuildLeaderboardSettings&);
  GuildLeaderboardSettings& operator=(const GuildLeaderboardSettings&);
  GuildLeaderboardSettings() : leaderboardGracePeriodSeconds(0), leaderboardPageSize(0), leaderboardOverlap(0) {
  }

  virtual ~GuildLeaderboardSettings() throw();
  int32_t leaderboardGracePeriodSeconds;
  int32_t leaderboardPageSize;
  int32_t leaderboardOverlap;

  void __set_leaderboardGracePeriodSeconds(const int32_t val);

  void __set_leaderboardPageSize(const int32_t val);

  void __set_leaderboardOverlap(const int32_t val);

  bool operator == (const GuildLeaderboardSettings & rhs) const
  {
    if (!(leaderboardGracePeriodSeconds == rhs.leaderboardGracePeriodSeconds))
      return false;
    if (!(leaderboardPageSize == rhs.leaderboardPageSize))
      return false;
    if (!(leaderboardOverlap == rhs.leaderboardOverlap))
      return false;
    return true;
  }
  bool operator != (const GuildLeaderboardSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildLeaderboardSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildLeaderboardSettings &a, GuildLeaderboardSettings &b);

std::ostream& operator<<(std::ostream& out, const GuildLeaderboardSettings& obj);


class LeaderboardReward : public virtual ::apache::thrift::TBase {
 public:

  LeaderboardReward(const LeaderboardReward&);
  LeaderboardReward& operator=(const LeaderboardReward&);
  LeaderboardReward() : leaderboardId(), leaderboardLeagueId(), leaderboardRibbonId(), rewardType((LootItemType::type)0), rewardId(), rewardAmount(0) {
  }

  virtual ~LeaderboardReward() throw();
  LeaderboardID leaderboardId;
  LeaderboardLeagueID leaderboardLeagueId;
  LeaderboardRibbonID leaderboardRibbonId;
  LootItemType::type rewardType;
  std::string rewardId;
  int32_t rewardAmount;

  void __set_leaderboardId(const LeaderboardID& val);

  void __set_leaderboardLeagueId(const LeaderboardLeagueID& val);

  void __set_leaderboardRibbonId(const LeaderboardRibbonID& val);

  void __set_rewardType(const LootItemType::type val);

  void __set_rewardId(const std::string& val);

  void __set_rewardAmount(const int32_t val);

  bool operator == (const LeaderboardReward & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(leaderboardLeagueId == rhs.leaderboardLeagueId))
      return false;
    if (!(leaderboardRibbonId == rhs.leaderboardRibbonId))
      return false;
    if (!(rewardType == rhs.rewardType))
      return false;
    if (!(rewardId == rhs.rewardId))
      return false;
    if (!(rewardAmount == rhs.rewardAmount))
      return false;
    return true;
  }
  bool operator != (const LeaderboardReward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaderboardReward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaderboardReward &a, LeaderboardReward &b);

std::ostream& operator<<(std::ostream& out, const LeaderboardReward& obj);

typedef struct _LeaderboardRibbon__isset {
  _LeaderboardRibbon__isset() : localizedDisplay(false), rewards(false), eventIslandTier(false) {}
  bool localizedDisplay :1;
  bool rewards :1;
  bool eventIslandTier :1;
} _LeaderboardRibbon__isset;

class LeaderboardRibbon : public virtual ::apache::thrift::TBase {
 public:

  LeaderboardRibbon(const LeaderboardRibbon&);
  LeaderboardRibbon& operator=(const LeaderboardRibbon&);
  LeaderboardRibbon() : leaderboardId(), leaderboardLeagueId(), leaderboardRibbonId(), localizedDisplay(), positionStart(0), positionEnd(0), trophyAssetId(), bannerAssetId(), rewardChestAsset(), eventIslandTier(0) {
  }

  virtual ~LeaderboardRibbon() throw();
  LeaderboardID leaderboardId;
  LeaderboardLeagueID leaderboardLeagueId;
  LeaderboardRibbonID leaderboardRibbonId;
  std::string localizedDisplay;
  LocalizedString display;
  int32_t positionStart;
  int32_t positionEnd;
  AssetID trophyAssetId;
  AssetID bannerAssetId;
  std::string rewardChestAsset;
  std::vector<LeaderboardReward>  rewards;
  int32_t eventIslandTier;

  _LeaderboardRibbon__isset __isset;

  void __set_leaderboardId(const LeaderboardID& val);

  void __set_leaderboardLeagueId(const LeaderboardLeagueID& val);

  void __set_leaderboardRibbonId(const LeaderboardRibbonID& val);

  void __set_localizedDisplay(const std::string& val);

  void __set_display(const LocalizedString& val);

  void __set_positionStart(const int32_t val);

  void __set_positionEnd(const int32_t val);

  void __set_trophyAssetId(const AssetID& val);

  void __set_bannerAssetId(const AssetID& val);

  void __set_rewardChestAsset(const std::string& val);

  void __set_rewards(const std::vector<LeaderboardReward> & val);

  void __set_eventIslandTier(const int32_t val);

  bool operator == (const LeaderboardRibbon & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(leaderboardLeagueId == rhs.leaderboardLeagueId))
      return false;
    if (!(leaderboardRibbonId == rhs.leaderboardRibbonId))
      return false;
    if (__isset.localizedDisplay != rhs.__isset.localizedDisplay)
      return false;
    else if (__isset.localizedDisplay && !(localizedDisplay == rhs.localizedDisplay))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(positionStart == rhs.positionStart))
      return false;
    if (!(positionEnd == rhs.positionEnd))
      return false;
    if (!(trophyAssetId == rhs.trophyAssetId))
      return false;
    if (!(bannerAssetId == rhs.bannerAssetId))
      return false;
    if (!(rewardChestAsset == rhs.rewardChestAsset))
      return false;
    if (__isset.rewards != rhs.__isset.rewards)
      return false;
    else if (__isset.rewards && !(rewards == rhs.rewards))
      return false;
    if (__isset.eventIslandTier != rhs.__isset.eventIslandTier)
      return false;
    else if (__isset.eventIslandTier && !(eventIslandTier == rhs.eventIslandTier))
      return false;
    return true;
  }
  bool operator != (const LeaderboardRibbon &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaderboardRibbon & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaderboardRibbon &a, LeaderboardRibbon &b);

std::ostream& operator<<(std::ostream& out, const LeaderboardRibbon& obj);

typedef struct _LeaderboardLeague__isset {
  _LeaderboardLeague__isset() : ribbons(false), leagueBackground(false), leagueRibbon(false) {}
  bool ribbons :1;
  bool leagueBackground :1;
  bool leagueRibbon :1;
} _LeaderboardLeague__isset;

class LeaderboardLeague : public virtual ::apache::thrift::TBase {
 public:

  LeaderboardLeague(const LeaderboardLeague&);
  LeaderboardLeague& operator=(const LeaderboardLeague&);
  LeaderboardLeague() : leaderboardId(), leaderboardLeagueId(), displayOrder(0), minPlayersPerDivision(0), maxPlayersPerDivision(0), initialDivisions(0), incrementalDivisions(0), daysLeftOverpack(0), minPlacementCurrency(0), maxPlacementCurrency(0), promoteCount(0), demoteCount(0), promoteCurrencyCredit(0), demoteCurrencyDeduction(0), leagueBackground(), leagueRibbon() {
  }

  virtual ~LeaderboardLeague() throw();
  LeaderboardID leaderboardId;
  LeaderboardLeagueID leaderboardLeagueId;
  std::map<LeaderboardRibbonID, LeaderboardRibbon>  ribbons;
  LocalizedString display;
  int32_t displayOrder;
  int32_t minPlayersPerDivision;
  int32_t maxPlayersPerDivision;
  int32_t initialDivisions;
  int32_t incrementalDivisions;
  int32_t daysLeftOverpack;
  int32_t minPlacementCurrency;
  int32_t maxPlacementCurrency;
  int32_t promoteCount;
  int32_t demoteCount;
  int32_t promoteCurrencyCredit;
  int32_t demoteCurrencyDeduction;
  std::vector<int32_t>  promoteCounts;
  std::vector<int32_t>  demoteCounts;
  std::vector<int32_t>  promoteCurrencyCredits;
  std::vector<int32_t>  demoteCurrencyDeductions;
  AssetPath leagueBackground;
  AssetPath leagueRibbon;

  _LeaderboardLeague__isset __isset;

  void __set_leaderboardId(const LeaderboardID& val);

  void __set_leaderboardLeagueId(const LeaderboardLeagueID& val);

  void __set_ribbons(const std::map<LeaderboardRibbonID, LeaderboardRibbon> & val);

  void __set_display(const LocalizedString& val);

  void __set_displayOrder(const int32_t val);

  void __set_minPlayersPerDivision(const int32_t val);

  void __set_maxPlayersPerDivision(const int32_t val);

  void __set_initialDivisions(const int32_t val);

  void __set_incrementalDivisions(const int32_t val);

  void __set_daysLeftOverpack(const int32_t val);

  void __set_minPlacementCurrency(const int32_t val);

  void __set_maxPlacementCurrency(const int32_t val);

  void __set_promoteCount(const int32_t val);

  void __set_demoteCount(const int32_t val);

  void __set_promoteCurrencyCredit(const int32_t val);

  void __set_demoteCurrencyDeduction(const int32_t val);

  void __set_promoteCounts(const std::vector<int32_t> & val);

  void __set_demoteCounts(const std::vector<int32_t> & val);

  void __set_promoteCurrencyCredits(const std::vector<int32_t> & val);

  void __set_demoteCurrencyDeductions(const std::vector<int32_t> & val);

  void __set_leagueBackground(const AssetPath& val);

  void __set_leagueRibbon(const AssetPath& val);

  bool operator == (const LeaderboardLeague & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(leaderboardLeagueId == rhs.leaderboardLeagueId))
      return false;
    if (__isset.ribbons != rhs.__isset.ribbons)
      return false;
    else if (__isset.ribbons && !(ribbons == rhs.ribbons))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(minPlayersPerDivision == rhs.minPlayersPerDivision))
      return false;
    if (!(maxPlayersPerDivision == rhs.maxPlayersPerDivision))
      return false;
    if (!(initialDivisions == rhs.initialDivisions))
      return false;
    if (!(incrementalDivisions == rhs.incrementalDivisions))
      return false;
    if (!(daysLeftOverpack == rhs.daysLeftOverpack))
      return false;
    if (!(minPlacementCurrency == rhs.minPlacementCurrency))
      return false;
    if (!(maxPlacementCurrency == rhs.maxPlacementCurrency))
      return false;
    if (!(promoteCount == rhs.promoteCount))
      return false;
    if (!(demoteCount == rhs.demoteCount))
      return false;
    if (!(promoteCurrencyCredit == rhs.promoteCurrencyCredit))
      return false;
    if (!(demoteCurrencyDeduction == rhs.demoteCurrencyDeduction))
      return false;
    if (!(promoteCounts == rhs.promoteCounts))
      return false;
    if (!(demoteCounts == rhs.demoteCounts))
      return false;
    if (!(promoteCurrencyCredits == rhs.promoteCurrencyCredits))
      return false;
    if (!(demoteCurrencyDeductions == rhs.demoteCurrencyDeductions))
      return false;
    if (__isset.leagueBackground != rhs.__isset.leagueBackground)
      return false;
    else if (__isset.leagueBackground && !(leagueBackground == rhs.leagueBackground))
      return false;
    if (__isset.leagueRibbon != rhs.__isset.leagueRibbon)
      return false;
    else if (__isset.leagueRibbon && !(leagueRibbon == rhs.leagueRibbon))
      return false;
    return true;
  }
  bool operator != (const LeaderboardLeague &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaderboardLeague & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaderboardLeague &a, LeaderboardLeague &b);

std::ostream& operator<<(std::ostream& out, const LeaderboardLeague& obj);

typedef struct _Leaderboard__isset {
  _Leaderboard__isset() : rewardDisplay(false), topLeaderboardId(false), leagues(false) {}
  bool rewardDisplay :1;
  bool topLeaderboardId :1;
  bool leagues :1;
} _Leaderboard__isset;

class Leaderboard : public virtual ::apache::thrift::TBase {
 public:

  Leaderboard(const Leaderboard&);
  Leaderboard& operator=(const Leaderboard&);
  Leaderboard() : leaderboardId(), eventPhases((EventPhases::type)0), showRank(0), unlockRank(0), hideRank(0), pointCurrencyId(), placementCurrencyId(), topLeagueId(), topLeaderboardId(), rewardMessageId(), leaderboardTemplateId(), tabIcon(), topRewardBannerBg() {
  }

  virtual ~Leaderboard() throw();
  LeaderboardID leaderboardId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t showRank;
  int32_t unlockRank;
  int32_t hideRank;
  CurrencyID pointCurrencyId;
  CurrencyID placementCurrencyId;
  LocalizedString display;
  LocalizedString rewardDisplay;
  LeaderboardLeagueID topLeagueId;
  LeaderboardID topLeaderboardId;
  LocalizedString topLeagueText;
  LocalizedString middleLeagueText;
  LocalizedString bottomLeagueText;
  LocalizedString noLeagueText;
  LocalizedString previewText;
  LocalizedString recapText;
  LocalizedString joinText;
  RewardMessageID rewardMessageId;
  std::map<LeaderboardLeagueID, LeaderboardLeague>  leagues;
  LeaderboardTemplateID leaderboardTemplateId;
  AssetPath tabIcon;
  AssetPath topRewardBannerBg;

  _Leaderboard__isset __isset;

  void __set_leaderboardId(const LeaderboardID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_showRank(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_pointCurrencyId(const CurrencyID& val);

  void __set_placementCurrencyId(const CurrencyID& val);

  void __set_display(const LocalizedString& val);

  void __set_rewardDisplay(const LocalizedString& val);

  void __set_topLeagueId(const LeaderboardLeagueID& val);

  void __set_topLeaderboardId(const LeaderboardID& val);

  void __set_topLeagueText(const LocalizedString& val);

  void __set_middleLeagueText(const LocalizedString& val);

  void __set_bottomLeagueText(const LocalizedString& val);

  void __set_noLeagueText(const LocalizedString& val);

  void __set_previewText(const LocalizedString& val);

  void __set_recapText(const LocalizedString& val);

  void __set_joinText(const LocalizedString& val);

  void __set_rewardMessageId(const RewardMessageID& val);

  void __set_leagues(const std::map<LeaderboardLeagueID, LeaderboardLeague> & val);

  void __set_leaderboardTemplateId(const LeaderboardTemplateID& val);

  void __set_tabIcon(const AssetPath& val);

  void __set_topRewardBannerBg(const AssetPath& val);

  bool operator == (const Leaderboard & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(unlockRank == rhs.unlockRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (!(pointCurrencyId == rhs.pointCurrencyId))
      return false;
    if (!(placementCurrencyId == rhs.placementCurrencyId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (__isset.rewardDisplay != rhs.__isset.rewardDisplay)
      return false;
    else if (__isset.rewardDisplay && !(rewardDisplay == rhs.rewardDisplay))
      return false;
    if (!(topLeagueId == rhs.topLeagueId))
      return false;
    if (__isset.topLeaderboardId != rhs.__isset.topLeaderboardId)
      return false;
    else if (__isset.topLeaderboardId && !(topLeaderboardId == rhs.topLeaderboardId))
      return false;
    if (!(topLeagueText == rhs.topLeagueText))
      return false;
    if (!(middleLeagueText == rhs.middleLeagueText))
      return false;
    if (!(bottomLeagueText == rhs.bottomLeagueText))
      return false;
    if (!(noLeagueText == rhs.noLeagueText))
      return false;
    if (!(previewText == rhs.previewText))
      return false;
    if (!(recapText == rhs.recapText))
      return false;
    if (!(joinText == rhs.joinText))
      return false;
    if (!(rewardMessageId == rhs.rewardMessageId))
      return false;
    if (__isset.leagues != rhs.__isset.leagues)
      return false;
    else if (__isset.leagues && !(leagues == rhs.leagues))
      return false;
    if (!(leaderboardTemplateId == rhs.leaderboardTemplateId))
      return false;
    if (!(tabIcon == rhs.tabIcon))
      return false;
    if (!(topRewardBannerBg == rhs.topRewardBannerBg))
      return false;
    return true;
  }
  bool operator != (const Leaderboard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Leaderboard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Leaderboard &a, Leaderboard &b);

std::ostream& operator<<(std::ostream& out, const Leaderboard& obj);


class LeaderboardPlacement : public virtual ::apache::thrift::TBase {
 public:

  LeaderboardPlacement(const LeaderboardPlacement&);
  LeaderboardPlacement& operator=(const LeaderboardPlacement&);
  LeaderboardPlacement() : currencyId(), minRank(0), maxRank(0), value(0) {
  }

  virtual ~LeaderboardPlacement() throw();
  CurrencyID currencyId;
  int32_t minRank;
  int32_t maxRank;
  int32_t value;

  void __set_currencyId(const CurrencyID& val);

  void __set_minRank(const int32_t val);

  void __set_maxRank(const int32_t val);

  void __set_value(const int32_t val);

  bool operator == (const LeaderboardPlacement & rhs) const
  {
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(minRank == rhs.minRank))
      return false;
    if (!(maxRank == rhs.maxRank))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const LeaderboardPlacement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaderboardPlacement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaderboardPlacement &a, LeaderboardPlacement &b);

std::ostream& operator<<(std::ostream& out, const LeaderboardPlacement& obj);

typedef struct _EventMenuWidget__isset {
  _EventMenuWidget__isset() : text(false), messageAction(false), messageActionParameter(false), landscapePosition(false), anchorPoint(false), tabletPortraitPosition(false), tabletLandscapePosition(false), tabletAnchorPoint(false), zOrder(false), parameters(false), widgetName(false), widgetParent(false), portraitSizes(false), landscapeSizes(false), tabletPortraitSizes(false), tabletLandscapeSizes(false) {}
  bool text :1;
  bool messageAction :1;
  bool messageActionParameter :1;
  bool landscapePosition :1;
  bool anchorPoint :1;
  bool tabletPortraitPosition :1;
  bool tabletLandscapePosition :1;
  bool tabletAnchorPoint :1;
  bool zOrder :1;
  bool parameters :1;
  bool widgetName :1;
  bool widgetParent :1;
  bool portraitSizes :1;
  bool landscapeSizes :1;
  bool tabletPortraitSizes :1;
  bool tabletLandscapeSizes :1;
} _EventMenuWidget__isset;

class EventMenuWidget : public virtual ::apache::thrift::TBase {
 public:

  EventMenuWidget(const EventMenuWidget&);
  EventMenuWidget& operator=(const EventMenuWidget&);
  EventMenuWidget() : eventMenuWidgetId(), widgetType((EventMenuWidgetType::type)0), messageAction((MessageButtonAction::type)0), portraitPosition(), landscapePosition(), anchorPoint(), tabletPortraitPosition(), tabletLandscapePosition(), tabletAnchorPoint(), zOrder(0), widgetName(), widgetParent(), portraitSizes(), landscapeSizes(), tabletPortraitSizes(), tabletLandscapeSizes() {
  }

  virtual ~EventMenuWidget() throw();
  EventMenuWidgetID eventMenuWidgetId;
  LocalizedString text;
  EventMenuWidgetType::type widgetType;
  MessageButtonAction::type messageAction;
  std::vector<std::string>  messageActionParameter;
  std::string portraitPosition;
  std::string landscapePosition;
  std::string anchorPoint;
  std::string tabletPortraitPosition;
  std::string tabletLandscapePosition;
  std::string tabletAnchorPoint;
  int32_t zOrder;
  std::vector<std::string>  parameters;
  std::string widgetName;
  std::string widgetParent;
  std::string portraitSizes;
  std::string landscapeSizes;
  std::string tabletPortraitSizes;
  std::string tabletLandscapeSizes;

  _EventMenuWidget__isset __isset;

  void __set_eventMenuWidgetId(const EventMenuWidgetID& val);

  void __set_text(const LocalizedString& val);

  void __set_widgetType(const EventMenuWidgetType::type val);

  void __set_messageAction(const MessageButtonAction::type val);

  void __set_messageActionParameter(const std::vector<std::string> & val);

  void __set_portraitPosition(const std::string& val);

  void __set_landscapePosition(const std::string& val);

  void __set_anchorPoint(const std::string& val);

  void __set_tabletPortraitPosition(const std::string& val);

  void __set_tabletLandscapePosition(const std::string& val);

  void __set_tabletAnchorPoint(const std::string& val);

  void __set_zOrder(const int32_t val);

  void __set_parameters(const std::vector<std::string> & val);

  void __set_widgetName(const std::string& val);

  void __set_widgetParent(const std::string& val);

  void __set_portraitSizes(const std::string& val);

  void __set_landscapeSizes(const std::string& val);

  void __set_tabletPortraitSizes(const std::string& val);

  void __set_tabletLandscapeSizes(const std::string& val);

  bool operator == (const EventMenuWidget & rhs) const
  {
    if (!(eventMenuWidgetId == rhs.eventMenuWidgetId))
      return false;
    if (__isset.text != rhs.__isset.text)
      return false;
    else if (__isset.text && !(text == rhs.text))
      return false;
    if (!(widgetType == rhs.widgetType))
      return false;
    if (__isset.messageAction != rhs.__isset.messageAction)
      return false;
    else if (__isset.messageAction && !(messageAction == rhs.messageAction))
      return false;
    if (__isset.messageActionParameter != rhs.__isset.messageActionParameter)
      return false;
    else if (__isset.messageActionParameter && !(messageActionParameter == rhs.messageActionParameter))
      return false;
    if (!(portraitPosition == rhs.portraitPosition))
      return false;
    if (__isset.landscapePosition != rhs.__isset.landscapePosition)
      return false;
    else if (__isset.landscapePosition && !(landscapePosition == rhs.landscapePosition))
      return false;
    if (__isset.anchorPoint != rhs.__isset.anchorPoint)
      return false;
    else if (__isset.anchorPoint && !(anchorPoint == rhs.anchorPoint))
      return false;
    if (__isset.tabletPortraitPosition != rhs.__isset.tabletPortraitPosition)
      return false;
    else if (__isset.tabletPortraitPosition && !(tabletPortraitPosition == rhs.tabletPortraitPosition))
      return false;
    if (__isset.tabletLandscapePosition != rhs.__isset.tabletLandscapePosition)
      return false;
    else if (__isset.tabletLandscapePosition && !(tabletLandscapePosition == rhs.tabletLandscapePosition))
      return false;
    if (__isset.tabletAnchorPoint != rhs.__isset.tabletAnchorPoint)
      return false;
    else if (__isset.tabletAnchorPoint && !(tabletAnchorPoint == rhs.tabletAnchorPoint))
      return false;
    if (__isset.zOrder != rhs.__isset.zOrder)
      return false;
    else if (__isset.zOrder && !(zOrder == rhs.zOrder))
      return false;
    if (__isset.parameters != rhs.__isset.parameters)
      return false;
    else if (__isset.parameters && !(parameters == rhs.parameters))
      return false;
    if (__isset.widgetName != rhs.__isset.widgetName)
      return false;
    else if (__isset.widgetName && !(widgetName == rhs.widgetName))
      return false;
    if (__isset.widgetParent != rhs.__isset.widgetParent)
      return false;
    else if (__isset.widgetParent && !(widgetParent == rhs.widgetParent))
      return false;
    if (__isset.portraitSizes != rhs.__isset.portraitSizes)
      return false;
    else if (__isset.portraitSizes && !(portraitSizes == rhs.portraitSizes))
      return false;
    if (__isset.landscapeSizes != rhs.__isset.landscapeSizes)
      return false;
    else if (__isset.landscapeSizes && !(landscapeSizes == rhs.landscapeSizes))
      return false;
    if (__isset.tabletPortraitSizes != rhs.__isset.tabletPortraitSizes)
      return false;
    else if (__isset.tabletPortraitSizes && !(tabletPortraitSizes == rhs.tabletPortraitSizes))
      return false;
    if (__isset.tabletLandscapeSizes != rhs.__isset.tabletLandscapeSizes)
      return false;
    else if (__isset.tabletLandscapeSizes && !(tabletLandscapeSizes == rhs.tabletLandscapeSizes))
      return false;
    return true;
  }
  bool operator != (const EventMenuWidget &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventMenuWidget & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EventMenuWidget &a, EventMenuWidget &b);

std::ostream& operator<<(std::ostream& out, const EventMenuWidget& obj);


class LeaderboardTemplate : public virtual ::apache::thrift::TBase {
 public:

  LeaderboardTemplate(const LeaderboardTemplate&);
  LeaderboardTemplate& operator=(const LeaderboardTemplate&);
  LeaderboardTemplate() : leaderboardTemplateId(), luaFile(), backgroundColor(), topBannerBg(), rewardsTemplateFile(), rewardsBg(), rewardsItemBg(), backButton(), leaderboardYouBg(), leaderboardYouTopBg(), tabBg(), tabSelectedImage(), middleTabSelectedImage() {
  }

  virtual ~LeaderboardTemplate() throw();
  LeaderboardTemplateID leaderboardTemplateId;
  std::string luaFile;
  ColorID backgroundColor;
  AssetPath topBannerBg;
  std::string rewardsTemplateFile;
  AssetPath rewardsBg;
  AssetPath rewardsItemBg;
  AssetPath backButton;
  AssetPath leaderboardYouBg;
  AssetPath leaderboardYouTopBg;
  AssetPath tabBg;
  AssetPath tabSelectedImage;
  AssetPath middleTabSelectedImage;

  void __set_leaderboardTemplateId(const LeaderboardTemplateID& val);

  void __set_luaFile(const std::string& val);

  void __set_backgroundColor(const ColorID& val);

  void __set_topBannerBg(const AssetPath& val);

  void __set_rewardsTemplateFile(const std::string& val);

  void __set_rewardsBg(const AssetPath& val);

  void __set_rewardsItemBg(const AssetPath& val);

  void __set_backButton(const AssetPath& val);

  void __set_leaderboardYouBg(const AssetPath& val);

  void __set_leaderboardYouTopBg(const AssetPath& val);

  void __set_tabBg(const AssetPath& val);

  void __set_tabSelectedImage(const AssetPath& val);

  void __set_middleTabSelectedImage(const AssetPath& val);

  bool operator == (const LeaderboardTemplate & rhs) const
  {
    if (!(leaderboardTemplateId == rhs.leaderboardTemplateId))
      return false;
    if (!(luaFile == rhs.luaFile))
      return false;
    if (!(backgroundColor == rhs.backgroundColor))
      return false;
    if (!(topBannerBg == rhs.topBannerBg))
      return false;
    if (!(rewardsTemplateFile == rhs.rewardsTemplateFile))
      return false;
    if (!(rewardsBg == rhs.rewardsBg))
      return false;
    if (!(rewardsItemBg == rhs.rewardsItemBg))
      return false;
    if (!(backButton == rhs.backButton))
      return false;
    if (!(leaderboardYouBg == rhs.leaderboardYouBg))
      return false;
    if (!(leaderboardYouTopBg == rhs.leaderboardYouTopBg))
      return false;
    if (!(tabBg == rhs.tabBg))
      return false;
    if (!(tabSelectedImage == rhs.tabSelectedImage))
      return false;
    if (!(middleTabSelectedImage == rhs.middleTabSelectedImage))
      return false;
    return true;
  }
  bool operator != (const LeaderboardTemplate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaderboardTemplate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaderboardTemplate &a, LeaderboardTemplate &b);

std::ostream& operator<<(std::ostream& out, const LeaderboardTemplate& obj);

typedef struct _RarityEvoLevelKeyDropRate__isset {
  _RarityEvoLevelKeyDropRate__isset() : formulaId(false) {}
  bool formulaId :1;
} _RarityEvoLevelKeyDropRate__isset;

class RarityEvoLevelKeyDropRate : public virtual ::apache::thrift::TBase {
 public:

  RarityEvoLevelKeyDropRate(const RarityEvoLevelKeyDropRate&);
  RarityEvoLevelKeyDropRate& operator=(const RarityEvoLevelKeyDropRate&);
  RarityEvoLevelKeyDropRate() : buildingRarity(0), buildingEvoLevel(0), formulaId(), baseDropRate(0), currencyId(), currencyAmount(0), socialDropRateIncrease(0), socialCurrencyAmount(0) {
  }

  virtual ~RarityEvoLevelKeyDropRate() throw();
  std::vector<EventID>  eventIds;
  RarityID buildingRarity;
  int32_t buildingEvoLevel;
  EventKeyDropRateFormulaID formulaId;
  double baseDropRate;
  CurrencyID currencyId;
  int32_t currencyAmount;
  double socialDropRateIncrease;
  int32_t socialCurrencyAmount;

  _RarityEvoLevelKeyDropRate__isset __isset;

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_buildingRarity(const RarityID val);

  void __set_buildingEvoLevel(const int32_t val);

  void __set_formulaId(const EventKeyDropRateFormulaID& val);

  void __set_baseDropRate(const double val);

  void __set_currencyId(const CurrencyID& val);

  void __set_currencyAmount(const int32_t val);

  void __set_socialDropRateIncrease(const double val);

  void __set_socialCurrencyAmount(const int32_t val);

  bool operator == (const RarityEvoLevelKeyDropRate & rhs) const
  {
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(buildingRarity == rhs.buildingRarity))
      return false;
    if (!(buildingEvoLevel == rhs.buildingEvoLevel))
      return false;
    if (__isset.formulaId != rhs.__isset.formulaId)
      return false;
    else if (__isset.formulaId && !(formulaId == rhs.formulaId))
      return false;
    if (!(baseDropRate == rhs.baseDropRate))
      return false;
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(currencyAmount == rhs.currencyAmount))
      return false;
    if (!(socialDropRateIncrease == rhs.socialDropRateIncrease))
      return false;
    if (!(socialCurrencyAmount == rhs.socialCurrencyAmount))
      return false;
    return true;
  }
  bool operator != (const RarityEvoLevelKeyDropRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RarityEvoLevelKeyDropRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RarityEvoLevelKeyDropRate &a, RarityEvoLevelKeyDropRate &b);

std::ostream& operator<<(std::ostream& out, const RarityEvoLevelKeyDropRate& obj);


class KeyDropRateByOrderTime : public virtual ::apache::thrift::TBase {
 public:

  KeyDropRateByOrderTime(const KeyDropRateByOrderTime&);
  KeyDropRateByOrderTime& operator=(const KeyDropRateByOrderTime&);
  KeyDropRateByOrderTime() : formulaId(), minOrderTimeInSecs(0), maxOrderTimeInSecs(0), dropRate(0) {
  }

  virtual ~KeyDropRateByOrderTime() throw();
  EventKeyDropRateFormulaID formulaId;
  int32_t minOrderTimeInSecs;
  int32_t maxOrderTimeInSecs;
  double dropRate;

  void __set_formulaId(const EventKeyDropRateFormulaID& val);

  void __set_minOrderTimeInSecs(const int32_t val);

  void __set_maxOrderTimeInSecs(const int32_t val);

  void __set_dropRate(const double val);

  bool operator == (const KeyDropRateByOrderTime & rhs) const
  {
    if (!(formulaId == rhs.formulaId))
      return false;
    if (!(minOrderTimeInSecs == rhs.minOrderTimeInSecs))
      return false;
    if (!(maxOrderTimeInSecs == rhs.maxOrderTimeInSecs))
      return false;
    if (!(dropRate == rhs.dropRate))
      return false;
    return true;
  }
  bool operator != (const KeyDropRateByOrderTime &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyDropRateByOrderTime & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeyDropRateByOrderTime &a, KeyDropRateByOrderTime &b);

std::ostream& operator<<(std::ostream& out, const KeyDropRateByOrderTime& obj);

typedef struct _EventBusinessKeyDropRate__isset {
  _EventBusinessKeyDropRate__isset() : currencyId(false), currencyAmount(false), dropRateIncrease(false), socialCurrencyId(false), currencyIds(false), currencyAmounts(false) {}
  bool currencyId :1;
  bool currencyAmount :1;
  bool dropRateIncrease :1;
  bool socialCurrencyId :1;
  bool currencyIds :1;
  bool currencyAmounts :1;
} _EventBusinessKeyDropRate__isset;

class EventBusinessKeyDropRate : public virtual ::apache::thrift::TBase {
 public:

  EventBusinessKeyDropRate(const EventBusinessKeyDropRate&);
  EventBusinessKeyDropRate& operator=(const EventBusinessKeyDropRate&);
  EventBusinessKeyDropRate() : buildingId(), currencyId(), currencyAmount(0), dropRateIncrease(0), socialCurrencyAmount(0), socialCurrencyId() {
  }

  virtual ~EventBusinessKeyDropRate() throw();
  BuildingID buildingId;
  std::vector<EventID>  eventIds;
  CurrencyID currencyId;
  int32_t currencyAmount;
  double dropRateIncrease;
  int32_t socialCurrencyAmount;
  std::string socialCurrencyId;
  std::vector<CurrencyID>  currencyIds;
  std::vector<int32_t>  currencyAmounts;

  _EventBusinessKeyDropRate__isset __isset;

  void __set_buildingId(const BuildingID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_currencyId(const CurrencyID& val);

  void __set_currencyAmount(const int32_t val);

  void __set_dropRateIncrease(const double val);

  void __set_socialCurrencyAmount(const int32_t val);

  void __set_socialCurrencyId(const std::string& val);

  void __set_currencyIds(const std::vector<CurrencyID> & val);

  void __set_currencyAmounts(const std::vector<int32_t> & val);

  bool operator == (const EventBusinessKeyDropRate & rhs) const
  {
    if (!(buildingId == rhs.buildingId))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (__isset.currencyId != rhs.__isset.currencyId)
      return false;
    else if (__isset.currencyId && !(currencyId == rhs.currencyId))
      return false;
    if (__isset.currencyAmount != rhs.__isset.currencyAmount)
      return false;
    else if (__isset.currencyAmount && !(currencyAmount == rhs.currencyAmount))
      return false;
    if (__isset.dropRateIncrease != rhs.__isset.dropRateIncrease)
      return false;
    else if (__isset.dropRateIncrease && !(dropRateIncrease == rhs.dropRateIncrease))
      return false;
    if (!(socialCurrencyAmount == rhs.socialCurrencyAmount))
      return false;
    if (__isset.socialCurrencyId != rhs.__isset.socialCurrencyId)
      return false;
    else if (__isset.socialCurrencyId && !(socialCurrencyId == rhs.socialCurrencyId))
      return false;
    if (__isset.currencyIds != rhs.__isset.currencyIds)
      return false;
    else if (__isset.currencyIds && !(currencyIds == rhs.currencyIds))
      return false;
    if (__isset.currencyAmounts != rhs.__isset.currencyAmounts)
      return false;
    else if (__isset.currencyAmounts && !(currencyAmounts == rhs.currencyAmounts))
      return false;
    return true;
  }
  bool operator != (const EventBusinessKeyDropRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventBusinessKeyDropRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EventBusinessKeyDropRate &a, EventBusinessKeyDropRate &b);

std::ostream& operator<<(std::ostream& out, const EventBusinessKeyDropRate& obj);


class BuildingMultiplier : public virtual ::apache::thrift::TBase {
 public:

  BuildingMultiplier(const BuildingMultiplier&);
  BuildingMultiplier& operator=(const BuildingMultiplier&);
  BuildingMultiplier() : buildingId(), eventPointMultiplier(0), eventPhases((EventPhases::type)0) {
  }

  virtual ~BuildingMultiplier() throw();
  BuildingID buildingId;
  double eventPointMultiplier;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;

  void __set_buildingId(const BuildingID& val);

  void __set_eventPointMultiplier(const double val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  bool operator == (const BuildingMultiplier & rhs) const
  {
    if (!(buildingId == rhs.buildingId))
      return false;
    if (!(eventPointMultiplier == rhs.eventPointMultiplier))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    return true;
  }
  bool operator != (const BuildingMultiplier &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuildingMultiplier & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuildingMultiplier &a, BuildingMultiplier &b);

std::ostream& operator<<(std::ostream& out, const BuildingMultiplier& obj);


class TutorialState : public virtual ::apache::thrift::TBase {
 public:

  TutorialState(const TutorialState&);
  TutorialState& operator=(const TutorialState&);
  TutorialState() : tutorialId() {
  }

  virtual ~TutorialState() throw();
  TutorialID tutorialId;

  void __set_tutorialId(const TutorialID& val);

  bool operator == (const TutorialState & rhs) const
  {
    if (!(tutorialId == rhs.tutorialId))
      return false;
    return true;
  }
  bool operator != (const TutorialState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TutorialState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TutorialState &a, TutorialState &b);

std::ostream& operator<<(std::ostream& out, const TutorialState& obj);

typedef struct _AdminGiftMessage__isset {
  _AdminGiftMessage__isset() : openBody(false), templateId(false) {}
  bool openBody :1;
  bool templateId :1;
} _AdminGiftMessage__isset;

class AdminGiftMessage : public virtual ::apache::thrift::TBase {
 public:

  AdminGiftMessage(const AdminGiftMessage&);
  AdminGiftMessage& operator=(const AdminGiftMessage&);
  AdminGiftMessage() : adminGiftMessageId(), priority(0), openable(0), claimOnClaimAll(0), eventPhases((EventPhases::type)0), showRank(0), hideRank(0), disabled(0), templateId() {
  }

  virtual ~AdminGiftMessage() throw();
  AdminGiftMessageID adminGiftMessageId;
  LocalizedString title;
  LocalizedString body;
  int32_t priority;
  bool openable;
  bool claimOnClaimAll;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t showRank;
  int32_t hideRank;
  bool disabled;
  std::vector<GiftMessageRewardID>  giftMessageRewardIds;
  LocalizedString openBody;
  TemplateID templateId;

  _AdminGiftMessage__isset __isset;

  void __set_adminGiftMessageId(const AdminGiftMessageID& val);

  void __set_title(const LocalizedString& val);

  void __set_body(const LocalizedString& val);

  void __set_priority(const int32_t val);

  void __set_openable(const bool val);

  void __set_claimOnClaimAll(const bool val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_showRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_disabled(const bool val);

  void __set_giftMessageRewardIds(const std::vector<GiftMessageRewardID> & val);

  void __set_openBody(const LocalizedString& val);

  void __set_templateId(const TemplateID& val);

  bool operator == (const AdminGiftMessage & rhs) const
  {
    if (!(adminGiftMessageId == rhs.adminGiftMessageId))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(body == rhs.body))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(openable == rhs.openable))
      return false;
    if (!(claimOnClaimAll == rhs.claimOnClaimAll))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (!(disabled == rhs.disabled))
      return false;
    if (!(giftMessageRewardIds == rhs.giftMessageRewardIds))
      return false;
    if (__isset.openBody != rhs.__isset.openBody)
      return false;
    else if (__isset.openBody && !(openBody == rhs.openBody))
      return false;
    if (__isset.templateId != rhs.__isset.templateId)
      return false;
    else if (__isset.templateId && !(templateId == rhs.templateId))
      return false;
    return true;
  }
  bool operator != (const AdminGiftMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminGiftMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AdminGiftMessage &a, AdminGiftMessage &b);

std::ostream& operator<<(std::ostream& out, const AdminGiftMessage& obj);

typedef struct _PopupMessage__isset {
  _PopupMessage__isset() : templateId(false), lastIAPMinutes(false), body2(false), title2(false), leftRibbon(false), rightRibbon(false), bottomLeft(false), bottomRight(false), leftUnderRibbon(false), rightUnderRibbon(false), requireOneOfCurrencyIds(false), requireOneOfCurrencyAmounts(false), markAsReadOnClosing(false), triggerButtonActionOnTappingCloseButton(false), triggerButtonActionOnTappingOutside(false) {}
  bool templateId :1;
  bool lastIAPMinutes :1;
  bool body2 :1;
  bool title2 :1;
  bool leftRibbon :1;
  bool rightRibbon :1;
  bool bottomLeft :1;
  bool bottomRight :1;
  bool leftUnderRibbon :1;
  bool rightUnderRibbon :1;
  bool requireOneOfCurrencyIds :1;
  bool requireOneOfCurrencyAmounts :1;
  bool markAsReadOnClosing :1;
  bool triggerButtonActionOnTappingCloseButton :1;
  bool triggerButtonActionOnTappingOutside :1;
} _PopupMessage__isset;

class PopupMessage : public virtual ::apache::thrift::TBase {
 public:

  PopupMessage(const PopupMessage&);
  PopupMessage& operator=(const PopupMessage&);
  PopupMessage() : popupMessageId(), displayOrder(0), templateId(), eventPhases((EventPhases::type)0), showRank(0), hideRank(0), instant(0), repeatSeconds(0), maxShown(0), disabled(0), offerType((AvailableOfferType::type)0), offerId(), offerSingleStep(0), lastIAPMinutes(0), markAsReadOnClosing(0), triggerButtonActionOnTappingCloseButton(0), triggerButtonActionOnTappingOutside(0) {
  }

  virtual ~PopupMessage() throw();
  PopupMessageID popupMessageId;
  int32_t displayOrder;
  TemplateID templateId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t showRank;
  int32_t hideRank;
  bool instant;
  int32_t repeatSeconds;
  int32_t maxShown;
  bool disabled;
  AvailableOfferType::type offerType;
  std::string offerId;
  bool offerSingleStep;
  int32_t lastIAPMinutes;
  LocalizedString title;
  LocalizedString body;
  LocalizedString body2;
  LocalizedString title2;
  LocalizedString leftRibbon;
  LocalizedString rightRibbon;
  LocalizedString bottomLeft;
  LocalizedString bottomRight;
  LocalizedString leftUnderRibbon;
  LocalizedString rightUnderRibbon;
  std::vector<CurrencyID>  requireOneOfCurrencyIds;
  std::vector<int32_t>  requireOneOfCurrencyAmounts;
  bool markAsReadOnClosing;
  bool triggerButtonActionOnTappingCloseButton;
  bool triggerButtonActionOnTappingOutside;

  _PopupMessage__isset __isset;

  void __set_popupMessageId(const PopupMessageID& val);

  void __set_displayOrder(const int32_t val);

  void __set_templateId(const TemplateID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_showRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_instant(const bool val);

  void __set_repeatSeconds(const int32_t val);

  void __set_maxShown(const int32_t val);

  void __set_disabled(const bool val);

  void __set_offerType(const AvailableOfferType::type val);

  void __set_offerId(const std::string& val);

  void __set_offerSingleStep(const bool val);

  void __set_lastIAPMinutes(const int32_t val);

  void __set_title(const LocalizedString& val);

  void __set_body(const LocalizedString& val);

  void __set_body2(const LocalizedString& val);

  void __set_title2(const LocalizedString& val);

  void __set_leftRibbon(const LocalizedString& val);

  void __set_rightRibbon(const LocalizedString& val);

  void __set_bottomLeft(const LocalizedString& val);

  void __set_bottomRight(const LocalizedString& val);

  void __set_leftUnderRibbon(const LocalizedString& val);

  void __set_rightUnderRibbon(const LocalizedString& val);

  void __set_requireOneOfCurrencyIds(const std::vector<CurrencyID> & val);

  void __set_requireOneOfCurrencyAmounts(const std::vector<int32_t> & val);

  void __set_markAsReadOnClosing(const bool val);

  void __set_triggerButtonActionOnTappingCloseButton(const bool val);

  void __set_triggerButtonActionOnTappingOutside(const bool val);

  bool operator == (const PopupMessage & rhs) const
  {
    if (!(popupMessageId == rhs.popupMessageId))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (__isset.templateId != rhs.__isset.templateId)
      return false;
    else if (__isset.templateId && !(templateId == rhs.templateId))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (!(instant == rhs.instant))
      return false;
    if (!(repeatSeconds == rhs.repeatSeconds))
      return false;
    if (!(maxShown == rhs.maxShown))
      return false;
    if (!(disabled == rhs.disabled))
      return false;
    if (!(offerType == rhs.offerType))
      return false;
    if (!(offerId == rhs.offerId))
      return false;
    if (!(offerSingleStep == rhs.offerSingleStep))
      return false;
    if (__isset.lastIAPMinutes != rhs.__isset.lastIAPMinutes)
      return false;
    else if (__isset.lastIAPMinutes && !(lastIAPMinutes == rhs.lastIAPMinutes))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(body == rhs.body))
      return false;
    if (__isset.body2 != rhs.__isset.body2)
      return false;
    else if (__isset.body2 && !(body2 == rhs.body2))
      return false;
    if (__isset.title2 != rhs.__isset.title2)
      return false;
    else if (__isset.title2 && !(title2 == rhs.title2))
      return false;
    if (__isset.leftRibbon != rhs.__isset.leftRibbon)
      return false;
    else if (__isset.leftRibbon && !(leftRibbon == rhs.leftRibbon))
      return false;
    if (__isset.rightRibbon != rhs.__isset.rightRibbon)
      return false;
    else if (__isset.rightRibbon && !(rightRibbon == rhs.rightRibbon))
      return false;
    if (__isset.bottomLeft != rhs.__isset.bottomLeft)
      return false;
    else if (__isset.bottomLeft && !(bottomLeft == rhs.bottomLeft))
      return false;
    if (__isset.bottomRight != rhs.__isset.bottomRight)
      return false;
    else if (__isset.bottomRight && !(bottomRight == rhs.bottomRight))
      return false;
    if (__isset.leftUnderRibbon != rhs.__isset.leftUnderRibbon)
      return false;
    else if (__isset.leftUnderRibbon && !(leftUnderRibbon == rhs.leftUnderRibbon))
      return false;
    if (__isset.rightUnderRibbon != rhs.__isset.rightUnderRibbon)
      return false;
    else if (__isset.rightUnderRibbon && !(rightUnderRibbon == rhs.rightUnderRibbon))
      return false;
    if (__isset.requireOneOfCurrencyIds != rhs.__isset.requireOneOfCurrencyIds)
      return false;
    else if (__isset.requireOneOfCurrencyIds && !(requireOneOfCurrencyIds == rhs.requireOneOfCurrencyIds))
      return false;
    if (__isset.requireOneOfCurrencyAmounts != rhs.__isset.requireOneOfCurrencyAmounts)
      return false;
    else if (__isset.requireOneOfCurrencyAmounts && !(requireOneOfCurrencyAmounts == rhs.requireOneOfCurrencyAmounts))
      return false;
    if (__isset.markAsReadOnClosing != rhs.__isset.markAsReadOnClosing)
      return false;
    else if (__isset.markAsReadOnClosing && !(markAsReadOnClosing == rhs.markAsReadOnClosing))
      return false;
    if (__isset.triggerButtonActionOnTappingCloseButton != rhs.__isset.triggerButtonActionOnTappingCloseButton)
      return false;
    else if (__isset.triggerButtonActionOnTappingCloseButton && !(triggerButtonActionOnTappingCloseButton == rhs.triggerButtonActionOnTappingCloseButton))
      return false;
    if (__isset.triggerButtonActionOnTappingOutside != rhs.__isset.triggerButtonActionOnTappingOutside)
      return false;
    else if (__isset.triggerButtonActionOnTappingOutside && !(triggerButtonActionOnTappingOutside == rhs.triggerButtonActionOnTappingOutside))
      return false;
    return true;
  }
  bool operator != (const PopupMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PopupMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PopupMessage &a, PopupMessage &b);

std::ostream& operator<<(std::ostream& out, const PopupMessage& obj);


class PopupMessageSettings : public virtual ::apache::thrift::TBase {
 public:

  PopupMessageSettings(const PopupMessageSettings&);
  PopupMessageSettings& operator=(const PopupMessageSettings&);
  PopupMessageSettings() : globalQueueMax(0), globalQueueCooldownSeconds(0) {
  }

  virtual ~PopupMessageSettings() throw();
  int32_t globalQueueMax;
  int32_t globalQueueCooldownSeconds;

  void __set_globalQueueMax(const int32_t val);

  void __set_globalQueueCooldownSeconds(const int32_t val);

  bool operator == (const PopupMessageSettings & rhs) const
  {
    if (!(globalQueueMax == rhs.globalQueueMax))
      return false;
    if (!(globalQueueCooldownSeconds == rhs.globalQueueCooldownSeconds))
      return false;
    return true;
  }
  bool operator != (const PopupMessageSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PopupMessageSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PopupMessageSettings &a, PopupMessageSettings &b);

std::ostream& operator<<(std::ostream& out, const PopupMessageSettings& obj);


class EventSettings : public virtual ::apache::thrift::TBase {
 public:

  EventSettings(const EventSettings&);
  EventSettings& operator=(const EventSettings&);
  EventSettings() : defaultEventIslandId() {
  }

  virtual ~EventSettings() throw();
  EventIslandID defaultEventIslandId;

  void __set_defaultEventIslandId(const EventIslandID& val);

  bool operator == (const EventSettings & rhs) const
  {
    if (!(defaultEventIslandId == rhs.defaultEventIslandId))
      return false;
    return true;
  }
  bool operator != (const EventSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EventSettings &a, EventSettings &b);

std::ostream& operator<<(std::ostream& out, const EventSettings& obj);


class PlayerDisplaySuggest : public virtual ::apache::thrift::TBase {
 public:

  PlayerDisplaySuggest(const PlayerDisplaySuggest&);
  PlayerDisplaySuggest& operator=(const PlayerDisplaySuggest&);
  PlayerDisplaySuggest() : display() {
  }

  virtual ~PlayerDisplaySuggest() throw();
  std::string display;

  void __set_display(const std::string& val);

  bool operator == (const PlayerDisplaySuggest & rhs) const
  {
    if (!(display == rhs.display))
      return false;
    return true;
  }
  bool operator != (const PlayerDisplaySuggest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerDisplaySuggest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlayerDisplaySuggest &a, PlayerDisplaySuggest &b);

std::ostream& operator<<(std::ostream& out, const PlayerDisplaySuggest& obj);


class GuildNameSuggest : public virtual ::apache::thrift::TBase {
 public:

  GuildNameSuggest(const GuildNameSuggest&);
  GuildNameSuggest& operator=(const GuildNameSuggest&);
  GuildNameSuggest() : display() {
  }

  virtual ~GuildNameSuggest() throw();
  std::string display;

  void __set_display(const std::string& val);

  bool operator == (const GuildNameSuggest & rhs) const
  {
    if (!(display == rhs.display))
      return false;
    return true;
  }
  bool operator != (const GuildNameSuggest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildNameSuggest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildNameSuggest &a, GuildNameSuggest &b);

std::ostream& operator<<(std::ostream& out, const GuildNameSuggest& obj);


class GuildLeaderboardReward : public virtual ::apache::thrift::TBase {
 public:

  GuildLeaderboardReward(const GuildLeaderboardReward&);
  GuildLeaderboardReward& operator=(const GuildLeaderboardReward&);
  GuildLeaderboardReward() : leaderboardId(), leaderboardRibbonId(), recipient((GuildLeaderboardRewardRecipient::type)0), rewardType((LootItemType::type)0), rewardId(), rewardAmount(0) {
  }

  virtual ~GuildLeaderboardReward() throw();
  GuildLeaderboardID leaderboardId;
  GuildLeaderboardRibbonID leaderboardRibbonId;
  GuildLeaderboardRewardRecipient::type recipient;
  LootItemType::type rewardType;
  std::string rewardId;
  int32_t rewardAmount;

  void __set_leaderboardId(const GuildLeaderboardID& val);

  void __set_leaderboardRibbonId(const GuildLeaderboardRibbonID& val);

  void __set_recipient(const GuildLeaderboardRewardRecipient::type val);

  void __set_rewardType(const LootItemType::type val);

  void __set_rewardId(const std::string& val);

  void __set_rewardAmount(const int32_t val);

  bool operator == (const GuildLeaderboardReward & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(leaderboardRibbonId == rhs.leaderboardRibbonId))
      return false;
    if (!(recipient == rhs.recipient))
      return false;
    if (!(rewardType == rhs.rewardType))
      return false;
    if (!(rewardId == rhs.rewardId))
      return false;
    if (!(rewardAmount == rhs.rewardAmount))
      return false;
    return true;
  }
  bool operator != (const GuildLeaderboardReward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildLeaderboardReward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildLeaderboardReward &a, GuildLeaderboardReward &b);

std::ostream& operator<<(std::ostream& out, const GuildLeaderboardReward& obj);

typedef struct _GuildLeaderboardRibbon__isset {
  _GuildLeaderboardRibbon__isset() : memberRewards(false), leaderRewards(false) {}
  bool memberRewards :1;
  bool leaderRewards :1;
} _GuildLeaderboardRibbon__isset;

class GuildLeaderboardRibbon : public virtual ::apache::thrift::TBase {
 public:

  GuildLeaderboardRibbon(const GuildLeaderboardRibbon&);
  GuildLeaderboardRibbon& operator=(const GuildLeaderboardRibbon&);
  GuildLeaderboardRibbon() : leaderboardId(), leaderboardRibbonId(), positionStart(0), positionEnd(0), trophyAssetId(), bannerAssetId(), rewardChestAsset() {
  }

  virtual ~GuildLeaderboardRibbon() throw();
  LeaderboardID leaderboardId;
  LeaderboardRibbonID leaderboardRibbonId;
  LocalizedString display;
  int32_t positionStart;
  int32_t positionEnd;
  AssetID trophyAssetId;
  AssetID bannerAssetId;
  std::string rewardChestAsset;
  std::vector<GuildLeaderboardReward>  memberRewards;
  std::vector<GuildLeaderboardReward>  leaderRewards;

  _GuildLeaderboardRibbon__isset __isset;

  void __set_leaderboardId(const LeaderboardID& val);

  void __set_leaderboardRibbonId(const LeaderboardRibbonID& val);

  void __set_display(const LocalizedString& val);

  void __set_positionStart(const int32_t val);

  void __set_positionEnd(const int32_t val);

  void __set_trophyAssetId(const AssetID& val);

  void __set_bannerAssetId(const AssetID& val);

  void __set_rewardChestAsset(const std::string& val);

  void __set_memberRewards(const std::vector<GuildLeaderboardReward> & val);

  void __set_leaderRewards(const std::vector<GuildLeaderboardReward> & val);

  bool operator == (const GuildLeaderboardRibbon & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(leaderboardRibbonId == rhs.leaderboardRibbonId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(positionStart == rhs.positionStart))
      return false;
    if (!(positionEnd == rhs.positionEnd))
      return false;
    if (!(trophyAssetId == rhs.trophyAssetId))
      return false;
    if (!(bannerAssetId == rhs.bannerAssetId))
      return false;
    if (!(rewardChestAsset == rhs.rewardChestAsset))
      return false;
    if (__isset.memberRewards != rhs.__isset.memberRewards)
      return false;
    else if (__isset.memberRewards && !(memberRewards == rhs.memberRewards))
      return false;
    if (__isset.leaderRewards != rhs.__isset.leaderRewards)
      return false;
    else if (__isset.leaderRewards && !(leaderRewards == rhs.leaderRewards))
      return false;
    return true;
  }
  bool operator != (const GuildLeaderboardRibbon &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildLeaderboardRibbon & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildLeaderboardRibbon &a, GuildLeaderboardRibbon &b);

std::ostream& operator<<(std::ostream& out, const GuildLeaderboardRibbon& obj);

typedef struct _GuildLeaderboard__isset {
  _GuildLeaderboard__isset() : rewardDisplay(false), ribbons(false), myTeamMemberDisplay(false), myTeamMemberTabIcon(false) {}
  bool rewardDisplay :1;
  bool ribbons :1;
  bool myTeamMemberDisplay :1;
  bool myTeamMemberTabIcon :1;
} _GuildLeaderboard__isset;

class GuildLeaderboard : public virtual ::apache::thrift::TBase {
 public:

  GuildLeaderboard(const GuildLeaderboard&);
  GuildLeaderboard& operator=(const GuildLeaderboard&);
  GuildLeaderboard() : leaderboardId(), eventPhases((EventPhases::type)0), showRank(0), unlockRank(0), hideRank(0), pointCurrencyId(), rewardMessageId(), leaderRewardMessageId(), leaderboardTemplateId(), tabIcon(), topRewardBannerBg(), myTeamMemberTabIcon() {
  }

  virtual ~GuildLeaderboard() throw();
  GuildLeaderboardID leaderboardId;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;
  int32_t showRank;
  int32_t unlockRank;
  int32_t hideRank;
  CurrencyID pointCurrencyId;
  LocalizedString display;
  LocalizedString rewardDisplay;
  LocalizedString previewText;
  LocalizedString recapText;
  LocalizedString joinText;
  std::map<GuildLeaderboardRibbonID, GuildLeaderboardRibbon>  ribbons;
  RewardMessageID rewardMessageId;
  RewardMessageID leaderRewardMessageId;
  LeaderboardTemplateID leaderboardTemplateId;
  AssetPath tabIcon;
  AssetPath topRewardBannerBg;
  LocalizedString myTeamMemberDisplay;
  AssetPath myTeamMemberTabIcon;

  _GuildLeaderboard__isset __isset;

  void __set_leaderboardId(const GuildLeaderboardID& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  void __set_showRank(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  void __set_pointCurrencyId(const CurrencyID& val);

  void __set_display(const LocalizedString& val);

  void __set_rewardDisplay(const LocalizedString& val);

  void __set_previewText(const LocalizedString& val);

  void __set_recapText(const LocalizedString& val);

  void __set_joinText(const LocalizedString& val);

  void __set_ribbons(const std::map<GuildLeaderboardRibbonID, GuildLeaderboardRibbon> & val);

  void __set_rewardMessageId(const RewardMessageID& val);

  void __set_leaderRewardMessageId(const RewardMessageID& val);

  void __set_leaderboardTemplateId(const LeaderboardTemplateID& val);

  void __set_tabIcon(const AssetPath& val);

  void __set_topRewardBannerBg(const AssetPath& val);

  void __set_myTeamMemberDisplay(const LocalizedString& val);

  void __set_myTeamMemberTabIcon(const AssetPath& val);

  bool operator == (const GuildLeaderboard & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(eventPhases == rhs.eventPhases))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(unlockRank == rhs.unlockRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    if (!(pointCurrencyId == rhs.pointCurrencyId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (__isset.rewardDisplay != rhs.__isset.rewardDisplay)
      return false;
    else if (__isset.rewardDisplay && !(rewardDisplay == rhs.rewardDisplay))
      return false;
    if (!(previewText == rhs.previewText))
      return false;
    if (!(recapText == rhs.recapText))
      return false;
    if (!(joinText == rhs.joinText))
      return false;
    if (__isset.ribbons != rhs.__isset.ribbons)
      return false;
    else if (__isset.ribbons && !(ribbons == rhs.ribbons))
      return false;
    if (!(rewardMessageId == rhs.rewardMessageId))
      return false;
    if (!(leaderRewardMessageId == rhs.leaderRewardMessageId))
      return false;
    if (!(leaderboardTemplateId == rhs.leaderboardTemplateId))
      return false;
    if (!(tabIcon == rhs.tabIcon))
      return false;
    if (!(topRewardBannerBg == rhs.topRewardBannerBg))
      return false;
    if (__isset.myTeamMemberDisplay != rhs.__isset.myTeamMemberDisplay)
      return false;
    else if (__isset.myTeamMemberDisplay && !(myTeamMemberDisplay == rhs.myTeamMemberDisplay))
      return false;
    if (__isset.myTeamMemberTabIcon != rhs.__isset.myTeamMemberTabIcon)
      return false;
    else if (__isset.myTeamMemberTabIcon && !(myTeamMemberTabIcon == rhs.myTeamMemberTabIcon))
      return false;
    return true;
  }
  bool operator != (const GuildLeaderboard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildLeaderboard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildLeaderboard &a, GuildLeaderboard &b);

std::ostream& operator<<(std::ostream& out, const GuildLeaderboard& obj);

typedef struct _GuildMemberTypeDisplay__isset {
  _GuildMemberTypeDisplay__isset() : displaySingular(false), promoteFormat(false), demoteFormat(false), kickMemberFormat(false), makeLeaderFormat(false) {}
  bool displaySingular :1;
  bool promoteFormat :1;
  bool demoteFormat :1;
  bool kickMemberFormat :1;
  bool makeLeaderFormat :1;
} _GuildMemberTypeDisplay__isset;

class GuildMemberTypeDisplay : public virtual ::apache::thrift::TBase {
 public:

  GuildMemberTypeDisplay(const GuildMemberTypeDisplay&);
  GuildMemberTypeDisplay& operator=(const GuildMemberTypeDisplay&);
  GuildMemberTypeDisplay() : guildMemberType((GuildMemberType::type)0), displayOrder(0), iconImagePath() {
  }

  virtual ~GuildMemberTypeDisplay() throw();
  GuildMemberType::type guildMemberType;
  LocalizedString display;
  int32_t displayOrder;
  LocalizedString displaySingular;
  std::string iconImagePath;
  LocalizedString promoteFormat;
  LocalizedString demoteFormat;
  LocalizedString kickMemberFormat;
  LocalizedString makeLeaderFormat;

  _GuildMemberTypeDisplay__isset __isset;

  void __set_guildMemberType(const GuildMemberType::type val);

  void __set_display(const LocalizedString& val);

  void __set_displayOrder(const int32_t val);

  void __set_displaySingular(const LocalizedString& val);

  void __set_iconImagePath(const std::string& val);

  void __set_promoteFormat(const LocalizedString& val);

  void __set_demoteFormat(const LocalizedString& val);

  void __set_kickMemberFormat(const LocalizedString& val);

  void __set_makeLeaderFormat(const LocalizedString& val);

  bool operator == (const GuildMemberTypeDisplay & rhs) const
  {
    if (!(guildMemberType == rhs.guildMemberType))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (__isset.displaySingular != rhs.__isset.displaySingular)
      return false;
    else if (__isset.displaySingular && !(displaySingular == rhs.displaySingular))
      return false;
    if (!(iconImagePath == rhs.iconImagePath))
      return false;
    if (__isset.promoteFormat != rhs.__isset.promoteFormat)
      return false;
    else if (__isset.promoteFormat && !(promoteFormat == rhs.promoteFormat))
      return false;
    if (__isset.demoteFormat != rhs.__isset.demoteFormat)
      return false;
    else if (__isset.demoteFormat && !(demoteFormat == rhs.demoteFormat))
      return false;
    if (__isset.kickMemberFormat != rhs.__isset.kickMemberFormat)
      return false;
    else if (__isset.kickMemberFormat && !(kickMemberFormat == rhs.kickMemberFormat))
      return false;
    if (__isset.makeLeaderFormat != rhs.__isset.makeLeaderFormat)
      return false;
    else if (__isset.makeLeaderFormat && !(makeLeaderFormat == rhs.makeLeaderFormat))
      return false;
    return true;
  }
  bool operator != (const GuildMemberTypeDisplay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildMemberTypeDisplay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildMemberTypeDisplay &a, GuildMemberTypeDisplay &b);

std::ostream& operator<<(std::ostream& out, const GuildMemberTypeDisplay& obj);

typedef struct _GuildJoinTypeDisplay__isset {
  _GuildJoinTypeDisplay__isset() : displayA(false), displayB(false) {}
  bool displayA :1;
  bool displayB :1;
} _GuildJoinTypeDisplay__isset;

class GuildJoinTypeDisplay : public virtual ::apache::thrift::TBase {
 public:

  GuildJoinTypeDisplay(const GuildJoinTypeDisplay&);
  GuildJoinTypeDisplay& operator=(const GuildJoinTypeDisplay&);
  GuildJoinTypeDisplay() : guildJoinType((GuildJoinType::type)0), displayOrder(0) {
  }

  virtual ~GuildJoinTypeDisplay() throw();
  GuildJoinType::type guildJoinType;
  LocalizedString display;
  int32_t displayOrder;
  LocalizedString displayA;
  LocalizedString displayB;

  _GuildJoinTypeDisplay__isset __isset;

  void __set_guildJoinType(const GuildJoinType::type val);

  void __set_display(const LocalizedString& val);

  void __set_displayOrder(const int32_t val);

  void __set_displayA(const LocalizedString& val);

  void __set_displayB(const LocalizedString& val);

  bool operator == (const GuildJoinTypeDisplay & rhs) const
  {
    if (!(guildJoinType == rhs.guildJoinType))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (__isset.displayA != rhs.__isset.displayA)
      return false;
    else if (__isset.displayA && !(displayA == rhs.displayA))
      return false;
    if (__isset.displayB != rhs.__isset.displayB)
      return false;
    else if (__isset.displayB && !(displayB == rhs.displayB))
      return false;
    return true;
  }
  bool operator != (const GuildJoinTypeDisplay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildJoinTypeDisplay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildJoinTypeDisplay &a, GuildJoinTypeDisplay &b);

std::ostream& operator<<(std::ostream& out, const GuildJoinTypeDisplay& obj);

typedef struct _GuildSettings__isset {
  _GuildSettings__isset() : cannotJoinFullGuildText(false), guildDisplayAndTagTakenText(false), guildNameTakenText(false), guildTagTakenText(false), guildDeletedText(false), guildErrorText(false), askForItemsSecondsTTL(false) {}
  bool cannotJoinFullGuildText :1;
  bool guildDisplayAndTagTakenText :1;
  bool guildNameTakenText :1;
  bool guildTagTakenText :1;
  bool guildDeletedText :1;
  bool guildErrorText :1;
  bool askForItemsSecondsTTL :1;
} _GuildSettings__isset;

class GuildSettings : public virtual ::apache::thrift::TBase {
 public:

  GuildSettings(const GuildSettings&);
  GuildSettings& operator=(const GuildSettings&);
  GuildSettings() : maxMemberCount(0), maxChatHistory(0), unlockRank(0), createRank(0), guildLeaderType((GuildMemberType::type)0), guildCoLeaderType((GuildMemberType::type)0), maxInvitations(0), maxDisplayLength(0), maxDisplayTagLength(0), maxDescriptionLength(0), minDisplayLength(0), minDisplayTagLength(0), minDescriptionLength(0), onlineStatusActivityMinutes(0), maxChatDisplayHistory(0), chatAllowedCharacters(), unknownLocationId(), anyLocationId(), noEmblemId(), defaultFrameAssetId(), noGuildDefaultFrameAssetId(), suggestTargetGuildCount(0), suggestBucketsPerLocation(0), suggestOverfetchMultiplier(0), suggestDeadGuildInactivityMinutes(0), suggestAutoJoinRatio(0), promotionTokenCurrencyID(), demotionTokenCurrencyID(), leaderTokenCurrencyID(), askForItemsSecondsTTL(0), guildHallBuildingId() {
  }

  virtual ~GuildSettings() throw();
  int32_t maxMemberCount;
  int32_t maxChatHistory;
  int32_t unlockRank;
  int32_t createRank;
  GuildMemberType::type guildLeaderType;
  GuildMemberType::type guildCoLeaderType;
  int32_t maxInvitations;
  int32_t maxDisplayLength;
  int32_t maxDisplayTagLength;
  int32_t maxDescriptionLength;
  int32_t minDisplayLength;
  int32_t minDisplayTagLength;
  int32_t minDescriptionLength;
  int32_t onlineStatusActivityMinutes;
  int32_t maxChatDisplayHistory;
  std::string chatAllowedCharacters;
  LocationID unknownLocationId;
  LocationID anyLocationId;
  GuildEmblemID noEmblemId;
  AssetID defaultFrameAssetId;
  AssetID noGuildDefaultFrameAssetId;
  int32_t suggestTargetGuildCount;
  int32_t suggestBucketsPerLocation;
  double suggestOverfetchMultiplier;
  int32_t suggestDeadGuildInactivityMinutes;
  double suggestAutoJoinRatio;
  CurrencyID promotionTokenCurrencyID;
  CurrencyID demotionTokenCurrencyID;
  CurrencyID leaderTokenCurrencyID;
  std::vector<GuildMemberType::type>  canSendGuildInvites;
  LocalizedString joinInvitationDefault;
  LocalizedString joinApplicationDefault;
  LocalizedString applicantAcceptedMessageTitle;
  LocalizedString applicantRejectedMessageTitle;
  LocalizedString cannotSendGuildInvitesText;
  LocalizedString cannotJoinFullGuildText;
  LocalizedString guildDisplayAndTagTakenText;
  LocalizedString guildNameTakenText;
  LocalizedString guildTagTakenText;
  LocalizedString guildDeletedText;
  LocalizedString guildErrorText;
  int32_t askForItemsSecondsTTL;
  BuildingID guildHallBuildingId;

  _GuildSettings__isset __isset;

  void __set_maxMemberCount(const int32_t val);

  void __set_maxChatHistory(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_createRank(const int32_t val);

  void __set_guildLeaderType(const GuildMemberType::type val);

  void __set_guildCoLeaderType(const GuildMemberType::type val);

  void __set_maxInvitations(const int32_t val);

  void __set_maxDisplayLength(const int32_t val);

  void __set_maxDisplayTagLength(const int32_t val);

  void __set_maxDescriptionLength(const int32_t val);

  void __set_minDisplayLength(const int32_t val);

  void __set_minDisplayTagLength(const int32_t val);

  void __set_minDescriptionLength(const int32_t val);

  void __set_onlineStatusActivityMinutes(const int32_t val);

  void __set_maxChatDisplayHistory(const int32_t val);

  void __set_chatAllowedCharacters(const std::string& val);

  void __set_unknownLocationId(const LocationID& val);

  void __set_anyLocationId(const LocationID& val);

  void __set_noEmblemId(const GuildEmblemID& val);

  void __set_defaultFrameAssetId(const AssetID& val);

  void __set_noGuildDefaultFrameAssetId(const AssetID& val);

  void __set_suggestTargetGuildCount(const int32_t val);

  void __set_suggestBucketsPerLocation(const int32_t val);

  void __set_suggestOverfetchMultiplier(const double val);

  void __set_suggestDeadGuildInactivityMinutes(const int32_t val);

  void __set_suggestAutoJoinRatio(const double val);

  void __set_promotionTokenCurrencyID(const CurrencyID& val);

  void __set_demotionTokenCurrencyID(const CurrencyID& val);

  void __set_leaderTokenCurrencyID(const CurrencyID& val);

  void __set_canSendGuildInvites(const std::vector<GuildMemberType::type> & val);

  void __set_joinInvitationDefault(const LocalizedString& val);

  void __set_joinApplicationDefault(const LocalizedString& val);

  void __set_applicantAcceptedMessageTitle(const LocalizedString& val);

  void __set_applicantRejectedMessageTitle(const LocalizedString& val);

  void __set_cannotSendGuildInvitesText(const LocalizedString& val);

  void __set_cannotJoinFullGuildText(const LocalizedString& val);

  void __set_guildDisplayAndTagTakenText(const LocalizedString& val);

  void __set_guildNameTakenText(const LocalizedString& val);

  void __set_guildTagTakenText(const LocalizedString& val);

  void __set_guildDeletedText(const LocalizedString& val);

  void __set_guildErrorText(const LocalizedString& val);

  void __set_askForItemsSecondsTTL(const int32_t val);

  void __set_guildHallBuildingId(const BuildingID& val);

  bool operator == (const GuildSettings & rhs) const
  {
    if (!(maxMemberCount == rhs.maxMemberCount))
      return false;
    if (!(maxChatHistory == rhs.maxChatHistory))
      return false;
    if (!(unlockRank == rhs.unlockRank))
      return false;
    if (!(createRank == rhs.createRank))
      return false;
    if (!(guildLeaderType == rhs.guildLeaderType))
      return false;
    if (!(guildCoLeaderType == rhs.guildCoLeaderType))
      return false;
    if (!(maxInvitations == rhs.maxInvitations))
      return false;
    if (!(maxDisplayLength == rhs.maxDisplayLength))
      return false;
    if (!(maxDisplayTagLength == rhs.maxDisplayTagLength))
      return false;
    if (!(maxDescriptionLength == rhs.maxDescriptionLength))
      return false;
    if (!(minDisplayLength == rhs.minDisplayLength))
      return false;
    if (!(minDisplayTagLength == rhs.minDisplayTagLength))
      return false;
    if (!(minDescriptionLength == rhs.minDescriptionLength))
      return false;
    if (!(onlineStatusActivityMinutes == rhs.onlineStatusActivityMinutes))
      return false;
    if (!(maxChatDisplayHistory == rhs.maxChatDisplayHistory))
      return false;
    if (!(chatAllowedCharacters == rhs.chatAllowedCharacters))
      return false;
    if (!(unknownLocationId == rhs.unknownLocationId))
      return false;
    if (!(anyLocationId == rhs.anyLocationId))
      return false;
    if (!(noEmblemId == rhs.noEmblemId))
      return false;
    if (!(defaultFrameAssetId == rhs.defaultFrameAssetId))
      return false;
    if (!(noGuildDefaultFrameAssetId == rhs.noGuildDefaultFrameAssetId))
      return false;
    if (!(suggestTargetGuildCount == rhs.suggestTargetGuildCount))
      return false;
    if (!(suggestBucketsPerLocation == rhs.suggestBucketsPerLocation))
      return false;
    if (!(suggestOverfetchMultiplier == rhs.suggestOverfetchMultiplier))
      return false;
    if (!(suggestDeadGuildInactivityMinutes == rhs.suggestDeadGuildInactivityMinutes))
      return false;
    if (!(suggestAutoJoinRatio == rhs.suggestAutoJoinRatio))
      return false;
    if (!(promotionTokenCurrencyID == rhs.promotionTokenCurrencyID))
      return false;
    if (!(demotionTokenCurrencyID == rhs.demotionTokenCurrencyID))
      return false;
    if (!(leaderTokenCurrencyID == rhs.leaderTokenCurrencyID))
      return false;
    if (!(canSendGuildInvites == rhs.canSendGuildInvites))
      return false;
    if (!(joinInvitationDefault == rhs.joinInvitationDefault))
      return false;
    if (!(joinApplicationDefault == rhs.joinApplicationDefault))
      return false;
    if (!(applicantAcceptedMessageTitle == rhs.applicantAcceptedMessageTitle))
      return false;
    if (!(applicantRejectedMessageTitle == rhs.applicantRejectedMessageTitle))
      return false;
    if (!(cannotSendGuildInvitesText == rhs.cannotSendGuildInvitesText))
      return false;
    if (__isset.cannotJoinFullGuildText != rhs.__isset.cannotJoinFullGuildText)
      return false;
    else if (__isset.cannotJoinFullGuildText && !(cannotJoinFullGuildText == rhs.cannotJoinFullGuildText))
      return false;
    if (__isset.guildDisplayAndTagTakenText != rhs.__isset.guildDisplayAndTagTakenText)
      return false;
    else if (__isset.guildDisplayAndTagTakenText && !(guildDisplayAndTagTakenText == rhs.guildDisplayAndTagTakenText))
      return false;
    if (__isset.guildNameTakenText != rhs.__isset.guildNameTakenText)
      return false;
    else if (__isset.guildNameTakenText && !(guildNameTakenText == rhs.guildNameTakenText))
      return false;
    if (__isset.guildTagTakenText != rhs.__isset.guildTagTakenText)
      return false;
    else if (__isset.guildTagTakenText && !(guildTagTakenText == rhs.guildTagTakenText))
      return false;
    if (__isset.guildDeletedText != rhs.__isset.guildDeletedText)
      return false;
    else if (__isset.guildDeletedText && !(guildDeletedText == rhs.guildDeletedText))
      return false;
    if (__isset.guildErrorText != rhs.__isset.guildErrorText)
      return false;
    else if (__isset.guildErrorText && !(guildErrorText == rhs.guildErrorText))
      return false;
    if (__isset.askForItemsSecondsTTL != rhs.__isset.askForItemsSecondsTTL)
      return false;
    else if (__isset.askForItemsSecondsTTL && !(askForItemsSecondsTTL == rhs.askForItemsSecondsTTL))
      return false;
    if (!(guildHallBuildingId == rhs.guildHallBuildingId))
      return false;
    return true;
  }
  bool operator != (const GuildSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildSettings &a, GuildSettings &b);

std::ostream& operator<<(std::ostream& out, const GuildSettings& obj);

typedef struct _Location__isset {
  _Location__isset() : imageAssetId(false), altLocationId(false), shortDisplay(false) {}
  bool imageAssetId :1;
  bool altLocationId :1;
  bool shortDisplay :1;
} _Location__isset;

class Location : public virtual ::apache::thrift::TBase {
 public:

  Location(const Location&);
  Location& operator=(const Location&);
  Location() : locationId(), imageAssetId(), imagePath(), displayOrder(0), section(0), altLocationId(), hideInUi(0), analyticsLabel() {
  }

  virtual ~Location() throw();
  LocationID locationId;
  LocalizedString display;
  AssetID imageAssetId;
  std::string imagePath;
  int32_t displayOrder;
  int32_t section;
  LocationID altLocationId;
  LocalizedString shortDisplay;
  bool hideInUi;
  std::string analyticsLabel;
  std::vector<std::string>  languages;

  _Location__isset __isset;

  void __set_locationId(const LocationID& val);

  void __set_display(const LocalizedString& val);

  void __set_imageAssetId(const AssetID& val);

  void __set_imagePath(const std::string& val);

  void __set_displayOrder(const int32_t val);

  void __set_section(const int32_t val);

  void __set_altLocationId(const LocationID& val);

  void __set_shortDisplay(const LocalizedString& val);

  void __set_hideInUi(const bool val);

  void __set_analyticsLabel(const std::string& val);

  void __set_languages(const std::vector<std::string> & val);

  bool operator == (const Location & rhs) const
  {
    if (!(locationId == rhs.locationId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (__isset.imageAssetId != rhs.__isset.imageAssetId)
      return false;
    else if (__isset.imageAssetId && !(imageAssetId == rhs.imageAssetId))
      return false;
    if (!(imagePath == rhs.imagePath))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(section == rhs.section))
      return false;
    if (__isset.altLocationId != rhs.__isset.altLocationId)
      return false;
    else if (__isset.altLocationId && !(altLocationId == rhs.altLocationId))
      return false;
    if (__isset.shortDisplay != rhs.__isset.shortDisplay)
      return false;
    else if (__isset.shortDisplay && !(shortDisplay == rhs.shortDisplay))
      return false;
    if (!(hideInUi == rhs.hideInUi))
      return false;
    if (!(analyticsLabel == rhs.analyticsLabel))
      return false;
    if (!(languages == rhs.languages))
      return false;
    return true;
  }
  bool operator != (const Location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Location &a, Location &b);

std::ostream& operator<<(std::ostream& out, const Location& obj);

typedef struct _GuildEmblem__isset {
  _GuildEmblem__isset() : minGuildRank(false) {}
  bool minGuildRank :1;
} _GuildEmblem__isset;

class GuildEmblem : public virtual ::apache::thrift::TBase {
 public:

  GuildEmblem(const GuildEmblem&);
  GuildEmblem& operator=(const GuildEmblem&);
  GuildEmblem() : guildEmblemId(), imagePath(), displayOrder(0), hideInUi(0), minGuildRank(0) {
  }

  virtual ~GuildEmblem() throw();
  GuildEmblemID guildEmblemId;
  std::string imagePath;
  int32_t displayOrder;
  bool hideInUi;
  int32_t minGuildRank;

  _GuildEmblem__isset __isset;

  void __set_guildEmblemId(const GuildEmblemID& val);

  void __set_imagePath(const std::string& val);

  void __set_displayOrder(const int32_t val);

  void __set_hideInUi(const bool val);

  void __set_minGuildRank(const int32_t val);

  bool operator == (const GuildEmblem & rhs) const
  {
    if (!(guildEmblemId == rhs.guildEmblemId))
      return false;
    if (!(imagePath == rhs.imagePath))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(hideInUi == rhs.hideInUi))
      return false;
    if (__isset.minGuildRank != rhs.__isset.minGuildRank)
      return false;
    else if (__isset.minGuildRank && !(minGuildRank == rhs.minGuildRank))
      return false;
    return true;
  }
  bool operator != (const GuildEmblem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildEmblem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildEmblem &a, GuildEmblem &b);

std::ostream& operator<<(std::ostream& out, const GuildEmblem& obj);


class GuildBoundItem : public virtual ::apache::thrift::TBase {
 public:

  GuildBoundItem(const GuildBoundItem&);
  GuildBoundItem& operator=(const GuildBoundItem&);
  GuildBoundItem() : itemType((LootItemType::type)0), itemId() {
  }

  virtual ~GuildBoundItem() throw();
  LootItemType::type itemType;
  std::string itemId;

  void __set_itemType(const LootItemType::type val);

  void __set_itemId(const std::string& val);

  bool operator == (const GuildBoundItem & rhs) const
  {
    if (!(itemType == rhs.itemType))
      return false;
    if (!(itemId == rhs.itemId))
      return false;
    return true;
  }
  bool operator != (const GuildBoundItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildBoundItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GuildBoundItem &a, GuildBoundItem &b);

std::ostream& operator<<(std::ostream& out, const GuildBoundItem& obj);


class ChatSystemMessage : public virtual ::apache::thrift::TBase {
 public:

  ChatSystemMessage(const ChatSystemMessage&);
  ChatSystemMessage& operator=(const ChatSystemMessage&);
  ChatSystemMessage() : chatSystemMessageId() {
  }

  virtual ~ChatSystemMessage() throw();
  ChatSystemMessageID chatSystemMessageId;
  LocalizedString message;

  void __set_chatSystemMessageId(const ChatSystemMessageID& val);

  void __set_message(const LocalizedString& val);

  bool operator == (const ChatSystemMessage & rhs) const
  {
    if (!(chatSystemMessageId == rhs.chatSystemMessageId))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ChatSystemMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatSystemMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChatSystemMessage &a, ChatSystemMessage &b);

std::ostream& operator<<(std::ostream& out, const ChatSystemMessage& obj);

typedef struct _Gift__isset {
  _Gift__isset() : eventIds(false), eventPhases(false) {}
  bool eventIds :1;
  bool eventPhases :1;
} _Gift__isset;

class Gift : public virtual ::apache::thrift::TBase {
 public:

  Gift(const Gift&);
  Gift& operator=(const Gift&);
  Gift() : giftId(), iconAssetId(), displayOrder(0), gachaRevealFXAssetId(), openable(0), claimable(0), eventPhases((EventPhases::type)0) {
  }

  virtual ~Gift() throw();
  GiftID giftId;
  LocalizedString display;
  AssetID iconAssetId;
  LocalizedString description;
  int32_t displayOrder;
  AssetID gachaRevealFXAssetId;
  std::vector<LootTableID>  lootTableIds;
  std::vector<int32_t>  lootTableSpins;
  bool openable;
  bool claimable;
  std::vector<EventID>  eventIds;
  EventPhases::type eventPhases;

  _Gift__isset __isset;

  void __set_giftId(const GiftID& val);

  void __set_display(const LocalizedString& val);

  void __set_iconAssetId(const AssetID& val);

  void __set_description(const LocalizedString& val);

  void __set_displayOrder(const int32_t val);

  void __set_gachaRevealFXAssetId(const AssetID& val);

  void __set_lootTableIds(const std::vector<LootTableID> & val);

  void __set_lootTableSpins(const std::vector<int32_t> & val);

  void __set_openable(const bool val);

  void __set_claimable(const bool val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_eventPhases(const EventPhases::type val);

  bool operator == (const Gift & rhs) const
  {
    if (!(giftId == rhs.giftId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(iconAssetId == rhs.iconAssetId))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(gachaRevealFXAssetId == rhs.gachaRevealFXAssetId))
      return false;
    if (!(lootTableIds == rhs.lootTableIds))
      return false;
    if (!(lootTableSpins == rhs.lootTableSpins))
      return false;
    if (!(openable == rhs.openable))
      return false;
    if (!(claimable == rhs.claimable))
      return false;
    if (__isset.eventIds != rhs.__isset.eventIds)
      return false;
    else if (__isset.eventIds && !(eventIds == rhs.eventIds))
      return false;
    if (__isset.eventPhases != rhs.__isset.eventPhases)
      return false;
    else if (__isset.eventPhases && !(eventPhases == rhs.eventPhases))
      return false;
    return true;
  }
  bool operator != (const Gift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Gift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Gift &a, Gift &b);

std::ostream& operator<<(std::ostream& out, const Gift& obj);


class GearAvailableOnGachaOfferList : public virtual ::apache::thrift::TBase {
 public:

  GearAvailableOnGachaOfferList(const GearAvailableOnGachaOfferList&);
  GearAvailableOnGachaOfferList& operator=(const GearAvailableOnGachaOfferList&);
  GearAvailableOnGachaOfferList() : currencyId() {
  }

  virtual ~GearAvailableOnGachaOfferList() throw();
  CurrencyID currencyId;
  std::vector<GachaOfferID>  gachaOfferIds;

  void __set_currencyId(const CurrencyID& val);

  void __set_gachaOfferIds(const std::vector<GachaOfferID> & val);

  bool operator == (const GearAvailableOnGachaOfferList & rhs) const
  {
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(gachaOfferIds == rhs.gachaOfferIds))
      return false;
    return true;
  }
  bool operator != (const GearAvailableOnGachaOfferList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GearAvailableOnGachaOfferList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GearAvailableOnGachaOfferList &a, GearAvailableOnGachaOfferList &b);

std::ostream& operator<<(std::ostream& out, const GearAvailableOnGachaOfferList& obj);


class GearAvailableOnCardOfferList : public virtual ::apache::thrift::TBase {
 public:

  GearAvailableOnCardOfferList(const GearAvailableOnCardOfferList&);
  GearAvailableOnCardOfferList& operator=(const GearAvailableOnCardOfferList&);
  GearAvailableOnCardOfferList() : currencyId() {
  }

  virtual ~GearAvailableOnCardOfferList() throw();
  CurrencyID currencyId;
  std::vector<CardOfferID>  cardOfferIds;

  void __set_currencyId(const CurrencyID& val);

  void __set_cardOfferIds(const std::vector<CardOfferID> & val);

  bool operator == (const GearAvailableOnCardOfferList & rhs) const
  {
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(cardOfferIds == rhs.cardOfferIds))
      return false;
    return true;
  }
  bool operator != (const GearAvailableOnCardOfferList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GearAvailableOnCardOfferList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GearAvailableOnCardOfferList &a, GearAvailableOnCardOfferList &b);

std::ostream& operator<<(std::ostream& out, const GearAvailableOnCardOfferList& obj);


class GearAvailableOnLevelList : public virtual ::apache::thrift::TBase {
 public:

  GearAvailableOnLevelList(const GearAvailableOnLevelList&);
  GearAvailableOnLevelList& operator=(const GearAvailableOnLevelList&);
  GearAvailableOnLevelList() : currencyId() {
  }

  virtual ~GearAvailableOnLevelList() throw();
  CurrencyID currencyId;
  std::vector<LevelID>  levelIds;

  void __set_currencyId(const CurrencyID& val);

  void __set_levelIds(const std::vector<LevelID> & val);

  bool operator == (const GearAvailableOnLevelList & rhs) const
  {
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(levelIds == rhs.levelIds))
      return false;
    return true;
  }
  bool operator != (const GearAvailableOnLevelList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GearAvailableOnLevelList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GearAvailableOnLevelList &a, GearAvailableOnLevelList &b);

std::ostream& operator<<(std::ostream& out, const GearAvailableOnLevelList& obj);


class GearAvailableOnBusinessHarvestList : public virtual ::apache::thrift::TBase {
 public:

  GearAvailableOnBusinessHarvestList(const GearAvailableOnBusinessHarvestList&);
  GearAvailableOnBusinessHarvestList& operator=(const GearAvailableOnBusinessHarvestList&);
  GearAvailableOnBusinessHarvestList() : currencyId() {
  }

  virtual ~GearAvailableOnBusinessHarvestList() throw();
  CurrencyID currencyId;
  std::vector<BuildingID>  businessIds;

  void __set_currencyId(const CurrencyID& val);

  void __set_businessIds(const std::vector<BuildingID> & val);

  bool operator == (const GearAvailableOnBusinessHarvestList & rhs) const
  {
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(businessIds == rhs.businessIds))
      return false;
    return true;
  }
  bool operator != (const GearAvailableOnBusinessHarvestList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GearAvailableOnBusinessHarvestList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GearAvailableOnBusinessHarvestList &a, GearAvailableOnBusinessHarvestList &b);

std::ostream& operator<<(std::ostream& out, const GearAvailableOnBusinessHarvestList& obj);

typedef struct _MainShopEntry__isset {
  _MainShopEntry__isset() : gachaOfferId(false), storeId(false) {}
  bool gachaOfferId :1;
  bool storeId :1;
} _MainShopEntry__isset;

class MainShopEntry : public virtual ::apache::thrift::TBase {
 public:

  MainShopEntry(const MainShopEntry&);
  MainShopEntry& operator=(const MainShopEntry&);
  MainShopEntry() : mainShopEntryId(), gachaOfferId(), storeId(), orderIndex(0), showRank(0), unlockRank(0), hideRank(0) {
  }

  virtual ~MainShopEntry() throw();
  MainShopEntryID mainShopEntryId;
  GachaOfferID gachaOfferId;
  StoreID storeId;
  int32_t orderIndex;
  int32_t showRank;
  int32_t unlockRank;
  int32_t hideRank;

  _MainShopEntry__isset __isset;

  void __set_mainShopEntryId(const MainShopEntryID& val);

  void __set_gachaOfferId(const GachaOfferID& val);

  void __set_storeId(const StoreID& val);

  void __set_orderIndex(const int32_t val);

  void __set_showRank(const int32_t val);

  void __set_unlockRank(const int32_t val);

  void __set_hideRank(const int32_t val);

  bool operator == (const MainShopEntry & rhs) const
  {
    if (!(mainShopEntryId == rhs.mainShopEntryId))
      return false;
    if (__isset.gachaOfferId != rhs.__isset.gachaOfferId)
      return false;
    else if (__isset.gachaOfferId && !(gachaOfferId == rhs.gachaOfferId))
      return false;
    if (__isset.storeId != rhs.__isset.storeId)
      return false;
    else if (__isset.storeId && !(storeId == rhs.storeId))
      return false;
    if (!(orderIndex == rhs.orderIndex))
      return false;
    if (!(showRank == rhs.showRank))
      return false;
    if (!(unlockRank == rhs.unlockRank))
      return false;
    if (!(hideRank == rhs.hideRank))
      return false;
    return true;
  }
  bool operator != (const MainShopEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MainShopEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MainShopEntry &a, MainShopEntry &b);

std::ostream& operator<<(std::ostream& out, const MainShopEntry& obj);

typedef struct _AskForItemEntry__isset {
  _AskForItemEntry__isset() : currencyId(false), currencyAmount(false), costCurrencyId(false), rewardCurrencyId(false), rewardCurrencyAmount(false), helpLimit(false) {}
  bool currencyId :1;
  bool currencyAmount :1;
  bool costCurrencyId :1;
  bool rewardCurrencyId :1;
  bool rewardCurrencyAmount :1;
  bool helpLimit :1;
} _AskForItemEntry__isset;

class AskForItemEntry : public virtual ::apache::thrift::TBase {
 public:

  AskForItemEntry(const AskForItemEntry&);
  AskForItemEntry& operator=(const AskForItemEntry&);
  AskForItemEntry() : askForItemId(), currencyId(), currencyAmount(0), costCurrencyId(), rewardCurrencyId(), rewardCurrencyAmount(0), helpLimit(0) {
  }

  virtual ~AskForItemEntry() throw();
  AskForItemID askForItemId;
  CurrencyID currencyId;
  int32_t currencyAmount;
  CurrencyID costCurrencyId;
  CurrencyID rewardCurrencyId;
  int32_t rewardCurrencyAmount;
  int32_t helpLimit;

  _AskForItemEntry__isset __isset;

  void __set_askForItemId(const AskForItemID& val);

  void __set_currencyId(const CurrencyID& val);

  void __set_currencyAmount(const int32_t val);

  void __set_costCurrencyId(const CurrencyID& val);

  void __set_rewardCurrencyId(const CurrencyID& val);

  void __set_rewardCurrencyAmount(const int32_t val);

  void __set_helpLimit(const int32_t val);

  bool operator == (const AskForItemEntry & rhs) const
  {
    if (!(askForItemId == rhs.askForItemId))
      return false;
    if (__isset.currencyId != rhs.__isset.currencyId)
      return false;
    else if (__isset.currencyId && !(currencyId == rhs.currencyId))
      return false;
    if (__isset.currencyAmount != rhs.__isset.currencyAmount)
      return false;
    else if (__isset.currencyAmount && !(currencyAmount == rhs.currencyAmount))
      return false;
    if (__isset.costCurrencyId != rhs.__isset.costCurrencyId)
      return false;
    else if (__isset.costCurrencyId && !(costCurrencyId == rhs.costCurrencyId))
      return false;
    if (__isset.rewardCurrencyId != rhs.__isset.rewardCurrencyId)
      return false;
    else if (__isset.rewardCurrencyId && !(rewardCurrencyId == rhs.rewardCurrencyId))
      return false;
    if (__isset.rewardCurrencyAmount != rhs.__isset.rewardCurrencyAmount)
      return false;
    else if (__isset.rewardCurrencyAmount && !(rewardCurrencyAmount == rhs.rewardCurrencyAmount))
      return false;
    if (__isset.helpLimit != rhs.__isset.helpLimit)
      return false;
    else if (__isset.helpLimit && !(helpLimit == rhs.helpLimit))
      return false;
    return true;
  }
  bool operator != (const AskForItemEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AskForItemEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AskForItemEntry &a, AskForItemEntry &b);

std::ostream& operator<<(std::ostream& out, const AskForItemEntry& obj);

typedef struct _TestBucket__isset {
  _TestBucket__isset() : conflictingTestBucketIds(false), overridesString(false), settings(false), startingGameState(false), storeProducts(false), vendorProducts(false), gachaOffer(false), rank(false), level(false), newLevel(false), boost(false), levelDot(false), villain(false), matchThreeData(false), achievement(false), achievementGroup(false), tutorialStates(false), popupMessages(false), popupMessageSettings(false), levelCampaigns(false), stores(false), storeInventories(false), cardOffers(false), iapProducts(false), quests(false) {}
  bool conflictingTestBucketIds :1;
  bool overridesString :1;
  bool settings :1;
  bool startingGameState :1;
  bool storeProducts :1;
  bool vendorProducts :1;
  bool gachaOffer :1;
  bool rank :1;
  bool level :1;
  bool newLevel :1;
  bool boost :1;
  bool levelDot :1;
  bool villain :1;
  bool matchThreeData :1;
  bool achievement :1;
  bool achievementGroup :1;
  bool tutorialStates :1;
  bool popupMessages :1;
  bool popupMessageSettings :1;
  bool levelCampaigns :1;
  bool stores :1;
  bool storeInventories :1;
  bool cardOffers :1;
  bool iapProducts :1;
  bool quests :1;
} _TestBucket__isset;

class TestBucket : public virtual ::apache::thrift::TBase {
 public:

  TestBucket(const TestBucket&);
  TestBucket& operator=(const TestBucket&);
  TestBucket() : testBucketId(), priority(0), overridesString() {
  }

  virtual ~TestBucket() throw();
  TestBucketID testBucketId;
  int32_t priority;
  std::set<TestBucketID>  conflictingTestBucketIds;
  std::string overridesString;
  Settings settings;
  StartingGameState startingGameState;
  std::map<StoreProductID, StoreProduct>  storeProducts;
  std::map<StoreProductID, VendorProduct>  vendorProducts;
  std::map<GachaOfferID, GachaOffer>  gachaOffer;
  std::map<RankID, Rank>  rank;
  std::map<LevelID, Level>  level;
  std::map<LevelID, NewLevel>  newLevel;
  std::map<BoostID, Boost>  boost;
  std::map<LevelDotID, LevelDot>  levelDot;
  std::map<VillainID, Villain>  villain;
  std::map<LevelName, MatchThreeData>  matchThreeData;
  std::map<AchievementID, Achievement>  achievement;
  std::map<AchievementGroupID, AchievementGroup>  achievementGroup;
  std::vector<TutorialState>  tutorialStates;
  std::map<PopupMessageID, PopupMessage>  popupMessages;
  PopupMessageSettings popupMessageSettings;
  std::map<LevelCampaignID, LevelCampaign>  levelCampaigns;
  std::map<StoreID, Store>  stores;
  std::map<StoreID, std::vector<StoreInventoryItem> >  storeInventories;
  std::map<CardOfferID, CardOffer>  cardOffers;
  std::map<IAPProductID, IAPProduct>  iapProducts;
  std::map<QuestID, Quest>  quests;

  _TestBucket__isset __isset;

  void __set_testBucketId(const TestBucketID& val);

  void __set_priority(const int32_t val);

  void __set_conflictingTestBucketIds(const std::set<TestBucketID> & val);

  void __set_overridesString(const std::string& val);

  void __set_settings(const Settings& val);

  void __set_startingGameState(const StartingGameState& val);

  void __set_storeProducts(const std::map<StoreProductID, StoreProduct> & val);

  void __set_vendorProducts(const std::map<StoreProductID, VendorProduct> & val);

  void __set_gachaOffer(const std::map<GachaOfferID, GachaOffer> & val);

  void __set_rank(const std::map<RankID, Rank> & val);

  void __set_level(const std::map<LevelID, Level> & val);

  void __set_newLevel(const std::map<LevelID, NewLevel> & val);

  void __set_boost(const std::map<BoostID, Boost> & val);

  void __set_levelDot(const std::map<LevelDotID, LevelDot> & val);

  void __set_villain(const std::map<VillainID, Villain> & val);

  void __set_matchThreeData(const std::map<LevelName, MatchThreeData> & val);

  void __set_achievement(const std::map<AchievementID, Achievement> & val);

  void __set_achievementGroup(const std::map<AchievementGroupID, AchievementGroup> & val);

  void __set_tutorialStates(const std::vector<TutorialState> & val);

  void __set_popupMessages(const std::map<PopupMessageID, PopupMessage> & val);

  void __set_popupMessageSettings(const PopupMessageSettings& val);

  void __set_levelCampaigns(const std::map<LevelCampaignID, LevelCampaign> & val);

  void __set_stores(const std::map<StoreID, Store> & val);

  void __set_storeInventories(const std::map<StoreID, std::vector<StoreInventoryItem> > & val);

  void __set_cardOffers(const std::map<CardOfferID, CardOffer> & val);

  void __set_iapProducts(const std::map<IAPProductID, IAPProduct> & val);

  void __set_quests(const std::map<QuestID, Quest> & val);

  bool operator == (const TestBucket & rhs) const
  {
    if (!(testBucketId == rhs.testBucketId))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (__isset.conflictingTestBucketIds != rhs.__isset.conflictingTestBucketIds)
      return false;
    else if (__isset.conflictingTestBucketIds && !(conflictingTestBucketIds == rhs.conflictingTestBucketIds))
      return false;
    if (__isset.overridesString != rhs.__isset.overridesString)
      return false;
    else if (__isset.overridesString && !(overridesString == rhs.overridesString))
      return false;
    if (__isset.settings != rhs.__isset.settings)
      return false;
    else if (__isset.settings && !(settings == rhs.settings))
      return false;
    if (__isset.startingGameState != rhs.__isset.startingGameState)
      return false;
    else if (__isset.startingGameState && !(startingGameState == rhs.startingGameState))
      return false;
    if (__isset.storeProducts != rhs.__isset.storeProducts)
      return false;
    else if (__isset.storeProducts && !(storeProducts == rhs.storeProducts))
      return false;
    if (__isset.vendorProducts != rhs.__isset.vendorProducts)
      return false;
    else if (__isset.vendorProducts && !(vendorProducts == rhs.vendorProducts))
      return false;
    if (__isset.gachaOffer != rhs.__isset.gachaOffer)
      return false;
    else if (__isset.gachaOffer && !(gachaOffer == rhs.gachaOffer))
      return false;
    if (__isset.rank != rhs.__isset.rank)
      return false;
    else if (__isset.rank && !(rank == rhs.rank))
      return false;
    if (__isset.level != rhs.__isset.level)
      return false;
    else if (__isset.level && !(level == rhs.level))
      return false;
    if (__isset.newLevel != rhs.__isset.newLevel)
      return false;
    else if (__isset.newLevel && !(newLevel == rhs.newLevel))
      return false;
    if (__isset.boost != rhs.__isset.boost)
      return false;
    else if (__isset.boost && !(boost == rhs.boost))
      return false;
    if (__isset.levelDot != rhs.__isset.levelDot)
      return false;
    else if (__isset.levelDot && !(levelDot == rhs.levelDot))
      return false;
    if (__isset.villain != rhs.__isset.villain)
      return false;
    else if (__isset.villain && !(villain == rhs.villain))
      return false;
    if (__isset.matchThreeData != rhs.__isset.matchThreeData)
      return false;
    else if (__isset.matchThreeData && !(matchThreeData == rhs.matchThreeData))
      return false;
    if (__isset.achievement != rhs.__isset.achievement)
      return false;
    else if (__isset.achievement && !(achievement == rhs.achievement))
      return false;
    if (__isset.achievementGroup != rhs.__isset.achievementGroup)
      return false;
    else if (__isset.achievementGroup && !(achievementGroup == rhs.achievementGroup))
      return false;
    if (__isset.tutorialStates != rhs.__isset.tutorialStates)
      return false;
    else if (__isset.tutorialStates && !(tutorialStates == rhs.tutorialStates))
      return false;
    if (__isset.popupMessages != rhs.__isset.popupMessages)
      return false;
    else if (__isset.popupMessages && !(popupMessages == rhs.popupMessages))
      return false;
    if (__isset.popupMessageSettings != rhs.__isset.popupMessageSettings)
      return false;
    else if (__isset.popupMessageSettings && !(popupMessageSettings == rhs.popupMessageSettings))
      return false;
    if (__isset.levelCampaigns != rhs.__isset.levelCampaigns)
      return false;
    else if (__isset.levelCampaigns && !(levelCampaigns == rhs.levelCampaigns))
      return false;
    if (__isset.stores != rhs.__isset.stores)
      return false;
    else if (__isset.stores && !(stores == rhs.stores))
      return false;
    if (__isset.storeInventories != rhs.__isset.storeInventories)
      return false;
    else if (__isset.storeInventories && !(storeInventories == rhs.storeInventories))
      return false;
    if (__isset.cardOffers != rhs.__isset.cardOffers)
      return false;
    else if (__isset.cardOffers && !(cardOffers == rhs.cardOffers))
      return false;
    if (__isset.iapProducts != rhs.__isset.iapProducts)
      return false;
    else if (__isset.iapProducts && !(iapProducts == rhs.iapProducts))
      return false;
    if (__isset.quests != rhs.__isset.quests)
      return false;
    else if (__isset.quests && !(quests == rhs.quests))
      return false;
    return true;
  }
  bool operator != (const TestBucket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestBucket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TestBucket &a, TestBucket &b);

std::ostream& operator<<(std::ostream& out, const TestBucket& obj);

typedef struct _ABTest__isset {
  _ABTest__isset() : enabled(false) {}
  bool enabled :1;
} _ABTest__isset;

class ABTest : public virtual ::apache::thrift::TBase {
 public:

  ABTest(const ABTest&);
  ABTest& operator=(const ABTest&);
  ABTest() : abTestId(), testBucketId(), weight(0), enabled(0) {
  }

  virtual ~ABTest() throw();
  ABTestID abTestId;
  TestBucketID testBucketId;
  int32_t weight;
  bool enabled;

  _ABTest__isset __isset;

  void __set_abTestId(const ABTestID& val);

  void __set_testBucketId(const TestBucketID& val);

  void __set_weight(const int32_t val);

  void __set_enabled(const bool val);

  bool operator == (const ABTest & rhs) const
  {
    if (!(abTestId == rhs.abTestId))
      return false;
    if (!(testBucketId == rhs.testBucketId))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (__isset.enabled != rhs.__isset.enabled)
      return false;
    else if (__isset.enabled && !(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const ABTest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABTest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ABTest &a, ABTest &b);

std::ostream& operator<<(std::ostream& out, const ABTest& obj);

typedef struct _ClientVersionTestBucket__isset {
  _ClientVersionTestBucket__isset() : enabled(false) {}
  bool enabled :1;
} _ClientVersionTestBucket__isset;

class ClientVersionTestBucket : public virtual ::apache::thrift::TBase {
 public:

  ClientVersionTestBucket(const ClientVersionTestBucket&);
  ClientVersionTestBucket& operator=(const ClientVersionTestBucket&);
  ClientVersionTestBucket() : overrideId(), testBucketIdOldVersion(), testBucketIdNewVersion(), enabled(0) {
  }

  virtual ~ClientVersionTestBucket() throw();
  ABTestID overrideId;
  TestBucketID testBucketIdOldVersion;
  TestBucketID testBucketIdNewVersion;
  bool enabled;

  _ClientVersionTestBucket__isset __isset;

  void __set_overrideId(const ABTestID& val);

  void __set_testBucketIdOldVersion(const TestBucketID& val);

  void __set_testBucketIdNewVersion(const TestBucketID& val);

  void __set_enabled(const bool val);

  bool operator == (const ClientVersionTestBucket & rhs) const
  {
    if (!(overrideId == rhs.overrideId))
      return false;
    if (!(testBucketIdOldVersion == rhs.testBucketIdOldVersion))
      return false;
    if (!(testBucketIdNewVersion == rhs.testBucketIdNewVersion))
      return false;
    if (__isset.enabled != rhs.__isset.enabled)
      return false;
    else if (__isset.enabled && !(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const ClientVersionTestBucket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVersionTestBucket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientVersionTestBucket &a, ClientVersionTestBucket &b);

std::ostream& operator<<(std::ostream& out, const ClientVersionTestBucket& obj);


class HeroType : public virtual ::apache::thrift::TBase {
 public:

  HeroType(const HeroType&);
  HeroType& operator=(const HeroType&);
  HeroType() : heroTypeId(0), iconAssetId(), displayOrder(0), hideInUi(0) {
  }

  virtual ~HeroType() throw();
  HeroTypeID heroTypeId;
  LocalizedString display;
  AssetID iconAssetId;
  int32_t displayOrder;
  bool hideInUi;

  void __set_heroTypeId(const HeroTypeID val);

  void __set_display(const LocalizedString& val);

  void __set_iconAssetId(const AssetID& val);

  void __set_displayOrder(const int32_t val);

  void __set_hideInUi(const bool val);

  bool operator == (const HeroType & rhs) const
  {
    if (!(heroTypeId == rhs.heroTypeId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(iconAssetId == rhs.iconAssetId))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(hideInUi == rhs.hideInUi))
      return false;
    return true;
  }
  bool operator != (const HeroType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeroType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeroType &a, HeroType &b);

std::ostream& operator<<(std::ostream& out, const HeroType& obj);


class HeroLevelCurve : public virtual ::apache::thrift::TBase {
 public:

  HeroLevelCurve(const HeroLevelCurve&);
  HeroLevelCurve& operator=(const HeroLevelCurve&);
  HeroLevelCurve() : heroLevelCurveId(), xp(0), display() {
  }

  virtual ~HeroLevelCurve() throw();
  HeroLevelCurveID heroLevelCurveId;
  int32_t xp;
  std::string display;

  void __set_heroLevelCurveId(const HeroLevelCurveID& val);

  void __set_xp(const int32_t val);

  void __set_display(const std::string& val);

  bool operator == (const HeroLevelCurve & rhs) const
  {
    if (!(heroLevelCurveId == rhs.heroLevelCurveId))
      return false;
    if (!(xp == rhs.xp))
      return false;
    if (!(display == rhs.display))
      return false;
    return true;
  }
  bool operator != (const HeroLevelCurve &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeroLevelCurve & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeroLevelCurve &a, HeroLevelCurve &b);

std::ostream& operator<<(std::ostream& out, const HeroLevelCurve& obj);


class HeroMaxUpgrade : public virtual ::apache::thrift::TBase {
 public:

  HeroMaxUpgrade(const HeroMaxUpgrade&);
  HeroMaxUpgrade& operator=(const HeroMaxUpgrade&);
  HeroMaxUpgrade() : amount(0), currencyId(), currencyAmount(0) {
  }

  virtual ~HeroMaxUpgrade() throw();
  int32_t amount;
  CurrencyID currencyId;
  int32_t currencyAmount;

  void __set_amount(const int32_t val);

  void __set_currencyId(const CurrencyID& val);

  void __set_currencyAmount(const int32_t val);

  bool operator == (const HeroMaxUpgrade & rhs) const
  {
    if (!(amount == rhs.amount))
      return false;
    if (!(currencyId == rhs.currencyId))
      return false;
    if (!(currencyAmount == rhs.currencyAmount))
      return false;
    return true;
  }
  bool operator != (const HeroMaxUpgrade &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeroMaxUpgrade & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeroMaxUpgrade &a, HeroMaxUpgrade &b);

std::ostream& operator<<(std::ostream& out, const HeroMaxUpgrade& obj);

typedef struct _Hero__isset {
  _Hero__isset() : boardIconImage(false), boardIconImage2(false), rarityId(false), leaderSkillId(false), activeSkillId(false), additionalSkillIds(false), raidBossBaseValueMultiplier(false) {}
  bool boardIconImage :1;
  bool boardIconImage2 :1;
  bool rarityId :1;
  bool leaderSkillId :1;
  bool activeSkillId :1;
  bool additionalSkillIds :1;
  bool raidBossBaseValueMultiplier :1;
} _Hero__isset;

class Hero : public virtual ::apache::thrift::TBase {
 public:

  Hero(const Hero&);
  Hero& operator=(const Hero&);
  Hero() : heroId(), boardIconImage(), boardIconImage2(), affinityId((AffinityID::type)0), rarityId(0), specialtyId((SpecialtyID::type)0), leaderSkillId(), activeSkillId(), raidBossBaseValueMultiplier(0) {
  }

  virtual ~Hero() throw();
  HeroID heroId;
  LocalizedString display;
  LocalizedString description;
  AssetID boardIconImage;
  AssetID boardIconImage2;
  AffinityID::type affinityId;
  RarityID rarityId;
  SpecialtyID::type specialtyId;
  SkillID leaderSkillId;
  SkillID activeSkillId;
  std::vector<SkillID>  additionalSkillIds;
  int32_t raidBossBaseValueMultiplier;

  _Hero__isset __isset;

  void __set_heroId(const HeroID& val);

  void __set_display(const LocalizedString& val);

  void __set_description(const LocalizedString& val);

  void __set_boardIconImage(const AssetID& val);

  void __set_boardIconImage2(const AssetID& val);

  void __set_affinityId(const AffinityID::type val);

  void __set_rarityId(const RarityID val);

  void __set_specialtyId(const SpecialtyID::type val);

  void __set_leaderSkillId(const SkillID& val);

  void __set_activeSkillId(const SkillID& val);

  void __set_additionalSkillIds(const std::vector<SkillID> & val);

  void __set_raidBossBaseValueMultiplier(const int32_t val);

  bool operator == (const Hero & rhs) const
  {
    if (!(heroId == rhs.heroId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(description == rhs.description))
      return false;
    if (__isset.boardIconImage != rhs.__isset.boardIconImage)
      return false;
    else if (__isset.boardIconImage && !(boardIconImage == rhs.boardIconImage))
      return false;
    if (__isset.boardIconImage2 != rhs.__isset.boardIconImage2)
      return false;
    else if (__isset.boardIconImage2 && !(boardIconImage2 == rhs.boardIconImage2))
      return false;
    if (!(affinityId == rhs.affinityId))
      return false;
    if (__isset.rarityId != rhs.__isset.rarityId)
      return false;
    else if (__isset.rarityId && !(rarityId == rhs.rarityId))
      return false;
    if (!(specialtyId == rhs.specialtyId))
      return false;
    if (__isset.leaderSkillId != rhs.__isset.leaderSkillId)
      return false;
    else if (__isset.leaderSkillId && !(leaderSkillId == rhs.leaderSkillId))
      return false;
    if (__isset.activeSkillId != rhs.__isset.activeSkillId)
      return false;
    else if (__isset.activeSkillId && !(activeSkillId == rhs.activeSkillId))
      return false;
    if (__isset.additionalSkillIds != rhs.__isset.additionalSkillIds)
      return false;
    else if (__isset.additionalSkillIds && !(additionalSkillIds == rhs.additionalSkillIds))
      return false;
    if (__isset.raidBossBaseValueMultiplier != rhs.__isset.raidBossBaseValueMultiplier)
      return false;
    else if (__isset.raidBossBaseValueMultiplier && !(raidBossBaseValueMultiplier == rhs.raidBossBaseValueMultiplier))
      return false;
    return true;
  }
  bool operator != (const Hero &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hero & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Hero &a, Hero &b);

std::ostream& operator<<(std::ostream& out, const Hero& obj);

typedef struct _RaidBoss__isset {
  _RaidBoss__isset() : orderSize(false), maxBakers(false), maxHeroes(false), baseCollectValue(false), baseOrdersPerDonut(false), affinityBonus(false), specialtyBonus(false), orderSizeCurveId(false), levelForced(false), battleEnergyCardOfferId(false) {}
  bool orderSize :1;
  bool maxBakers :1;
  bool maxHeroes :1;
  bool baseCollectValue :1;
  bool baseOrdersPerDonut :1;
  bool affinityBonus :1;
  bool specialtyBonus :1;
  bool orderSizeCurveId :1;
  bool levelForced :1;
  bool battleEnergyCardOfferId :1;
} _RaidBoss__isset;

class RaidBoss : public virtual ::apache::thrift::TBase {
 public:

  RaidBoss(const RaidBoss&);
  RaidBoss& operator=(const RaidBoss&);
  RaidBoss() : raidBossId(), raidBossActivityId(), affinityId((AffinityID::type)0), specialtyId((SpecialtyID::type)0), orderSize(0), maxBakers(0), maxHeroes(0), baseCollectValue(0), affinityBonus(0), specialtyBonus(0), orderSizeCurveId(), battleTimerSeconds(0), levelMin(0), levelMax(0), levelForced(0), maxParticipants(0), maxImpressions(0), spawnWeight(0), guildOnly(0), battleEnergyCardOfferId() {
  }

  virtual ~RaidBoss() throw();
  RaidBossID raidBossId;
  RaidBossActivityID raidBossActivityId;
  LocalizedString display;
  std::vector<EventID>  eventIds;
  std::vector<LevelID>  levelIds;
  AffinityID::type affinityId;
  SpecialtyID::type specialtyId;
  int32_t orderSize;
  int32_t maxBakers;
  int32_t maxHeroes;
  int32_t baseCollectValue;
  std::vector<int32_t>  baseOrdersPerDonut;
  int32_t affinityBonus;
  int32_t specialtyBonus;
  RaidBossCurveID orderSizeCurveId;
  int32_t battleTimerSeconds;
  int32_t levelMin;
  int32_t levelMax;
  int32_t levelForced;
  int32_t maxParticipants;
  int32_t maxImpressions;
  double spawnWeight;
  bool guildOnly;
  CardOfferID battleEnergyCardOfferId;

  _RaidBoss__isset __isset;

  void __set_raidBossId(const RaidBossID& val);

  void __set_raidBossActivityId(const RaidBossActivityID& val);

  void __set_display(const LocalizedString& val);

  void __set_eventIds(const std::vector<EventID> & val);

  void __set_levelIds(const std::vector<LevelID> & val);

  void __set_affinityId(const AffinityID::type val);

  void __set_specialtyId(const SpecialtyID::type val);

  void __set_orderSize(const int32_t val);

  void __set_maxBakers(const int32_t val);

  void __set_maxHeroes(const int32_t val);

  void __set_baseCollectValue(const int32_t val);

  void __set_baseOrdersPerDonut(const std::vector<int32_t> & val);

  void __set_affinityBonus(const int32_t val);

  void __set_specialtyBonus(const int32_t val);

  void __set_orderSizeCurveId(const RaidBossCurveID& val);

  void __set_battleTimerSeconds(const int32_t val);

  void __set_levelMin(const int32_t val);

  void __set_levelMax(const int32_t val);

  void __set_levelForced(const int32_t val);

  void __set_maxParticipants(const int32_t val);

  void __set_maxImpressions(const int32_t val);

  void __set_spawnWeight(const double val);

  void __set_guildOnly(const bool val);

  void __set_battleEnergyCardOfferId(const CardOfferID& val);

  bool operator == (const RaidBoss & rhs) const
  {
    if (!(raidBossId == rhs.raidBossId))
      return false;
    if (!(raidBossActivityId == rhs.raidBossActivityId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(levelIds == rhs.levelIds))
      return false;
    if (!(affinityId == rhs.affinityId))
      return false;
    if (!(specialtyId == rhs.specialtyId))
      return false;
    if (__isset.orderSize != rhs.__isset.orderSize)
      return false;
    else if (__isset.orderSize && !(orderSize == rhs.orderSize))
      return false;
    if (__isset.maxBakers != rhs.__isset.maxBakers)
      return false;
    else if (__isset.maxBakers && !(maxBakers == rhs.maxBakers))
      return false;
    if (__isset.maxHeroes != rhs.__isset.maxHeroes)
      return false;
    else if (__isset.maxHeroes && !(maxHeroes == rhs.maxHeroes))
      return false;
    if (__isset.baseCollectValue != rhs.__isset.baseCollectValue)
      return false;
    else if (__isset.baseCollectValue && !(baseCollectValue == rhs.baseCollectValue))
      return false;
    if (__isset.baseOrdersPerDonut != rhs.__isset.baseOrdersPerDonut)
      return false;
    else if (__isset.baseOrdersPerDonut && !(baseOrdersPerDonut == rhs.baseOrdersPerDonut))
      return false;
    if (__isset.affinityBonus != rhs.__isset.affinityBonus)
      return false;
    else if (__isset.affinityBonus && !(affinityBonus == rhs.affinityBonus))
      return false;
    if (__isset.specialtyBonus != rhs.__isset.specialtyBonus)
      return false;
    else if (__isset.specialtyBonus && !(specialtyBonus == rhs.specialtyBonus))
      return false;
    if (__isset.orderSizeCurveId != rhs.__isset.orderSizeCurveId)
      return false;
    else if (__isset.orderSizeCurveId && !(orderSizeCurveId == rhs.orderSizeCurveId))
      return false;
    if (!(battleTimerSeconds == rhs.battleTimerSeconds))
      return false;
    if (!(levelMin == rhs.levelMin))
      return false;
    if (!(levelMax == rhs.levelMax))
      return false;
    if (__isset.levelForced != rhs.__isset.levelForced)
      return false;
    else if (__isset.levelForced && !(levelForced == rhs.levelForced))
      return false;
    if (!(maxParticipants == rhs.maxParticipants))
      return false;
    if (!(maxImpressions == rhs.maxImpressions))
      return false;
    if (!(spawnWeight == rhs.spawnWeight))
      return false;
    if (!(guildOnly == rhs.guildOnly))
      return false;
    if (__isset.battleEnergyCardOfferId != rhs.__isset.battleEnergyCardOfferId)
      return false;
    else if (__isset.battleEnergyCardOfferId && !(battleEnergyCardOfferId == rhs.battleEnergyCardOfferId))
      return false;
    return true;
  }
  bool operator != (const RaidBoss &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaidBoss & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaidBoss &a, RaidBoss &b);

std::ostream& operator<<(std::ostream& out, const RaidBoss& obj);


class RaidBossCurve : public virtual ::apache::thrift::TBase {
 public:

  RaidBossCurve(const RaidBossCurve&);
  RaidBossCurve& operator=(const RaidBossCurve&);
  RaidBossCurve() : raidBossCurveId(), level(0), multiplier(0) {
  }

  virtual ~RaidBossCurve() throw();
  RaidBossCurveID raidBossCurveId;
  int32_t level;
  int32_t multiplier;

  void __set_raidBossCurveId(const RaidBossCurveID& val);

  void __set_level(const int32_t val);

  void __set_multiplier(const int32_t val);

  bool operator == (const RaidBossCurve & rhs) const
  {
    if (!(raidBossCurveId == rhs.raidBossCurveId))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(multiplier == rhs.multiplier))
      return false;
    return true;
  }
  bool operator != (const RaidBossCurve &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaidBossCurve & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaidBossCurve &a, RaidBossCurve &b);

std::ostream& operator<<(std::ostream& out, const RaidBossCurve& obj);


class RaidBossObjective : public virtual ::apache::thrift::TBase {
 public:

  RaidBossObjective(const RaidBossObjective&);
  RaidBossObjective& operator=(const RaidBossObjective&);
  RaidBossObjective() : raidBossObjectiveId(), type((RaidBossObjectiveType::type)0), displayOrder(0) {
  }

  virtual ~RaidBossObjective() throw();
  RaidBossObjectiveID raidBossObjectiveId;
  RaidBossObjectiveType::type type;
  LocalizedString display;
  int32_t displayOrder;
  LocalizedString details;

  void __set_raidBossObjectiveId(const RaidBossObjectiveID& val);

  void __set_type(const RaidBossObjectiveType::type val);

  void __set_display(const LocalizedString& val);

  void __set_displayOrder(const int32_t val);

  void __set_details(const LocalizedString& val);

  bool operator == (const RaidBossObjective & rhs) const
  {
    if (!(raidBossObjectiveId == rhs.raidBossObjectiveId))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(details == rhs.details))
      return false;
    return true;
  }
  bool operator != (const RaidBossObjective &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaidBossObjective & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaidBossObjective &a, RaidBossObjective &b);

std::ostream& operator<<(std::ostream& out, const RaidBossObjective& obj);


class RaidBossRarity : public virtual ::apache::thrift::TBase {
 public:

  RaidBossRarity(const RaidBossRarity&);
  RaidBossRarity& operator=(const RaidBossRarity&);
  RaidBossRarity() : raidBossRarityId(), chestId(), avatarFrameId() {
  }

  virtual ~RaidBossRarity() throw();
  RaidBossRarityID raidBossRarityId;
  LocalizedString display;
  AssetID chestId;
  AssetID avatarFrameId;

  void __set_raidBossRarityId(const RaidBossRarityID& val);

  void __set_display(const LocalizedString& val);

  void __set_chestId(const AssetID& val);

  void __set_avatarFrameId(const AssetID& val);

  bool operator == (const RaidBossRarity & rhs) const
  {
    if (!(raidBossRarityId == rhs.raidBossRarityId))
      return false;
    if (!(display == rhs.display))
      return false;
    if (!(chestId == rhs.chestId))
      return false;
    if (!(avatarFrameId == rhs.avatarFrameId))
      return false;
    return true;
  }
  bool operator != (const RaidBossRarity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaidBossRarity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaidBossRarity &a, RaidBossRarity &b);

std::ostream& operator<<(std::ostream& out, const RaidBossRarity& obj);


class RaidBossReward : public virtual ::apache::thrift::TBase {
 public:

  RaidBossReward(const RaidBossReward&);
  RaidBossReward& operator=(const RaidBossReward&);
  RaidBossReward() : raidBossRewardId(), rewardType((LootItemType::type)0), rewardItemId(), rewardBase(0), rewardGrowth(0), rewardCurveId() {
  }

  virtual ~RaidBossReward() throw();
  RaidBossRewardID raidBossRewardId;
  LootItemType::type rewardType;
  std::string rewardItemId;
  int32_t rewardBase;
  double rewardGrowth;
  RaidBossCurveID rewardCurveId;

  void __set_raidBossRewardId(const RaidBossRewardID& val);

  void __set_rewardType(const LootItemType::type val);

  void __set_rewardItemId(const std::string& val);

  void __set_rewardBase(const int32_t val);

  void __set_rewardGrowth(const double val);

  void __set_rewardCurveId(const RaidBossCurveID& val);

  bool operator == (const RaidBossReward & rhs) const
  {
    if (!(raidBossRewardId == rhs.raidBossRewardId))
      return false;
    if (!(rewardType == rhs.rewardType))
      return false;
    if (!(rewardItemId == rhs.rewardItemId))
      return false;
    if (!(rewardBase == rhs.rewardBase))
      return false;
    if (!(rewardGrowth == rhs.rewardGrowth))
      return false;
    if (!(rewardCurveId == rhs.rewardCurveId))
      return false;
    return true;
  }
  bool operator != (const RaidBossReward &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaidBossReward & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaidBossReward &a, RaidBossReward &b);

std::ostream& operator<<(std::ostream& out, const RaidBossReward& obj);


class RaidBossKarmaBracket : public virtual ::apache::thrift::TBase {
 public:

  RaidBossKarmaBracket(const RaidBossKarmaBracket&);
  RaidBossKarmaBracket& operator=(const RaidBossKarmaBracket&);
  RaidBossKarmaBracket() : raidBossActivityId(), minKarma(0), maxKarma(0), minNotAttacked(0), maxNotAttacked(0), stdDev(0), stdDevCutOff(0), karmaIncrement(0), karmaDecrement(0), mvpKarmaIncrement(0), fairShareMultiplier(0) {
  }

  virtual ~RaidBossKarmaBracket() throw();
  RaidBossActivityID raidBossActivityId;
  int32_t minKarma;
  int32_t maxKarma;
  int32_t minNotAttacked;
  int32_t maxNotAttacked;
  double stdDev;
  int32_t stdDevCutOff;
  int32_t karmaIncrement;
  int32_t karmaDecrement;
  int32_t mvpKarmaIncrement;
  double fairShareMultiplier;

  void __set_raidBossActivityId(const RaidBossActivityID& val);

  void __set_minKarma(const int32_t val);

  void __set_maxKarma(const int32_t val);

  void __set_minNotAttacked(const int32_t val);

  void __set_maxNotAttacked(const int32_t val);

  void __set_stdDev(const double val);

  void __set_stdDevCutOff(const int32_t val);

  void __set_karmaIncrement(const int32_t val);

  void __set_karmaDecrement(const int32_t val);

  void __set_mvpKarmaIncrement(const int32_t val);

  void __set_fairShareMultiplier(const double val);

  bool operator == (const RaidBossKarmaBracket & rhs) const
  {
    if (!(raidBossActivityId == rhs.raidBossActivityId))
      return false;
    if (!(minKarma == rhs.minKarma))
      return false;
    if (!(maxKarma == rhs.maxKarma))
      return false;
    if (!(minNotAttacked == rhs.minNotAttacked))
      return false;
    if (!(maxNotAttacked == rhs.maxNotAttacked))
      return false;
    if (!(stdDev == rhs.stdDev))
      return false;
    if (!(stdDevCutOff == rhs.stdDevCutOff))
      return false;
    if (!(karmaIncrement == rhs.karmaIncrement))
      return false;
    if (!(karmaDecrement == rhs.karmaDecrement))
      return false;
    if (!(mvpKarmaIncrement == rhs.mvpKarmaIncrement))
      return false;
    if (!(fairShareMultiplier == rhs.fairShareMultiplier))
      return false;
    return true;
  }
  bool operator != (const RaidBossKarmaBracket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaidBossKarmaBracket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaidBossKarmaBracket &a, RaidBossKarmaBracket &b);

std::ostream& operator<<(std::ostream& out, const RaidBossKarmaBracket& obj);


class RaidBossDifficultyBracket : public virtual ::apache::thrift::TBase {
 public:

  RaidBossDifficultyBracket(const RaidBossDifficultyBracket&);
  RaidBossDifficultyBracket& operator=(const RaidBossDifficultyBracket&);
  RaidBossDifficultyBracket() : raidBossActivityId(), raidBossDifficultyBracketId(), minDifficulty(0), maxDifficulty(0) {
  }

  virtual ~RaidBossDifficultyBracket() throw();
  RaidBossActivityID raidBossActivityId;
  RaidBossDifficultyBracketID raidBossDifficultyBracketId;
  int32_t minDifficulty;
  int32_t maxDifficulty;

  void __set_raidBossActivityId(const RaidBossActivityID& val);

  void __set_raidBossDifficultyBracketId(const RaidBossDifficultyBracketID& val);

  void __set_minDifficulty(const int32_t val);

  void __set_maxDifficulty(const int32_t val);

  bool operator == (const RaidBossDifficultyBracket & rhs) const
  {
    if (!(raidBossActivityId == rhs.raidBossActivityId))
      return false;
    if (!(raidBossDifficultyBracketId == rhs.raidBossDifficultyBracketId))
      return false;
    if (!(minDifficulty == rhs.minDifficulty))
      return false;
    if (!(maxDifficulty == rhs.maxDifficulty))
      return false;
    return true;
  }
  bool operator != (const RaidBossDifficultyBracket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaidBossDifficultyBracket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaidBossDifficultyBracket &a, RaidBossDifficultyBracket &b);

std::ostream& operator<<(std::ostream& out, const RaidBossDifficultyBracket& obj);

typedef struct _Data__isset {
  _Data__isset() : settings(false), startingGameState(false), startingKingdomEntities(false), levelBlobs(false), resolutionBundles(false), bundleManifest(false), resolutionManifests(false), localizationManifests(false), businessOrder(false), newRarity(false), levelDot(false), villain(false), matchThreeData(false), newLevel(false), islandSettings(false), islandObject(false), color(false), adminMessages(false), apsalarEvents(false), businessOrderList(false), achievement(false), achievementGroup(false), pushMessages(false), socialUnlockrewards(false), adProviders(false), messageTemplateModifiers(false), gachaBanner(false), presetKingdoms(false), abTests(false), clientVersionTestBuckets(false), buildMenuSpecialCard(false), businessMenuSettings(false), leaderboardLeagues(false), leaderboardRibbons(false), leaderboardRewards(false), leaderboardTemplates(false), eventSettings(false), screenNameMapping(false), cellInfo(false), keyCostPerLevel(false), playerMatchRankSettings(false), guildLeaderboards(false), guildLeaderboardRibbons(false), guildLeaderboardRewards(false), pollSettings(false), questGoals(false), questGoalTemplates(false), happinessSettings(false), businessLevelIdsLookup(false), castleEventLevelIdsLookup(false), campaignLevelIdsLookup(false), ftueSettings(false), matchThreeCellDefinitions(false), matchThreeBlasterDefinitions(false), eventMenuWidgets(false), gearAvailableOnGachas(false), gearAvailableOnCardOffers(false), gearAvailableOnLevels(false), gearAvailableOnBusinessHarvest(false), askForItems(false), storeTabs(false), guildQuestRewards(false), raidBosses(false), raidBossActivities(false), raidBossObjectives(false), raidBossKarmaBrackets(false), raidBossDifficultyBrackets(false), raidBossCurves(false), raidBossRewards(false), raidBossRarities(false), heroes(false) {}
  bool settings :1;
  bool startingGameState :1;
  bool startingKingdomEntities :1;
  bool levelBlobs :1;
  bool resolutionBundles :1;
  bool bundleManifest :1;
  bool resolutionManifests :1;
  bool localizationManifests :1;
  bool businessOrder :1;
  bool newRarity :1;
  bool levelDot :1;
  bool villain :1;
  bool matchThreeData :1;
  bool newLevel :1;
  bool islandSettings :1;
  bool islandObject :1;
  bool color :1;
  bool adminMessages :1;
  bool apsalarEvents :1;
  bool businessOrderList :1;
  bool achievement :1;
  bool achievementGroup :1;
  bool pushMessages :1;
  bool socialUnlockrewards :1;
  bool adProviders :1;
  bool messageTemplateModifiers :1;
  bool gachaBanner :1;
  bool presetKingdoms :1;
  bool abTests :1;
  bool clientVersionTestBuckets :1;
  bool buildMenuSpecialCard :1;
  bool businessMenuSettings :1;
  bool leaderboardLeagues :1;
  bool leaderboardRibbons :1;
  bool leaderboardRewards :1;
  bool leaderboardTemplates :1;
  bool eventSettings :1;
  bool screenNameMapping :1;
  bool cellInfo :1;
  bool keyCostPerLevel :1;
  bool playerMatchRankSettings :1;
  bool guildLeaderboards :1;
  bool guildLeaderboardRibbons :1;
  bool guildLeaderboardRewards :1;
  bool pollSettings :1;
  bool questGoals :1;
  bool questGoalTemplates :1;
  bool happinessSettings :1;
  bool businessLevelIdsLookup :1;
  bool castleEventLevelIdsLookup :1;
  bool campaignLevelIdsLookup :1;
  bool ftueSettings :1;
  bool matchThreeCellDefinitions :1;
  bool matchThreeBlasterDefinitions :1;
  bool eventMenuWidgets :1;
  bool gearAvailableOnGachas :1;
  bool gearAvailableOnCardOffers :1;
  bool gearAvailableOnLevels :1;
  bool gearAvailableOnBusinessHarvest :1;
  bool askForItems :1;
  bool storeTabs :1;
  bool guildQuestRewards :1;
  bool raidBosses :1;
  bool raidBossActivities :1;
  bool raidBossObjectives :1;
  bool raidBossKarmaBrackets :1;
  bool raidBossDifficultyBrackets :1;
  bool raidBossCurves :1;
  bool raidBossRewards :1;
  bool raidBossRarities :1;
  bool heroes :1;
} _Data__isset;

class Data : public virtual ::apache::thrift::TBase {
 public:

  Data(const Data&);
  Data& operator=(const Data&);
  Data() {
  }

  virtual ~Data() throw();
  std::map<RankID, Rank>  rank;
  std::map<CurrencyID, Currency>  currency;
  std::map<EventLockID, EventLock>  eventLock;
  Settings settings;
  StartingGameState startingGameState;
  std::map<EntityID, StartingKingdomEntity>  startingKingdomEntities;
  std::map<BundleID, std::vector<ConfigBundle> >  bundlesConfig;
  std::map<BlobID, LevelBlob>  levelBlobs;
  std::map<BundleID, std::vector<ConfigBundle> >  resolutionBundles;
  BundleManifest bundleManifest;
  BundleManifest resolutionManifests;
  BundleManifest localizationManifests;
  std::map<BuildingID, Building>  building;
  std::map<RecipeID, Recipe>  recipe;
  std::map<DecoID, Deco>  deco;
  std::map<BusinessID, Business>  business;
  std::map<BusinessOrderID, BusinessOrder>  businessOrder;
  std::map<int32_t, InventoryTab>  inventoryTab;
  std::map<BuildingID, Blocker>  blockers;
  std::map<WeightedLootListID, std::vector<WeightedLoot> >  weightedLootList;
  std::map<RarityID, Rarity>  rarity;
  std::map<RarityID, Rarity>  newRarity;
  std::map<LevelID, Level>  level;
  std::map<BoostID, Boost>  boost;
  std::map<LevelDotID, LevelDot>  levelDot;
  std::map<VillainID, Villain>  villain;
  std::map<LevelName, MatchThreeData>  matchThreeData;
  std::map<LevelID, NewLevel>  newLevel;
  std::map<LevelDotID, LevelDotV2>  newLevelDot;
  std::map<MaterialID, Material>  material;
  std::map<IslandID, Island>  island;
  IslandSettings islandSettings;
  std::map<IslandObjectID, IslandObject>  islandObject;
  std::map<ColorID, Color>  color;
  std::map<ExpansionID, Expansion>  expansion;
  std::map<ExpansionTypeID, ExpansionType>  expansionType;
  std::map<GachaGroupID, GachaGroup>  gachaGroup;
  std::map<GachaOfferID, GachaOffer>  gachaOffer;
  std::map<GachaPackID, GachaPack>  gachaPack;
  std::map<LootTableID, std::vector<LootTable> >  lootTable;
  std::map<LootCurrencyGroupID, std::vector<LootCurrencyGroup> >  lootCurrencyGroup;
  std::map<LootBuildingGroupID, std::vector<LootBuildingGroup> >  lootBuildingGroup;
  std::map<AvatarID, Avatar>  avatar;
  std::map<AdminMessageID, AdminMessage>  adminMessages;
  std::vector<AdminGiftMessage>  adminGiftMessages;
  std::map<AnalyticsEventID, AnalyticsEvent>  analyticsEvents;
  std::map<AnalyticsEventID, AppBoyEvent>  appBoyEvents;
  std::map<AnalyticsDimensionID, AnalyticsDimension>  analyticsDimensions;
  std::map<AnalyticsEventID, ApsalarEvent>  apsalarEvents;
  std::map<BusinessOrderListID, BusinessOrderList>  businessOrderList;
  std::map<EvolutionMaterialID, BusinessEvolution>  businessEvolution;
  std::map<NpcID, Npc>  npc;
  std::map<StoreProductID, VendorProduct>  vendorProducts;
  std::map<StoreProductID, StoreProduct>  storeProducts;
  std::map<MarketOrderID, BuyItemOrder>  buyItemOrder;
  std::map<MarketType::type, Market>  marketType;
  std::map<ClientPlatform::type, ForcedUpgrade>  forcedUpgrade;
  std::map<ErrorId, ErrorMessage>  errorMessage;
  std::map<AchievementID, Achievement>  achievement;
  std::map<AchievementGroupID, AchievementGroup>  achievementGroup;
  std::map<TestBucketID, TestBucket>  testBuckets;
  StrangerSettings strangerSettings;
  std::vector<StrangerMatchSettings>  strangerMatchSettings;
  std::vector<FakeStrangerDisplay>  fakeStrangerDisplays;
  std::map<GiftMessageRewardID, GiftMessageReward>  giftMessageRewards;
  std::vector<PartialKingdomLikeGift>  partialKingdomLikeGifts;
  std::map<KingdomLikeGiftID, KingdomLikeGift>  kingdomLikeGifts;
  std::map<PushMessageID, PushMessage>  pushMessages;
  std::map<SocialUnlockRewardID, SocialUnlockReward>  socialUnlockrewards;
  std::vector<AdProvider>  adProviders;
  std::vector<PopupTemplate>  popupTemplate;
  std::map<PopupTemplateType::type, DefaultTemplate>  defaultTemplate;
  std::vector<RushCostByRemainingTime>  rushCostsByRemainingTime;
  std::map<PopupMessageID, std::vector<MessageTemplateModifier> >  messageTemplateModifiers;
  std::map<GachaBannerID, GachaBanner>  gachaBanner;
  std::map<PresetKingdomID, std::vector<PresetKingdomEntity> >  presetKingdoms;
  std::map<ABTestID, std::vector<ABTest> >  abTests;
  std::map<ABTestID, ClientVersionTestBucket>  clientVersionTestBuckets;
  std::map<BuildMenuSpecialCardID, BuildMenuSpecialCard>  buildMenuSpecialCard;
  BusinessMenuSettings businessMenuSettings;
  std::map<RewardMessageID, RewardMessage>  rewardMessages;
  std::map<EventID, Event>  events;
  std::map<LeaderboardID, Leaderboard>  leaderboards;
  LeaderboardSettings leaderboardSettings;
  std::vector<LeaderboardLeague>  leaderboardLeagues;
  std::vector<LeaderboardRibbon>  leaderboardRibbons;
  std::vector<LeaderboardReward>  leaderboardRewards;
  std::map<CurrencyID, std::vector<LeaderboardPlacement> >  leaderboardPlacements;
  std::vector<RarityEvoLevelKeyDropRate>  rarityEvoLevelKeyDropRates;
  std::map<EventKeyDropRateFormulaID, std::vector<KeyDropRateByOrderTime> >  keyDropRateByOrderTime;
  std::map<BuildingID, EventBusinessKeyDropRate>  eventBusinessKeyDropRates;
  std::map<LeaderboardTemplateID, LeaderboardTemplate>  leaderboardTemplates;
  std::map<EventIslandID, EventIsland>  eventIslands;
  std::map<EventHowToPlayID, EventHowToPlay>  eventHowToPlays;
  std::map<EventMainMenuID, EventMainMenu>  eventMainMenus;
  std::map<CastleActivityID, CastleActivity>  castleActivities;
  std::vector<PlayerDisplaySuggest>  playerDisplaySuggestStart;
  std::vector<PlayerDisplaySuggest>  playerDisplaySuggestMiddle;
  std::vector<PlayerDisplaySuggest>  playerDisplaySuggestEnd;
  std::vector<TutorialState>  tutorialStates;
  std::map<PopupMessageID, PopupMessage>  popupMessages;
  PopupMessageSettings popupMessageSettings;
  EventSettings eventSettings;
  std::vector<ScreenNameMapping>  screenNameMapping;
  std::map<CellInfoMapID, std::vector<CellInfo> >  cellInfo;
  std::map<KeyCostPerLevelID, std::vector<KeyCostPerLevel> >  keyCostPerLevel;
  std::vector<PlayerMatchRankSettings>  playerMatchRankSettings;
  std::map<BuildingID, BuildingMultiplier>  buildingMultipliers;
  GuildLeaderboardSettings guildLeaderboardSettings;
  std::map<GuildLeaderboardID, GuildLeaderboard>  guildLeaderboards;
  std::vector<GuildLeaderboardRibbon>  guildLeaderboardRibbons;
  std::vector<GuildLeaderboardReward>  guildLeaderboardRewards;
  std::map<LocationID, Location>  locations;
  GuildSettings guildSettings;
  std::map<GuildMemberType::type, GuildMemberTypeDisplay>  guildMemberTypeDisplays;
  std::map<GuildJoinType::type, GuildJoinTypeDisplay>  guildJoinTypeDisplays;
  std::map<GuildEmblemID, GuildEmblem>  guildEmblems;
  std::vector<GuildBoundItem>  guildBoundItems;
  std::map<GuildRankID, GuildRank>  guildRank;
  std::map<ChatSystemMessageID, ChatSystemMessage>  chatSystemMessages;
  std::map<GiftID, Gift>  gifts;
  PollSettings pollSettings;
  std::vector<GuildNameSuggest>  guildNameSuggestStart;
  std::vector<GuildNameSuggest>  guildNameSuggestMiddle;
  std::vector<GuildNameSuggest>  guildNameSuggestEnd;
  std::map<QuestID, Quest>  quests;
  std::vector<Goal>  questGoals;
  std::map<QuestID, Quest>  questTemplates;
  std::vector<Goal>  questGoalTemplates;
  std::map<QuestNpcID, QuestNpc>  questNpc;
  std::map<BuildingID, BusinessQuestNpc>  businessQuestNpc;
  HappinessSettings happinessSettings;
  std::map<StoreID, Store>  stores;
  std::map<StoreID, std::vector<StoreInventoryItem> >  storeInventories;
  std::map<CardOfferID, CardOffer>  cardOffers;
  std::map<IAPProductID, IAPProduct>  iapProducts;
  CampaignSettings campaignSettings;
  std::map<LevelCampaignID, LevelCampaign>  levelCampaigns;
  std::map<LevelCampaignID, BusinessLevelsList>  businessLevelIdsLookup;
  std::map<LevelCampaignID, CastleEventLevelsList>  castleEventLevelIdsLookup;
  std::map<LevelCampaignID, LevelCampaignLevelsList>  campaignLevelIdsLookup;
  std::map<LevelCampaignStyleID, LevelCampaignStyle>  levelCampaignStyles;
  std::map<BuildingType::type, BuildingTypeLocalization>  buildingTypeLocalizations;
  FTUESettings ftueSettings;
  std::map<Match3ThemeId, std::vector<MatchThreeCellDefinition> >  matchThreeCellDefinitions;
  std::map<Match3ThemeId, std::vector<MatchThreeBlasterDefinition> >  matchThreeBlasterDefinitions;
  std::vector<GoalDisplayTemplate>  goalDisplayTemplates;
  std::map<GoalType::type, std::vector<QuestDisplayTemplate> >  questTitles;
  QuestSettings questSettings;
  std::map<RankID, QuestRankSettings>  questRankSettings;
  std::map<BusinessOrderID, NewBusinessOrder>  newBusinessOrders;
  std::map<EventMenuWidgetID, EventMenuWidget>  eventMenuWidgets;
  std::map<CurrencyID, GearAvailableOnGachaOfferList>  gearAvailableOnGachas;
  std::map<CurrencyID, GearAvailableOnCardOfferList>  gearAvailableOnCardOffers;
  std::map<CurrencyID, GearAvailableOnLevelList>  gearAvailableOnLevels;
  std::map<CurrencyID, GearAvailableOnBusinessHarvestList>  gearAvailableOnBusinessHarvest;
  std::map<MainShopEntryID, MainShopEntry>  mainShopEntries;
  std::map<AskForItemID, AskForItemEntry>  askForItems;
  std::map<StoreTabID, StoreTab>  storeTabs;
  std::map<GuildQuestRewardID, std::vector<GuildQuestReward> >  guildQuestRewards;
  std::map<RaidBossID, RaidBoss>  raidBosses;
  std::map<RaidBossActivityID, RaidBossActivity>  raidBossActivities;
  std::map<RaidBossObjectiveID, RaidBossObjective>  raidBossObjectives;
  std::map<RaidBossActivityID, std::vector<RaidBossKarmaBracket> >  raidBossKarmaBrackets;
  std::map<RaidBossActivityID, std::vector<RaidBossDifficultyBracket> >  raidBossDifficultyBrackets;
  std::map<RaidBossCurveID, std::vector<RaidBossCurve> >  raidBossCurves;
  std::map<RaidBossRewardID, std::vector<RaidBossReward> >  raidBossRewards;
  std::map<RaidBossRarityID, RaidBossRarity>  raidBossRarities;
  std::map<HeroID, Hero>  heroes;

  _Data__isset __isset;

  void __set_rank(const std::map<RankID, Rank> & val);

  void __set_currency(const std::map<CurrencyID, Currency> & val);

  void __set_eventLock(const std::map<EventLockID, EventLock> & val);

  void __set_settings(const Settings& val);

  void __set_startingGameState(const StartingGameState& val);

  void __set_startingKingdomEntities(const std::map<EntityID, StartingKingdomEntity> & val);

  void __set_bundlesConfig(const std::map<BundleID, std::vector<ConfigBundle> > & val);

  void __set_levelBlobs(const std::map<BlobID, LevelBlob> & val);

  void __set_resolutionBundles(const std::map<BundleID, std::vector<ConfigBundle> > & val);

  void __set_bundleManifest(const BundleManifest& val);

  void __set_resolutionManifests(const BundleManifest& val);

  void __set_localizationManifests(const BundleManifest& val);

  void __set_building(const std::map<BuildingID, Building> & val);

  void __set_recipe(const std::map<RecipeID, Recipe> & val);

  void __set_deco(const std::map<DecoID, Deco> & val);

  void __set_business(const std::map<BusinessID, Business> & val);

  void __set_businessOrder(const std::map<BusinessOrderID, BusinessOrder> & val);

  void __set_inventoryTab(const std::map<int32_t, InventoryTab> & val);

  void __set_blockers(const std::map<BuildingID, Blocker> & val);

  void __set_weightedLootList(const std::map<WeightedLootListID, std::vector<WeightedLoot> > & val);

  void __set_rarity(const std::map<RarityID, Rarity> & val);

  void __set_newRarity(const std::map<RarityID, Rarity> & val);

  void __set_level(const std::map<LevelID, Level> & val);

  void __set_boost(const std::map<BoostID, Boost> & val);

  void __set_levelDot(const std::map<LevelDotID, LevelDot> & val);

  void __set_villain(const std::map<VillainID, Villain> & val);

  void __set_matchThreeData(const std::map<LevelName, MatchThreeData> & val);

  void __set_newLevel(const std::map<LevelID, NewLevel> & val);

  void __set_newLevelDot(const std::map<LevelDotID, LevelDotV2> & val);

  void __set_material(const std::map<MaterialID, Material> & val);

  void __set_island(const std::map<IslandID, Island> & val);

  void __set_islandSettings(const IslandSettings& val);

  void __set_islandObject(const std::map<IslandObjectID, IslandObject> & val);

  void __set_color(const std::map<ColorID, Color> & val);

  void __set_expansion(const std::map<ExpansionID, Expansion> & val);

  void __set_expansionType(const std::map<ExpansionTypeID, ExpansionType> & val);

  void __set_gachaGroup(const std::map<GachaGroupID, GachaGroup> & val);

  void __set_gachaOffer(const std::map<GachaOfferID, GachaOffer> & val);

  void __set_gachaPack(const std::map<GachaPackID, GachaPack> & val);

  void __set_lootTable(const std::map<LootTableID, std::vector<LootTable> > & val);

  void __set_lootCurrencyGroup(const std::map<LootCurrencyGroupID, std::vector<LootCurrencyGroup> > & val);

  void __set_lootBuildingGroup(const std::map<LootBuildingGroupID, std::vector<LootBuildingGroup> > & val);

  void __set_avatar(const std::map<AvatarID, Avatar> & val);

  void __set_adminMessages(const std::map<AdminMessageID, AdminMessage> & val);

  void __set_adminGiftMessages(const std::vector<AdminGiftMessage> & val);

  void __set_analyticsEvents(const std::map<AnalyticsEventID, AnalyticsEvent> & val);

  void __set_appBoyEvents(const std::map<AnalyticsEventID, AppBoyEvent> & val);

  void __set_analyticsDimensions(const std::map<AnalyticsDimensionID, AnalyticsDimension> & val);

  void __set_apsalarEvents(const std::map<AnalyticsEventID, ApsalarEvent> & val);

  void __set_businessOrderList(const std::map<BusinessOrderListID, BusinessOrderList> & val);

  void __set_businessEvolution(const std::map<EvolutionMaterialID, BusinessEvolution> & val);

  void __set_npc(const std::map<NpcID, Npc> & val);

  void __set_vendorProducts(const std::map<StoreProductID, VendorProduct> & val);

  void __set_storeProducts(const std::map<StoreProductID, StoreProduct> & val);

  void __set_buyItemOrder(const std::map<MarketOrderID, BuyItemOrder> & val);

  void __set_marketType(const std::map<MarketType::type, Market> & val);

  void __set_forcedUpgrade(const std::map<ClientPlatform::type, ForcedUpgrade> & val);

  void __set_errorMessage(const std::map<ErrorId, ErrorMessage> & val);

  void __set_achievement(const std::map<AchievementID, Achievement> & val);

  void __set_achievementGroup(const std::map<AchievementGroupID, AchievementGroup> & val);

  void __set_testBuckets(const std::map<TestBucketID, TestBucket> & val);

  void __set_strangerSettings(const StrangerSettings& val);

  void __set_strangerMatchSettings(const std::vector<StrangerMatchSettings> & val);

  void __set_fakeStrangerDisplays(const std::vector<FakeStrangerDisplay> & val);

  void __set_giftMessageRewards(const std::map<GiftMessageRewardID, GiftMessageReward> & val);

  void __set_partialKingdomLikeGifts(const std::vector<PartialKingdomLikeGift> & val);

  void __set_kingdomLikeGifts(const std::map<KingdomLikeGiftID, KingdomLikeGift> & val);

  void __set_pushMessages(const std::map<PushMessageID, PushMessage> & val);

  void __set_socialUnlockrewards(const std::map<SocialUnlockRewardID, SocialUnlockReward> & val);

  void __set_adProviders(const std::vector<AdProvider> & val);

  void __set_popupTemplate(const std::vector<PopupTemplate> & val);

  void __set_defaultTemplate(const std::map<PopupTemplateType::type, DefaultTemplate> & val);

  void __set_rushCostsByRemainingTime(const std::vector<RushCostByRemainingTime> & val);

  void __set_messageTemplateModifiers(const std::map<PopupMessageID, std::vector<MessageTemplateModifier> > & val);

  void __set_gachaBanner(const std::map<GachaBannerID, GachaBanner> & val);

  void __set_presetKingdoms(const std::map<PresetKingdomID, std::vector<PresetKingdomEntity> > & val);

  void __set_abTests(const std::map<ABTestID, std::vector<ABTest> > & val);

  void __set_clientVersionTestBuckets(const std::map<ABTestID, ClientVersionTestBucket> & val);

  void __set_buildMenuSpecialCard(const std::map<BuildMenuSpecialCardID, BuildMenuSpecialCard> & val);

  void __set_businessMenuSettings(const BusinessMenuSettings& val);

  void __set_rewardMessages(const std::map<RewardMessageID, RewardMessage> & val);

  void __set_events(const std::map<EventID, Event> & val);

  void __set_leaderboards(const std::map<LeaderboardID, Leaderboard> & val);

  void __set_leaderboardSettings(const LeaderboardSettings& val);

  void __set_leaderboardLeagues(const std::vector<LeaderboardLeague> & val);

  void __set_leaderboardRibbons(const std::vector<LeaderboardRibbon> & val);

  void __set_leaderboardRewards(const std::vector<LeaderboardReward> & val);

  void __set_leaderboardPlacements(const std::map<CurrencyID, std::vector<LeaderboardPlacement> > & val);

  void __set_rarityEvoLevelKeyDropRates(const std::vector<RarityEvoLevelKeyDropRate> & val);

  void __set_keyDropRateByOrderTime(const std::map<EventKeyDropRateFormulaID, std::vector<KeyDropRateByOrderTime> > & val);

  void __set_eventBusinessKeyDropRates(const std::map<BuildingID, EventBusinessKeyDropRate> & val);

  void __set_leaderboardTemplates(const std::map<LeaderboardTemplateID, LeaderboardTemplate> & val);

  void __set_eventIslands(const std::map<EventIslandID, EventIsland> & val);

  void __set_eventHowToPlays(const std::map<EventHowToPlayID, EventHowToPlay> & val);

  void __set_eventMainMenus(const std::map<EventMainMenuID, EventMainMenu> & val);

  void __set_castleActivities(const std::map<CastleActivityID, CastleActivity> & val);

  void __set_playerDisplaySuggestStart(const std::vector<PlayerDisplaySuggest> & val);

  void __set_playerDisplaySuggestMiddle(const std::vector<PlayerDisplaySuggest> & val);

  void __set_playerDisplaySuggestEnd(const std::vector<PlayerDisplaySuggest> & val);

  void __set_tutorialStates(const std::vector<TutorialState> & val);

  void __set_popupMessages(const std::map<PopupMessageID, PopupMessage> & val);

  void __set_popupMessageSettings(const PopupMessageSettings& val);

  void __set_eventSettings(const EventSettings& val);

  void __set_screenNameMapping(const std::vector<ScreenNameMapping> & val);

  void __set_cellInfo(const std::map<CellInfoMapID, std::vector<CellInfo> > & val);

  void __set_keyCostPerLevel(const std::map<KeyCostPerLevelID, std::vector<KeyCostPerLevel> > & val);

  void __set_playerMatchRankSettings(const std::vector<PlayerMatchRankSettings> & val);

  void __set_buildingMultipliers(const std::map<BuildingID, BuildingMultiplier> & val);

  void __set_guildLeaderboardSettings(const GuildLeaderboardSettings& val);

  void __set_guildLeaderboards(const std::map<GuildLeaderboardID, GuildLeaderboard> & val);

  void __set_guildLeaderboardRibbons(const std::vector<GuildLeaderboardRibbon> & val);

  void __set_guildLeaderboardRewards(const std::vector<GuildLeaderboardReward> & val);

  void __set_locations(const std::map<LocationID, Location> & val);

  void __set_guildSettings(const GuildSettings& val);

  void __set_guildMemberTypeDisplays(const std::map<GuildMemberType::type, GuildMemberTypeDisplay> & val);

  void __set_guildJoinTypeDisplays(const std::map<GuildJoinType::type, GuildJoinTypeDisplay> & val);

  void __set_guildEmblems(const std::map<GuildEmblemID, GuildEmblem> & val);

  void __set_guildBoundItems(const std::vector<GuildBoundItem> & val);

  void __set_guildRank(const std::map<GuildRankID, GuildRank> & val);

  void __set_chatSystemMessages(const std::map<ChatSystemMessageID, ChatSystemMessage> & val);

  void __set_gifts(const std::map<GiftID, Gift> & val);

  void __set_pollSettings(const PollSettings& val);

  void __set_guildNameSuggestStart(const std::vector<GuildNameSuggest> & val);

  void __set_guildNameSuggestMiddle(const std::vector<GuildNameSuggest> & val);

  void __set_guildNameSuggestEnd(const std::vector<GuildNameSuggest> & val);

  void __set_quests(const std::map<QuestID, Quest> & val);

  void __set_questGoals(const std::vector<Goal> & val);

  void __set_questTemplates(const std::map<QuestID, Quest> & val);

  void __set_questGoalTemplates(const std::vector<Goal> & val);

  void __set_questNpc(const std::map<QuestNpcID, QuestNpc> & val);

  void __set_businessQuestNpc(const std::map<BuildingID, BusinessQuestNpc> & val);

  void __set_happinessSettings(const HappinessSettings& val);

  void __set_stores(const std::map<StoreID, Store> & val);

  void __set_storeInventories(const std::map<StoreID, std::vector<StoreInventoryItem> > & val);

  void __set_cardOffers(const std::map<CardOfferID, CardOffer> & val);

  void __set_iapProducts(const std::map<IAPProductID, IAPProduct> & val);

  void __set_campaignSettings(const CampaignSettings& val);

  void __set_levelCampaigns(const std::map<LevelCampaignID, LevelCampaign> & val);

  void __set_businessLevelIdsLookup(const std::map<LevelCampaignID, BusinessLevelsList> & val);

  void __set_castleEventLevelIdsLookup(const std::map<LevelCampaignID, CastleEventLevelsList> & val);

  void __set_campaignLevelIdsLookup(const std::map<LevelCampaignID, LevelCampaignLevelsList> & val);

  void __set_levelCampaignStyles(const std::map<LevelCampaignStyleID, LevelCampaignStyle> & val);

  void __set_buildingTypeLocalizations(const std::map<BuildingType::type, BuildingTypeLocalization> & val);

  void __set_ftueSettings(const FTUESettings& val);

  void __set_matchThreeCellDefinitions(const std::map<Match3ThemeId, std::vector<MatchThreeCellDefinition> > & val);

  void __set_matchThreeBlasterDefinitions(const std::map<Match3ThemeId, std::vector<MatchThreeBlasterDefinition> > & val);

  void __set_goalDisplayTemplates(const std::vector<GoalDisplayTemplate> & val);

  void __set_questTitles(const std::map<GoalType::type, std::vector<QuestDisplayTemplate> > & val);

  void __set_questSettings(const QuestSettings& val);

  void __set_questRankSettings(const std::map<RankID, QuestRankSettings> & val);

  void __set_newBusinessOrders(const std::map<BusinessOrderID, NewBusinessOrder> & val);

  void __set_eventMenuWidgets(const std::map<EventMenuWidgetID, EventMenuWidget> & val);

  void __set_gearAvailableOnGachas(const std::map<CurrencyID, GearAvailableOnGachaOfferList> & val);

  void __set_gearAvailableOnCardOffers(const std::map<CurrencyID, GearAvailableOnCardOfferList> & val);

  void __set_gearAvailableOnLevels(const std::map<CurrencyID, GearAvailableOnLevelList> & val);

  void __set_gearAvailableOnBusinessHarvest(const std::map<CurrencyID, GearAvailableOnBusinessHarvestList> & val);

  void __set_mainShopEntries(const std::map<MainShopEntryID, MainShopEntry> & val);

  void __set_askForItems(const std::map<AskForItemID, AskForItemEntry> & val);

  void __set_storeTabs(const std::map<StoreTabID, StoreTab> & val);

  void __set_guildQuestRewards(const std::map<GuildQuestRewardID, std::vector<GuildQuestReward> > & val);

  void __set_raidBosses(const std::map<RaidBossID, RaidBoss> & val);

  void __set_raidBossActivities(const std::map<RaidBossActivityID, RaidBossActivity> & val);

  void __set_raidBossObjectives(const std::map<RaidBossObjectiveID, RaidBossObjective> & val);

  void __set_raidBossKarmaBrackets(const std::map<RaidBossActivityID, std::vector<RaidBossKarmaBracket> > & val);

  void __set_raidBossDifficultyBrackets(const std::map<RaidBossActivityID, std::vector<RaidBossDifficultyBracket> > & val);

  void __set_raidBossCurves(const std::map<RaidBossCurveID, std::vector<RaidBossCurve> > & val);

  void __set_raidBossRewards(const std::map<RaidBossRewardID, std::vector<RaidBossReward> > & val);

  void __set_raidBossRarities(const std::map<RaidBossRarityID, RaidBossRarity> & val);

  void __set_heroes(const std::map<HeroID, Hero> & val);

  bool operator == (const Data & rhs) const
  {
    if (!(rank == rhs.rank))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(eventLock == rhs.eventLock))
      return false;
    if (__isset.settings != rhs.__isset.settings)
      return false;
    else if (__isset.settings && !(settings == rhs.settings))
      return false;
    if (__isset.startingGameState != rhs.__isset.startingGameState)
      return false;
    else if (__isset.startingGameState && !(startingGameState == rhs.startingGameState))
      return false;
    if (__isset.startingKingdomEntities != rhs.__isset.startingKingdomEntities)
      return false;
    else if (__isset.startingKingdomEntities && !(startingKingdomEntities == rhs.startingKingdomEntities))
      return false;
    if (!(bundlesConfig == rhs.bundlesConfig))
      return false;
    if (__isset.levelBlobs != rhs.__isset.levelBlobs)
      return false;
    else if (__isset.levelBlobs && !(levelBlobs == rhs.levelBlobs))
      return false;
    if (__isset.resolutionBundles != rhs.__isset.resolutionBundles)
      return false;
    else if (__isset.resolutionBundles && !(resolutionBundles == rhs.resolutionBundles))
      return false;
    if (__isset.bundleManifest != rhs.__isset.bundleManifest)
      return false;
    else if (__isset.bundleManifest && !(bundleManifest == rhs.bundleManifest))
      return false;
    if (__isset.resolutionManifests != rhs.__isset.resolutionManifests)
      return false;
    else if (__isset.resolutionManifests && !(resolutionManifests == rhs.resolutionManifests))
      return false;
    if (__isset.localizationManifests != rhs.__isset.localizationManifests)
      return false;
    else if (__isset.localizationManifests && !(localizationManifests == rhs.localizationManifests))
      return false;
    if (!(building == rhs.building))
      return false;
    if (!(recipe == rhs.recipe))
      return false;
    if (!(deco == rhs.deco))
      return false;
    if (!(business == rhs.business))
      return false;
    if (__isset.businessOrder != rhs.__isset.businessOrder)
      return false;
    else if (__isset.businessOrder && !(businessOrder == rhs.businessOrder))
      return false;
    if (!(inventoryTab == rhs.inventoryTab))
      return false;
    if (!(blockers == rhs.blockers))
      return false;
    if (!(weightedLootList == rhs.weightedLootList))
      return false;
    if (!(rarity == rhs.rarity))
      return false;
    if (__isset.newRarity != rhs.__isset.newRarity)
      return false;
    else if (__isset.newRarity && !(newRarity == rhs.newRarity))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(boost == rhs.boost))
      return false;
    if (__isset.levelDot != rhs.__isset.levelDot)
      return false;
    else if (__isset.levelDot && !(levelDot == rhs.levelDot))
      return false;
    if (__isset.villain != rhs.__isset.villain)
      return false;
    else if (__isset.villain && !(villain == rhs.villain))
      return false;
    if (__isset.matchThreeData != rhs.__isset.matchThreeData)
      return false;
    else if (__isset.matchThreeData && !(matchThreeData == rhs.matchThreeData))
      return false;
    if (__isset.newLevel != rhs.__isset.newLevel)
      return false;
    else if (__isset.newLevel && !(newLevel == rhs.newLevel))
      return false;
    if (!(newLevelDot == rhs.newLevelDot))
      return false;
    if (!(material == rhs.material))
      return false;
    if (!(island == rhs.island))
      return false;
    if (__isset.islandSettings != rhs.__isset.islandSettings)
      return false;
    else if (__isset.islandSettings && !(islandSettings == rhs.islandSettings))
      return false;
    if (__isset.islandObject != rhs.__isset.islandObject)
      return false;
    else if (__isset.islandObject && !(islandObject == rhs.islandObject))
      return false;
    if (__isset.color != rhs.__isset.color)
      return false;
    else if (__isset.color && !(color == rhs.color))
      return false;
    if (!(expansion == rhs.expansion))
      return false;
    if (!(expansionType == rhs.expansionType))
      return false;
    if (!(gachaGroup == rhs.gachaGroup))
      return false;
    if (!(gachaOffer == rhs.gachaOffer))
      return false;
    if (!(gachaPack == rhs.gachaPack))
      return false;
    if (!(lootTable == rhs.lootTable))
      return false;
    if (!(lootCurrencyGroup == rhs.lootCurrencyGroup))
      return false;
    if (!(lootBuildingGroup == rhs.lootBuildingGroup))
      return false;
    if (!(avatar == rhs.avatar))
      return false;
    if (__isset.adminMessages != rhs.__isset.adminMessages)
      return false;
    else if (__isset.adminMessages && !(adminMessages == rhs.adminMessages))
      return false;
    if (!(adminGiftMessages == rhs.adminGiftMessages))
      return false;
    if (!(analyticsEvents == rhs.analyticsEvents))
      return false;
    if (!(appBoyEvents == rhs.appBoyEvents))
      return false;
    if (!(analyticsDimensions == rhs.analyticsDimensions))
      return false;
    if (__isset.apsalarEvents != rhs.__isset.apsalarEvents)
      return false;
    else if (__isset.apsalarEvents && !(apsalarEvents == rhs.apsalarEvents))
      return false;
    if (__isset.businessOrderList != rhs.__isset.businessOrderList)
      return false;
    else if (__isset.businessOrderList && !(businessOrderList == rhs.businessOrderList))
      return false;
    if (!(businessEvolution == rhs.businessEvolution))
      return false;
    if (!(npc == rhs.npc))
      return false;
    if (!(vendorProducts == rhs.vendorProducts))
      return false;
    if (!(storeProducts == rhs.storeProducts))
      return false;
    if (!(buyItemOrder == rhs.buyItemOrder))
      return false;
    if (!(marketType == rhs.marketType))
      return false;
    if (!(forcedUpgrade == rhs.forcedUpgrade))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    if (__isset.achievement != rhs.__isset.achievement)
      return false;
    else if (__isset.achievement && !(achievement == rhs.achievement))
      return false;
    if (__isset.achievementGroup != rhs.__isset.achievementGroup)
      return false;
    else if (__isset.achievementGroup && !(achievementGroup == rhs.achievementGroup))
      return false;
    if (!(testBuckets == rhs.testBuckets))
      return false;
    if (!(strangerSettings == rhs.strangerSettings))
      return false;
    if (!(strangerMatchSettings == rhs.strangerMatchSettings))
      return false;
    if (!(fakeStrangerDisplays == rhs.fakeStrangerDisplays))
      return false;
    if (!(giftMessageRewards == rhs.giftMessageRewards))
      return false;
    if (!(partialKingdomLikeGifts == rhs.partialKingdomLikeGifts))
      return false;
    if (!(kingdomLikeGifts == rhs.kingdomLikeGifts))
      return false;
    if (__isset.pushMessages != rhs.__isset.pushMessages)
      return false;
    else if (__isset.pushMessages && !(pushMessages == rhs.pushMessages))
      return false;
    if (__isset.socialUnlockrewards != rhs.__isset.socialUnlockrewards)
      return false;
    else if (__isset.socialUnlockrewards && !(socialUnlockrewards == rhs.socialUnlockrewards))
      return false;
    if (__isset.adProviders != rhs.__isset.adProviders)
      return false;
    else if (__isset.adProviders && !(adProviders == rhs.adProviders))
      return false;
    if (!(popupTemplate == rhs.popupTemplate))
      return false;
    if (!(defaultTemplate == rhs.defaultTemplate))
      return false;
    if (!(rushCostsByRemainingTime == rhs.rushCostsByRemainingTime))
      return false;
    if (__isset.messageTemplateModifiers != rhs.__isset.messageTemplateModifiers)
      return false;
    else if (__isset.messageTemplateModifiers && !(messageTemplateModifiers == rhs.messageTemplateModifiers))
      return false;
    if (__isset.gachaBanner != rhs.__isset.gachaBanner)
      return false;
    else if (__isset.gachaBanner && !(gachaBanner == rhs.gachaBanner))
      return false;
    if (__isset.presetKingdoms != rhs.__isset.presetKingdoms)
      return false;
    else if (__isset.presetKingdoms && !(presetKingdoms == rhs.presetKingdoms))
      return false;
    if (__isset.abTests != rhs.__isset.abTests)
      return false;
    else if (__isset.abTests && !(abTests == rhs.abTests))
      return false;
    if (__isset.clientVersionTestBuckets != rhs.__isset.clientVersionTestBuckets)
      return false;
    else if (__isset.clientVersionTestBuckets && !(clientVersionTestBuckets == rhs.clientVersionTestBuckets))
      return false;
    if (__isset.buildMenuSpecialCard != rhs.__isset.buildMenuSpecialCard)
      return false;
    else if (__isset.buildMenuSpecialCard && !(buildMenuSpecialCard == rhs.buildMenuSpecialCard))
      return false;
    if (__isset.businessMenuSettings != rhs.__isset.businessMenuSettings)
      return false;
    else if (__isset.businessMenuSettings && !(businessMenuSettings == rhs.businessMenuSettings))
      return false;
    if (!(rewardMessages == rhs.rewardMessages))
      return false;
    if (!(events == rhs.events))
      return false;
    if (!(leaderboards == rhs.leaderboards))
      return false;
    if (!(leaderboardSettings == rhs.leaderboardSettings))
      return false;
    if (__isset.leaderboardLeagues != rhs.__isset.leaderboardLeagues)
      return false;
    else if (__isset.leaderboardLeagues && !(leaderboardLeagues == rhs.leaderboardLeagues))
      return false;
    if (__isset.leaderboardRibbons != rhs.__isset.leaderboardRibbons)
      return false;
    else if (__isset.leaderboardRibbons && !(leaderboardRibbons == rhs.leaderboardRibbons))
      return false;
    if (__isset.leaderboardRewards != rhs.__isset.leaderboardRewards)
      return false;
    else if (__isset.leaderboardRewards && !(leaderboardRewards == rhs.leaderboardRewards))
      return false;
    if (!(leaderboardPlacements == rhs.leaderboardPlacements))
      return false;
    if (!(rarityEvoLevelKeyDropRates == rhs.rarityEvoLevelKeyDropRates))
      return false;
    if (!(keyDropRateByOrderTime == rhs.keyDropRateByOrderTime))
      return false;
    if (!(eventBusinessKeyDropRates == rhs.eventBusinessKeyDropRates))
      return false;
    if (__isset.leaderboardTemplates != rhs.__isset.leaderboardTemplates)
      return false;
    else if (__isset.leaderboardTemplates && !(leaderboardTemplates == rhs.leaderboardTemplates))
      return false;
    if (!(eventIslands == rhs.eventIslands))
      return false;
    if (!(eventHowToPlays == rhs.eventHowToPlays))
      return false;
    if (!(eventMainMenus == rhs.eventMainMenus))
      return false;
    if (!(castleActivities == rhs.castleActivities))
      return false;
    if (!(playerDisplaySuggestStart == rhs.playerDisplaySuggestStart))
      return false;
    if (!(playerDisplaySuggestMiddle == rhs.playerDisplaySuggestMiddle))
      return false;
    if (!(playerDisplaySuggestEnd == rhs.playerDisplaySuggestEnd))
      return false;
    if (!(tutorialStates == rhs.tutorialStates))
      return false;
    if (!(popupMessages == rhs.popupMessages))
      return false;
    if (!(popupMessageSettings == rhs.popupMessageSettings))
      return false;
    if (__isset.eventSettings != rhs.__isset.eventSettings)
      return false;
    else if (__isset.eventSettings && !(eventSettings == rhs.eventSettings))
      return false;
    if (__isset.screenNameMapping != rhs.__isset.screenNameMapping)
      return false;
    else if (__isset.screenNameMapping && !(screenNameMapping == rhs.screenNameMapping))
      return false;
    if (__isset.cellInfo != rhs.__isset.cellInfo)
      return false;
    else if (__isset.cellInfo && !(cellInfo == rhs.cellInfo))
      return false;
    if (__isset.keyCostPerLevel != rhs.__isset.keyCostPerLevel)
      return false;
    else if (__isset.keyCostPerLevel && !(keyCostPerLevel == rhs.keyCostPerLevel))
      return false;
    if (__isset.playerMatchRankSettings != rhs.__isset.playerMatchRankSettings)
      return false;
    else if (__isset.playerMatchRankSettings && !(playerMatchRankSettings == rhs.playerMatchRankSettings))
      return false;
    if (!(buildingMultipliers == rhs.buildingMultipliers))
      return false;
    if (!(guildLeaderboardSettings == rhs.guildLeaderboardSettings))
      return false;
    if (__isset.guildLeaderboards != rhs.__isset.guildLeaderboards)
      return false;
    else if (__isset.guildLeaderboards && !(guildLeaderboards == rhs.guildLeaderboards))
      return false;
    if (__isset.guildLeaderboardRibbons != rhs.__isset.guildLeaderboardRibbons)
      return false;
    else if (__isset.guildLeaderboardRibbons && !(guildLeaderboardRibbons == rhs.guildLeaderboardRibbons))
      return false;
    if (__isset.guildLeaderboardRewards != rhs.__isset.guildLeaderboardRewards)
      return false;
    else if (__isset.guildLeaderboardRewards && !(guildLeaderboardRewards == rhs.guildLeaderboardRewards))
      return false;
    if (!(locations == rhs.locations))
      return false;
    if (!(guildSettings == rhs.guildSettings))
      return false;
    if (!(guildMemberTypeDisplays == rhs.guildMemberTypeDisplays))
      return false;
    if (!(guildJoinTypeDisplays == rhs.guildJoinTypeDisplays))
      return false;
    if (!(guildEmblems == rhs.guildEmblems))
      return false;
    if (!(guildBoundItems == rhs.guildBoundItems))
      return false;
    if (!(guildRank == rhs.guildRank))
      return false;
    if (!(chatSystemMessages == rhs.chatSystemMessages))
      return false;
    if (!(gifts == rhs.gifts))
      return false;
    if (__isset.pollSettings != rhs.__isset.pollSettings)
      return false;
    else if (__isset.pollSettings && !(pollSettings == rhs.pollSettings))
      return false;
    if (!(guildNameSuggestStart == rhs.guildNameSuggestStart))
      return false;
    if (!(guildNameSuggestMiddle == rhs.guildNameSuggestMiddle))
      return false;
    if (!(guildNameSuggestEnd == rhs.guildNameSuggestEnd))
      return false;
    if (!(quests == rhs.quests))
      return false;
    if (__isset.questGoals != rhs.__isset.questGoals)
      return false;
    else if (__isset.questGoals && !(questGoals == rhs.questGoals))
      return false;
    if (!(questTemplates == rhs.questTemplates))
      return false;
    if (__isset.questGoalTemplates != rhs.__isset.questGoalTemplates)
      return false;
    else if (__isset.questGoalTemplates && !(questGoalTemplates == rhs.questGoalTemplates))
      return false;
    if (!(questNpc == rhs.questNpc))
      return false;
    if (!(businessQuestNpc == rhs.businessQuestNpc))
      return false;
    if (__isset.happinessSettings != rhs.__isset.happinessSettings)
      return false;
    else if (__isset.happinessSettings && !(happinessSettings == rhs.happinessSettings))
      return false;
    if (!(stores == rhs.stores))
      return false;
    if (!(storeInventories == rhs.storeInventories))
      return false;
    if (!(cardOffers == rhs.cardOffers))
      return false;
    if (!(iapProducts == rhs.iapProducts))
      return false;
    if (!(campaignSettings == rhs.campaignSettings))
      return false;
    if (!(levelCampaigns == rhs.levelCampaigns))
      return false;
    if (__isset.businessLevelIdsLookup != rhs.__isset.businessLevelIdsLookup)
      return false;
    else if (__isset.businessLevelIdsLookup && !(businessLevelIdsLookup == rhs.businessLevelIdsLookup))
      return false;
    if (__isset.castleEventLevelIdsLookup != rhs.__isset.castleEventLevelIdsLookup)
      return false;
    else if (__isset.castleEventLevelIdsLookup && !(castleEventLevelIdsLookup == rhs.castleEventLevelIdsLookup))
      return false;
    if (__isset.campaignLevelIdsLookup != rhs.__isset.campaignLevelIdsLookup)
      return false;
    else if (__isset.campaignLevelIdsLookup && !(campaignLevelIdsLookup == rhs.campaignLevelIdsLookup))
      return false;
    if (!(levelCampaignStyles == rhs.levelCampaignStyles))
      return false;
    if (!(buildingTypeLocalizations == rhs.buildingTypeLocalizations))
      return false;
    if (__isset.ftueSettings != rhs.__isset.ftueSettings)
      return false;
    else if (__isset.ftueSettings && !(ftueSettings == rhs.ftueSettings))
      return false;
    if (__isset.matchThreeCellDefinitions != rhs.__isset.matchThreeCellDefinitions)
      return false;
    else if (__isset.matchThreeCellDefinitions && !(matchThreeCellDefinitions == rhs.matchThreeCellDefinitions))
      return false;
    if (__isset.matchThreeBlasterDefinitions != rhs.__isset.matchThreeBlasterDefinitions)
      return false;
    else if (__isset.matchThreeBlasterDefinitions && !(matchThreeBlasterDefinitions == rhs.matchThreeBlasterDefinitions))
      return false;
    if (!(goalDisplayTemplates == rhs.goalDisplayTemplates))
      return false;
    if (!(questTitles == rhs.questTitles))
      return false;
    if (!(questSettings == rhs.questSettings))
      return false;
    if (!(questRankSettings == rhs.questRankSettings))
      return false;
    if (!(newBusinessOrders == rhs.newBusinessOrders))
      return false;
    if (__isset.eventMenuWidgets != rhs.__isset.eventMenuWidgets)
      return false;
    else if (__isset.eventMenuWidgets && !(eventMenuWidgets == rhs.eventMenuWidgets))
      return false;
    if (__isset.gearAvailableOnGachas != rhs.__isset.gearAvailableOnGachas)
      return false;
    else if (__isset.gearAvailableOnGachas && !(gearAvailableOnGachas == rhs.gearAvailableOnGachas))
      return false;
    if (__isset.gearAvailableOnCardOffers != rhs.__isset.gearAvailableOnCardOffers)
      return false;
    else if (__isset.gearAvailableOnCardOffers && !(gearAvailableOnCardOffers == rhs.gearAvailableOnCardOffers))
      return false;
    if (__isset.gearAvailableOnLevels != rhs.__isset.gearAvailableOnLevels)
      return false;
    else if (__isset.gearAvailableOnLevels && !(gearAvailableOnLevels == rhs.gearAvailableOnLevels))
      return false;
    if (__isset.gearAvailableOnBusinessHarvest != rhs.__isset.gearAvailableOnBusinessHarvest)
      return false;
    else if (__isset.gearAvailableOnBusinessHarvest && !(gearAvailableOnBusinessHarvest == rhs.gearAvailableOnBusinessHarvest))
      return false;
    if (!(mainShopEntries == rhs.mainShopEntries))
      return false;
    if (__isset.askForItems != rhs.__isset.askForItems)
      return false;
    else if (__isset.askForItems && !(askForItems == rhs.askForItems))
      return false;
    if (__isset.storeTabs != rhs.__isset.storeTabs)
      return false;
    else if (__isset.storeTabs && !(storeTabs == rhs.storeTabs))
      return false;
    if (__isset.guildQuestRewards != rhs.__isset.guildQuestRewards)
      return false;
    else if (__isset.guildQuestRewards && !(guildQuestRewards == rhs.guildQuestRewards))
      return false;
    if (__isset.raidBosses != rhs.__isset.raidBosses)
      return false;
    else if (__isset.raidBosses && !(raidBosses == rhs.raidBosses))
      return false;
    if (__isset.raidBossActivities != rhs.__isset.raidBossActivities)
      return false;
    else if (__isset.raidBossActivities && !(raidBossActivities == rhs.raidBossActivities))
      return false;
    if (__isset.raidBossObjectives != rhs.__isset.raidBossObjectives)
      return false;
    else if (__isset.raidBossObjectives && !(raidBossObjectives == rhs.raidBossObjectives))
      return false;
    if (__isset.raidBossKarmaBrackets != rhs.__isset.raidBossKarmaBrackets)
      return false;
    else if (__isset.raidBossKarmaBrackets && !(raidBossKarmaBrackets == rhs.raidBossKarmaBrackets))
      return false;
    if (__isset.raidBossDifficultyBrackets != rhs.__isset.raidBossDifficultyBrackets)
      return false;
    else if (__isset.raidBossDifficultyBrackets && !(raidBossDifficultyBrackets == rhs.raidBossDifficultyBrackets))
      return false;
    if (__isset.raidBossCurves != rhs.__isset.raidBossCurves)
      return false;
    else if (__isset.raidBossCurves && !(raidBossCurves == rhs.raidBossCurves))
      return false;
    if (__isset.raidBossRewards != rhs.__isset.raidBossRewards)
      return false;
    else if (__isset.raidBossRewards && !(raidBossRewards == rhs.raidBossRewards))
      return false;
    if (__isset.raidBossRarities != rhs.__isset.raidBossRarities)
      return false;
    else if (__isset.raidBossRarities && !(raidBossRarities == rhs.raidBossRarities))
      return false;
    if (__isset.heroes != rhs.__isset.heroes)
      return false;
    else if (__isset.heroes && !(heroes == rhs.heroes))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Data &a, Data &b);

std::ostream& operator<<(std::ostream& out, const Data& obj);

}} // namespace

#endif
