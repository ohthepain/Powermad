/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Config_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace DF { namespace Config {

int _kRaidBossObjectiveTypeValues[] = {
  RaidBossObjectiveType::FirstStrike,
  RaidBossObjectiveType::MostDamage,
  RaidBossObjectiveType::LastStrike,
  RaidBossObjectiveType::Participation,
  RaidBossObjectiveType::Rally
};
const char* _kRaidBossObjectiveTypeNames[] = {
  "FirstStrike",
  "MostDamage",
  "LastStrike",
  "Participation",
  "Rally"
};
const std::map<int, const char*> _RaidBossObjectiveType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRaidBossObjectiveTypeValues, _kRaidBossObjectiveTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RaidBossObjectiveType::type& val) {
  std::map<int, const char*>::const_iterator it = _RaidBossObjectiveType_VALUES_TO_NAMES.find(val);
  if (it != _RaidBossObjectiveType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMarketTypeValues[] = {
  MarketType::Default,
  MarketType::BlackMarket
};
const char* _kMarketTypeNames[] = {
  "Default",
  "BlackMarket"
};
const std::map<int, const char*> _MarketType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMarketTypeValues, _kMarketTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MarketType::type& val) {
  std::map<int, const char*>::const_iterator it = _MarketType_VALUES_TO_NAMES.find(val);
  if (it != _MarketType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAffinityIDValues[] = {
  AffinityID::Chocolate,
  AffinityID::Blue,
  AffinityID::Green,
  AffinityID::Orange,
  AffinityID::Pink,
  AffinityID::Yellow
};
const char* _kAffinityIDNames[] = {
  "Chocolate",
  "Blue",
  "Green",
  "Orange",
  "Pink",
  "Yellow"
};
const std::map<int, const char*> _AffinityID_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kAffinityIDValues, _kAffinityIDNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AffinityID::type& val) {
  std::map<int, const char*>::const_iterator it = _AffinityID_VALUES_TO_NAMES.find(val);
  if (it != _AffinityID_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSpecialtyIDValues[] = {
  SpecialtyID::Donut,
  SpecialtyID::Sorbet,
  SpecialtyID::Cake,
  SpecialtyID::Cookie,
  SpecialtyID::Pie,
  SpecialtyID::Cannoli
};
const char* _kSpecialtyIDNames[] = {
  "Donut",
  "Sorbet",
  "Cake",
  "Cookie",
  "Pie",
  "Cannoli"
};
const std::map<int, const char*> _SpecialtyID_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSpecialtyIDValues, _kSpecialtyIDNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SpecialtyID::type& val) {
  std::map<int, const char*>::const_iterator it = _SpecialtyID_VALUES_TO_NAMES.find(val);
  if (it != _SpecialtyID_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLootItemTypeValues[] = {
  LootItemType::Nothing,
  LootItemType::Currency,
  LootItemType::Building
};
const char* _kLootItemTypeNames[] = {
  "Nothing",
  "Currency",
  "Building"
};
const std::map<int, const char*> _LootItemType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLootItemTypeValues, _kLootItemTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LootItemType::type& val) {
  std::map<int, const char*>::const_iterator it = _LootItemType_VALUES_TO_NAMES.find(val);
  if (it != _LootItemType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kEventPhaseValues[] = {
  EventPhase::NonEvent,
  EventPhase::Main,
  EventPhase::Preview,
  EventPhase::Recap
};
const char* _kEventPhaseNames[] = {
  "NonEvent",
  "Main",
  "Preview",
  "Recap"
};
const std::map<int, const char*> _EventPhase_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kEventPhaseValues, _kEventPhaseNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EventPhase::type& val) {
  std::map<int, const char*>::const_iterator it = _EventPhase_VALUES_TO_NAMES.find(val);
  if (it != _EventPhase_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kEventPhasesValues[] = {
  EventPhases::PreviewMainRecap,
  EventPhases::Main,
  EventPhases::Preview,
  EventPhases::PreviewMain,
  EventPhases::Recap,
  EventPhases::MainRecap
};
const char* _kEventPhasesNames[] = {
  "PreviewMainRecap",
  "Main",
  "Preview",
  "PreviewMain",
  "Recap",
  "MainRecap"
};
const std::map<int, const char*> _EventPhases_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kEventPhasesValues, _kEventPhasesNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EventPhases::type& val) {
  std::map<int, const char*>::const_iterator it = _EventPhases_VALUES_TO_NAMES.find(val);
  if (it != _EventPhases_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGuildJoinTypeValues[] = {
  GuildJoinType::AutoJoin,
  GuildJoinType::Request,
  GuildJoinType::InviteOnly
};
const char* _kGuildJoinTypeNames[] = {
  "AutoJoin",
  "Request",
  "InviteOnly"
};
const std::map<int, const char*> _GuildJoinType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGuildJoinTypeValues, _kGuildJoinTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GuildJoinType::type& val) {
  std::map<int, const char*>::const_iterator it = _GuildJoinType_VALUES_TO_NAMES.find(val);
  if (it != _GuildJoinType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGuildMemberTypeValues[] = {
  GuildMemberType::Leader,
  GuildMemberType::CoLeader,
  GuildMemberType::Member1,
  GuildMemberType::Member2,
  GuildMemberType::Member3
};
const char* _kGuildMemberTypeNames[] = {
  "Leader",
  "CoLeader",
  "Member1",
  "Member2",
  "Member3"
};
const std::map<int, const char*> _GuildMemberType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kGuildMemberTypeValues, _kGuildMemberTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GuildMemberType::type& val) {
  std::map<int, const char*>::const_iterator it = _GuildMemberType_VALUES_TO_NAMES.find(val);
  if (it != _GuildMemberType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGuildStateValues[] = {
  GuildState::Active,
  GuildState::Deleted
};
const char* _kGuildStateNames[] = {
  "Active",
  "Deleted"
};
const std::map<int, const char*> _GuildState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGuildStateValues, _kGuildStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GuildState::type& val) {
  std::map<int, const char*>::const_iterator it = _GuildState_VALUES_TO_NAMES.find(val);
  if (it != _GuildState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGuildQuestRewardTypeValues[] = {
  GuildQuestRewardType::AllMembers,
  GuildQuestRewardType::Leader,
  GuildQuestRewardType::Guild
};
const char* _kGuildQuestRewardTypeNames[] = {
  "AllMembers",
  "Leader",
  "Guild"
};
const std::map<int, const char*> _GuildQuestRewardType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGuildQuestRewardTypeValues, _kGuildQuestRewardTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GuildQuestRewardType::type& val) {
  std::map<int, const char*>::const_iterator it = _GuildQuestRewardType_VALUES_TO_NAMES.find(val);
  if (it != _GuildQuestRewardType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMessageButtonActionValues[] = {
  MessageButtonAction::Default,
  MessageButtonAction::GoToBuildMenu,
  MessageButtonAction::GoToKingdom,
  MessageButtonAction::GoToGachaStore,
  MessageButtonAction::GoToCurrencyStore,
  MessageButtonAction::GoToIsland,
  MessageButtonAction::GoToURL,
  MessageButtonAction::CollectGiftMessage,
  MessageButtonAction::CancelFriendRequest,
  MessageButtonAction::AcceptFriendRequest,
  MessageButtonAction::SpinGacha,
  MessageButtonAction::GoToSocialMenu,
  MessageButtonAction::OpenGachaCard,
  MessageButtonAction::RunFTUE,
  MessageButtonAction::OpenGachaOffer,
  MessageButtonAction::GoToInbox,
  MessageButtonAction::GoToEventMenu,
  MessageButtonAction::GoToEventMenuOpenRewards,
  MessageButtonAction::GoToEventMenuOpenHelp,
  MessageButtonAction::GoToEventMenuOpenStore,
  MessageButtonAction::GoToEventMenuOpenLeaderboard,
  MessageButtonAction::GoToRewards,
  MessageButtonAction::GoToHelp,
  MessageButtonAction::GoToStore,
  MessageButtonAction::GoToLeaderboard,
  MessageButtonAction::GoToNextEvoEventLevel,
  MessageButtonAction::GoToGuildLeaderboard
};
const char* _kMessageButtonActionNames[] = {
  "Default",
  "GoToBuildMenu",
  "GoToKingdom",
  "GoToGachaStore",
  "GoToCurrencyStore",
  "GoToIsland",
  "GoToURL",
  "CollectGiftMessage",
  "CancelFriendRequest",
  "AcceptFriendRequest",
  "SpinGacha",
  "GoToSocialMenu",
  "OpenGachaCard",
  "RunFTUE",
  "OpenGachaOffer",
  "GoToInbox",
  "GoToEventMenu",
  "GoToEventMenuOpenRewards",
  "GoToEventMenuOpenHelp",
  "GoToEventMenuOpenStore",
  "GoToEventMenuOpenLeaderboard",
  "GoToRewards",
  "GoToHelp",
  "GoToStore",
  "GoToLeaderboard",
  "GoToNextEvoEventLevel",
  "GoToGuildLeaderboard"
};
const std::map<int, const char*> _MessageButtonAction_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(27, _kMessageButtonActionValues, _kMessageButtonActionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MessageButtonAction::type& val) {
  std::map<int, const char*>::const_iterator it = _MessageButtonAction_VALUES_TO_NAMES.find(val);
  if (it != _MessageButtonAction_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kEventMenuWidgetTypeValues[] = {
  EventMenuWidgetType::ButtonWidget,
  EventMenuWidgetType::LeaderboardWidget,
  EventMenuWidgetType::PlayButtonWidget,
  EventMenuWidgetType::ImageWidget,
  EventMenuWidgetType::TextWidget,
  EventMenuWidgetType::NPCImageWidget,
  EventMenuWidgetType::CurrencyHudWidget,
  EventMenuWidgetType::TimerWidget,
  EventMenuWidgetType::FakeLeaderboardWidget,
  EventMenuWidgetType::GuildLeaderboardPositionWidget
};
const char* _kEventMenuWidgetTypeNames[] = {
  "ButtonWidget",
  "LeaderboardWidget",
  "PlayButtonWidget",
  "ImageWidget",
  "TextWidget",
  "NPCImageWidget",
  "CurrencyHudWidget",
  "TimerWidget",
  "FakeLeaderboardWidget",
  "GuildLeaderboardPositionWidget"
};
const std::map<int, const char*> _EventMenuWidgetType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kEventMenuWidgetTypeValues, _kEventMenuWidgetTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EventMenuWidgetType::type& val) {
  std::map<int, const char*>::const_iterator it = _EventMenuWidgetType_VALUES_TO_NAMES.find(val);
  if (it != _EventMenuWidgetType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kBuildingTypeValues[] = {
  BuildingType::Default,
  BuildingType::Business,
  BuildingType::Expansion,
  BuildingType::Market,
  BuildingType::Deco,
  BuildingType::Blocker
};
const char* _kBuildingTypeNames[] = {
  "Default",
  "Business",
  "Expansion",
  "Market",
  "Deco",
  "Blocker"
};
const std::map<int, const char*> _BuildingType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kBuildingTypeValues, _kBuildingTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BuildingType::type& val) {
  std::map<int, const char*>::const_iterator it = _BuildingType_VALUES_TO_NAMES.find(val);
  if (it != _BuildingType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kIslandObjectTypeValues[] = {
  IslandObjectType::Level,
  IslandObjectType::Cakebox,
  IslandObjectType::Object
};
const char* _kIslandObjectTypeNames[] = {
  "Level",
  "Cakebox",
  "Object"
};
const std::map<int, const char*> _IslandObjectType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kIslandObjectTypeValues, _kIslandObjectTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const IslandObjectType::type& val) {
  std::map<int, const char*>::const_iterator it = _IslandObjectType_VALUES_TO_NAMES.find(val);
  if (it != _IslandObjectType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLevelTypeValues[] = {
  LevelType::Normal,
  LevelType::Blitz,
  LevelType::Illegal
};
const char* _kLevelTypeNames[] = {
  "Normal",
  "Blitz",
  "Illegal"
};
const std::map<int, const char*> _LevelType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLevelTypeValues, _kLevelTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LevelType::type& val) {
  std::map<int, const char*>::const_iterator it = _LevelType_VALUES_TO_NAMES.find(val);
  if (it != _LevelType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLevelParentTypeValues[] = {
  LevelParentType::Default,
  LevelParentType::Business,
  LevelParentType::CastleEvent,
  LevelParentType::Campaign,
  LevelParentType::EvolutionEvent
};
const char* _kLevelParentTypeNames[] = {
  "Default",
  "Business",
  "CastleEvent",
  "Campaign",
  "EvolutionEvent"
};
const std::map<int, const char*> _LevelParentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kLevelParentTypeValues, _kLevelParentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LevelParentType::type& val) {
  std::map<int, const char*>::const_iterator it = _LevelParentType_VALUES_TO_NAMES.find(val);
  if (it != _LevelParentType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLevelAvailabilityValues[] = {
  LevelAvailability::Default,
  LevelAvailability::Sequential,
  LevelAvailability::All,
  LevelAvailability::Loop
};
const char* _kLevelAvailabilityNames[] = {
  "Default",
  "Sequential",
  "All",
  "Loop"
};
const std::map<int, const char*> _LevelAvailability_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kLevelAvailabilityValues, _kLevelAvailabilityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LevelAvailability::type& val) {
  std::map<int, const char*>::const_iterator it = _LevelAvailability_VALUES_TO_NAMES.find(val);
  if (it != _LevelAvailability_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGiftMessageTypeValues[] = {
  GiftMessageType::Default,
  GiftMessageType::CustomerService,
  GiftMessageType::RushOrder,
  GiftMessageType::DeliverOrder,
  GiftMessageType::LikeBonus,
  GiftMessageType::DecoBonus,
  GiftMessageType::Guild,
  GiftMessageType::Gift,
  GiftMessageType::AskForItems
};
const char* _kGiftMessageTypeNames[] = {
  "Default",
  "CustomerService",
  "RushOrder",
  "DeliverOrder",
  "LikeBonus",
  "DecoBonus",
  "Guild",
  "Gift",
  "AskForItems"
};
const std::map<int, const char*> _GiftMessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kGiftMessageTypeValues, _kGiftMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GiftMessageType::type& val) {
  std::map<int, const char*>::const_iterator it = _GiftMessageType_VALUES_TO_NAMES.find(val);
  if (it != _GiftMessageType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPopupTemplateTypeValues[] = {
  PopupTemplateType::Default,
  PopupTemplateType::CustomerService,
  PopupTemplateType::RushOrder,
  PopupTemplateType::DeliverOrder,
  PopupTemplateType::LikeBonus,
  PopupTemplateType::DecoBonus,
  PopupTemplateType::FriendRequest
};
const char* _kPopupTemplateTypeNames[] = {
  "Default",
  "CustomerService",
  "RushOrder",
  "DeliverOrder",
  "LikeBonus",
  "DecoBonus",
  "FriendRequest"
};
const std::map<int, const char*> _PopupTemplateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kPopupTemplateTypeValues, _kPopupTemplateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PopupTemplateType::type& val) {
  std::map<int, const char*>::const_iterator it = _PopupTemplateType_VALUES_TO_NAMES.find(val);
  if (it != _PopupTemplateType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPurchasableOfferTypeValues[] = {
  PurchasableOfferType::Default,
  PurchasableOfferType::Gacha,
  PurchasableOfferType::Card,
  PurchasableOfferType::LegacyStoreProduct
};
const char* _kPurchasableOfferTypeNames[] = {
  "Default",
  "Gacha",
  "Card",
  "LegacyStoreProduct"
};
const std::map<int, const char*> _PurchasableOfferType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPurchasableOfferTypeValues, _kPurchasableOfferTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PurchasableOfferType::type& val) {
  std::map<int, const char*>::const_iterator it = _PurchasableOfferType_VALUES_TO_NAMES.find(val);
  if (it != _PurchasableOfferType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kOfferTypeValues[] = {
  OfferType::Default,
  OfferType::Gacha,
  OfferType::Card,
  OfferType::LegacyStoreProduct
};
const char* _kOfferTypeNames[] = {
  "Default",
  "Gacha",
  "Card",
  "LegacyStoreProduct"
};
const std::map<int, const char*> _OfferType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kOfferTypeValues, _kOfferTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const OfferType::type& val) {
  std::map<int, const char*>::const_iterator it = _OfferType_VALUES_TO_NAMES.find(val);
  if (it != _OfferType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kStoreProductBillingTypeValues[] = {
  StoreProductBillingType::Vendor,
  StoreProductBillingType::Currency
};
const char* _kStoreProductBillingTypeNames[] = {
  "Vendor",
  "Currency"
};
const std::map<int, const char*> _StoreProductBillingType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kStoreProductBillingTypeValues, _kStoreProductBillingTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const StoreProductBillingType::type& val) {
  std::map<int, const char*>::const_iterator it = _StoreProductBillingType_VALUES_TO_NAMES.find(val);
  if (it != _StoreProductBillingType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAchievementTypeValues[] = {
  AchievementType::Unknown,
  AchievementType::Bomb,
  AchievementType::ColumnBlaster,
  AchievementType::RowBlaster,
  AchievementType::Colorbomb,
  AchievementType::ScreenBlasterAColorbomb,
  AchievementType::DoubleBlasterAColorbomb,
  AchievementType::C2BlastersAColorbomb,
  AchievementType::ColorbombABlaster,
  AchievementType::ColorbombARowBlasterAColumnBlaster,
  AchievementType::RowBlasterABlaster,
  AchievementType::ColumnBlasterABlaster,
  AchievementType::C2Blasters,
  AchievementType::C3Blasters,
  AchievementType::C2LineBlasters,
  AchievementType::C3LineBlasters,
  AchievementType::C4LineBlasters,
  AchievementType::C5LineBlasters,
  AchievementType::C6LineBlasters,
  AchievementType::C7LineBlasters,
  AchievementType::C8LineBlasters,
  AchievementType::C9LineBlasters,
  AchievementType::C10LineBlasters,
  AchievementType::C2Colorbombs,
  AchievementType::PlaceDeco,
  AchievementType::GetBusiness,
  AchievementType::EvolveBusiness,
  AchievementType::CollectDailyBonus,
  AchievementType::FinishIsland,
  AchievementType::PlaceOrder,
  AchievementType::CollectOrder,
  AchievementType::RushOrder,
  AchievementType::PlaceBusiness,
  AchievementType::Rank,
  AchievementType::LikeKingdom,
  AchievementType::PlaceSocialOrder,
  AchievementType::OpenGachaPack,
  AchievementType::VisitKingdom,
  AchievementType::FinishLevel,
  AchievementType::MoveBusiness,
  AchievementType::MoveDeco,
  AchievementType::PlaceExpansion,
  AchievementType::MoveExpansion,
  AchievementType::CraftGear,
  AchievementType::EquipGear,
  AchievementType::UseLevelBox,
  AchievementType::PlaceRoad,
  AchievementType::PlaceDistinctDecos
};
const char* _kAchievementTypeNames[] = {
  "Unknown",
  "Bomb",
  "ColumnBlaster",
  "RowBlaster",
  "Colorbomb",
  "ScreenBlasterAColorbomb",
  "DoubleBlasterAColorbomb",
  "C2BlastersAColorbomb",
  "ColorbombABlaster",
  "ColorbombARowBlasterAColumnBlaster",
  "RowBlasterABlaster",
  "ColumnBlasterABlaster",
  "C2Blasters",
  "C3Blasters",
  "C2LineBlasters",
  "C3LineBlasters",
  "C4LineBlasters",
  "C5LineBlasters",
  "C6LineBlasters",
  "C7LineBlasters",
  "C8LineBlasters",
  "C9LineBlasters",
  "C10LineBlasters",
  "C2Colorbombs",
  "PlaceDeco",
  "GetBusiness",
  "EvolveBusiness",
  "CollectDailyBonus",
  "FinishIsland",
  "PlaceOrder",
  "CollectOrder",
  "RushOrder",
  "PlaceBusiness",
  "Rank",
  "LikeKingdom",
  "PlaceSocialOrder",
  "OpenGachaPack",
  "VisitKingdom",
  "FinishLevel",
  "MoveBusiness",
  "MoveDeco",
  "PlaceExpansion",
  "MoveExpansion",
  "CraftGear",
  "EquipGear",
  "UseLevelBox",
  "PlaceRoad",
  "PlaceDistinctDecos"
};
const std::map<int, const char*> _AchievementType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(48, _kAchievementTypeValues, _kAchievementTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AchievementType::type& val) {
  std::map<int, const char*>::const_iterator it = _AchievementType_VALUES_TO_NAMES.find(val);
  if (it != _AchievementType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGoalTypeValues[] = {
  GoalType::NoType,
  GoalType::HarvestAnyBusiness,
  GoalType::HarvestSpecificBusiness,
  GoalType::EquipAnyGearOnAnyBusiness,
  GoalType::EquipAnyGearOnSpecificBusiness,
  GoalType::EvolveAnyBusiness,
  GoalType::EvolveSpecificBusiness,
  GoalType::PlaceAnyBuilding,
  GoalType::PlaceSpecificBuilding,
  GoalType::PlaceSpecificBuildingWithRarity,
  GoalType::RotateAnyBuilding,
  GoalType::MoveAnyBuilding,
  GoalType::AutoPlayAnyLevel,
  GoalType::WinAnyLevel,
  GoalType::WinLevelSpecificBusiness,
  GoalType::WinSpecificLevel,
  GoalType::WinAnyEventLevel,
  GoalType::SocialCompleteOrder,
  GoalType::SocialLikeKingdom,
  GoalType::SocialPlaceOrderGuildMate,
  GoalType::SocialVisitKingdom,
  GoalType::EquipSpecificGearOnAnyBusiness,
  GoalType::EquipSpecificGearOnSpecificBusiness,
  GoalType::AutoPlayAnyEventLevel,
  GoalType::AutoPlaySpecificLevel,
  GoalType::JoinGuild,
  GoalType::MatchUseAnyBooster,
  GoalType::MatchUseSpecificBooster,
  GoalType::WinAnyLevelThreeStars,
  GoalType::WinLevelSpecificBusinessThreeStars,
  GoalType::WinSpecificLevelThreeStars,
  GoalType::WinEventLevelThreeStars,
  GoalType::MatchTiles,
  GoalType::CompleteLevel,
  GoalType::GachaSpin
};
const char* _kGoalTypeNames[] = {
  "NoType",
  "HarvestAnyBusiness",
  "HarvestSpecificBusiness",
  "EquipAnyGearOnAnyBusiness",
  "EquipAnyGearOnSpecificBusiness",
  "EvolveAnyBusiness",
  "EvolveSpecificBusiness",
  "PlaceAnyBuilding",
  "PlaceSpecificBuilding",
  "PlaceSpecificBuildingWithRarity",
  "RotateAnyBuilding",
  "MoveAnyBuilding",
  "AutoPlayAnyLevel",
  "WinAnyLevel",
  "WinLevelSpecificBusiness",
  "WinSpecificLevel",
  "WinAnyEventLevel",
  "SocialCompleteOrder",
  "SocialLikeKingdom",
  "SocialPlaceOrderGuildMate",
  "SocialVisitKingdom",
  "EquipSpecificGearOnAnyBusiness",
  "EquipSpecificGearOnSpecificBusiness",
  "AutoPlayAnyEventLevel",
  "AutoPlaySpecificLevel",
  "JoinGuild",
  "MatchUseAnyBooster",
  "MatchUseSpecificBooster",
  "WinAnyLevelThreeStars",
  "WinLevelSpecificBusinessThreeStars",
  "WinSpecificLevelThreeStars",
  "WinEventLevelThreeStars",
  "MatchTiles",
  "CompleteLevel",
  "GachaSpin"
};
const std::map<int, const char*> _GoalType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(35, _kGoalTypeValues, _kGoalTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GoalType::type& val) {
  std::map<int, const char*>::const_iterator it = _GoalType_VALUES_TO_NAMES.find(val);
  if (it != _GoalType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kClientPlatformValues[] = {
  ClientPlatform::iOS,
  ClientPlatform::Android
};
const char* _kClientPlatformNames[] = {
  "iOS",
  "Android"
};
const std::map<int, const char*> _ClientPlatform_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kClientPlatformValues, _kClientPlatformNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ClientPlatform::type& val) {
  std::map<int, const char*>::const_iterator it = _ClientPlatform_VALUES_TO_NAMES.find(val);
  if (it != _ClientPlatform_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAdPlatformValues[] = {
  AdPlatform::IOS,
  AdPlatform::Android
};
const char* _kAdPlatformNames[] = {
  "IOS",
  "Android"
};
const std::map<int, const char*> _AdPlatform_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAdPlatformValues, _kAdPlatformNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AdPlatform::type& val) {
  std::map<int, const char*>::const_iterator it = _AdPlatform_VALUES_TO_NAMES.find(val);
  if (it != _AdPlatform_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAdProvidersValues[] = {
  AdProviders::AdColony,
  AdProviders::UnityAds,
  AdProviders::IronSource
};
const char* _kAdProvidersNames[] = {
  "AdColony",
  "UnityAds",
  "IronSource"
};
const std::map<int, const char*> _AdProviders_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAdProvidersValues, _kAdProvidersNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AdProviders::type& val) {
  std::map<int, const char*>::const_iterator it = _AdProviders_VALUES_TO_NAMES.find(val);
  if (it != _AdProviders_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAvailableOfferTypeValues[] = {
  AvailableOfferType::Nothing,
  AvailableOfferType::GachaOffer,
  AvailableOfferType::CardOffer
};
const char* _kAvailableOfferTypeNames[] = {
  "Nothing",
  "GachaOffer",
  "CardOffer"
};
const std::map<int, const char*> _AvailableOfferType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAvailableOfferTypeValues, _kAvailableOfferTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AvailableOfferType::type& val) {
  std::map<int, const char*>::const_iterator it = _AvailableOfferType_VALUES_TO_NAMES.find(val);
  if (it != _AvailableOfferType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGuildLeaderboardRewardRecipientValues[] = {
  GuildLeaderboardRewardRecipient::Everyone,
  GuildLeaderboardRewardRecipient::Leader
};
const char* _kGuildLeaderboardRewardRecipientNames[] = {
  "Everyone",
  "Leader"
};
const std::map<int, const char*> _GuildLeaderboardRewardRecipient_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGuildLeaderboardRewardRecipientValues, _kGuildLeaderboardRewardRecipientNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GuildLeaderboardRewardRecipient::type& val) {
  std::map<int, const char*>::const_iterator it = _GuildLeaderboardRewardRecipient_VALUES_TO_NAMES.find(val);
  if (it != _GuildLeaderboardRewardRecipient_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Localization::~Localization() throw() {
}


void Localization::__set_localizationId(const LocalizationID& val) {
  this->localizationId = val;
}

void Localization::__set_localizationPath(const std::string& val) {
  this->localizationPath = val;
}
std::ostream& operator<<(std::ostream& out, const Localization& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Localization::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_localizationId = false;
  bool isset_localizationPath = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localizationId);
          isset_localizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localizationPath);
          isset_localizationPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_localizationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_localizationPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Localization::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Localization");

  xfer += oprot->writeFieldBegin("localizationId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->localizationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("localizationPath", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->localizationPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Localization &a, Localization &b) {
  using ::std::swap;
  swap(a.localizationId, b.localizationId);
  swap(a.localizationPath, b.localizationPath);
}

Localization::Localization(const Localization& other0) {
  localizationId = other0.localizationId;
  localizationPath = other0.localizationPath;
}
Localization& Localization::operator=(const Localization& other1) {
  localizationId = other1.localizationId;
  localizationPath = other1.localizationPath;
  return *this;
}
void Localization::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Localization(";
  out << "localizationId=" << to_string(localizationId);
  out << ", " << "localizationPath=" << to_string(localizationPath);
  out << ")";
}


LocalizedString::~LocalizedString() throw() {
}


void LocalizedString::__set_key(const LocalizationKey& val) {
  this->key = val;
}

void LocalizedString::__set_value(const std::string& val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const LocalizedString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LocalizedString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_key = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          isset_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LocalizedString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LocalizedString");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LocalizedString &a, LocalizedString &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

LocalizedString::LocalizedString(const LocalizedString& other2) {
  key = other2.key;
  value = other2.value;
  __isset = other2.__isset;
}
LocalizedString& LocalizedString::operator=(const LocalizedString& other3) {
  key = other3.key;
  value = other3.value;
  __isset = other3.__isset;
  return *this;
}
void LocalizedString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LocalizedString(";
  out << "key=" << to_string(key);
  out << ", " << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


DateTimeUTC::~DateTimeUTC() throw() {
}


void DateTimeUTC::__set_epochSeconds(const int64_t val) {
  this->epochSeconds = val;
}
std::ostream& operator<<(std::ostream& out, const DateTimeUTC& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DateTimeUTC::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_epochSeconds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->epochSeconds);
          isset_epochSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_epochSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DateTimeUTC::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DateTimeUTC");

  xfer += oprot->writeFieldBegin("epochSeconds", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->epochSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DateTimeUTC &a, DateTimeUTC &b) {
  using ::std::swap;
  swap(a.epochSeconds, b.epochSeconds);
}

DateTimeUTC::DateTimeUTC(const DateTimeUTC& other4) {
  epochSeconds = other4.epochSeconds;
}
DateTimeUTC& DateTimeUTC::operator=(const DateTimeUTC& other5) {
  epochSeconds = other5.epochSeconds;
  return *this;
}
void DateTimeUTC::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DateTimeUTC(";
  out << "epochSeconds=" << to_string(epochSeconds);
  out << ")";
}


Header::~Header() throw() {
}


void Header::__set_schemaVersion(const int32_t val) {
  this->schemaVersion = val;
}

void Header::__set_configVersion(const int32_t val) {
  this->configVersion = val;
}
std::ostream& operator<<(std::ostream& out, const Header& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Header::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_schemaVersion = false;
  bool isset_configVersion = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->schemaVersion);
          isset_schemaVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->configVersion);
          isset_configVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_schemaVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_configVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Header::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Header");

  xfer += oprot->writeFieldBegin("schemaVersion", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->schemaVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("configVersion", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->configVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Header &a, Header &b) {
  using ::std::swap;
  swap(a.schemaVersion, b.schemaVersion);
  swap(a.configVersion, b.configVersion);
}

Header::Header(const Header& other6) {
  schemaVersion = other6.schemaVersion;
  configVersion = other6.configVersion;
}
Header& Header::operator=(const Header& other7) {
  schemaVersion = other7.schemaVersion;
  configVersion = other7.configVersion;
  return *this;
}
void Header::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Header(";
  out << "schemaVersion=" << to_string(schemaVersion);
  out << ", " << "configVersion=" << to_string(configVersion);
  out << ")";
}


ConfigBundle::~ConfigBundle() throw() {
}


void ConfigBundle::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
}

void ConfigBundle::__set_path(const std::string& val) {
  this->path = val;
}

void ConfigBundle::__set_priority(const int32_t val) {
  this->priority = val;
__isset.priority = true;
}

void ConfigBundle::__set_noncompulsory(const bool val) {
  this->noncompulsory = val;
__isset.noncompulsory = true;
}

void ConfigBundle::__set_dependencies(const std::vector<BundleID> & val) {
  this->dependencies = val;
__isset.dependencies = true;
}
std::ostream& operator<<(std::ostream& out, const ConfigBundle& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ConfigBundle::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_bundleId = false;
  bool isset_path = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          isset_bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noncompulsory);
          this->__isset.noncompulsory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dependencies.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->dependencies.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readString(this->dependencies[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dependencies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_bundleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConfigBundle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConfigBundle");

  xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->bundleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noncompulsory) {
    xfer += oprot->writeFieldBegin("noncompulsory", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->noncompulsory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependencies) {
    xfer += oprot->writeFieldBegin("dependencies", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->dependencies.size()));
      std::vector<BundleID> ::const_iterator _iter13;
      for (_iter13 = this->dependencies.begin(); _iter13 != this->dependencies.end(); ++_iter13)
      {
        xfer += oprot->writeString((*_iter13));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConfigBundle &a, ConfigBundle &b) {
  using ::std::swap;
  swap(a.bundleId, b.bundleId);
  swap(a.path, b.path);
  swap(a.priority, b.priority);
  swap(a.noncompulsory, b.noncompulsory);
  swap(a.dependencies, b.dependencies);
  swap(a.__isset, b.__isset);
}

ConfigBundle::ConfigBundle(const ConfigBundle& other14) {
  bundleId = other14.bundleId;
  path = other14.path;
  priority = other14.priority;
  noncompulsory = other14.noncompulsory;
  dependencies = other14.dependencies;
  __isset = other14.__isset;
}
ConfigBundle& ConfigBundle::operator=(const ConfigBundle& other15) {
  bundleId = other15.bundleId;
  path = other15.path;
  priority = other15.priority;
  noncompulsory = other15.noncompulsory;
  dependencies = other15.dependencies;
  __isset = other15.__isset;
  return *this;
}
void ConfigBundle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConfigBundle(";
  out << "bundleId=" << to_string(bundleId);
  out << ", " << "path=" << to_string(path);
  out << ", " << "priority="; (__isset.priority ? (out << to_string(priority)) : (out << "<null>"));
  out << ", " << "noncompulsory="; (__isset.noncompulsory ? (out << to_string(noncompulsory)) : (out << "<null>"));
  out << ", " << "dependencies="; (__isset.dependencies ? (out << to_string(dependencies)) : (out << "<null>"));
  out << ")";
}


BundleInfo::~BundleInfo() throw() {
}


void BundleInfo::__set_path(const std::string& val) {
  this->path = val;
}

void BundleInfo::__set_size(const int32_t val) {
  this->size = val;
__isset.size = true;
}

void BundleInfo::__set_bundlemd5(const std::string& val) {
  this->bundlemd5 = val;
}

void BundleInfo::__set_zipmd5(const std::string& val) {
  this->zipmd5 = val;
}

void BundleInfo::__set_url(const std::string& val) {
  this->url = val;
__isset.url = true;
}
std::ostream& operator<<(std::ostream& out, const BundleInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BundleInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_path = false;
  bool isset_bundlemd5 = false;
  bool isset_zipmd5 = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundlemd5);
          isset_bundlemd5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zipmd5);
          isset_zipmd5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bundlemd5)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_zipmd5)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BundleInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BundleInfo");

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->size);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("bundlemd5", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->bundlemd5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zipmd5", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->zipmd5);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.url) {
    xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->url);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BundleInfo &a, BundleInfo &b) {
  using ::std::swap;
  swap(a.path, b.path);
  swap(a.size, b.size);
  swap(a.bundlemd5, b.bundlemd5);
  swap(a.zipmd5, b.zipmd5);
  swap(a.url, b.url);
  swap(a.__isset, b.__isset);
}

BundleInfo::BundleInfo(const BundleInfo& other16) {
  path = other16.path;
  size = other16.size;
  bundlemd5 = other16.bundlemd5;
  zipmd5 = other16.zipmd5;
  url = other16.url;
  __isset = other16.__isset;
}
BundleInfo& BundleInfo::operator=(const BundleInfo& other17) {
  path = other17.path;
  size = other17.size;
  bundlemd5 = other17.bundlemd5;
  zipmd5 = other17.zipmd5;
  url = other17.url;
  __isset = other17.__isset;
  return *this;
}
void BundleInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BundleInfo(";
  out << "path=" << to_string(path);
  out << ", " << "size="; (__isset.size ? (out << to_string(size)) : (out << "<null>"));
  out << ", " << "bundlemd5=" << to_string(bundlemd5);
  out << ", " << "zipmd5=" << to_string(zipmd5);
  out << ", " << "url="; (__isset.url ? (out << to_string(url)) : (out << "<null>"));
  out << ")";
}


Bundle::~Bundle() throw() {
}


void Bundle::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
}

void Bundle::__set_dependencies(const std::vector<BundleID> & val) {
  this->dependencies = val;
__isset.dependencies = true;
}

void Bundle::__set_bundleInfo(const std::map<std::string, BundleInfo> & val) {
  this->bundleInfo = val;
__isset.bundleInfo = true;
}

void Bundle::__set_noncompulsory(const bool val) {
  this->noncompulsory = val;
__isset.noncompulsory = true;
}

void Bundle::__set_priority(const int32_t val) {
  this->priority = val;
__isset.priority = true;
}
std::ostream& operator<<(std::ostream& out, const Bundle& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bundle::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_bundleId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          isset_bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dependencies.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->dependencies.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readString(this->dependencies[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dependencies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bundleInfo.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _ktype24;
            ::apache::thrift::protocol::TType _vtype25;
            xfer += iprot->readMapBegin(_ktype24, _vtype25, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::string _key28;
              xfer += iprot->readString(_key28);
              BundleInfo& _val29 = this->bundleInfo[_key28];
              xfer += _val29.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.bundleInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noncompulsory);
          this->__isset.noncompulsory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_bundleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Bundle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bundle");

  xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->bundleId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dependencies) {
    xfer += oprot->writeFieldBegin("dependencies", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->dependencies.size()));
      std::vector<BundleID> ::const_iterator _iter30;
      for (_iter30 = this->dependencies.begin(); _iter30 != this->dependencies.end(); ++_iter30)
      {
        xfer += oprot->writeString((*_iter30));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleInfo) {
    xfer += oprot->writeFieldBegin("bundleInfo", ::apache::thrift::protocol::T_MAP, 12);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->bundleInfo.size()));
      std::map<std::string, BundleInfo> ::const_iterator _iter31;
      for (_iter31 = this->bundleInfo.begin(); _iter31 != this->bundleInfo.end(); ++_iter31)
      {
        xfer += oprot->writeString(_iter31->first);
        xfer += _iter31->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noncompulsory) {
    xfer += oprot->writeFieldBegin("noncompulsory", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->noncompulsory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bundle &a, Bundle &b) {
  using ::std::swap;
  swap(a.bundleId, b.bundleId);
  swap(a.dependencies, b.dependencies);
  swap(a.bundleInfo, b.bundleInfo);
  swap(a.noncompulsory, b.noncompulsory);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

Bundle::Bundle(const Bundle& other32) {
  bundleId = other32.bundleId;
  dependencies = other32.dependencies;
  bundleInfo = other32.bundleInfo;
  noncompulsory = other32.noncompulsory;
  priority = other32.priority;
  __isset = other32.__isset;
}
Bundle& Bundle::operator=(const Bundle& other33) {
  bundleId = other33.bundleId;
  dependencies = other33.dependencies;
  bundleInfo = other33.bundleInfo;
  noncompulsory = other33.noncompulsory;
  priority = other33.priority;
  __isset = other33.__isset;
  return *this;
}
void Bundle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bundle(";
  out << "bundleId=" << to_string(bundleId);
  out << ", " << "dependencies="; (__isset.dependencies ? (out << to_string(dependencies)) : (out << "<null>"));
  out << ", " << "bundleInfo="; (__isset.bundleInfo ? (out << to_string(bundleInfo)) : (out << "<null>"));
  out << ", " << "noncompulsory="; (__isset.noncompulsory ? (out << to_string(noncompulsory)) : (out << "<null>"));
  out << ", " << "priority="; (__isset.priority ? (out << to_string(priority)) : (out << "<null>"));
  out << ")";
}


BundleManifest::~BundleManifest() throw() {
}


void BundleManifest::__set_baseUrl(const std::string& val) {
  this->baseUrl = val;
}

void BundleManifest::__set_bundles(const std::map<BundleID, Bundle> & val) {
  this->bundles = val;
}

void BundleManifest::__set_gitCommit(const std::string& val) {
  this->gitCommit = val;
__isset.gitCommit = true;
}
std::ostream& operator<<(std::ostream& out, const BundleManifest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BundleManifest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_baseUrl = false;
  bool isset_bundles = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->baseUrl);
          isset_baseUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bundles.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _ktype35;
            ::apache::thrift::protocol::TType _vtype36;
            xfer += iprot->readMapBegin(_ktype35, _vtype36, _size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              BundleID _key39;
              xfer += iprot->readString(_key39);
              Bundle& _val40 = this->bundles[_key39];
              xfer += _val40.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_bundles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gitCommit);
          this->__isset.gitCommit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_baseUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bundles)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BundleManifest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BundleManifest");

  xfer += oprot->writeFieldBegin("baseUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->baseUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bundles", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->bundles.size()));
    std::map<BundleID, Bundle> ::const_iterator _iter41;
    for (_iter41 = this->bundles.begin(); _iter41 != this->bundles.end(); ++_iter41)
    {
      xfer += oprot->writeString(_iter41->first);
      xfer += _iter41->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gitCommit) {
    xfer += oprot->writeFieldBegin("gitCommit", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->gitCommit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BundleManifest &a, BundleManifest &b) {
  using ::std::swap;
  swap(a.baseUrl, b.baseUrl);
  swap(a.bundles, b.bundles);
  swap(a.gitCommit, b.gitCommit);
  swap(a.__isset, b.__isset);
}

BundleManifest::BundleManifest(const BundleManifest& other42) {
  baseUrl = other42.baseUrl;
  bundles = other42.bundles;
  gitCommit = other42.gitCommit;
  __isset = other42.__isset;
}
BundleManifest& BundleManifest::operator=(const BundleManifest& other43) {
  baseUrl = other43.baseUrl;
  bundles = other43.bundles;
  gitCommit = other43.gitCommit;
  __isset = other43.__isset;
  return *this;
}
void BundleManifest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BundleManifest(";
  out << "baseUrl=" << to_string(baseUrl);
  out << ", " << "bundles=" << to_string(bundles);
  out << ", " << "gitCommit="; (__isset.gitCommit ? (out << to_string(gitCommit)) : (out << "<null>"));
  out << ")";
}


Currency::~Currency() throw() {
}


void Currency::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void Currency::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
}

void Currency::__set_catalogImage(const AssetPath& val) {
  this->catalogImage = val;
}

void Currency::__set_currencyTypeId(const CurrencyTypeID& val) {
  this->currencyTypeId = val;
__isset.currencyTypeId = true;
}

void Currency::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void Currency::__set_gachaRevealImage(const AssetPath& val) {
  this->gachaRevealImage = val;
__isset.gachaRevealImage = true;
}

void Currency::__set_startingValue(const int32_t val) {
  this->startingValue = val;
}

void Currency::__set_pluralDisplay(const LocalizedString& val) {
  this->pluralDisplay = val;
__isset.pluralDisplay = true;
}
std::ostream& operator<<(std::ostream& out, const Currency& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Currency::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currencyId = false;
  bool isset_newDisplay = false;
  bool isset_catalogImage = false;
  bool isset_startingValue = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          isset_newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catalogImage);
          isset_catalogImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyTypeId);
          this->__isset.currencyTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaRevealImage);
          this->__isset.gachaRevealImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startingValue);
          isset_startingValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pluralDisplay.read(iprot);
          this->__isset.pluralDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_newDisplay)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_catalogImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startingValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Currency::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Currency");

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->newDisplay.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catalogImage", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->catalogImage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.currencyTypeId) {
    xfer += oprot->writeFieldBegin("currencyTypeId", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->currencyTypeId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaRevealImage) {
    xfer += oprot->writeFieldBegin("gachaRevealImage", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->gachaRevealImage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("startingValue", ::apache::thrift::protocol::T_I32, 41);
  xfer += oprot->writeI32(this->startingValue);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.pluralDisplay) {
    xfer += oprot->writeFieldBegin("pluralDisplay", ::apache::thrift::protocol::T_STRUCT, 42);
    xfer += this->pluralDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Currency &a, Currency &b) {
  using ::std::swap;
  swap(a.currencyId, b.currencyId);
  swap(a.newDisplay, b.newDisplay);
  swap(a.catalogImage, b.catalogImage);
  swap(a.currencyTypeId, b.currencyTypeId);
  swap(a.bundleId, b.bundleId);
  swap(a.gachaRevealImage, b.gachaRevealImage);
  swap(a.startingValue, b.startingValue);
  swap(a.pluralDisplay, b.pluralDisplay);
  swap(a.__isset, b.__isset);
}

Currency::Currency(const Currency& other44) {
  currencyId = other44.currencyId;
  newDisplay = other44.newDisplay;
  catalogImage = other44.catalogImage;
  currencyTypeId = other44.currencyTypeId;
  bundleId = other44.bundleId;
  gachaRevealImage = other44.gachaRevealImage;
  startingValue = other44.startingValue;
  pluralDisplay = other44.pluralDisplay;
  __isset = other44.__isset;
}
Currency& Currency::operator=(const Currency& other45) {
  currencyId = other45.currencyId;
  newDisplay = other45.newDisplay;
  catalogImage = other45.catalogImage;
  currencyTypeId = other45.currencyTypeId;
  bundleId = other45.bundleId;
  gachaRevealImage = other45.gachaRevealImage;
  startingValue = other45.startingValue;
  pluralDisplay = other45.pluralDisplay;
  __isset = other45.__isset;
  return *this;
}
void Currency::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Currency(";
  out << "currencyId=" << to_string(currencyId);
  out << ", " << "newDisplay=" << to_string(newDisplay);
  out << ", " << "catalogImage=" << to_string(catalogImage);
  out << ", " << "currencyTypeId="; (__isset.currencyTypeId ? (out << to_string(currencyTypeId)) : (out << "<null>"));
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "gachaRevealImage="; (__isset.gachaRevealImage ? (out << to_string(gachaRevealImage)) : (out << "<null>"));
  out << ", " << "startingValue=" << to_string(startingValue);
  out << ", " << "pluralDisplay="; (__isset.pluralDisplay ? (out << to_string(pluralDisplay)) : (out << "<null>"));
  out << ")";
}


Rarity::~Rarity() throw() {
}


void Rarity::__set_rarityId(const RarityID val) {
  this->rarityId = val;
}

void Rarity::__set_weight(const int32_t val) {
  this->weight = val;
}

void Rarity::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void Rarity::__set_cardImage(const std::string& val) {
  this->cardImage = val;
}

void Rarity::__set_minBusinessOrderSlots(const int32_t val) {
  this->minBusinessOrderSlots = val;
}

void Rarity::__set_maxBusinessOrderSlots(const int32_t val) {
  this->maxBusinessOrderSlots = val;
}

void Rarity::__set_slotPrices(const std::vector<int32_t> & val) {
  this->slotPrices = val;
}

void Rarity::__set_gearGachaCardFrontImage(const std::string& val) {
  this->gearGachaCardFrontImage = val;
__isset.gearGachaCardFrontImage = true;
}

void Rarity::__set_gearGachaCardBackImage(const std::string& val) {
  this->gearGachaCardBackImage = val;
__isset.gearGachaCardBackImage = true;
}

void Rarity::__set_businessGachaCardFrontImage(const std::string& val) {
  this->businessGachaCardFrontImage = val;
__isset.businessGachaCardFrontImage = true;
}

void Rarity::__set_businessGachaCardBackImage(const std::string& val) {
  this->businessGachaCardBackImage = val;
__isset.businessGachaCardBackImage = true;
}

void Rarity::__set_smallCardBackground(const AssetPath& val) {
  this->smallCardBackground = val;
__isset.smallCardBackground = true;
}

void Rarity::__set_gachaRibbon(const AssetPath& val) {
  this->gachaRibbon = val;
__isset.gachaRibbon = true;
}

void Rarity::__set_gachaCounter(const std::string& val) {
  this->gachaCounter = val;
__isset.gachaCounter = true;
}

void Rarity::__set_starBackground(const AssetPath& val) {
  this->starBackground = val;
__isset.starBackground = true;
}

void Rarity::__set_detailGachaGearCardImage(const AssetPath& val) {
  this->detailGachaGearCardImage = val;
__isset.detailGachaGearCardImage = true;
}

void Rarity::__set_detailGachaBusinessCardImage(const AssetPath& val) {
  this->detailGachaBusinessCardImage = val;
__isset.detailGachaBusinessCardImage = true;
}

void Rarity::__set_buildMenuCardImageLocked(const AssetPath& val) {
  this->buildMenuCardImageLocked = val;
__isset.buildMenuCardImageLocked = true;
}

void Rarity::__set_buildMenuCardImageUnlocked(const AssetPath& val) {
  this->buildMenuCardImageUnlocked = val;
__isset.buildMenuCardImageUnlocked = true;
}

void Rarity::__set_buildMenuCardImageFree(const AssetPath& val) {
  this->buildMenuCardImageFree = val;
__isset.buildMenuCardImageFree = true;
}

void Rarity::__set_buildMenuCardEffectColor(const std::string& val) {
  this->buildMenuCardEffectColor = val;
__isset.buildMenuCardEffectColor = true;
}

void Rarity::__set_buildMenuTextColor(const std::string& val) {
  this->buildMenuTextColor = val;
__isset.buildMenuTextColor = true;
}

void Rarity::__set_buildMenuNpcBgColor(const std::string& val) {
  this->buildMenuNpcBgColor = val;
__isset.buildMenuNpcBgColor = true;
}

void Rarity::__set_buildMenuBusinessCardImage(const AssetPath& val) {
  this->buildMenuBusinessCardImage = val;
__isset.buildMenuBusinessCardImage = true;
}

void Rarity::__set_buildMenuChefhatEmptyImage(const AssetPath& val) {
  this->buildMenuChefhatEmptyImage = val;
__isset.buildMenuChefhatEmptyImage = true;
}

void Rarity::__set_gachaChefhatEmptyImage(const AssetPath& val) {
  this->gachaChefhatEmptyImage = val;
__isset.gachaChefhatEmptyImage = true;
}

void Rarity::__set_businessOrderMenuChefhatEmptyImage(const AssetPath& val) {
  this->businessOrderMenuChefhatEmptyImage = val;
__isset.businessOrderMenuChefhatEmptyImage = true;
}

void Rarity::__set_detailGachaDecoCardImage(const AssetPath& val) {
  this->detailGachaDecoCardImage = val;
__isset.detailGachaDecoCardImage = true;
}
std::ostream& operator<<(std::ostream& out, const Rarity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Rarity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rarityId = false;
  bool isset_weight = false;
  bool isset_cardImage = false;
  bool isset_minBusinessOrderSlots = false;
  bool isset_maxBusinessOrderSlots = false;
  bool isset_slotPrices = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rarityId);
          isset_rarityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          isset_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cardImage);
          isset_cardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minBusinessOrderSlots);
          isset_minBusinessOrderSlots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxBusinessOrderSlots);
          isset_maxBusinessOrderSlots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->slotPrices.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _etype49;
            xfer += iprot->readListBegin(_etype49, _size46);
            this->slotPrices.resize(_size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              xfer += iprot->readI32(this->slotPrices[_i50]);
            }
            xfer += iprot->readListEnd();
          }
          isset_slotPrices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gearGachaCardFrontImage);
          this->__isset.gearGachaCardFrontImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gearGachaCardBackImage);
          this->__isset.gearGachaCardBackImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessGachaCardFrontImage);
          this->__isset.businessGachaCardFrontImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessGachaCardBackImage);
          this->__isset.businessGachaCardBackImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->smallCardBackground);
          this->__isset.smallCardBackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaRibbon);
          this->__isset.gachaRibbon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaCounter);
          this->__isset.gachaCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->starBackground);
          this->__isset.starBackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailGachaGearCardImage);
          this->__isset.detailGachaGearCardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailGachaBusinessCardImage);
          this->__isset.detailGachaBusinessCardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildMenuCardImageLocked);
          this->__isset.buildMenuCardImageLocked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildMenuCardImageUnlocked);
          this->__isset.buildMenuCardImageUnlocked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildMenuCardImageFree);
          this->__isset.buildMenuCardImageFree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildMenuCardEffectColor);
          this->__isset.buildMenuCardEffectColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildMenuTextColor);
          this->__isset.buildMenuTextColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildMenuNpcBgColor);
          this->__isset.buildMenuNpcBgColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildMenuBusinessCardImage);
          this->__isset.buildMenuBusinessCardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildMenuChefhatEmptyImage);
          this->__isset.buildMenuChefhatEmptyImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaChefhatEmptyImage);
          this->__isset.gachaChefhatEmptyImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessOrderMenuChefhatEmptyImage);
          this->__isset.businessOrderMenuChefhatEmptyImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailGachaDecoCardImage);
          this->__isset.detailGachaDecoCardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rarityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_weight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cardImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minBusinessOrderSlots)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxBusinessOrderSlots)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_slotPrices)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Rarity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rarity");

  xfer += oprot->writeFieldBegin("rarityId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->rarityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->weight);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("cardImage", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->cardImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minBusinessOrderSlots", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->minBusinessOrderSlots);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxBusinessOrderSlots", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->maxBusinessOrderSlots);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slotPrices", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->slotPrices.size()));
    std::vector<int32_t> ::const_iterator _iter51;
    for (_iter51 = this->slotPrices.begin(); _iter51 != this->slotPrices.end(); ++_iter51)
    {
      xfer += oprot->writeI32((*_iter51));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gearGachaCardFrontImage) {
    xfer += oprot->writeFieldBegin("gearGachaCardFrontImage", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->gearGachaCardFrontImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gearGachaCardBackImage) {
    xfer += oprot->writeFieldBegin("gearGachaCardBackImage", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->gearGachaCardBackImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessGachaCardFrontImage) {
    xfer += oprot->writeFieldBegin("businessGachaCardFrontImage", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->businessGachaCardFrontImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessGachaCardBackImage) {
    xfer += oprot->writeFieldBegin("businessGachaCardBackImage", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->businessGachaCardBackImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.smallCardBackground) {
    xfer += oprot->writeFieldBegin("smallCardBackground", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->smallCardBackground);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaRibbon) {
    xfer += oprot->writeFieldBegin("gachaRibbon", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->gachaRibbon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaCounter) {
    xfer += oprot->writeFieldBegin("gachaCounter", ::apache::thrift::protocol::T_STRING, 26);
    xfer += oprot->writeString(this->gachaCounter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.starBackground) {
    xfer += oprot->writeFieldBegin("starBackground", ::apache::thrift::protocol::T_STRING, 27);
    xfer += oprot->writeString(this->starBackground);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailGachaGearCardImage) {
    xfer += oprot->writeFieldBegin("detailGachaGearCardImage", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->detailGachaGearCardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailGachaBusinessCardImage) {
    xfer += oprot->writeFieldBegin("detailGachaBusinessCardImage", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->detailGachaBusinessCardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuCardImageLocked) {
    xfer += oprot->writeFieldBegin("buildMenuCardImageLocked", ::apache::thrift::protocol::T_STRING, 32);
    xfer += oprot->writeString(this->buildMenuCardImageLocked);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuCardImageUnlocked) {
    xfer += oprot->writeFieldBegin("buildMenuCardImageUnlocked", ::apache::thrift::protocol::T_STRING, 33);
    xfer += oprot->writeString(this->buildMenuCardImageUnlocked);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuCardImageFree) {
    xfer += oprot->writeFieldBegin("buildMenuCardImageFree", ::apache::thrift::protocol::T_STRING, 34);
    xfer += oprot->writeString(this->buildMenuCardImageFree);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuCardEffectColor) {
    xfer += oprot->writeFieldBegin("buildMenuCardEffectColor", ::apache::thrift::protocol::T_STRING, 35);
    xfer += oprot->writeString(this->buildMenuCardEffectColor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuTextColor) {
    xfer += oprot->writeFieldBegin("buildMenuTextColor", ::apache::thrift::protocol::T_STRING, 36);
    xfer += oprot->writeString(this->buildMenuTextColor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuNpcBgColor) {
    xfer += oprot->writeFieldBegin("buildMenuNpcBgColor", ::apache::thrift::protocol::T_STRING, 37);
    xfer += oprot->writeString(this->buildMenuNpcBgColor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuBusinessCardImage) {
    xfer += oprot->writeFieldBegin("buildMenuBusinessCardImage", ::apache::thrift::protocol::T_STRING, 38);
    xfer += oprot->writeString(this->buildMenuBusinessCardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuChefhatEmptyImage) {
    xfer += oprot->writeFieldBegin("buildMenuChefhatEmptyImage", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->buildMenuChefhatEmptyImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaChefhatEmptyImage) {
    xfer += oprot->writeFieldBegin("gachaChefhatEmptyImage", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->gachaChefhatEmptyImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessOrderMenuChefhatEmptyImage) {
    xfer += oprot->writeFieldBegin("businessOrderMenuChefhatEmptyImage", ::apache::thrift::protocol::T_STRING, 42);
    xfer += oprot->writeString(this->businessOrderMenuChefhatEmptyImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailGachaDecoCardImage) {
    xfer += oprot->writeFieldBegin("detailGachaDecoCardImage", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->detailGachaDecoCardImage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rarity &a, Rarity &b) {
  using ::std::swap;
  swap(a.rarityId, b.rarityId);
  swap(a.weight, b.weight);
  swap(a.newDisplay, b.newDisplay);
  swap(a.cardImage, b.cardImage);
  swap(a.minBusinessOrderSlots, b.minBusinessOrderSlots);
  swap(a.maxBusinessOrderSlots, b.maxBusinessOrderSlots);
  swap(a.slotPrices, b.slotPrices);
  swap(a.gearGachaCardFrontImage, b.gearGachaCardFrontImage);
  swap(a.gearGachaCardBackImage, b.gearGachaCardBackImage);
  swap(a.businessGachaCardFrontImage, b.businessGachaCardFrontImage);
  swap(a.businessGachaCardBackImage, b.businessGachaCardBackImage);
  swap(a.smallCardBackground, b.smallCardBackground);
  swap(a.gachaRibbon, b.gachaRibbon);
  swap(a.gachaCounter, b.gachaCounter);
  swap(a.starBackground, b.starBackground);
  swap(a.detailGachaGearCardImage, b.detailGachaGearCardImage);
  swap(a.detailGachaBusinessCardImage, b.detailGachaBusinessCardImage);
  swap(a.buildMenuCardImageLocked, b.buildMenuCardImageLocked);
  swap(a.buildMenuCardImageUnlocked, b.buildMenuCardImageUnlocked);
  swap(a.buildMenuCardImageFree, b.buildMenuCardImageFree);
  swap(a.buildMenuCardEffectColor, b.buildMenuCardEffectColor);
  swap(a.buildMenuTextColor, b.buildMenuTextColor);
  swap(a.buildMenuNpcBgColor, b.buildMenuNpcBgColor);
  swap(a.buildMenuBusinessCardImage, b.buildMenuBusinessCardImage);
  swap(a.buildMenuChefhatEmptyImage, b.buildMenuChefhatEmptyImage);
  swap(a.gachaChefhatEmptyImage, b.gachaChefhatEmptyImage);
  swap(a.businessOrderMenuChefhatEmptyImage, b.businessOrderMenuChefhatEmptyImage);
  swap(a.detailGachaDecoCardImage, b.detailGachaDecoCardImage);
  swap(a.__isset, b.__isset);
}

Rarity::Rarity(const Rarity& other52) {
  rarityId = other52.rarityId;
  weight = other52.weight;
  newDisplay = other52.newDisplay;
  cardImage = other52.cardImage;
  minBusinessOrderSlots = other52.minBusinessOrderSlots;
  maxBusinessOrderSlots = other52.maxBusinessOrderSlots;
  slotPrices = other52.slotPrices;
  gearGachaCardFrontImage = other52.gearGachaCardFrontImage;
  gearGachaCardBackImage = other52.gearGachaCardBackImage;
  businessGachaCardFrontImage = other52.businessGachaCardFrontImage;
  businessGachaCardBackImage = other52.businessGachaCardBackImage;
  smallCardBackground = other52.smallCardBackground;
  gachaRibbon = other52.gachaRibbon;
  gachaCounter = other52.gachaCounter;
  starBackground = other52.starBackground;
  detailGachaGearCardImage = other52.detailGachaGearCardImage;
  detailGachaBusinessCardImage = other52.detailGachaBusinessCardImage;
  buildMenuCardImageLocked = other52.buildMenuCardImageLocked;
  buildMenuCardImageUnlocked = other52.buildMenuCardImageUnlocked;
  buildMenuCardImageFree = other52.buildMenuCardImageFree;
  buildMenuCardEffectColor = other52.buildMenuCardEffectColor;
  buildMenuTextColor = other52.buildMenuTextColor;
  buildMenuNpcBgColor = other52.buildMenuNpcBgColor;
  buildMenuBusinessCardImage = other52.buildMenuBusinessCardImage;
  buildMenuChefhatEmptyImage = other52.buildMenuChefhatEmptyImage;
  gachaChefhatEmptyImage = other52.gachaChefhatEmptyImage;
  businessOrderMenuChefhatEmptyImage = other52.businessOrderMenuChefhatEmptyImage;
  detailGachaDecoCardImage = other52.detailGachaDecoCardImage;
  __isset = other52.__isset;
}
Rarity& Rarity::operator=(const Rarity& other53) {
  rarityId = other53.rarityId;
  weight = other53.weight;
  newDisplay = other53.newDisplay;
  cardImage = other53.cardImage;
  minBusinessOrderSlots = other53.minBusinessOrderSlots;
  maxBusinessOrderSlots = other53.maxBusinessOrderSlots;
  slotPrices = other53.slotPrices;
  gearGachaCardFrontImage = other53.gearGachaCardFrontImage;
  gearGachaCardBackImage = other53.gearGachaCardBackImage;
  businessGachaCardFrontImage = other53.businessGachaCardFrontImage;
  businessGachaCardBackImage = other53.businessGachaCardBackImage;
  smallCardBackground = other53.smallCardBackground;
  gachaRibbon = other53.gachaRibbon;
  gachaCounter = other53.gachaCounter;
  starBackground = other53.starBackground;
  detailGachaGearCardImage = other53.detailGachaGearCardImage;
  detailGachaBusinessCardImage = other53.detailGachaBusinessCardImage;
  buildMenuCardImageLocked = other53.buildMenuCardImageLocked;
  buildMenuCardImageUnlocked = other53.buildMenuCardImageUnlocked;
  buildMenuCardImageFree = other53.buildMenuCardImageFree;
  buildMenuCardEffectColor = other53.buildMenuCardEffectColor;
  buildMenuTextColor = other53.buildMenuTextColor;
  buildMenuNpcBgColor = other53.buildMenuNpcBgColor;
  buildMenuBusinessCardImage = other53.buildMenuBusinessCardImage;
  buildMenuChefhatEmptyImage = other53.buildMenuChefhatEmptyImage;
  gachaChefhatEmptyImage = other53.gachaChefhatEmptyImage;
  businessOrderMenuChefhatEmptyImage = other53.businessOrderMenuChefhatEmptyImage;
  detailGachaDecoCardImage = other53.detailGachaDecoCardImage;
  __isset = other53.__isset;
  return *this;
}
void Rarity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rarity(";
  out << "rarityId=" << to_string(rarityId);
  out << ", " << "weight=" << to_string(weight);
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "cardImage=" << to_string(cardImage);
  out << ", " << "minBusinessOrderSlots=" << to_string(minBusinessOrderSlots);
  out << ", " << "maxBusinessOrderSlots=" << to_string(maxBusinessOrderSlots);
  out << ", " << "slotPrices=" << to_string(slotPrices);
  out << ", " << "gearGachaCardFrontImage="; (__isset.gearGachaCardFrontImage ? (out << to_string(gearGachaCardFrontImage)) : (out << "<null>"));
  out << ", " << "gearGachaCardBackImage="; (__isset.gearGachaCardBackImage ? (out << to_string(gearGachaCardBackImage)) : (out << "<null>"));
  out << ", " << "businessGachaCardFrontImage="; (__isset.businessGachaCardFrontImage ? (out << to_string(businessGachaCardFrontImage)) : (out << "<null>"));
  out << ", " << "businessGachaCardBackImage="; (__isset.businessGachaCardBackImage ? (out << to_string(businessGachaCardBackImage)) : (out << "<null>"));
  out << ", " << "smallCardBackground="; (__isset.smallCardBackground ? (out << to_string(smallCardBackground)) : (out << "<null>"));
  out << ", " << "gachaRibbon="; (__isset.gachaRibbon ? (out << to_string(gachaRibbon)) : (out << "<null>"));
  out << ", " << "gachaCounter="; (__isset.gachaCounter ? (out << to_string(gachaCounter)) : (out << "<null>"));
  out << ", " << "starBackground="; (__isset.starBackground ? (out << to_string(starBackground)) : (out << "<null>"));
  out << ", " << "detailGachaGearCardImage="; (__isset.detailGachaGearCardImage ? (out << to_string(detailGachaGearCardImage)) : (out << "<null>"));
  out << ", " << "detailGachaBusinessCardImage="; (__isset.detailGachaBusinessCardImage ? (out << to_string(detailGachaBusinessCardImage)) : (out << "<null>"));
  out << ", " << "buildMenuCardImageLocked="; (__isset.buildMenuCardImageLocked ? (out << to_string(buildMenuCardImageLocked)) : (out << "<null>"));
  out << ", " << "buildMenuCardImageUnlocked="; (__isset.buildMenuCardImageUnlocked ? (out << to_string(buildMenuCardImageUnlocked)) : (out << "<null>"));
  out << ", " << "buildMenuCardImageFree="; (__isset.buildMenuCardImageFree ? (out << to_string(buildMenuCardImageFree)) : (out << "<null>"));
  out << ", " << "buildMenuCardEffectColor="; (__isset.buildMenuCardEffectColor ? (out << to_string(buildMenuCardEffectColor)) : (out << "<null>"));
  out << ", " << "buildMenuTextColor="; (__isset.buildMenuTextColor ? (out << to_string(buildMenuTextColor)) : (out << "<null>"));
  out << ", " << "buildMenuNpcBgColor="; (__isset.buildMenuNpcBgColor ? (out << to_string(buildMenuNpcBgColor)) : (out << "<null>"));
  out << ", " << "buildMenuBusinessCardImage="; (__isset.buildMenuBusinessCardImage ? (out << to_string(buildMenuBusinessCardImage)) : (out << "<null>"));
  out << ", " << "buildMenuChefhatEmptyImage="; (__isset.buildMenuChefhatEmptyImage ? (out << to_string(buildMenuChefhatEmptyImage)) : (out << "<null>"));
  out << ", " << "gachaChefhatEmptyImage="; (__isset.gachaChefhatEmptyImage ? (out << to_string(gachaChefhatEmptyImage)) : (out << "<null>"));
  out << ", " << "businessOrderMenuChefhatEmptyImage="; (__isset.businessOrderMenuChefhatEmptyImage ? (out << to_string(businessOrderMenuChefhatEmptyImage)) : (out << "<null>"));
  out << ", " << "detailGachaDecoCardImage="; (__isset.detailGachaDecoCardImage ? (out << to_string(detailGachaDecoCardImage)) : (out << "<null>"));
  out << ")";
}


Building::~Building() throw() {
}


void Building::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
}

void Building::__set_buildingType(const BuildingType::type val) {
  this->buildingType = val;
}

void Building::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void Building::__set_tileHeight(const int32_t val) {
  this->tileHeight = val;
}

void Building::__set_inventoryTabId(const InventoryTabID& val) {
  this->inventoryTabId = val;
__isset.inventoryTabId = true;
}

void Building::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void Building::__set_newDisplayPlural(const LocalizedString& val) {
  this->newDisplayPlural = val;
__isset.newDisplayPlural = true;
}

void Building::__set_sizeX(const int32_t val) {
  this->sizeX = val;
}

void Building::__set_sizeY(const int32_t val) {
  this->sizeY = val;
}

void Building::__set_canRotate(const bool val) {
  this->canRotate = val;
__isset.canRotate = true;
}

void Building::__set_rarityId(const RarityID val) {
  this->rarityId = val;
}

void Building::__set_evolutionId(const EvolutionID val) {
  this->evolutionId = val;
}

void Building::__set_rankMin(const int32_t val) {
  this->rankMin = val;
__isset.rankMin = true;
}

void Building::__set_nextEvolveBuildingId(const BuildingID& val) {
  this->nextEvolveBuildingId = val;
__isset.nextEvolveBuildingId = true;
}

void Building::__set_baseEvolveBuildingId(const BuildingID& val) {
  this->baseEvolveBuildingId = val;
__isset.baseEvolveBuildingId = true;
}

void Building::__set_sellPrice(const int32_t val) {
  this->sellPrice = val;
}

void Building::__set_sellCurrencyId(const CurrencyID& val) {
  this->sellCurrencyId = val;
}

void Building::__set_sellPrices(const std::vector<int32_t> & val) {
  this->sellPrices = val;
__isset.sellPrices = true;
}

void Building::__set_sellCurrencyIds(const std::vector<CurrencyID> & val) {
  this->sellCurrencyIds = val;
__isset.sellCurrencyIds = true;
}

void Building::__set_costCurrencyId(const CurrencyID& val) {
  this->costCurrencyId = val;
}

void Building::__set_cost(const int32_t val) {
  this->cost = val;
}

void Building::__set_costGrowthFactor(const double val) {
  this->costGrowthFactor = val;
}

void Building::__set_baseCost(const int32_t val) {
  this->baseCost = val;
}

void Building::__set_cannotMove(const bool val) {
  this->cannotMove = val;
__isset.cannotMove = true;
}

void Building::__set_newEvolveName(const LocalizedString& val) {
  this->newEvolveName = val;
__isset.newEvolveName = true;
}

void Building::__set_fullDisplayName(const LocalizedString& val) {
  this->fullDisplayName = val;
__isset.fullDisplayName = true;
}

void Building::__set_realHeight(const int32_t val) {
  this->realHeight = val;
__isset.realHeight = true;
}

void Building::__set_luaInterface(const std::string& val) {
  this->luaInterface = val;
__isset.luaInterface = true;
}

void Building::__set_marketType(const MarketType::type val) {
  this->marketType = val;
__isset.marketType = true;
}

void Building::__set_showAsGachaOfferIndex(const int32_t val) {
  this->showAsGachaOfferIndex = val;
__isset.showAsGachaOfferIndex = true;
}

void Building::__set_placedScore(const int32_t val) {
  this->placedScore = val;
__isset.placedScore = true;
}

void Building::__set_fountain(const bool val) {
  this->fountain = val;
__isset.fountain = true;
}

void Building::__set_populationPlacedScore(const int32_t val) {
  this->populationPlacedScore = val;
__isset.populationPlacedScore = true;
}

void Building::__set_hiddenFromBuildMenu(const bool val) {
  this->hiddenFromBuildMenu = val;
}

void Building::__set_onOpenAction(const MessageButtonAction::type val) {
  this->onOpenAction = val;
__isset.onOpenAction = true;
}

void Building::__set_onOpenActionParameter(const std::vector<std::string> & val) {
  this->onOpenActionParameter = val;
__isset.onOpenActionParameter = true;
}
std::ostream& operator<<(std::ostream& out, const Building& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Building::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_buildingId = false;
  bool isset_buildingType = false;
  bool isset_tileHeight = false;
  bool isset_sizeX = false;
  bool isset_sizeY = false;
  bool isset_rarityId = false;
  bool isset_evolutionId = false;
  bool isset_sellPrice = false;
  bool isset_sellCurrencyId = false;
  bool isset_costCurrencyId = false;
  bool isset_cost = false;
  bool isset_costGrowthFactor = false;
  bool isset_baseCost = false;
  bool isset_hiddenFromBuildMenu = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          isset_buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast54;
          xfer += iprot->readI32(ecast54);
          this->buildingType = (BuildingType::type)ecast54;
          isset_buildingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tileHeight);
          isset_tileHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inventoryTabId);
          this->__isset.inventoryTabId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplayPlural.read(iprot);
          this->__isset.newDisplayPlural = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sizeX);
          isset_sizeX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sizeY);
          isset_sizeY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->canRotate);
          this->__isset.canRotate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rarityId);
          isset_rarityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->evolutionId);
          isset_evolutionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rankMin);
          this->__isset.rankMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nextEvolveBuildingId);
          this->__isset.nextEvolveBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->baseEvolveBuildingId);
          this->__isset.baseEvolveBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sellPrice);
          isset_sellPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sellCurrencyId);
          isset_sellCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sellPrices.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _etype58;
            xfer += iprot->readListBegin(_etype58, _size55);
            this->sellPrices.resize(_size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              xfer += iprot->readI32(this->sellPrices[_i59]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sellPrices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sellCurrencyIds.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->sellCurrencyIds.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readString(this->sellCurrencyIds[_i64]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sellCurrencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->costCurrencyId);
          isset_costCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cost);
          isset_cost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->costGrowthFactor);
          isset_costGrowthFactor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baseCost);
          isset_baseCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->cannotMove);
          this->__isset.cannotMove = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newEvolveName.read(iprot);
          this->__isset.newEvolveName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fullDisplayName.read(iprot);
          this->__isset.fullDisplayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->realHeight);
          this->__isset.realHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->luaInterface);
          this->__isset.luaInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast65;
          xfer += iprot->readI32(ecast65);
          this->marketType = (MarketType::type)ecast65;
          this->__isset.marketType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showAsGachaOfferIndex);
          this->__isset.showAsGachaOfferIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 111:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->placedScore);
          this->__isset.placedScore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 113:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fountain);
          this->__isset.fountain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 120:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->populationPlacedScore);
          this->__isset.populationPlacedScore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 121:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hiddenFromBuildMenu);
          isset_hiddenFromBuildMenu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 122:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast66;
          xfer += iprot->readI32(ecast66);
          this->onOpenAction = (MessageButtonAction::type)ecast66;
          this->__isset.onOpenAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 123:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->onOpenActionParameter.clear();
            uint32_t _size67;
            ::apache::thrift::protocol::TType _etype70;
            xfer += iprot->readListBegin(_etype70, _size67);
            this->onOpenActionParameter.resize(_size67);
            uint32_t _i71;
            for (_i71 = 0; _i71 < _size67; ++_i71)
            {
              xfer += iprot->readString(this->onOpenActionParameter[_i71]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.onOpenActionParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_buildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tileHeight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sizeX)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sizeY)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rarityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_evolutionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sellPrice)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sellCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_costCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_costGrowthFactor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_baseCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hiddenFromBuildMenu)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Building::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Building");

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingType", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->buildingType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("tileHeight", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->tileHeight);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.inventoryTabId) {
    xfer += oprot->writeFieldBegin("inventoryTabId", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->inventoryTabId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplayPlural) {
    xfer += oprot->writeFieldBegin("newDisplayPlural", ::apache::thrift::protocol::T_STRUCT, 19);
    xfer += this->newDisplayPlural.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("sizeX", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->sizeX);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.canRotate) {
    xfer += oprot->writeFieldBegin("canRotate", ::apache::thrift::protocol::T_BOOL, 21);
    xfer += oprot->writeBool(this->canRotate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("rarityId", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->rarityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sizeY", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->sizeY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("evolutionId", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->evolutionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rankMin) {
    xfer += oprot->writeFieldBegin("rankMin", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32(this->rankMin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextEvolveBuildingId) {
    xfer += oprot->writeFieldBegin("nextEvolveBuildingId", ::apache::thrift::protocol::T_STRING, 39);
    xfer += oprot->writeString(this->nextEvolveBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.baseEvolveBuildingId) {
    xfer += oprot->writeFieldBegin("baseEvolveBuildingId", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->baseEvolveBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("sellPrice", ::apache::thrift::protocol::T_I32, 41);
  xfer += oprot->writeI32(this->sellPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sellCurrencyId", ::apache::thrift::protocol::T_STRING, 42);
  xfer += oprot->writeString(this->sellCurrencyId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sellPrices) {
    xfer += oprot->writeFieldBegin("sellPrices", ::apache::thrift::protocol::T_LIST, 45);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->sellPrices.size()));
      std::vector<int32_t> ::const_iterator _iter72;
      for (_iter72 = this->sellPrices.begin(); _iter72 != this->sellPrices.end(); ++_iter72)
      {
        xfer += oprot->writeI32((*_iter72));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sellCurrencyIds) {
    xfer += oprot->writeFieldBegin("sellCurrencyIds", ::apache::thrift::protocol::T_LIST, 46);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->sellCurrencyIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter73;
      for (_iter73 = this->sellCurrencyIds.begin(); _iter73 != this->sellCurrencyIds.end(); ++_iter73)
      {
        xfer += oprot->writeString((*_iter73));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("costCurrencyId", ::apache::thrift::protocol::T_STRING, 53);
  xfer += oprot->writeString(this->costCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cost", ::apache::thrift::protocol::T_I32, 54);
  xfer += oprot->writeI32(this->cost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("costGrowthFactor", ::apache::thrift::protocol::T_DOUBLE, 55);
  xfer += oprot->writeDouble(this->costGrowthFactor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baseCost", ::apache::thrift::protocol::T_I32, 56);
  xfer += oprot->writeI32(this->baseCost);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.cannotMove) {
    xfer += oprot->writeFieldBegin("cannotMove", ::apache::thrift::protocol::T_BOOL, 60);
    xfer += oprot->writeBool(this->cannotMove);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newEvolveName) {
    xfer += oprot->writeFieldBegin("newEvolveName", ::apache::thrift::protocol::T_STRUCT, 71);
    xfer += this->newEvolveName.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fullDisplayName) {
    xfer += oprot->writeFieldBegin("fullDisplayName", ::apache::thrift::protocol::T_STRUCT, 72);
    xfer += this->fullDisplayName.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.realHeight) {
    xfer += oprot->writeFieldBegin("realHeight", ::apache::thrift::protocol::T_I32, 80);
    xfer += oprot->writeI32(this->realHeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.luaInterface) {
    xfer += oprot->writeFieldBegin("luaInterface", ::apache::thrift::protocol::T_STRING, 100);
    xfer += oprot->writeString(this->luaInterface);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.marketType) {
    xfer += oprot->writeFieldBegin("marketType", ::apache::thrift::protocol::T_I32, 101);
    xfer += oprot->writeI32((int32_t)this->marketType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showAsGachaOfferIndex) {
    xfer += oprot->writeFieldBegin("showAsGachaOfferIndex", ::apache::thrift::protocol::T_I32, 110);
    xfer += oprot->writeI32(this->showAsGachaOfferIndex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.placedScore) {
    xfer += oprot->writeFieldBegin("placedScore", ::apache::thrift::protocol::T_I32, 111);
    xfer += oprot->writeI32(this->placedScore);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fountain) {
    xfer += oprot->writeFieldBegin("fountain", ::apache::thrift::protocol::T_BOOL, 113);
    xfer += oprot->writeBool(this->fountain);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.populationPlacedScore) {
    xfer += oprot->writeFieldBegin("populationPlacedScore", ::apache::thrift::protocol::T_I32, 120);
    xfer += oprot->writeI32(this->populationPlacedScore);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("hiddenFromBuildMenu", ::apache::thrift::protocol::T_BOOL, 121);
  xfer += oprot->writeBool(this->hiddenFromBuildMenu);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.onOpenAction) {
    xfer += oprot->writeFieldBegin("onOpenAction", ::apache::thrift::protocol::T_I32, 122);
    xfer += oprot->writeI32((int32_t)this->onOpenAction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.onOpenActionParameter) {
    xfer += oprot->writeFieldBegin("onOpenActionParameter", ::apache::thrift::protocol::T_LIST, 123);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->onOpenActionParameter.size()));
      std::vector<std::string> ::const_iterator _iter74;
      for (_iter74 = this->onOpenActionParameter.begin(); _iter74 != this->onOpenActionParameter.end(); ++_iter74)
      {
        xfer += oprot->writeString((*_iter74));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Building &a, Building &b) {
  using ::std::swap;
  swap(a.buildingId, b.buildingId);
  swap(a.buildingType, b.buildingType);
  swap(a.bundleId, b.bundleId);
  swap(a.tileHeight, b.tileHeight);
  swap(a.inventoryTabId, b.inventoryTabId);
  swap(a.newDisplay, b.newDisplay);
  swap(a.newDisplayPlural, b.newDisplayPlural);
  swap(a.sizeX, b.sizeX);
  swap(a.sizeY, b.sizeY);
  swap(a.canRotate, b.canRotate);
  swap(a.rarityId, b.rarityId);
  swap(a.evolutionId, b.evolutionId);
  swap(a.rankMin, b.rankMin);
  swap(a.nextEvolveBuildingId, b.nextEvolveBuildingId);
  swap(a.baseEvolveBuildingId, b.baseEvolveBuildingId);
  swap(a.sellPrice, b.sellPrice);
  swap(a.sellCurrencyId, b.sellCurrencyId);
  swap(a.sellPrices, b.sellPrices);
  swap(a.sellCurrencyIds, b.sellCurrencyIds);
  swap(a.costCurrencyId, b.costCurrencyId);
  swap(a.cost, b.cost);
  swap(a.costGrowthFactor, b.costGrowthFactor);
  swap(a.baseCost, b.baseCost);
  swap(a.cannotMove, b.cannotMove);
  swap(a.newEvolveName, b.newEvolveName);
  swap(a.fullDisplayName, b.fullDisplayName);
  swap(a.realHeight, b.realHeight);
  swap(a.luaInterface, b.luaInterface);
  swap(a.marketType, b.marketType);
  swap(a.showAsGachaOfferIndex, b.showAsGachaOfferIndex);
  swap(a.placedScore, b.placedScore);
  swap(a.fountain, b.fountain);
  swap(a.populationPlacedScore, b.populationPlacedScore);
  swap(a.hiddenFromBuildMenu, b.hiddenFromBuildMenu);
  swap(a.onOpenAction, b.onOpenAction);
  swap(a.onOpenActionParameter, b.onOpenActionParameter);
  swap(a.__isset, b.__isset);
}

Building::Building(const Building& other75) {
  buildingId = other75.buildingId;
  buildingType = other75.buildingType;
  bundleId = other75.bundleId;
  tileHeight = other75.tileHeight;
  inventoryTabId = other75.inventoryTabId;
  newDisplay = other75.newDisplay;
  newDisplayPlural = other75.newDisplayPlural;
  sizeX = other75.sizeX;
  sizeY = other75.sizeY;
  canRotate = other75.canRotate;
  rarityId = other75.rarityId;
  evolutionId = other75.evolutionId;
  rankMin = other75.rankMin;
  nextEvolveBuildingId = other75.nextEvolveBuildingId;
  baseEvolveBuildingId = other75.baseEvolveBuildingId;
  sellPrice = other75.sellPrice;
  sellCurrencyId = other75.sellCurrencyId;
  sellPrices = other75.sellPrices;
  sellCurrencyIds = other75.sellCurrencyIds;
  costCurrencyId = other75.costCurrencyId;
  cost = other75.cost;
  costGrowthFactor = other75.costGrowthFactor;
  baseCost = other75.baseCost;
  cannotMove = other75.cannotMove;
  newEvolveName = other75.newEvolveName;
  fullDisplayName = other75.fullDisplayName;
  realHeight = other75.realHeight;
  luaInterface = other75.luaInterface;
  marketType = other75.marketType;
  showAsGachaOfferIndex = other75.showAsGachaOfferIndex;
  placedScore = other75.placedScore;
  fountain = other75.fountain;
  populationPlacedScore = other75.populationPlacedScore;
  hiddenFromBuildMenu = other75.hiddenFromBuildMenu;
  onOpenAction = other75.onOpenAction;
  onOpenActionParameter = other75.onOpenActionParameter;
  __isset = other75.__isset;
}
Building& Building::operator=(const Building& other76) {
  buildingId = other76.buildingId;
  buildingType = other76.buildingType;
  bundleId = other76.bundleId;
  tileHeight = other76.tileHeight;
  inventoryTabId = other76.inventoryTabId;
  newDisplay = other76.newDisplay;
  newDisplayPlural = other76.newDisplayPlural;
  sizeX = other76.sizeX;
  sizeY = other76.sizeY;
  canRotate = other76.canRotate;
  rarityId = other76.rarityId;
  evolutionId = other76.evolutionId;
  rankMin = other76.rankMin;
  nextEvolveBuildingId = other76.nextEvolveBuildingId;
  baseEvolveBuildingId = other76.baseEvolveBuildingId;
  sellPrice = other76.sellPrice;
  sellCurrencyId = other76.sellCurrencyId;
  sellPrices = other76.sellPrices;
  sellCurrencyIds = other76.sellCurrencyIds;
  costCurrencyId = other76.costCurrencyId;
  cost = other76.cost;
  costGrowthFactor = other76.costGrowthFactor;
  baseCost = other76.baseCost;
  cannotMove = other76.cannotMove;
  newEvolveName = other76.newEvolveName;
  fullDisplayName = other76.fullDisplayName;
  realHeight = other76.realHeight;
  luaInterface = other76.luaInterface;
  marketType = other76.marketType;
  showAsGachaOfferIndex = other76.showAsGachaOfferIndex;
  placedScore = other76.placedScore;
  fountain = other76.fountain;
  populationPlacedScore = other76.populationPlacedScore;
  hiddenFromBuildMenu = other76.hiddenFromBuildMenu;
  onOpenAction = other76.onOpenAction;
  onOpenActionParameter = other76.onOpenActionParameter;
  __isset = other76.__isset;
  return *this;
}
void Building::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Building(";
  out << "buildingId=" << to_string(buildingId);
  out << ", " << "buildingType=" << to_string(buildingType);
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "tileHeight=" << to_string(tileHeight);
  out << ", " << "inventoryTabId="; (__isset.inventoryTabId ? (out << to_string(inventoryTabId)) : (out << "<null>"));
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "newDisplayPlural="; (__isset.newDisplayPlural ? (out << to_string(newDisplayPlural)) : (out << "<null>"));
  out << ", " << "sizeX=" << to_string(sizeX);
  out << ", " << "sizeY=" << to_string(sizeY);
  out << ", " << "canRotate="; (__isset.canRotate ? (out << to_string(canRotate)) : (out << "<null>"));
  out << ", " << "rarityId=" << to_string(rarityId);
  out << ", " << "evolutionId=" << to_string(evolutionId);
  out << ", " << "rankMin="; (__isset.rankMin ? (out << to_string(rankMin)) : (out << "<null>"));
  out << ", " << "nextEvolveBuildingId="; (__isset.nextEvolveBuildingId ? (out << to_string(nextEvolveBuildingId)) : (out << "<null>"));
  out << ", " << "baseEvolveBuildingId="; (__isset.baseEvolveBuildingId ? (out << to_string(baseEvolveBuildingId)) : (out << "<null>"));
  out << ", " << "sellPrice=" << to_string(sellPrice);
  out << ", " << "sellCurrencyId=" << to_string(sellCurrencyId);
  out << ", " << "sellPrices="; (__isset.sellPrices ? (out << to_string(sellPrices)) : (out << "<null>"));
  out << ", " << "sellCurrencyIds="; (__isset.sellCurrencyIds ? (out << to_string(sellCurrencyIds)) : (out << "<null>"));
  out << ", " << "costCurrencyId=" << to_string(costCurrencyId);
  out << ", " << "cost=" << to_string(cost);
  out << ", " << "costGrowthFactor=" << to_string(costGrowthFactor);
  out << ", " << "baseCost=" << to_string(baseCost);
  out << ", " << "cannotMove="; (__isset.cannotMove ? (out << to_string(cannotMove)) : (out << "<null>"));
  out << ", " << "newEvolveName="; (__isset.newEvolveName ? (out << to_string(newEvolveName)) : (out << "<null>"));
  out << ", " << "fullDisplayName="; (__isset.fullDisplayName ? (out << to_string(fullDisplayName)) : (out << "<null>"));
  out << ", " << "realHeight="; (__isset.realHeight ? (out << to_string(realHeight)) : (out << "<null>"));
  out << ", " << "luaInterface="; (__isset.luaInterface ? (out << to_string(luaInterface)) : (out << "<null>"));
  out << ", " << "marketType="; (__isset.marketType ? (out << to_string(marketType)) : (out << "<null>"));
  out << ", " << "showAsGachaOfferIndex="; (__isset.showAsGachaOfferIndex ? (out << to_string(showAsGachaOfferIndex)) : (out << "<null>"));
  out << ", " << "placedScore="; (__isset.placedScore ? (out << to_string(placedScore)) : (out << "<null>"));
  out << ", " << "fountain="; (__isset.fountain ? (out << to_string(fountain)) : (out << "<null>"));
  out << ", " << "populationPlacedScore="; (__isset.populationPlacedScore ? (out << to_string(populationPlacedScore)) : (out << "<null>"));
  out << ", " << "hiddenFromBuildMenu=" << to_string(hiddenFromBuildMenu);
  out << ", " << "onOpenAction="; (__isset.onOpenAction ? (out << to_string(onOpenAction)) : (out << "<null>"));
  out << ", " << "onOpenActionParameter="; (__isset.onOpenActionParameter ? (out << to_string(onOpenActionParameter)) : (out << "<null>"));
  out << ")";
}


StartingKingdomEntity::~StartingKingdomEntity() throw() {
}


void StartingKingdomEntity::__set_entityId(const EntityID val) {
  this->entityId = val;
}

void StartingKingdomEntity::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
}

void StartingKingdomEntity::__set_x(const Coordinate val) {
  this->x = val;
}

void StartingKingdomEntity::__set_y(const Coordinate val) {
  this->y = val;
}

void StartingKingdomEntity::__set_rotated(const bool val) {
  this->rotated = val;
__isset.rotated = true;
}
std::ostream& operator<<(std::ostream& out, const StartingKingdomEntity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StartingKingdomEntity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_entityId = false;
  bool isset_buildingId = false;
  bool isset_x = false;
  bool isset_y = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->entityId);
          isset_entityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          isset_buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          isset_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          isset_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rotated);
          this->__isset.rotated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_entityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StartingKingdomEntity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StartingKingdomEntity");

  xfer += oprot->writeFieldBegin("entityId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->entityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rotated) {
    xfer += oprot->writeFieldBegin("rotated", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->rotated);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StartingKingdomEntity &a, StartingKingdomEntity &b) {
  using ::std::swap;
  swap(a.entityId, b.entityId);
  swap(a.buildingId, b.buildingId);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.rotated, b.rotated);
  swap(a.__isset, b.__isset);
}

StartingKingdomEntity::StartingKingdomEntity(const StartingKingdomEntity& other77) {
  entityId = other77.entityId;
  buildingId = other77.buildingId;
  x = other77.x;
  y = other77.y;
  rotated = other77.rotated;
  __isset = other77.__isset;
}
StartingKingdomEntity& StartingKingdomEntity::operator=(const StartingKingdomEntity& other78) {
  entityId = other78.entityId;
  buildingId = other78.buildingId;
  x = other78.x;
  y = other78.y;
  rotated = other78.rotated;
  __isset = other78.__isset;
  return *this;
}
void StartingKingdomEntity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StartingKingdomEntity(";
  out << "entityId=" << to_string(entityId);
  out << ", " << "buildingId=" << to_string(buildingId);
  out << ", " << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "rotated="; (__isset.rotated ? (out << to_string(rotated)) : (out << "<null>"));
  out << ")";
}


PresetKingdomEntity::~PresetKingdomEntity() throw() {
}


void PresetKingdomEntity::__set_presetKingdomId(const PresetKingdomID& val) {
  this->presetKingdomId = val;
}

void PresetKingdomEntity::__set_entityId(const EntityID val) {
  this->entityId = val;
}

void PresetKingdomEntity::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
}

void PresetKingdomEntity::__set_x(const Coordinate val) {
  this->x = val;
}

void PresetKingdomEntity::__set_y(const Coordinate val) {
  this->y = val;
}

void PresetKingdomEntity::__set_rotated(const bool val) {
  this->rotated = val;
__isset.rotated = true;
}
std::ostream& operator<<(std::ostream& out, const PresetKingdomEntity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PresetKingdomEntity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_presetKingdomId = false;
  bool isset_entityId = false;
  bool isset_buildingId = false;
  bool isset_x = false;
  bool isset_y = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->presetKingdomId);
          isset_presetKingdomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->entityId);
          isset_entityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          isset_buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          isset_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          isset_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rotated);
          this->__isset.rotated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_presetKingdomId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_entityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PresetKingdomEntity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PresetKingdomEntity");

  xfer += oprot->writeFieldBegin("presetKingdomId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->presetKingdomId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->entityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->y);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rotated) {
    xfer += oprot->writeFieldBegin("rotated", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->rotated);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PresetKingdomEntity &a, PresetKingdomEntity &b) {
  using ::std::swap;
  swap(a.presetKingdomId, b.presetKingdomId);
  swap(a.entityId, b.entityId);
  swap(a.buildingId, b.buildingId);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.rotated, b.rotated);
  swap(a.__isset, b.__isset);
}

PresetKingdomEntity::PresetKingdomEntity(const PresetKingdomEntity& other79) {
  presetKingdomId = other79.presetKingdomId;
  entityId = other79.entityId;
  buildingId = other79.buildingId;
  x = other79.x;
  y = other79.y;
  rotated = other79.rotated;
  __isset = other79.__isset;
}
PresetKingdomEntity& PresetKingdomEntity::operator=(const PresetKingdomEntity& other80) {
  presetKingdomId = other80.presetKingdomId;
  entityId = other80.entityId;
  buildingId = other80.buildingId;
  x = other80.x;
  y = other80.y;
  rotated = other80.rotated;
  __isset = other80.__isset;
  return *this;
}
void PresetKingdomEntity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PresetKingdomEntity(";
  out << "presetKingdomId=" << to_string(presetKingdomId);
  out << ", " << "entityId=" << to_string(entityId);
  out << ", " << "buildingId=" << to_string(buildingId);
  out << ", " << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "rotated="; (__isset.rotated ? (out << to_string(rotated)) : (out << "<null>"));
  out << ")";
}


Color::~Color() throw() {
}


void Color::__set_colorId(const ColorID& val) {
  this->colorId = val;
__isset.colorId = true;
}

void Color::__set_red(const int32_t val) {
  this->red = val;
__isset.red = true;
}

void Color::__set_green(const int32_t val) {
  this->green = val;
__isset.green = true;
}

void Color::__set_blue(const int32_t val) {
  this->blue = val;
__isset.blue = true;
}

void Color::__set_alpha(const int32_t val) {
  this->alpha = val;
__isset.alpha = true;
}
std::ostream& operator<<(std::ostream& out, const Color& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Color::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colorId);
          this->__isset.colorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->red);
          this->__isset.red = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->green);
          this->__isset.green = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blue);
          this->__isset.blue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alpha);
          this->__isset.alpha = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Color::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Color");

  if (this->__isset.colorId) {
    xfer += oprot->writeFieldBegin("colorId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->colorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.red) {
    xfer += oprot->writeFieldBegin("red", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->red);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.green) {
    xfer += oprot->writeFieldBegin("green", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->green);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blue) {
    xfer += oprot->writeFieldBegin("blue", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->blue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alpha) {
    xfer += oprot->writeFieldBegin("alpha", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->alpha);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Color &a, Color &b) {
  using ::std::swap;
  swap(a.colorId, b.colorId);
  swap(a.red, b.red);
  swap(a.green, b.green);
  swap(a.blue, b.blue);
  swap(a.alpha, b.alpha);
  swap(a.__isset, b.__isset);
}

Color::Color(const Color& other81) {
  colorId = other81.colorId;
  red = other81.red;
  green = other81.green;
  blue = other81.blue;
  alpha = other81.alpha;
  __isset = other81.__isset;
}
Color& Color::operator=(const Color& other82) {
  colorId = other82.colorId;
  red = other82.red;
  green = other82.green;
  blue = other82.blue;
  alpha = other82.alpha;
  __isset = other82.__isset;
  return *this;
}
void Color::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Color(";
  out << "colorId="; (__isset.colorId ? (out << to_string(colorId)) : (out << "<null>"));
  out << ", " << "red="; (__isset.red ? (out << to_string(red)) : (out << "<null>"));
  out << ", " << "green="; (__isset.green ? (out << to_string(green)) : (out << "<null>"));
  out << ", " << "blue="; (__isset.blue ? (out << to_string(blue)) : (out << "<null>"));
  out << ", " << "alpha="; (__isset.alpha ? (out << to_string(alpha)) : (out << "<null>"));
  out << ")";
}


IslandSettings::~IslandSettings() throw() {
}


void IslandSettings::__set_islandBackLayerGroup(const std::string& val) {
  this->islandBackLayerGroup = val;
__isset.islandBackLayerGroup = true;
}

void IslandSettings::__set_islandMiddleLayerGroup(const std::string& val) {
  this->islandMiddleLayerGroup = val;
__isset.islandMiddleLayerGroup = true;
}
std::ostream& operator<<(std::ostream& out, const IslandSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IslandSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandBackLayerGroup);
          this->__isset.islandBackLayerGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandMiddleLayerGroup);
          this->__isset.islandMiddleLayerGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IslandSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IslandSettings");

  if (this->__isset.islandBackLayerGroup) {
    xfer += oprot->writeFieldBegin("islandBackLayerGroup", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->islandBackLayerGroup);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.islandMiddleLayerGroup) {
    xfer += oprot->writeFieldBegin("islandMiddleLayerGroup", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->islandMiddleLayerGroup);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IslandSettings &a, IslandSettings &b) {
  using ::std::swap;
  swap(a.islandBackLayerGroup, b.islandBackLayerGroup);
  swap(a.islandMiddleLayerGroup, b.islandMiddleLayerGroup);
  swap(a.__isset, b.__isset);
}

IslandSettings::IslandSettings(const IslandSettings& other83) {
  islandBackLayerGroup = other83.islandBackLayerGroup;
  islandMiddleLayerGroup = other83.islandMiddleLayerGroup;
  __isset = other83.__isset;
}
IslandSettings& IslandSettings::operator=(const IslandSettings& other84) {
  islandBackLayerGroup = other84.islandBackLayerGroup;
  islandMiddleLayerGroup = other84.islandMiddleLayerGroup;
  __isset = other84.__isset;
  return *this;
}
void IslandSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IslandSettings(";
  out << "islandBackLayerGroup="; (__isset.islandBackLayerGroup ? (out << to_string(islandBackLayerGroup)) : (out << "<null>"));
  out << ", " << "islandMiddleLayerGroup="; (__isset.islandMiddleLayerGroup ? (out << to_string(islandMiddleLayerGroup)) : (out << "<null>"));
  out << ")";
}


IslandObject::~IslandObject() throw() {
}


void IslandObject::__set_islandObjectId(const IslandObjectID& val) {
  this->islandObjectId = val;
__isset.islandObjectId = true;
}

void IslandObject::__set_x(const int32_t val) {
  this->x = val;
__isset.x = true;
}

void IslandObject::__set_y(const int32_t val) {
  this->y = val;
__isset.y = true;
}

void IslandObject::__set_image(const std::string& val) {
  this->image = val;
__isset.image = true;
}

void IslandObject::__set_tintColorId(const ColorID& val) {
  this->tintColorId = val;
__isset.tintColorId = true;
}

void IslandObject::__set_param(const std::string& val) {
  this->param = val;
__isset.param = true;
}

void IslandObject::__set_type(const IslandObjectType::type val) {
  this->type = val;
__isset.type = true;
}

void IslandObject::__set_islandGroup(const std::string& val) {
  this->islandGroup = val;
__isset.islandGroup = true;
}
std::ostream& operator<<(std::ostream& out, const IslandObject& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IslandObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandObjectId);
          this->__isset.islandObjectId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->image);
          this->__isset.image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tintColorId);
          this->__isset.tintColorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param);
          this->__isset.param = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast85;
          xfer += iprot->readI32(ecast85);
          this->type = (IslandObjectType::type)ecast85;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandGroup);
          this->__isset.islandGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IslandObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IslandObject");

  if (this->__isset.islandObjectId) {
    xfer += oprot->writeFieldBegin("islandObjectId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->islandObjectId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.x) {
    xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->x);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.y) {
    xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->y);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.image) {
    xfer += oprot->writeFieldBegin("image", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->image);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tintColorId) {
    xfer += oprot->writeFieldBegin("tintColorId", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->tintColorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.param) {
    xfer += oprot->writeFieldBegin("param", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->param);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.islandGroup) {
    xfer += oprot->writeFieldBegin("islandGroup", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->islandGroup);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IslandObject &a, IslandObject &b) {
  using ::std::swap;
  swap(a.islandObjectId, b.islandObjectId);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.image, b.image);
  swap(a.tintColorId, b.tintColorId);
  swap(a.param, b.param);
  swap(a.type, b.type);
  swap(a.islandGroup, b.islandGroup);
  swap(a.__isset, b.__isset);
}

IslandObject::IslandObject(const IslandObject& other86) {
  islandObjectId = other86.islandObjectId;
  x = other86.x;
  y = other86.y;
  image = other86.image;
  tintColorId = other86.tintColorId;
  param = other86.param;
  type = other86.type;
  islandGroup = other86.islandGroup;
  __isset = other86.__isset;
}
IslandObject& IslandObject::operator=(const IslandObject& other87) {
  islandObjectId = other87.islandObjectId;
  x = other87.x;
  y = other87.y;
  image = other87.image;
  tintColorId = other87.tintColorId;
  param = other87.param;
  type = other87.type;
  islandGroup = other87.islandGroup;
  __isset = other87.__isset;
  return *this;
}
void IslandObject::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IslandObject(";
  out << "islandObjectId="; (__isset.islandObjectId ? (out << to_string(islandObjectId)) : (out << "<null>"));
  out << ", " << "x="; (__isset.x ? (out << to_string(x)) : (out << "<null>"));
  out << ", " << "y="; (__isset.y ? (out << to_string(y)) : (out << "<null>"));
  out << ", " << "image="; (__isset.image ? (out << to_string(image)) : (out << "<null>"));
  out << ", " << "tintColorId="; (__isset.tintColorId ? (out << to_string(tintColorId)) : (out << "<null>"));
  out << ", " << "param="; (__isset.param ? (out << to_string(param)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "islandGroup="; (__isset.islandGroup ? (out << to_string(islandGroup)) : (out << "<null>"));
  out << ")";
}


Island::~Island() throw() {
}


void Island::__set_islandId(const IslandID& val) {
  this->islandId = val;
}

void Island::__set_pageNum(const int32_t val) {
  this->pageNum = val;
}

void Island::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void Island::__set_nextIslandId(const IslandID& val) {
  this->nextIslandId = val;
__isset.nextIslandId = true;
}

void Island::__set_eventId(const std::string& val) {
  this->eventId = val;
}

void Island::__set_tmxFilename(const std::string& val) {
  this->tmxFilename = val;
}

void Island::__set_islandImage(const AssetPath& val) {
  this->islandImage = val;
}

void Island::__set_islandGroup(const std::string& val) {
  this->islandGroup = val;
__isset.islandGroup = true;
}

void Island::__set_x(const int32_t val) {
  this->x = val;
__isset.x = true;
}

void Island::__set_y(const int32_t val) {
  this->y = val;
__isset.y = true;
}
std::ostream& operator<<(std::ostream& out, const Island& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Island::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_islandId = false;
  bool isset_pageNum = false;
  bool isset_eventId = false;
  bool isset_tmxFilename = false;
  bool isset_islandImage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandId);
          isset_islandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageNum);
          isset_pageNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nextIslandId);
          this->__isset.nextIslandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tmxFilename);
          isset_tmxFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandImage);
          isset_islandImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandGroup);
          this->__isset.islandGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_islandId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pageNum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tmxFilename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_islandImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Island::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Island");

  xfer += oprot->writeFieldBegin("islandId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->islandId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pageNum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pageNum);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextIslandId) {
    xfer += oprot->writeFieldBegin("nextIslandId", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->nextIslandId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tmxFilename", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->tmxFilename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("islandImage", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->islandImage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.islandGroup) {
    xfer += oprot->writeFieldBegin("islandGroup", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->islandGroup);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.x) {
    xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 80);
    xfer += oprot->writeI32(this->x);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.y) {
    xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 81);
    xfer += oprot->writeI32(this->y);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Island &a, Island &b) {
  using ::std::swap;
  swap(a.islandId, b.islandId);
  swap(a.pageNum, b.pageNum);
  swap(a.newDisplay, b.newDisplay);
  swap(a.nextIslandId, b.nextIslandId);
  swap(a.eventId, b.eventId);
  swap(a.tmxFilename, b.tmxFilename);
  swap(a.islandImage, b.islandImage);
  swap(a.islandGroup, b.islandGroup);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

Island::Island(const Island& other88) {
  islandId = other88.islandId;
  pageNum = other88.pageNum;
  newDisplay = other88.newDisplay;
  nextIslandId = other88.nextIslandId;
  eventId = other88.eventId;
  tmxFilename = other88.tmxFilename;
  islandImage = other88.islandImage;
  islandGroup = other88.islandGroup;
  x = other88.x;
  y = other88.y;
  __isset = other88.__isset;
}
Island& Island::operator=(const Island& other89) {
  islandId = other89.islandId;
  pageNum = other89.pageNum;
  newDisplay = other89.newDisplay;
  nextIslandId = other89.nextIslandId;
  eventId = other89.eventId;
  tmxFilename = other89.tmxFilename;
  islandImage = other89.islandImage;
  islandGroup = other89.islandGroup;
  x = other89.x;
  y = other89.y;
  __isset = other89.__isset;
  return *this;
}
void Island::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Island(";
  out << "islandId=" << to_string(islandId);
  out << ", " << "pageNum=" << to_string(pageNum);
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "nextIslandId="; (__isset.nextIslandId ? (out << to_string(nextIslandId)) : (out << "<null>"));
  out << ", " << "eventId=" << to_string(eventId);
  out << ", " << "tmxFilename=" << to_string(tmxFilename);
  out << ", " << "islandImage=" << to_string(islandImage);
  out << ", " << "islandGroup="; (__isset.islandGroup ? (out << to_string(islandGroup)) : (out << "<null>"));
  out << ", " << "x="; (__isset.x ? (out << to_string(x)) : (out << "<null>"));
  out << ", " << "y="; (__isset.y ? (out << to_string(y)) : (out << "<null>"));
  out << ")";
}


Recipe::~Recipe() throw() {
}


void Recipe::__set_recipeId(const RecipeID& val) {
  this->recipeId = val;
}

void Recipe::__set_catalogImage(const AssetPath& val) {
  this->catalogImage = val;
__isset.catalogImage = true;
}

void Recipe::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}
std::ostream& operator<<(std::ostream& out, const Recipe& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Recipe::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_recipeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recipeId);
          isset_recipeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catalogImage);
          this->__isset.catalogImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_recipeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Recipe::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Recipe");

  xfer += oprot->writeFieldBegin("recipeId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->recipeId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.catalogImage) {
    xfer += oprot->writeFieldBegin("catalogImage", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->catalogImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Recipe &a, Recipe &b) {
  using ::std::swap;
  swap(a.recipeId, b.recipeId);
  swap(a.catalogImage, b.catalogImage);
  swap(a.newDisplay, b.newDisplay);
  swap(a.__isset, b.__isset);
}

Recipe::Recipe(const Recipe& other90) {
  recipeId = other90.recipeId;
  catalogImage = other90.catalogImage;
  newDisplay = other90.newDisplay;
  __isset = other90.__isset;
}
Recipe& Recipe::operator=(const Recipe& other91) {
  recipeId = other91.recipeId;
  catalogImage = other91.catalogImage;
  newDisplay = other91.newDisplay;
  __isset = other91.__isset;
  return *this;
}
void Recipe::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Recipe(";
  out << "recipeId=" << to_string(recipeId);
  out << ", " << "catalogImage="; (__isset.catalogImage ? (out << to_string(catalogImage)) : (out << "<null>"));
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ")";
}


InventoryTab::~InventoryTab() throw() {
}


void InventoryTab::__set_index(const int32_t val) {
  this->index = val;
}

void InventoryTab::__set_inventoryTabId(const InventoryTabID& val) {
  this->inventoryTabId = val;
}

void InventoryTab::__set_image(const AssetPath& val) {
  this->image = val;
}

void InventoryTab::__set_selectionSound(const std::string& val) {
  this->selectionSound = val;
}

void InventoryTab::__set_title(const LocalizedString& val) {
  this->title = val;
__isset.title = true;
}
std::ostream& operator<<(std::ostream& out, const InventoryTab& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InventoryTab::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_index = false;
  bool isset_inventoryTabId = false;
  bool isset_image = false;
  bool isset_selectionSound = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          isset_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inventoryTabId);
          isset_inventoryTabId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->image);
          isset_image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->selectionSound);
          isset_selectionSound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->title.read(iprot);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_index)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inventoryTabId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_image)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selectionSound)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InventoryTab::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InventoryTab");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inventoryTabId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->inventoryTabId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("image", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->image);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selectionSound", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->selectionSound);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.title) {
    xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRUCT, 21);
    xfer += this->title.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InventoryTab &a, InventoryTab &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.inventoryTabId, b.inventoryTabId);
  swap(a.image, b.image);
  swap(a.selectionSound, b.selectionSound);
  swap(a.title, b.title);
  swap(a.__isset, b.__isset);
}

InventoryTab::InventoryTab(const InventoryTab& other92) {
  index = other92.index;
  inventoryTabId = other92.inventoryTabId;
  image = other92.image;
  selectionSound = other92.selectionSound;
  title = other92.title;
  __isset = other92.__isset;
}
InventoryTab& InventoryTab::operator=(const InventoryTab& other93) {
  index = other93.index;
  inventoryTabId = other93.inventoryTabId;
  image = other93.image;
  selectionSound = other93.selectionSound;
  title = other93.title;
  __isset = other93.__isset;
  return *this;
}
void InventoryTab::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InventoryTab(";
  out << "index=" << to_string(index);
  out << ", " << "inventoryTabId=" << to_string(inventoryTabId);
  out << ", " << "image=" << to_string(image);
  out << ", " << "selectionSound=" << to_string(selectionSound);
  out << ", " << "title="; (__isset.title ? (out << to_string(title)) : (out << "<null>"));
  out << ")";
}


Material::~Material() throw() {
}


void Material::__set_materialID(const MaterialID& val) {
  this->materialID = val;
}

void Material::__set_rarityId(const RarityID val) {
  this->rarityId = val;
__isset.rarityId = true;
}

void Material::__set_levelId(const RankID val) {
  this->levelId = val;
__isset.levelId = true;
}

void Material::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void Material::__set_materialIds(const std::vector<MaterialID> & val) {
  this->materialIds = val;
__isset.materialIds = true;
}

void Material::__set_materialCounts(const std::vector<int32_t> & val) {
  this->materialCounts = val;
__isset.materialCounts = true;
}

void Material::__set_craftCostCurrencyId(const CurrencyID& val) {
  this->craftCostCurrencyId = val;
__isset.craftCostCurrencyId = true;
}

void Material::__set_craftCost(const int32_t val) {
  this->craftCost = val;
__isset.craftCost = true;
}
std::ostream& operator<<(std::ostream& out, const Material& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Material::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_materialID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->materialID);
          isset_materialID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rarityId);
          this->__isset.rarityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->levelId);
          this->__isset.levelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->materialIds.clear();
            uint32_t _size94;
            ::apache::thrift::protocol::TType _etype97;
            xfer += iprot->readListBegin(_etype97, _size94);
            this->materialIds.resize(_size94);
            uint32_t _i98;
            for (_i98 = 0; _i98 < _size94; ++_i98)
            {
              xfer += iprot->readString(this->materialIds[_i98]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.materialIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->materialCounts.clear();
            uint32_t _size99;
            ::apache::thrift::protocol::TType _etype102;
            xfer += iprot->readListBegin(_etype102, _size99);
            this->materialCounts.resize(_size99);
            uint32_t _i103;
            for (_i103 = 0; _i103 < _size99; ++_i103)
            {
              xfer += iprot->readI32(this->materialCounts[_i103]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.materialCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->craftCostCurrencyId);
          this->__isset.craftCostCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->craftCost);
          this->__isset.craftCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_materialID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Material::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Material");

  xfer += oprot->writeFieldBegin("materialID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->materialID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rarityId) {
    xfer += oprot->writeFieldBegin("rarityId", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->rarityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelId) {
    xfer += oprot->writeFieldBegin("levelId", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->levelId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.materialIds) {
    xfer += oprot->writeFieldBegin("materialIds", ::apache::thrift::protocol::T_LIST, 20);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->materialIds.size()));
      std::vector<MaterialID> ::const_iterator _iter104;
      for (_iter104 = this->materialIds.begin(); _iter104 != this->materialIds.end(); ++_iter104)
      {
        xfer += oprot->writeString((*_iter104));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.materialCounts) {
    xfer += oprot->writeFieldBegin("materialCounts", ::apache::thrift::protocol::T_LIST, 21);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->materialCounts.size()));
      std::vector<int32_t> ::const_iterator _iter105;
      for (_iter105 = this->materialCounts.begin(); _iter105 != this->materialCounts.end(); ++_iter105)
      {
        xfer += oprot->writeI32((*_iter105));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.craftCostCurrencyId) {
    xfer += oprot->writeFieldBegin("craftCostCurrencyId", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->craftCostCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.craftCost) {
    xfer += oprot->writeFieldBegin("craftCost", ::apache::thrift::protocol::T_I32, 41);
    xfer += oprot->writeI32(this->craftCost);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Material &a, Material &b) {
  using ::std::swap;
  swap(a.materialID, b.materialID);
  swap(a.rarityId, b.rarityId);
  swap(a.levelId, b.levelId);
  swap(a.newDisplay, b.newDisplay);
  swap(a.materialIds, b.materialIds);
  swap(a.materialCounts, b.materialCounts);
  swap(a.craftCostCurrencyId, b.craftCostCurrencyId);
  swap(a.craftCost, b.craftCost);
  swap(a.__isset, b.__isset);
}

Material::Material(const Material& other106) {
  materialID = other106.materialID;
  rarityId = other106.rarityId;
  levelId = other106.levelId;
  newDisplay = other106.newDisplay;
  materialIds = other106.materialIds;
  materialCounts = other106.materialCounts;
  craftCostCurrencyId = other106.craftCostCurrencyId;
  craftCost = other106.craftCost;
  __isset = other106.__isset;
}
Material& Material::operator=(const Material& other107) {
  materialID = other107.materialID;
  rarityId = other107.rarityId;
  levelId = other107.levelId;
  newDisplay = other107.newDisplay;
  materialIds = other107.materialIds;
  materialCounts = other107.materialCounts;
  craftCostCurrencyId = other107.craftCostCurrencyId;
  craftCost = other107.craftCost;
  __isset = other107.__isset;
  return *this;
}
void Material::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Material(";
  out << "materialID=" << to_string(materialID);
  out << ", " << "rarityId="; (__isset.rarityId ? (out << to_string(rarityId)) : (out << "<null>"));
  out << ", " << "levelId="; (__isset.levelId ? (out << to_string(levelId)) : (out << "<null>"));
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "materialIds="; (__isset.materialIds ? (out << to_string(materialIds)) : (out << "<null>"));
  out << ", " << "materialCounts="; (__isset.materialCounts ? (out << to_string(materialCounts)) : (out << "<null>"));
  out << ", " << "craftCostCurrencyId="; (__isset.craftCostCurrencyId ? (out << to_string(craftCostCurrencyId)) : (out << "<null>"));
  out << ", " << "craftCost="; (__isset.craftCost ? (out << to_string(craftCost)) : (out << "<null>"));
  out << ")";
}


BusinessEvolution::~BusinessEvolution() throw() {
}


void BusinessEvolution::__set_evolutionMaterialId(const EvolutionMaterialID& val) {
  this->evolutionMaterialId = val;
}

void BusinessEvolution::__set_gearList(const std::vector<MaterialID> & val) {
  this->gearList = val;
}

void BusinessEvolution::__set_materialCounts(const std::vector<int32_t> & val) {
  this->materialCounts = val;
}
std::ostream& operator<<(std::ostream& out, const BusinessEvolution& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BusinessEvolution::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_evolutionMaterialId = false;
  bool isset_gearList = false;
  bool isset_materialCounts = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->evolutionMaterialId);
          isset_evolutionMaterialId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gearList.clear();
            uint32_t _size108;
            ::apache::thrift::protocol::TType _etype111;
            xfer += iprot->readListBegin(_etype111, _size108);
            this->gearList.resize(_size108);
            uint32_t _i112;
            for (_i112 = 0; _i112 < _size108; ++_i112)
            {
              xfer += iprot->readString(this->gearList[_i112]);
            }
            xfer += iprot->readListEnd();
          }
          isset_gearList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->materialCounts.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readListBegin(_etype116, _size113);
            this->materialCounts.resize(_size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              xfer += iprot->readI32(this->materialCounts[_i117]);
            }
            xfer += iprot->readListEnd();
          }
          isset_materialCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_evolutionMaterialId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gearList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_materialCounts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BusinessEvolution::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessEvolution");

  xfer += oprot->writeFieldBegin("evolutionMaterialId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->evolutionMaterialId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gearList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->gearList.size()));
    std::vector<MaterialID> ::const_iterator _iter118;
    for (_iter118 = this->gearList.begin(); _iter118 != this->gearList.end(); ++_iter118)
    {
      xfer += oprot->writeString((*_iter118));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("materialCounts", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->materialCounts.size()));
    std::vector<int32_t> ::const_iterator _iter119;
    for (_iter119 = this->materialCounts.begin(); _iter119 != this->materialCounts.end(); ++_iter119)
    {
      xfer += oprot->writeI32((*_iter119));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessEvolution &a, BusinessEvolution &b) {
  using ::std::swap;
  swap(a.evolutionMaterialId, b.evolutionMaterialId);
  swap(a.gearList, b.gearList);
  swap(a.materialCounts, b.materialCounts);
}

BusinessEvolution::BusinessEvolution(const BusinessEvolution& other120) {
  evolutionMaterialId = other120.evolutionMaterialId;
  gearList = other120.gearList;
  materialCounts = other120.materialCounts;
}
BusinessEvolution& BusinessEvolution::operator=(const BusinessEvolution& other121) {
  evolutionMaterialId = other121.evolutionMaterialId;
  gearList = other121.gearList;
  materialCounts = other121.materialCounts;
  return *this;
}
void BusinessEvolution::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessEvolution(";
  out << "evolutionMaterialId=" << to_string(evolutionMaterialId);
  out << ", " << "gearList=" << to_string(gearList);
  out << ", " << "materialCounts=" << to_string(materialCounts);
  out << ")";
}


BusinessOrderList::~BusinessOrderList() throw() {
}


void BusinessOrderList::__set_businessOrderListId(const BusinessOrderListID& val) {
  this->businessOrderListId = val;
}

void BusinessOrderList::__set_businessOrderIds(const std::vector<BusinessOrderID> & val) {
  this->businessOrderIds = val;
}
std::ostream& operator<<(std::ostream& out, const BusinessOrderList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BusinessOrderList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_businessOrderListId = false;
  bool isset_businessOrderIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessOrderListId);
          isset_businessOrderListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->businessOrderIds.clear();
            uint32_t _size122;
            ::apache::thrift::protocol::TType _etype125;
            xfer += iprot->readListBegin(_etype125, _size122);
            this->businessOrderIds.resize(_size122);
            uint32_t _i126;
            for (_i126 = 0; _i126 < _size122; ++_i126)
            {
              xfer += iprot->readString(this->businessOrderIds[_i126]);
            }
            xfer += iprot->readListEnd();
          }
          isset_businessOrderIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_businessOrderListId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_businessOrderIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BusinessOrderList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessOrderList");

  xfer += oprot->writeFieldBegin("businessOrderListId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->businessOrderListId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessOrderIds", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->businessOrderIds.size()));
    std::vector<BusinessOrderID> ::const_iterator _iter127;
    for (_iter127 = this->businessOrderIds.begin(); _iter127 != this->businessOrderIds.end(); ++_iter127)
    {
      xfer += oprot->writeString((*_iter127));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessOrderList &a, BusinessOrderList &b) {
  using ::std::swap;
  swap(a.businessOrderListId, b.businessOrderListId);
  swap(a.businessOrderIds, b.businessOrderIds);
}

BusinessOrderList::BusinessOrderList(const BusinessOrderList& other128) {
  businessOrderListId = other128.businessOrderListId;
  businessOrderIds = other128.businessOrderIds;
}
BusinessOrderList& BusinessOrderList::operator=(const BusinessOrderList& other129) {
  businessOrderListId = other129.businessOrderListId;
  businessOrderIds = other129.businessOrderIds;
  return *this;
}
void BusinessOrderList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessOrderList(";
  out << "businessOrderListId=" << to_string(businessOrderListId);
  out << ", " << "businessOrderIds=" << to_string(businessOrderIds);
  out << ")";
}


Business::~Business() throw() {
}


void Business::__set_businessId(const BusinessID& val) {
  this->businessId = val;
}

void Business::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
}

void Business::__set_evolutionMaterialId(const EvolutionMaterialID& val) {
  this->evolutionMaterialId = val;
__isset.evolutionMaterialId = true;
}

void Business::__set_evolveCostCurrencyId(const CurrencyID& val) {
  this->evolveCostCurrencyId = val;
__isset.evolveCostCurrencyId = true;
}

void Business::__set_evolveCost(const int32_t val) {
  this->evolveCost = val;
__isset.evolveCost = true;
}

void Business::__set_npcId(const std::string& val) {
  this->npcId = val;
__isset.npcId = true;
}
std::ostream& operator<<(std::ostream& out, const Business& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Business::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_businessId = false;
  bool isset_buildingId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessId);
          isset_businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          isset_buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->evolutionMaterialId);
          this->__isset.evolutionMaterialId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->evolveCostCurrencyId);
          this->__isset.evolveCostCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->evolveCost);
          this->__isset.evolveCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->npcId);
          this->__isset.npcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_businessId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Business::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Business");

  xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->businessId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.evolutionMaterialId) {
    xfer += oprot->writeFieldBegin("evolutionMaterialId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->evolutionMaterialId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.evolveCostCurrencyId) {
    xfer += oprot->writeFieldBegin("evolveCostCurrencyId", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->evolveCostCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.evolveCost) {
    xfer += oprot->writeFieldBegin("evolveCost", ::apache::thrift::protocol::T_I32, 41);
    xfer += oprot->writeI32(this->evolveCost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.npcId) {
    xfer += oprot->writeFieldBegin("npcId", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->npcId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Business &a, Business &b) {
  using ::std::swap;
  swap(a.businessId, b.businessId);
  swap(a.buildingId, b.buildingId);
  swap(a.evolutionMaterialId, b.evolutionMaterialId);
  swap(a.evolveCostCurrencyId, b.evolveCostCurrencyId);
  swap(a.evolveCost, b.evolveCost);
  swap(a.npcId, b.npcId);
  swap(a.__isset, b.__isset);
}

Business::Business(const Business& other130) {
  businessId = other130.businessId;
  buildingId = other130.buildingId;
  evolutionMaterialId = other130.evolutionMaterialId;
  evolveCostCurrencyId = other130.evolveCostCurrencyId;
  evolveCost = other130.evolveCost;
  npcId = other130.npcId;
  __isset = other130.__isset;
}
Business& Business::operator=(const Business& other131) {
  businessId = other131.businessId;
  buildingId = other131.buildingId;
  evolutionMaterialId = other131.evolutionMaterialId;
  evolveCostCurrencyId = other131.evolveCostCurrencyId;
  evolveCost = other131.evolveCost;
  npcId = other131.npcId;
  __isset = other131.__isset;
  return *this;
}
void Business::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Business(";
  out << "businessId=" << to_string(businessId);
  out << ", " << "buildingId=" << to_string(buildingId);
  out << ", " << "evolutionMaterialId="; (__isset.evolutionMaterialId ? (out << to_string(evolutionMaterialId)) : (out << "<null>"));
  out << ", " << "evolveCostCurrencyId="; (__isset.evolveCostCurrencyId ? (out << to_string(evolveCostCurrencyId)) : (out << "<null>"));
  out << ", " << "evolveCost="; (__isset.evolveCost ? (out << to_string(evolveCost)) : (out << "<null>"));
  out << ", " << "npcId="; (__isset.npcId ? (out << to_string(npcId)) : (out << "<null>"));
  out << ")";
}


BusinessOrder::~BusinessOrder() throw() {
}


void BusinessOrder::__set_orderId(const BusinessOrderID& val) {
  this->orderId = val;
}

void BusinessOrder::__set_sortIndex(const int32_t val) {
  this->sortIndex = val;
__isset.sortIndex = true;
}

void BusinessOrder::__set_recipeId(const RecipeID& val) {
  this->recipeId = val;
}

void BusinessOrder::__set_orderCostCurrencyId(const CurrencyID& val) {
  this->orderCostCurrencyId = val;
}

void BusinessOrder::__set_orderCost(const int32_t val) {
  this->orderCost = val;
}

void BusinessOrder::__set_orderTimeBasis(const int32_t val) {
  this->orderTimeBasis = val;
}

void BusinessOrder::__set_earnedCurrencyId(const CurrencyID& val) {
  this->earnedCurrencyId = val;
}

void BusinessOrder::__set_earned(const int32_t val) {
  this->earned = val;
}

void BusinessOrder::__set_rushCostCurrencyId(const CurrencyID& val) {
  this->rushCostCurrencyId = val;
}

void BusinessOrder::__set_rushCostBasis(const int32_t val) {
  this->rushCostBasis = val;
}

void BusinessOrder::__set_palPointsProduced(const int32_t val) {
  this->palPointsProduced = val;
__isset.palPointsProduced = true;
}

void BusinessOrder::__set_rushBonusPalPoints(const int32_t val) {
  this->rushBonusPalPoints = val;
__isset.rushBonusPalPoints = true;
}

void BusinessOrder::__set_xpProduced(const int32_t val) {
  this->xpProduced = val;
__isset.xpProduced = true;
}

void BusinessOrder::__set_socialGoldCost(const int32_t val) {
  this->socialGoldCost = val;
__isset.socialGoldCost = true;
}

void BusinessOrder::__set_gemCost(const int32_t val) {
  this->gemCost = val;
__isset.gemCost = true;
}

void BusinessOrder::__set_guildMatePalPointsProduced(const int32_t val) {
  this->guildMatePalPointsProduced = val;
__isset.guildMatePalPointsProduced = true;
}

void BusinessOrder::__set_guildMatePalPointsRushBonus(const int32_t val) {
  this->guildMatePalPointsRushBonus = val;
__isset.guildMatePalPointsRushBonus = true;
}

void BusinessOrder::__set_lootListId(const WeightedLootListID& val) {
  this->lootListId = val;
__isset.lootListId = true;
}
std::ostream& operator<<(std::ostream& out, const BusinessOrder& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BusinessOrder::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_orderId = false;
  bool isset_recipeId = false;
  bool isset_orderCostCurrencyId = false;
  bool isset_orderCost = false;
  bool isset_orderTimeBasis = false;
  bool isset_earnedCurrencyId = false;
  bool isset_earned = false;
  bool isset_rushCostCurrencyId = false;
  bool isset_rushCostBasis = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderId);
          isset_orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sortIndex);
          this->__isset.sortIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recipeId);
          isset_recipeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderCostCurrencyId);
          isset_orderCostCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderCost);
          isset_orderCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderTimeBasis);
          isset_orderTimeBasis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->earnedCurrencyId);
          isset_earnedCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->earned);
          isset_earned = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rushCostCurrencyId);
          isset_rushCostCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rushCostBasis);
          isset_rushCostBasis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->palPointsProduced);
          this->__isset.palPointsProduced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rushBonusPalPoints);
          this->__isset.rushBonusPalPoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xpProduced);
          this->__isset.xpProduced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialGoldCost);
          this->__isset.socialGoldCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gemCost);
          this->__isset.gemCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guildMatePalPointsProduced);
          this->__isset.guildMatePalPointsProduced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guildMatePalPointsRushBonus);
          this->__isset.guildMatePalPointsRushBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lootListId);
          this->__isset.lootListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_orderId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recipeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_orderCostCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_orderCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_orderTimeBasis)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_earnedCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_earned)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rushCostCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rushCostBasis)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BusinessOrder::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessOrder");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->orderId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sortIndex) {
    xfer += oprot->writeFieldBegin("sortIndex", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->sortIndex);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("recipeId", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->recipeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderCostCurrencyId", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->orderCostCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderCost", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->orderCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderTimeBasis", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->orderTimeBasis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("earnedCurrencyId", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->earnedCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("earned", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->earned);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rushCostCurrencyId", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->rushCostCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rushCostBasis", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32(this->rushCostBasis);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.palPointsProduced) {
    xfer += oprot->writeFieldBegin("palPointsProduced", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32(this->palPointsProduced);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rushBonusPalPoints) {
    xfer += oprot->writeFieldBegin("rushBonusPalPoints", ::apache::thrift::protocol::T_I32, 33);
    xfer += oprot->writeI32(this->rushBonusPalPoints);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.xpProduced) {
    xfer += oprot->writeFieldBegin("xpProduced", ::apache::thrift::protocol::T_I32, 34);
    xfer += oprot->writeI32(this->xpProduced);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.socialGoldCost) {
    xfer += oprot->writeFieldBegin("socialGoldCost", ::apache::thrift::protocol::T_I32, 35);
    xfer += oprot->writeI32(this->socialGoldCost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gemCost) {
    xfer += oprot->writeFieldBegin("gemCost", ::apache::thrift::protocol::T_I32, 36);
    xfer += oprot->writeI32(this->gemCost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildMatePalPointsProduced) {
    xfer += oprot->writeFieldBegin("guildMatePalPointsProduced", ::apache::thrift::protocol::T_I32, 40);
    xfer += oprot->writeI32(this->guildMatePalPointsProduced);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildMatePalPointsRushBonus) {
    xfer += oprot->writeFieldBegin("guildMatePalPointsRushBonus", ::apache::thrift::protocol::T_I32, 41);
    xfer += oprot->writeI32(this->guildMatePalPointsRushBonus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lootListId) {
    xfer += oprot->writeFieldBegin("lootListId", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->lootListId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessOrder &a, BusinessOrder &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.sortIndex, b.sortIndex);
  swap(a.recipeId, b.recipeId);
  swap(a.orderCostCurrencyId, b.orderCostCurrencyId);
  swap(a.orderCost, b.orderCost);
  swap(a.orderTimeBasis, b.orderTimeBasis);
  swap(a.earnedCurrencyId, b.earnedCurrencyId);
  swap(a.earned, b.earned);
  swap(a.rushCostCurrencyId, b.rushCostCurrencyId);
  swap(a.rushCostBasis, b.rushCostBasis);
  swap(a.palPointsProduced, b.palPointsProduced);
  swap(a.rushBonusPalPoints, b.rushBonusPalPoints);
  swap(a.xpProduced, b.xpProduced);
  swap(a.socialGoldCost, b.socialGoldCost);
  swap(a.gemCost, b.gemCost);
  swap(a.guildMatePalPointsProduced, b.guildMatePalPointsProduced);
  swap(a.guildMatePalPointsRushBonus, b.guildMatePalPointsRushBonus);
  swap(a.lootListId, b.lootListId);
  swap(a.__isset, b.__isset);
}

BusinessOrder::BusinessOrder(const BusinessOrder& other132) {
  orderId = other132.orderId;
  sortIndex = other132.sortIndex;
  recipeId = other132.recipeId;
  orderCostCurrencyId = other132.orderCostCurrencyId;
  orderCost = other132.orderCost;
  orderTimeBasis = other132.orderTimeBasis;
  earnedCurrencyId = other132.earnedCurrencyId;
  earned = other132.earned;
  rushCostCurrencyId = other132.rushCostCurrencyId;
  rushCostBasis = other132.rushCostBasis;
  palPointsProduced = other132.palPointsProduced;
  rushBonusPalPoints = other132.rushBonusPalPoints;
  xpProduced = other132.xpProduced;
  socialGoldCost = other132.socialGoldCost;
  gemCost = other132.gemCost;
  guildMatePalPointsProduced = other132.guildMatePalPointsProduced;
  guildMatePalPointsRushBonus = other132.guildMatePalPointsRushBonus;
  lootListId = other132.lootListId;
  __isset = other132.__isset;
}
BusinessOrder& BusinessOrder::operator=(const BusinessOrder& other133) {
  orderId = other133.orderId;
  sortIndex = other133.sortIndex;
  recipeId = other133.recipeId;
  orderCostCurrencyId = other133.orderCostCurrencyId;
  orderCost = other133.orderCost;
  orderTimeBasis = other133.orderTimeBasis;
  earnedCurrencyId = other133.earnedCurrencyId;
  earned = other133.earned;
  rushCostCurrencyId = other133.rushCostCurrencyId;
  rushCostBasis = other133.rushCostBasis;
  palPointsProduced = other133.palPointsProduced;
  rushBonusPalPoints = other133.rushBonusPalPoints;
  xpProduced = other133.xpProduced;
  socialGoldCost = other133.socialGoldCost;
  gemCost = other133.gemCost;
  guildMatePalPointsProduced = other133.guildMatePalPointsProduced;
  guildMatePalPointsRushBonus = other133.guildMatePalPointsRushBonus;
  lootListId = other133.lootListId;
  __isset = other133.__isset;
  return *this;
}
void BusinessOrder::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessOrder(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "sortIndex="; (__isset.sortIndex ? (out << to_string(sortIndex)) : (out << "<null>"));
  out << ", " << "recipeId=" << to_string(recipeId);
  out << ", " << "orderCostCurrencyId=" << to_string(orderCostCurrencyId);
  out << ", " << "orderCost=" << to_string(orderCost);
  out << ", " << "orderTimeBasis=" << to_string(orderTimeBasis);
  out << ", " << "earnedCurrencyId=" << to_string(earnedCurrencyId);
  out << ", " << "earned=" << to_string(earned);
  out << ", " << "rushCostCurrencyId=" << to_string(rushCostCurrencyId);
  out << ", " << "rushCostBasis=" << to_string(rushCostBasis);
  out << ", " << "palPointsProduced="; (__isset.palPointsProduced ? (out << to_string(palPointsProduced)) : (out << "<null>"));
  out << ", " << "rushBonusPalPoints="; (__isset.rushBonusPalPoints ? (out << to_string(rushBonusPalPoints)) : (out << "<null>"));
  out << ", " << "xpProduced="; (__isset.xpProduced ? (out << to_string(xpProduced)) : (out << "<null>"));
  out << ", " << "socialGoldCost="; (__isset.socialGoldCost ? (out << to_string(socialGoldCost)) : (out << "<null>"));
  out << ", " << "gemCost="; (__isset.gemCost ? (out << to_string(gemCost)) : (out << "<null>"));
  out << ", " << "guildMatePalPointsProduced="; (__isset.guildMatePalPointsProduced ? (out << to_string(guildMatePalPointsProduced)) : (out << "<null>"));
  out << ", " << "guildMatePalPointsRushBonus="; (__isset.guildMatePalPointsRushBonus ? (out << to_string(guildMatePalPointsRushBonus)) : (out << "<null>"));
  out << ", " << "lootListId="; (__isset.lootListId ? (out << to_string(lootListId)) : (out << "<null>"));
  out << ")";
}


NewBusinessOrder::~NewBusinessOrder() throw() {
}


void NewBusinessOrder::__set_orderId(const BusinessOrderID& val) {
  this->orderId = val;
}

void NewBusinessOrder::__set_businessId(const BuildingID& val) {
  this->businessId = val;
}

void NewBusinessOrder::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void NewBusinessOrder::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void NewBusinessOrder::__set_sortIndex(const int32_t val) {
  this->sortIndex = val;
__isset.sortIndex = true;
}

void NewBusinessOrder::__set_recipeId(const RecipeID& val) {
  this->recipeId = val;
__isset.recipeId = true;
}

void NewBusinessOrder::__set_orderCostCurrencyId(const CurrencyID& val) {
  this->orderCostCurrencyId = val;
__isset.orderCostCurrencyId = true;
}

void NewBusinessOrder::__set_orderCost(const int32_t val) {
  this->orderCost = val;
__isset.orderCost = true;
}

void NewBusinessOrder::__set_orderTimeBasis(const int32_t val) {
  this->orderTimeBasis = val;
}

void NewBusinessOrder::__set_earnedCurrencyId(const CurrencyID& val) {
  this->earnedCurrencyId = val;
}

void NewBusinessOrder::__set_earned(const int32_t val) {
  this->earned = val;
}

void NewBusinessOrder::__set_palPointsProduced(const int32_t val) {
  this->palPointsProduced = val;
__isset.palPointsProduced = true;
}

void NewBusinessOrder::__set_rushBonusPalPoints(const int32_t val) {
  this->rushBonusPalPoints = val;
__isset.rushBonusPalPoints = true;
}

void NewBusinessOrder::__set_xpProduced(const int32_t val) {
  this->xpProduced = val;
__isset.xpProduced = true;
}

void NewBusinessOrder::__set_guildMatePalPointsProduced(const int32_t val) {
  this->guildMatePalPointsProduced = val;
__isset.guildMatePalPointsProduced = true;
}

void NewBusinessOrder::__set_guildMatePalPointsRushBonus(const int32_t val) {
  this->guildMatePalPointsRushBonus = val;
__isset.guildMatePalPointsRushBonus = true;
}

void NewBusinessOrder::__set_lootListId(const WeightedLootListID& val) {
  this->lootListId = val;
__isset.lootListId = true;
}
std::ostream& operator<<(std::ostream& out, const NewBusinessOrder& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NewBusinessOrder::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_orderId = false;
  bool isset_businessId = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_orderTimeBasis = false;
  bool isset_earnedCurrencyId = false;
  bool isset_earned = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderId);
          isset_orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessId);
          isset_businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size134;
            ::apache::thrift::protocol::TType _etype137;
            xfer += iprot->readListBegin(_etype137, _size134);
            this->eventIds.resize(_size134);
            uint32_t _i138;
            for (_i138 = 0; _i138 < _size134; ++_i138)
            {
              xfer += iprot->readString(this->eventIds[_i138]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast139;
          xfer += iprot->readI32(ecast139);
          this->eventPhases = (EventPhases::type)ecast139;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sortIndex);
          this->__isset.sortIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recipeId);
          this->__isset.recipeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderCostCurrencyId);
          this->__isset.orderCostCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderCost);
          this->__isset.orderCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderTimeBasis);
          isset_orderTimeBasis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->earnedCurrencyId);
          isset_earnedCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->earned);
          isset_earned = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->palPointsProduced);
          this->__isset.palPointsProduced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rushBonusPalPoints);
          this->__isset.rushBonusPalPoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xpProduced);
          this->__isset.xpProduced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guildMatePalPointsProduced);
          this->__isset.guildMatePalPointsProduced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guildMatePalPointsRushBonus);
          this->__isset.guildMatePalPointsRushBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lootListId);
          this->__isset.lootListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_orderId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_businessId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_orderTimeBasis)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_earnedCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_earned)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NewBusinessOrder::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NewBusinessOrder");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->orderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->businessId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter140;
    for (_iter140 = this->eventIds.begin(); _iter140 != this->eventIds.end(); ++_iter140)
    {
      xfer += oprot->writeString((*_iter140));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sortIndex) {
    xfer += oprot->writeFieldBegin("sortIndex", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->sortIndex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipeId) {
    xfer += oprot->writeFieldBegin("recipeId", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->recipeId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orderCostCurrencyId) {
    xfer += oprot->writeFieldBegin("orderCostCurrencyId", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->orderCostCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orderCost) {
    xfer += oprot->writeFieldBegin("orderCost", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32(this->orderCost);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("orderTimeBasis", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->orderTimeBasis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("earnedCurrencyId", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->earnedCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("earned", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->earned);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.palPointsProduced) {
    xfer += oprot->writeFieldBegin("palPointsProduced", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32(this->palPointsProduced);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rushBonusPalPoints) {
    xfer += oprot->writeFieldBegin("rushBonusPalPoints", ::apache::thrift::protocol::T_I32, 33);
    xfer += oprot->writeI32(this->rushBonusPalPoints);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.xpProduced) {
    xfer += oprot->writeFieldBegin("xpProduced", ::apache::thrift::protocol::T_I32, 34);
    xfer += oprot->writeI32(this->xpProduced);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildMatePalPointsProduced) {
    xfer += oprot->writeFieldBegin("guildMatePalPointsProduced", ::apache::thrift::protocol::T_I32, 40);
    xfer += oprot->writeI32(this->guildMatePalPointsProduced);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildMatePalPointsRushBonus) {
    xfer += oprot->writeFieldBegin("guildMatePalPointsRushBonus", ::apache::thrift::protocol::T_I32, 41);
    xfer += oprot->writeI32(this->guildMatePalPointsRushBonus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lootListId) {
    xfer += oprot->writeFieldBegin("lootListId", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->lootListId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NewBusinessOrder &a, NewBusinessOrder &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.businessId, b.businessId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.sortIndex, b.sortIndex);
  swap(a.recipeId, b.recipeId);
  swap(a.orderCostCurrencyId, b.orderCostCurrencyId);
  swap(a.orderCost, b.orderCost);
  swap(a.orderTimeBasis, b.orderTimeBasis);
  swap(a.earnedCurrencyId, b.earnedCurrencyId);
  swap(a.earned, b.earned);
  swap(a.palPointsProduced, b.palPointsProduced);
  swap(a.rushBonusPalPoints, b.rushBonusPalPoints);
  swap(a.xpProduced, b.xpProduced);
  swap(a.guildMatePalPointsProduced, b.guildMatePalPointsProduced);
  swap(a.guildMatePalPointsRushBonus, b.guildMatePalPointsRushBonus);
  swap(a.lootListId, b.lootListId);
  swap(a.__isset, b.__isset);
}

NewBusinessOrder::NewBusinessOrder(const NewBusinessOrder& other141) {
  orderId = other141.orderId;
  businessId = other141.businessId;
  eventIds = other141.eventIds;
  eventPhases = other141.eventPhases;
  sortIndex = other141.sortIndex;
  recipeId = other141.recipeId;
  orderCostCurrencyId = other141.orderCostCurrencyId;
  orderCost = other141.orderCost;
  orderTimeBasis = other141.orderTimeBasis;
  earnedCurrencyId = other141.earnedCurrencyId;
  earned = other141.earned;
  palPointsProduced = other141.palPointsProduced;
  rushBonusPalPoints = other141.rushBonusPalPoints;
  xpProduced = other141.xpProduced;
  guildMatePalPointsProduced = other141.guildMatePalPointsProduced;
  guildMatePalPointsRushBonus = other141.guildMatePalPointsRushBonus;
  lootListId = other141.lootListId;
  __isset = other141.__isset;
}
NewBusinessOrder& NewBusinessOrder::operator=(const NewBusinessOrder& other142) {
  orderId = other142.orderId;
  businessId = other142.businessId;
  eventIds = other142.eventIds;
  eventPhases = other142.eventPhases;
  sortIndex = other142.sortIndex;
  recipeId = other142.recipeId;
  orderCostCurrencyId = other142.orderCostCurrencyId;
  orderCost = other142.orderCost;
  orderTimeBasis = other142.orderTimeBasis;
  earnedCurrencyId = other142.earnedCurrencyId;
  earned = other142.earned;
  palPointsProduced = other142.palPointsProduced;
  rushBonusPalPoints = other142.rushBonusPalPoints;
  xpProduced = other142.xpProduced;
  guildMatePalPointsProduced = other142.guildMatePalPointsProduced;
  guildMatePalPointsRushBonus = other142.guildMatePalPointsRushBonus;
  lootListId = other142.lootListId;
  __isset = other142.__isset;
  return *this;
}
void NewBusinessOrder::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NewBusinessOrder(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "businessId=" << to_string(businessId);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "sortIndex="; (__isset.sortIndex ? (out << to_string(sortIndex)) : (out << "<null>"));
  out << ", " << "recipeId="; (__isset.recipeId ? (out << to_string(recipeId)) : (out << "<null>"));
  out << ", " << "orderCostCurrencyId="; (__isset.orderCostCurrencyId ? (out << to_string(orderCostCurrencyId)) : (out << "<null>"));
  out << ", " << "orderCost="; (__isset.orderCost ? (out << to_string(orderCost)) : (out << "<null>"));
  out << ", " << "orderTimeBasis=" << to_string(orderTimeBasis);
  out << ", " << "earnedCurrencyId=" << to_string(earnedCurrencyId);
  out << ", " << "earned=" << to_string(earned);
  out << ", " << "palPointsProduced="; (__isset.palPointsProduced ? (out << to_string(palPointsProduced)) : (out << "<null>"));
  out << ", " << "rushBonusPalPoints="; (__isset.rushBonusPalPoints ? (out << to_string(rushBonusPalPoints)) : (out << "<null>"));
  out << ", " << "xpProduced="; (__isset.xpProduced ? (out << to_string(xpProduced)) : (out << "<null>"));
  out << ", " << "guildMatePalPointsProduced="; (__isset.guildMatePalPointsProduced ? (out << to_string(guildMatePalPointsProduced)) : (out << "<null>"));
  out << ", " << "guildMatePalPointsRushBonus="; (__isset.guildMatePalPointsRushBonus ? (out << to_string(guildMatePalPointsRushBonus)) : (out << "<null>"));
  out << ", " << "lootListId="; (__isset.lootListId ? (out << to_string(lootListId)) : (out << "<null>"));
  out << ")";
}


Deco::~Deco() throw() {
}


void Deco::__set_decoId(const DecoID& val) {
  this->decoId = val;
}

void Deco::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
}

void Deco::__set_bonusCurrencyId(const CurrencyID& val) {
  this->bonusCurrencyId = val;
}

void Deco::__set_tier1(const int32_t val) {
  this->tier1 = val;
}

void Deco::__set_tier1Bonus(const int32_t val) {
  this->tier1Bonus = val;
}

void Deco::__set_tier2(const int32_t val) {
  this->tier2 = val;
}

void Deco::__set_tier2Bonus(const int32_t val) {
  this->tier2Bonus = val;
}

void Deco::__set_tier3(const int32_t val) {
  this->tier3 = val;
}

void Deco::__set_tier3Bonus(const int32_t val) {
  this->tier3Bonus = val;
}

void Deco::__set_roadEditorGroup(const int32_t val) {
  this->roadEditorGroup = val;
__isset.roadEditorGroup = true;
}

void Deco::__set_isRiver(const bool val) {
  this->isRiver = val;
__isset.isRiver = true;
}
std::ostream& operator<<(std::ostream& out, const Deco& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Deco::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_decoId = false;
  bool isset_buildingId = false;
  bool isset_bonusCurrencyId = false;
  bool isset_tier1 = false;
  bool isset_tier1Bonus = false;
  bool isset_tier2 = false;
  bool isset_tier2Bonus = false;
  bool isset_tier3 = false;
  bool isset_tier3Bonus = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->decoId);
          isset_decoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          isset_buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bonusCurrencyId);
          isset_bonusCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tier1);
          isset_tier1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tier1Bonus);
          isset_tier1Bonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tier2);
          isset_tier2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tier2Bonus);
          isset_tier2Bonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tier3);
          isset_tier3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tier3Bonus);
          isset_tier3Bonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roadEditorGroup);
          this->__isset.roadEditorGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isRiver);
          this->__isset.isRiver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_decoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bonusCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tier1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tier1Bonus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tier2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tier2Bonus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tier3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tier3Bonus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Deco::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Deco");

  xfer += oprot->writeFieldBegin("decoId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->decoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bonusCurrencyId", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->bonusCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tier1", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->tier1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tier1Bonus", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->tier1Bonus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tier2", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->tier2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tier2Bonus", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->tier2Bonus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tier3", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->tier3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tier3Bonus", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->tier3Bonus);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.roadEditorGroup) {
    xfer += oprot->writeFieldBegin("roadEditorGroup", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32(this->roadEditorGroup);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isRiver) {
    xfer += oprot->writeFieldBegin("isRiver", ::apache::thrift::protocol::T_BOOL, 50);
    xfer += oprot->writeBool(this->isRiver);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Deco &a, Deco &b) {
  using ::std::swap;
  swap(a.decoId, b.decoId);
  swap(a.buildingId, b.buildingId);
  swap(a.bonusCurrencyId, b.bonusCurrencyId);
  swap(a.tier1, b.tier1);
  swap(a.tier1Bonus, b.tier1Bonus);
  swap(a.tier2, b.tier2);
  swap(a.tier2Bonus, b.tier2Bonus);
  swap(a.tier3, b.tier3);
  swap(a.tier3Bonus, b.tier3Bonus);
  swap(a.roadEditorGroup, b.roadEditorGroup);
  swap(a.isRiver, b.isRiver);
  swap(a.__isset, b.__isset);
}

Deco::Deco(const Deco& other143) {
  decoId = other143.decoId;
  buildingId = other143.buildingId;
  bonusCurrencyId = other143.bonusCurrencyId;
  tier1 = other143.tier1;
  tier1Bonus = other143.tier1Bonus;
  tier2 = other143.tier2;
  tier2Bonus = other143.tier2Bonus;
  tier3 = other143.tier3;
  tier3Bonus = other143.tier3Bonus;
  roadEditorGroup = other143.roadEditorGroup;
  isRiver = other143.isRiver;
  __isset = other143.__isset;
}
Deco& Deco::operator=(const Deco& other144) {
  decoId = other144.decoId;
  buildingId = other144.buildingId;
  bonusCurrencyId = other144.bonusCurrencyId;
  tier1 = other144.tier1;
  tier1Bonus = other144.tier1Bonus;
  tier2 = other144.tier2;
  tier2Bonus = other144.tier2Bonus;
  tier3 = other144.tier3;
  tier3Bonus = other144.tier3Bonus;
  roadEditorGroup = other144.roadEditorGroup;
  isRiver = other144.isRiver;
  __isset = other144.__isset;
  return *this;
}
void Deco::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Deco(";
  out << "decoId=" << to_string(decoId);
  out << ", " << "buildingId=" << to_string(buildingId);
  out << ", " << "bonusCurrencyId=" << to_string(bonusCurrencyId);
  out << ", " << "tier1=" << to_string(tier1);
  out << ", " << "tier1Bonus=" << to_string(tier1Bonus);
  out << ", " << "tier2=" << to_string(tier2);
  out << ", " << "tier2Bonus=" << to_string(tier2Bonus);
  out << ", " << "tier3=" << to_string(tier3);
  out << ", " << "tier3Bonus=" << to_string(tier3Bonus);
  out << ", " << "roadEditorGroup="; (__isset.roadEditorGroup ? (out << to_string(roadEditorGroup)) : (out << "<null>"));
  out << ", " << "isRiver="; (__isset.isRiver ? (out << to_string(isRiver)) : (out << "<null>"));
  out << ")";
}


Blocker::~Blocker() throw() {
}


void Blocker::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
}

void Blocker::__set_removeCurrencyId(const CurrencyID& val) {
  this->removeCurrencyId = val;
}

void Blocker::__set_removeCost(const int32_t val) {
  this->removeCost = val;
}
std::ostream& operator<<(std::ostream& out, const Blocker& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Blocker::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_buildingId = false;
  bool isset_removeCurrencyId = false;
  bool isset_removeCost = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          isset_buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->removeCurrencyId);
          isset_removeCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->removeCost);
          isset_removeCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_buildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_removeCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_removeCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Blocker::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Blocker");

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("removeCurrencyId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->removeCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("removeCost", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->removeCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Blocker &a, Blocker &b) {
  using ::std::swap;
  swap(a.buildingId, b.buildingId);
  swap(a.removeCurrencyId, b.removeCurrencyId);
  swap(a.removeCost, b.removeCost);
}

Blocker::Blocker(const Blocker& other145) {
  buildingId = other145.buildingId;
  removeCurrencyId = other145.removeCurrencyId;
  removeCost = other145.removeCost;
}
Blocker& Blocker::operator=(const Blocker& other146) {
  buildingId = other146.buildingId;
  removeCurrencyId = other146.removeCurrencyId;
  removeCost = other146.removeCost;
  return *this;
}
void Blocker::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Blocker(";
  out << "buildingId=" << to_string(buildingId);
  out << ", " << "removeCurrencyId=" << to_string(removeCurrencyId);
  out << ", " << "removeCost=" << to_string(removeCost);
  out << ")";
}


WeightedLoot::~WeightedLoot() throw() {
}


void WeightedLoot::__set_lootListId(const WeightedLootListID& val) {
  this->lootListId = val;
}

void WeightedLoot::__set_itemId(const CurrencyID& val) {
  this->itemId = val;
__isset.itemId = true;
}

void WeightedLoot::__set_itemType(const LootItemType::type val) {
  this->itemType = val;
}

void WeightedLoot::__set_eventId(const EventID& val) {
  this->eventId = val;
__isset.eventId = true;
}

void WeightedLoot::__set_itemAmount(const int32_t val) {
  this->itemAmount = val;
}

void WeightedLoot::__set_probability(const double val) {
  this->probability = val;
}

void WeightedLoot::__set_bonusProbability(const double val) {
  this->bonusProbability = val;
__isset.bonusProbability = true;
}

void WeightedLoot::__set_bonusMultiplier(const double val) {
  this->bonusMultiplier = val;
__isset.bonusMultiplier = true;
}

void WeightedLoot::__set_probabilityMultiplier(const double val) {
  this->probabilityMultiplier = val;
__isset.probabilityMultiplier = true;
}
std::ostream& operator<<(std::ostream& out, const WeightedLoot& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WeightedLoot::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lootListId = false;
  bool isset_itemType = false;
  bool isset_itemAmount = false;
  bool isset_probability = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lootListId);
          isset_lootListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemId);
          this->__isset.itemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast147;
          xfer += iprot->readI32(ecast147);
          this->itemType = (LootItemType::type)ecast147;
          isset_itemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->itemAmount);
          isset_itemAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->probability);
          isset_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bonusProbability);
          this->__isset.bonusProbability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bonusMultiplier);
          this->__isset.bonusMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->probabilityMultiplier);
          this->__isset.probabilityMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lootListId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_probability)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WeightedLoot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WeightedLoot");

  xfer += oprot->writeFieldBegin("lootListId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->lootListId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.itemId) {
    xfer += oprot->writeFieldBegin("itemId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->itemId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("itemType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->itemType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("itemAmount", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->itemAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("probability", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->probability);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bonusProbability) {
    xfer += oprot->writeFieldBegin("bonusProbability", ::apache::thrift::protocol::T_DOUBLE, 21);
    xfer += oprot->writeDouble(this->bonusProbability);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bonusMultiplier) {
    xfer += oprot->writeFieldBegin("bonusMultiplier", ::apache::thrift::protocol::T_DOUBLE, 22);
    xfer += oprot->writeDouble(this->bonusMultiplier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.probabilityMultiplier) {
    xfer += oprot->writeFieldBegin("probabilityMultiplier", ::apache::thrift::protocol::T_DOUBLE, 30);
    xfer += oprot->writeDouble(this->probabilityMultiplier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WeightedLoot &a, WeightedLoot &b) {
  using ::std::swap;
  swap(a.lootListId, b.lootListId);
  swap(a.itemId, b.itemId);
  swap(a.itemType, b.itemType);
  swap(a.eventId, b.eventId);
  swap(a.itemAmount, b.itemAmount);
  swap(a.probability, b.probability);
  swap(a.bonusProbability, b.bonusProbability);
  swap(a.bonusMultiplier, b.bonusMultiplier);
  swap(a.probabilityMultiplier, b.probabilityMultiplier);
  swap(a.__isset, b.__isset);
}

WeightedLoot::WeightedLoot(const WeightedLoot& other148) {
  lootListId = other148.lootListId;
  itemId = other148.itemId;
  itemType = other148.itemType;
  eventId = other148.eventId;
  itemAmount = other148.itemAmount;
  probability = other148.probability;
  bonusProbability = other148.bonusProbability;
  bonusMultiplier = other148.bonusMultiplier;
  probabilityMultiplier = other148.probabilityMultiplier;
  __isset = other148.__isset;
}
WeightedLoot& WeightedLoot::operator=(const WeightedLoot& other149) {
  lootListId = other149.lootListId;
  itemId = other149.itemId;
  itemType = other149.itemType;
  eventId = other149.eventId;
  itemAmount = other149.itemAmount;
  probability = other149.probability;
  bonusProbability = other149.bonusProbability;
  bonusMultiplier = other149.bonusMultiplier;
  probabilityMultiplier = other149.probabilityMultiplier;
  __isset = other149.__isset;
  return *this;
}
void WeightedLoot::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WeightedLoot(";
  out << "lootListId=" << to_string(lootListId);
  out << ", " << "itemId="; (__isset.itemId ? (out << to_string(itemId)) : (out << "<null>"));
  out << ", " << "itemType=" << to_string(itemType);
  out << ", " << "eventId="; (__isset.eventId ? (out << to_string(eventId)) : (out << "<null>"));
  out << ", " << "itemAmount=" << to_string(itemAmount);
  out << ", " << "probability=" << to_string(probability);
  out << ", " << "bonusProbability="; (__isset.bonusProbability ? (out << to_string(bonusProbability)) : (out << "<null>"));
  out << ", " << "bonusMultiplier="; (__isset.bonusMultiplier ? (out << to_string(bonusMultiplier)) : (out << "<null>"));
  out << ", " << "probabilityMultiplier="; (__isset.probabilityMultiplier ? (out << to_string(probabilityMultiplier)) : (out << "<null>"));
  out << ")";
}


GachaGroup::~GachaGroup() throw() {
}


void GachaGroup::__set_gachaGroupId(const GachaGroupID& val) {
  this->gachaGroupId = val;
}

void GachaGroup::__set_index(const int32_t val) {
  this->index = val;
}

void GachaGroup::__set_gachaOffers(const std::vector<GachaOfferID> & val) {
  this->gachaOffers = val;
}

void GachaGroup::__set_description(const std::string& val) {
  this->description = val;
}

void GachaGroup::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void GachaGroup::__set_cardImage(const AssetPath& val) {
  this->cardImage = val;
}

void GachaGroup::__set_badge(const std::string& val) {
  this->badge = val;
__isset.badge = true;
}

void GachaGroup::__set_overlayImage(const AssetPath& val) {
  this->overlayImage = val;
}

void GachaGroup::__set_bundleId(const std::string& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void GachaGroup::__set_newDescription(const LocalizedString& val) {
  this->newDescription = val;
__isset.newDescription = true;
}

void GachaGroup::__set_detailCardBg9(const AssetPath& val) {
  this->detailCardBg9 = val;
}

void GachaGroup::__set_detailCardHaveRays(const bool val) {
  this->detailCardHaveRays = val;
__isset.detailCardHaveRays = true;
}

void GachaGroup::__set_detailCardBizAreaBg(const std::string& val) {
  this->detailCardBizAreaBg = val;
}

void GachaGroup::__set_detailCardBizAreaTextBg(const std::string& val) {
  this->detailCardBizAreaTextBg = val;
}

void GachaGroup::__set_badge2(const LocalizedString& val) {
  this->badge2 = val;
__isset.badge2 = true;
}

void GachaGroup::__set_badge2Sticker(const std::string& val) {
  this->badge2Sticker = val;
__isset.badge2Sticker = true;
}

void GachaGroup::__set_moduleImage(const AssetPath& val) {
  this->moduleImage = val;
__isset.moduleImage = true;
}

void GachaGroup::__set_moduleCakeboxImage(const AssetPath& val) {
  this->moduleCakeboxImage = val;
__isset.moduleCakeboxImage = true;
}

void GachaGroup::__set_moduleRewardBuildingId(const BuildingID& val) {
  this->moduleRewardBuildingId = val;
__isset.moduleRewardBuildingId = true;
}

void GachaGroup::__set_moduleRewardImage(const AssetPath& val) {
  this->moduleRewardImage = val;
__isset.moduleRewardImage = true;
}

void GachaGroup::__set_detailCardFullscreenBg(const AssetPath& val) {
  this->detailCardFullscreenBg = val;
__isset.detailCardFullscreenBg = true;
}

void GachaGroup::__set_detailCardFullscreenBgBottom(const AssetPath& val) {
  this->detailCardFullscreenBgBottom = val;
__isset.detailCardFullscreenBgBottom = true;
}

void GachaGroup::__set_cardCountTextSingular(const LocalizedString& val) {
  this->cardCountTextSingular = val;
__isset.cardCountTextSingular = true;
}

void GachaGroup::__set_cardCountTextPlural(const LocalizedString& val) {
  this->cardCountTextPlural = val;
__isset.cardCountTextPlural = true;
}
std::ostream& operator<<(std::ostream& out, const GachaGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GachaGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gachaGroupId = false;
  bool isset_index = false;
  bool isset_gachaOffers = false;
  bool isset_description = false;
  bool isset_cardImage = false;
  bool isset_overlayImage = false;
  bool isset_detailCardBg9 = false;
  bool isset_detailCardBizAreaBg = false;
  bool isset_detailCardBizAreaTextBg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaGroupId);
          isset_gachaGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          isset_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gachaOffers.clear();
            uint32_t _size150;
            ::apache::thrift::protocol::TType _etype153;
            xfer += iprot->readListBegin(_etype153, _size150);
            this->gachaOffers.resize(_size150);
            uint32_t _i154;
            for (_i154 = 0; _i154 < _size150; ++_i154)
            {
              xfer += iprot->readString(this->gachaOffers[_i154]);
            }
            xfer += iprot->readListEnd();
          }
          isset_gachaOffers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          isset_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cardImage);
          isset_cardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->badge);
          this->__isset.badge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->overlayImage);
          isset_overlayImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDescription.read(iprot);
          this->__isset.newDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailCardBg9);
          isset_detailCardBg9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->detailCardHaveRays);
          this->__isset.detailCardHaveRays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailCardBizAreaBg);
          isset_detailCardBizAreaBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailCardBizAreaTextBg);
          isset_detailCardBizAreaTextBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->badge2.read(iprot);
          this->__isset.badge2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->badge2Sticker);
          this->__isset.badge2Sticker = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->moduleImage);
          this->__isset.moduleImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->moduleCakeboxImage);
          this->__isset.moduleCakeboxImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->moduleRewardBuildingId);
          this->__isset.moduleRewardBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->moduleRewardImage);
          this->__isset.moduleRewardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailCardFullscreenBg);
          this->__isset.detailCardFullscreenBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailCardFullscreenBgBottom);
          this->__isset.detailCardFullscreenBgBottom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cardCountTextSingular.read(iprot);
          this->__isset.cardCountTextSingular = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cardCountTextPlural.read(iprot);
          this->__isset.cardCountTextPlural = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gachaGroupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_index)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaOffers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_description)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cardImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_overlayImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detailCardBg9)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detailCardBizAreaBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detailCardBizAreaTextBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GachaGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GachaGroup");

  xfer += oprot->writeFieldBegin("gachaGroupId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->gachaGroupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaOffers", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->gachaOffers.size()));
    std::vector<GachaOfferID> ::const_iterator _iter155;
    for (_iter155 = this->gachaOffers.begin(); _iter155 != this->gachaOffers.end(); ++_iter155)
    {
      xfer += oprot->writeString((*_iter155));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("cardImage", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->cardImage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.badge) {
    xfer += oprot->writeFieldBegin("badge", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->badge);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("overlayImage", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->overlayImage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDescription) {
    xfer += oprot->writeFieldBegin("newDescription", ::apache::thrift::protocol::T_STRUCT, 21);
    xfer += this->newDescription.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("detailCardBg9", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->detailCardBg9);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.detailCardHaveRays) {
    xfer += oprot->writeFieldBegin("detailCardHaveRays", ::apache::thrift::protocol::T_BOOL, 31);
    xfer += oprot->writeBool(this->detailCardHaveRays);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("detailCardBizAreaBg", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->detailCardBizAreaBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailCardBizAreaTextBg", ::apache::thrift::protocol::T_STRING, 33);
  xfer += oprot->writeString(this->detailCardBizAreaTextBg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.badge2) {
    xfer += oprot->writeFieldBegin("badge2", ::apache::thrift::protocol::T_STRUCT, 40);
    xfer += this->badge2.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.badge2Sticker) {
    xfer += oprot->writeFieldBegin("badge2Sticker", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->badge2Sticker);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.moduleImage) {
    xfer += oprot->writeFieldBegin("moduleImage", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->moduleImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.moduleCakeboxImage) {
    xfer += oprot->writeFieldBegin("moduleCakeboxImage", ::apache::thrift::protocol::T_STRING, 51);
    xfer += oprot->writeString(this->moduleCakeboxImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.moduleRewardBuildingId) {
    xfer += oprot->writeFieldBegin("moduleRewardBuildingId", ::apache::thrift::protocol::T_STRING, 52);
    xfer += oprot->writeString(this->moduleRewardBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.moduleRewardImage) {
    xfer += oprot->writeFieldBegin("moduleRewardImage", ::apache::thrift::protocol::T_STRING, 53);
    xfer += oprot->writeString(this->moduleRewardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailCardFullscreenBg) {
    xfer += oprot->writeFieldBegin("detailCardFullscreenBg", ::apache::thrift::protocol::T_STRING, 54);
    xfer += oprot->writeString(this->detailCardFullscreenBg);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailCardFullscreenBgBottom) {
    xfer += oprot->writeFieldBegin("detailCardFullscreenBgBottom", ::apache::thrift::protocol::T_STRING, 55);
    xfer += oprot->writeString(this->detailCardFullscreenBgBottom);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cardCountTextSingular) {
    xfer += oprot->writeFieldBegin("cardCountTextSingular", ::apache::thrift::protocol::T_STRUCT, 56);
    xfer += this->cardCountTextSingular.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cardCountTextPlural) {
    xfer += oprot->writeFieldBegin("cardCountTextPlural", ::apache::thrift::protocol::T_STRUCT, 57);
    xfer += this->cardCountTextPlural.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GachaGroup &a, GachaGroup &b) {
  using ::std::swap;
  swap(a.gachaGroupId, b.gachaGroupId);
  swap(a.index, b.index);
  swap(a.gachaOffers, b.gachaOffers);
  swap(a.description, b.description);
  swap(a.newDisplay, b.newDisplay);
  swap(a.cardImage, b.cardImage);
  swap(a.badge, b.badge);
  swap(a.overlayImage, b.overlayImage);
  swap(a.bundleId, b.bundleId);
  swap(a.newDescription, b.newDescription);
  swap(a.detailCardBg9, b.detailCardBg9);
  swap(a.detailCardHaveRays, b.detailCardHaveRays);
  swap(a.detailCardBizAreaBg, b.detailCardBizAreaBg);
  swap(a.detailCardBizAreaTextBg, b.detailCardBizAreaTextBg);
  swap(a.badge2, b.badge2);
  swap(a.badge2Sticker, b.badge2Sticker);
  swap(a.moduleImage, b.moduleImage);
  swap(a.moduleCakeboxImage, b.moduleCakeboxImage);
  swap(a.moduleRewardBuildingId, b.moduleRewardBuildingId);
  swap(a.moduleRewardImage, b.moduleRewardImage);
  swap(a.detailCardFullscreenBg, b.detailCardFullscreenBg);
  swap(a.detailCardFullscreenBgBottom, b.detailCardFullscreenBgBottom);
  swap(a.cardCountTextSingular, b.cardCountTextSingular);
  swap(a.cardCountTextPlural, b.cardCountTextPlural);
  swap(a.__isset, b.__isset);
}

GachaGroup::GachaGroup(const GachaGroup& other156) {
  gachaGroupId = other156.gachaGroupId;
  index = other156.index;
  gachaOffers = other156.gachaOffers;
  description = other156.description;
  newDisplay = other156.newDisplay;
  cardImage = other156.cardImage;
  badge = other156.badge;
  overlayImage = other156.overlayImage;
  bundleId = other156.bundleId;
  newDescription = other156.newDescription;
  detailCardBg9 = other156.detailCardBg9;
  detailCardHaveRays = other156.detailCardHaveRays;
  detailCardBizAreaBg = other156.detailCardBizAreaBg;
  detailCardBizAreaTextBg = other156.detailCardBizAreaTextBg;
  badge2 = other156.badge2;
  badge2Sticker = other156.badge2Sticker;
  moduleImage = other156.moduleImage;
  moduleCakeboxImage = other156.moduleCakeboxImage;
  moduleRewardBuildingId = other156.moduleRewardBuildingId;
  moduleRewardImage = other156.moduleRewardImage;
  detailCardFullscreenBg = other156.detailCardFullscreenBg;
  detailCardFullscreenBgBottom = other156.detailCardFullscreenBgBottom;
  cardCountTextSingular = other156.cardCountTextSingular;
  cardCountTextPlural = other156.cardCountTextPlural;
  __isset = other156.__isset;
}
GachaGroup& GachaGroup::operator=(const GachaGroup& other157) {
  gachaGroupId = other157.gachaGroupId;
  index = other157.index;
  gachaOffers = other157.gachaOffers;
  description = other157.description;
  newDisplay = other157.newDisplay;
  cardImage = other157.cardImage;
  badge = other157.badge;
  overlayImage = other157.overlayImage;
  bundleId = other157.bundleId;
  newDescription = other157.newDescription;
  detailCardBg9 = other157.detailCardBg9;
  detailCardHaveRays = other157.detailCardHaveRays;
  detailCardBizAreaBg = other157.detailCardBizAreaBg;
  detailCardBizAreaTextBg = other157.detailCardBizAreaTextBg;
  badge2 = other157.badge2;
  badge2Sticker = other157.badge2Sticker;
  moduleImage = other157.moduleImage;
  moduleCakeboxImage = other157.moduleCakeboxImage;
  moduleRewardBuildingId = other157.moduleRewardBuildingId;
  moduleRewardImage = other157.moduleRewardImage;
  detailCardFullscreenBg = other157.detailCardFullscreenBg;
  detailCardFullscreenBgBottom = other157.detailCardFullscreenBgBottom;
  cardCountTextSingular = other157.cardCountTextSingular;
  cardCountTextPlural = other157.cardCountTextPlural;
  __isset = other157.__isset;
  return *this;
}
void GachaGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GachaGroup(";
  out << "gachaGroupId=" << to_string(gachaGroupId);
  out << ", " << "index=" << to_string(index);
  out << ", " << "gachaOffers=" << to_string(gachaOffers);
  out << ", " << "description=" << to_string(description);
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "cardImage=" << to_string(cardImage);
  out << ", " << "badge="; (__isset.badge ? (out << to_string(badge)) : (out << "<null>"));
  out << ", " << "overlayImage=" << to_string(overlayImage);
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "newDescription="; (__isset.newDescription ? (out << to_string(newDescription)) : (out << "<null>"));
  out << ", " << "detailCardBg9=" << to_string(detailCardBg9);
  out << ", " << "detailCardHaveRays="; (__isset.detailCardHaveRays ? (out << to_string(detailCardHaveRays)) : (out << "<null>"));
  out << ", " << "detailCardBizAreaBg=" << to_string(detailCardBizAreaBg);
  out << ", " << "detailCardBizAreaTextBg=" << to_string(detailCardBizAreaTextBg);
  out << ", " << "badge2="; (__isset.badge2 ? (out << to_string(badge2)) : (out << "<null>"));
  out << ", " << "badge2Sticker="; (__isset.badge2Sticker ? (out << to_string(badge2Sticker)) : (out << "<null>"));
  out << ", " << "moduleImage="; (__isset.moduleImage ? (out << to_string(moduleImage)) : (out << "<null>"));
  out << ", " << "moduleCakeboxImage="; (__isset.moduleCakeboxImage ? (out << to_string(moduleCakeboxImage)) : (out << "<null>"));
  out << ", " << "moduleRewardBuildingId="; (__isset.moduleRewardBuildingId ? (out << to_string(moduleRewardBuildingId)) : (out << "<null>"));
  out << ", " << "moduleRewardImage="; (__isset.moduleRewardImage ? (out << to_string(moduleRewardImage)) : (out << "<null>"));
  out << ", " << "detailCardFullscreenBg="; (__isset.detailCardFullscreenBg ? (out << to_string(detailCardFullscreenBg)) : (out << "<null>"));
  out << ", " << "detailCardFullscreenBgBottom="; (__isset.detailCardFullscreenBgBottom ? (out << to_string(detailCardFullscreenBgBottom)) : (out << "<null>"));
  out << ", " << "cardCountTextSingular="; (__isset.cardCountTextSingular ? (out << to_string(cardCountTextSingular)) : (out << "<null>"));
  out << ", " << "cardCountTextPlural="; (__isset.cardCountTextPlural ? (out << to_string(cardCountTextPlural)) : (out << "<null>"));
  out << ")";
}


GachaBanner::~GachaBanner() throw() {
}


void GachaBanner::__set_gachaBannerId(const GachaBannerID& val) {
  this->gachaBannerId = val;
}

void GachaBanner::__set_order(const int32_t val) {
  this->order = val;
}

void GachaBanner::__set_display(const LocalizedString& val) {
  this->display = val;
__isset.display = true;
}

void GachaBanner::__set_image(const AssetPath& val) {
  this->image = val;
}

void GachaBanner::__set_enabled(const bool val) {
  this->enabled = val;
}

void GachaBanner::__set_targetGachaGroupId(const GachaGroupID& val) {
  this->targetGachaGroupId = val;
__isset.targetGachaGroupId = true;
}

void GachaBanner::__set_messageAction(const MessageButtonAction::type val) {
  this->messageAction = val;
__isset.messageAction = true;
}

void GachaBanner::__set_messageActionParameter(const std::string& val) {
  this->messageActionParameter = val;
__isset.messageActionParameter = true;
}

void GachaBanner::__set_bundleId(const std::string& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void GachaBanner::__set_targetGachaOfferId(const GachaOfferID& val) {
  this->targetGachaOfferId = val;
__isset.targetGachaOfferId = true;
}

void GachaBanner::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
__isset.eventIds = true;
}

void GachaBanner::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
__isset.eventPhases = true;
}

void GachaBanner::__set_showRank(const int32_t val) {
  this->showRank = val;
__isset.showRank = true;
}

void GachaBanner::__set_hideRank(const int32_t val) {
  this->hideRank = val;
__isset.hideRank = true;
}
std::ostream& operator<<(std::ostream& out, const GachaBanner& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GachaBanner::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gachaBannerId = false;
  bool isset_order = false;
  bool isset_image = false;
  bool isset_enabled = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaBannerId);
          isset_gachaBannerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          isset_order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          this->__isset.display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->image);
          isset_image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          isset_enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetGachaGroupId);
          this->__isset.targetGachaGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast158;
          xfer += iprot->readI32(ecast158);
          this->messageAction = (MessageButtonAction::type)ecast158;
          this->__isset.messageAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageActionParameter);
          this->__isset.messageActionParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetGachaOfferId);
          this->__isset.targetGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size159;
            ::apache::thrift::protocol::TType _etype162;
            xfer += iprot->readListBegin(_etype162, _size159);
            this->eventIds.resize(_size159);
            uint32_t _i163;
            for (_i163 = 0; _i163 < _size159; ++_i163)
            {
              xfer += iprot->readString(this->eventIds[_i163]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast164;
          xfer += iprot->readI32(ecast164);
          this->eventPhases = (EventPhases::type)ecast164;
          this->__isset.eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          this->__isset.showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          this->__isset.hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gachaBannerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_order)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_image)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GachaBanner::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GachaBanner");

  xfer += oprot->writeFieldBegin("gachaBannerId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->gachaBannerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.display) {
    xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->display.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("image", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->image);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.targetGachaGroupId) {
    xfer += oprot->writeFieldBegin("targetGachaGroupId", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->targetGachaGroupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageAction) {
    xfer += oprot->writeFieldBegin("messageAction", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->messageAction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageActionParameter) {
    xfer += oprot->writeFieldBegin("messageActionParameter", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->messageActionParameter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetGachaOfferId) {
    xfer += oprot->writeFieldBegin("targetGachaOfferId", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->targetGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventIds) {
    xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 30);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
      std::vector<EventID> ::const_iterator _iter165;
      for (_iter165 = this->eventIds.begin(); _iter165 != this->eventIds.end(); ++_iter165)
      {
        xfer += oprot->writeString((*_iter165));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPhases) {
    xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32((int32_t)this->eventPhases);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showRank) {
    xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32(this->showRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideRank) {
    xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 33);
    xfer += oprot->writeI32(this->hideRank);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GachaBanner &a, GachaBanner &b) {
  using ::std::swap;
  swap(a.gachaBannerId, b.gachaBannerId);
  swap(a.order, b.order);
  swap(a.display, b.display);
  swap(a.image, b.image);
  swap(a.enabled, b.enabled);
  swap(a.targetGachaGroupId, b.targetGachaGroupId);
  swap(a.messageAction, b.messageAction);
  swap(a.messageActionParameter, b.messageActionParameter);
  swap(a.bundleId, b.bundleId);
  swap(a.targetGachaOfferId, b.targetGachaOfferId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.showRank, b.showRank);
  swap(a.hideRank, b.hideRank);
  swap(a.__isset, b.__isset);
}

GachaBanner::GachaBanner(const GachaBanner& other166) {
  gachaBannerId = other166.gachaBannerId;
  order = other166.order;
  display = other166.display;
  image = other166.image;
  enabled = other166.enabled;
  targetGachaGroupId = other166.targetGachaGroupId;
  messageAction = other166.messageAction;
  messageActionParameter = other166.messageActionParameter;
  bundleId = other166.bundleId;
  targetGachaOfferId = other166.targetGachaOfferId;
  eventIds = other166.eventIds;
  eventPhases = other166.eventPhases;
  showRank = other166.showRank;
  hideRank = other166.hideRank;
  __isset = other166.__isset;
}
GachaBanner& GachaBanner::operator=(const GachaBanner& other167) {
  gachaBannerId = other167.gachaBannerId;
  order = other167.order;
  display = other167.display;
  image = other167.image;
  enabled = other167.enabled;
  targetGachaGroupId = other167.targetGachaGroupId;
  messageAction = other167.messageAction;
  messageActionParameter = other167.messageActionParameter;
  bundleId = other167.bundleId;
  targetGachaOfferId = other167.targetGachaOfferId;
  eventIds = other167.eventIds;
  eventPhases = other167.eventPhases;
  showRank = other167.showRank;
  hideRank = other167.hideRank;
  __isset = other167.__isset;
  return *this;
}
void GachaBanner::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GachaBanner(";
  out << "gachaBannerId=" << to_string(gachaBannerId);
  out << ", " << "order=" << to_string(order);
  out << ", " << "display="; (__isset.display ? (out << to_string(display)) : (out << "<null>"));
  out << ", " << "image=" << to_string(image);
  out << ", " << "enabled=" << to_string(enabled);
  out << ", " << "targetGachaGroupId="; (__isset.targetGachaGroupId ? (out << to_string(targetGachaGroupId)) : (out << "<null>"));
  out << ", " << "messageAction="; (__isset.messageAction ? (out << to_string(messageAction)) : (out << "<null>"));
  out << ", " << "messageActionParameter="; (__isset.messageActionParameter ? (out << to_string(messageActionParameter)) : (out << "<null>"));
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "targetGachaOfferId="; (__isset.targetGachaOfferId ? (out << to_string(targetGachaOfferId)) : (out << "<null>"));
  out << ", " << "eventIds="; (__isset.eventIds ? (out << to_string(eventIds)) : (out << "<null>"));
  out << ", " << "eventPhases="; (__isset.eventPhases ? (out << to_string(eventPhases)) : (out << "<null>"));
  out << ", " << "showRank="; (__isset.showRank ? (out << to_string(showRank)) : (out << "<null>"));
  out << ", " << "hideRank="; (__isset.hideRank ? (out << to_string(hideRank)) : (out << "<null>"));
  out << ")";
}


GachaOffer::~GachaOffer() throw() {
}


void GachaOffer::__set_gachaOfferId(const GachaOfferID& val) {
  this->gachaOfferId = val;
}

void GachaOffer::__set_costCurrencyId(const CurrencyID& val) {
  this->costCurrencyId = val;
}

void GachaOffer::__set_costAmount(const int32_t val) {
  this->costAmount = val;
}

void GachaOffer::__set_gachaPackIds(const std::vector<GachaPackID> & val) {
  this->gachaPackIds = val;
}

void GachaOffer::__set_gachaPackSpins(const std::vector<int32_t> & val) {
  this->gachaPackSpins = val;
}

void GachaOffer::__set_unlockGachaOfferIds(const std::vector<GachaOfferID> & val) {
  this->unlockGachaOfferIds = val;
}

void GachaOffer::__set_maxSpins(const int32_t val) {
  this->maxSpins = val;
}

void GachaOffer::__set_maxFreeSpinsPerDay(const int32_t val) {
  this->maxFreeSpinsPerDay = val;
}

void GachaOffer::__set_freeSpinCooldown(const int32_t val) {
  this->freeSpinCooldown = val;
}

void GachaOffer::__set_requiredLevelId(const LevelID& val) {
  this->requiredLevelId = val;
__isset.requiredLevelId = true;
}

void GachaOffer::__set_cakeboxLevelDotId(const LevelDotID& val) {
  this->cakeboxLevelDotId = val;
__isset.cakeboxLevelDotId = true;
}

void GachaOffer::__set_boxImage(const AssetPath& val) {
  this->boxImage = val;
__isset.boxImage = true;
}

void GachaOffer::__set_openBoxImage(const AssetPath& val) {
  this->openBoxImage = val;
__isset.openBoxImage = true;
}

void GachaOffer::__set_purchaseSound(const std::string& val) {
  this->purchaseSound = val;
__isset.purchaseSound = true;
}

void GachaOffer::__set_notifyFreeSpinIndex(const int32_t val) {
  this->notifyFreeSpinIndex = val;
__isset.notifyFreeSpinIndex = true;
}

void GachaOffer::__set_eventLockId(const EventLockID& val) {
  this->eventLockId = val;
__isset.eventLockId = true;
}

void GachaOffer::__set_doesNotRestock(const bool val) {
  this->doesNotRestock = val;
__isset.doesNotRestock = true;
}

void GachaOffer::__set_display(const LocalizedString& val) {
  this->display = val;
__isset.display = true;
}

void GachaOffer::__set_description(const LocalizedString& val) {
  this->description = val;
__isset.description = true;
}

void GachaOffer::__set_storeIndex(const int32_t val) {
  this->storeIndex = val;
__isset.storeIndex = true;
}

void GachaOffer::__set_badge(const LocalizedString& val) {
  this->badge = val;
__isset.badge = true;
}

void GachaOffer::__set_badge2(const LocalizedString& val) {
  this->badge2 = val;
__isset.badge2 = true;
}

void GachaOffer::__set_badge2Sticker(const AssetPath& val) {
  this->badge2Sticker = val;
__isset.badge2Sticker = true;
}

void GachaOffer::__set_storeCardImage(const AssetPath& val) {
  this->storeCardImage = val;
__isset.storeCardImage = true;
}

void GachaOffer::__set_storeCakeboxImage(const AssetPath& val) {
  this->storeCakeboxImage = val;
__isset.storeCakeboxImage = true;
}

void GachaOffer::__set_storeRewardBuildingId(const BuildingID& val) {
  this->storeRewardBuildingId = val;
__isset.storeRewardBuildingId = true;
}

void GachaOffer::__set_storeRewardImage(const AssetPath& val) {
  this->storeRewardImage = val;
__isset.storeRewardImage = true;
}

void GachaOffer::__set_detailCardFullscreenBg(const AssetPath& val) {
  this->detailCardFullscreenBg = val;
__isset.detailCardFullscreenBg = true;
}

void GachaOffer::__set_detailCardFullscreenBgBottom(const AssetPath& val) {
  this->detailCardFullscreenBgBottom = val;
__isset.detailCardFullscreenBgBottom = true;
}

void GachaOffer::__set_storeCardCountTextSingular(const LocalizedString& val) {
  this->storeCardCountTextSingular = val;
__isset.storeCardCountTextSingular = true;
}

void GachaOffer::__set_storeCardCountTextPlural(const LocalizedString& val) {
  this->storeCardCountTextPlural = val;
__isset.storeCardCountTextPlural = true;
}

void GachaOffer::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
__isset.eventIds = true;
}

void GachaOffer::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
__isset.eventPhases = true;
}

void GachaOffer::__set_showRank(const int32_t val) {
  this->showRank = val;
__isset.showRank = true;
}

void GachaOffer::__set_hideRank(const int32_t val) {
  this->hideRank = val;
__isset.hideRank = true;
}

void GachaOffer::__set_offerBackgroundImage(const std::string& val) {
  this->offerBackgroundImage = val;
__isset.offerBackgroundImage = true;
}

void GachaOffer::__set_cardImage(const std::string& val) {
  this->cardImage = val;
__isset.cardImage = true;
}

void GachaOffer::__set_productIcon(const std::string& val) {
  this->productIcon = val;
__isset.productIcon = true;
}

void GachaOffer::__set_ribbonImage(const std::string& val) {
  this->ribbonImage = val;
__isset.ribbonImage = true;
}

void GachaOffer::__set_ribbonText(const LocalizedString& val) {
  this->ribbonText = val;
__isset.ribbonText = true;
}

void GachaOffer::__set_showBuildingIds(const std::vector<BuildingID> & val) {
  this->showBuildingIds = val;
__isset.showBuildingIds = true;
}

void GachaOffer::__set_showTierInfo(const bool val) {
  this->showTierInfo = val;
__isset.showTierInfo = true;
}

void GachaOffer::__set_tierYouGetBuildingId(const BuildingID& val) {
  this->tierYouGetBuildingId = val;
__isset.tierYouGetBuildingId = true;
}

void GachaOffer::__set_tierTopRewardBuildingId(const BuildingID& val) {
  this->tierTopRewardBuildingId = val;
__isset.tierTopRewardBuildingId = true;
}

void GachaOffer::__set_tierYouGetText(const LocalizedString& val) {
  this->tierYouGetText = val;
__isset.tierYouGetText = true;
}

void GachaOffer::__set_tierTopRewardText(const LocalizedString& val) {
  this->tierTopRewardText = val;
__isset.tierTopRewardText = true;
}

void GachaOffer::__set_tierBannerText(const LocalizedString& val) {
  this->tierBannerText = val;
__isset.tierBannerText = true;
}

void GachaOffer::__set_tierBannerImage(const std::string& val) {
  this->tierBannerImage = val;
__isset.tierBannerImage = true;
}

void GachaOffer::__set_tierRarityText(const LocalizedString& val) {
  this->tierRarityText = val;
__isset.tierRarityText = true;
}

void GachaOffer::__set_detailCardHaveRays(const bool val) {
  this->detailCardHaveRays = val;
__isset.detailCardHaveRays = true;
}

void GachaOffer::__set_discountedPrice(const int32_t val) {
  this->discountedPrice = val;
__isset.discountedPrice = true;
}

void GachaOffer::__set_upsellInBuildMenu(const bool val) {
  this->upsellInBuildMenu = val;
__isset.upsellInBuildMenu = true;
}

void GachaOffer::__set_floorClearRewardCurrencyIds(const std::vector<CurrencyID> & val) {
  this->floorClearRewardCurrencyIds = val;
__isset.floorClearRewardCurrencyIds = true;
}

void GachaOffer::__set_floorClearRewardCurrencyAmounts(const std::vector<int32_t> & val) {
  this->floorClearRewardCurrencyAmounts = val;
__isset.floorClearRewardCurrencyAmounts = true;
}

void GachaOffer::__set_detailScreenHeader(const LocalizedString& val) {
  this->detailScreenHeader = val;
__isset.detailScreenHeader = true;
}

void GachaOffer::__set_eventStoreImage(const std::string& val) {
  this->eventStoreImage = val;
__isset.eventStoreImage = true;
}

void GachaOffer::__set_iapProductId(const IAPProductID& val) {
  this->iapProductId = val;
}

void GachaOffer::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void GachaOffer::__set_gradientColor1(const std::string& val) {
  this->gradientColor1 = val;
__isset.gradientColor1 = true;
}

void GachaOffer::__set_gradientColor2(const std::string& val) {
  this->gradientColor2 = val;
__isset.gradientColor2 = true;
}

void GachaOffer::__set_baseTerrainImage(const AssetPath& val) {
  this->baseTerrainImage = val;
__isset.baseTerrainImage = true;
}

void GachaOffer::__set_featureImage(const AssetPath& val) {
  this->featureImage = val;
__isset.featureImage = true;
}

void GachaOffer::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
__isset.unlockRank = true;
}

void GachaOffer::__set_showGuildRank(const int32_t val) {
  this->showGuildRank = val;
__isset.showGuildRank = true;
}

void GachaOffer::__set_hideGuildRank(const int32_t val) {
  this->hideGuildRank = val;
__isset.hideGuildRank = true;
}

void GachaOffer::__set_unlockGuildRank(const int32_t val) {
  this->unlockGuildRank = val;
__isset.unlockGuildRank = true;
}
std::ostream& operator<<(std::ostream& out, const GachaOffer& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GachaOffer::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gachaOfferId = false;
  bool isset_costCurrencyId = false;
  bool isset_costAmount = false;
  bool isset_gachaPackIds = false;
  bool isset_gachaPackSpins = false;
  bool isset_unlockGachaOfferIds = false;
  bool isset_maxSpins = false;
  bool isset_maxFreeSpinsPerDay = false;
  bool isset_freeSpinCooldown = false;
  bool isset_iapProductId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaOfferId);
          isset_gachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->costCurrencyId);
          isset_costCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->costAmount);
          isset_costAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gachaPackIds.clear();
            uint32_t _size168;
            ::apache::thrift::protocol::TType _etype171;
            xfer += iprot->readListBegin(_etype171, _size168);
            this->gachaPackIds.resize(_size168);
            uint32_t _i172;
            for (_i172 = 0; _i172 < _size168; ++_i172)
            {
              xfer += iprot->readString(this->gachaPackIds[_i172]);
            }
            xfer += iprot->readListEnd();
          }
          isset_gachaPackIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gachaPackSpins.clear();
            uint32_t _size173;
            ::apache::thrift::protocol::TType _etype176;
            xfer += iprot->readListBegin(_etype176, _size173);
            this->gachaPackSpins.resize(_size173);
            uint32_t _i177;
            for (_i177 = 0; _i177 < _size173; ++_i177)
            {
              xfer += iprot->readI32(this->gachaPackSpins[_i177]);
            }
            xfer += iprot->readListEnd();
          }
          isset_gachaPackSpins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->unlockGachaOfferIds.clear();
            uint32_t _size178;
            ::apache::thrift::protocol::TType _etype181;
            xfer += iprot->readListBegin(_etype181, _size178);
            this->unlockGachaOfferIds.resize(_size178);
            uint32_t _i182;
            for (_i182 = 0; _i182 < _size178; ++_i182)
            {
              xfer += iprot->readString(this->unlockGachaOfferIds[_i182]);
            }
            xfer += iprot->readListEnd();
          }
          isset_unlockGachaOfferIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxSpins);
          isset_maxSpins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxFreeSpinsPerDay);
          isset_maxFreeSpinsPerDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeSpinCooldown);
          isset_freeSpinCooldown = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requiredLevelId);
          this->__isset.requiredLevelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cakeboxLevelDotId);
          this->__isset.cakeboxLevelDotId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->boxImage);
          this->__isset.boxImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->openBoxImage);
          this->__isset.openBoxImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->purchaseSound);
          this->__isset.purchaseSound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->notifyFreeSpinIndex);
          this->__isset.notifyFreeSpinIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventLockId);
          this->__isset.eventLockId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->doesNotRestock);
          this->__isset.doesNotRestock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          this->__isset.display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->storeIndex);
          this->__isset.storeIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->badge.read(iprot);
          this->__isset.badge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->badge2.read(iprot);
          this->__isset.badge2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->badge2Sticker);
          this->__isset.badge2Sticker = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeCardImage);
          this->__isset.storeCardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeCakeboxImage);
          this->__isset.storeCakeboxImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeRewardBuildingId);
          this->__isset.storeRewardBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeRewardImage);
          this->__isset.storeRewardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailCardFullscreenBg);
          this->__isset.detailCardFullscreenBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailCardFullscreenBgBottom);
          this->__isset.detailCardFullscreenBgBottom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->storeCardCountTextSingular.read(iprot);
          this->__isset.storeCardCountTextSingular = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->storeCardCountTextPlural.read(iprot);
          this->__isset.storeCardCountTextPlural = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size183;
            ::apache::thrift::protocol::TType _etype186;
            xfer += iprot->readListBegin(_etype186, _size183);
            this->eventIds.resize(_size183);
            uint32_t _i187;
            for (_i187 = 0; _i187 < _size183; ++_i187)
            {
              xfer += iprot->readString(this->eventIds[_i187]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast188;
          xfer += iprot->readI32(ecast188);
          this->eventPhases = (EventPhases::type)ecast188;
          this->__isset.eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          this->__isset.showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          this->__isset.hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->offerBackgroundImage);
          this->__isset.offerBackgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cardImage);
          this->__isset.cardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productIcon);
          this->__isset.productIcon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 77:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ribbonImage);
          this->__isset.ribbonImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 78:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ribbonText.read(iprot);
          this->__isset.ribbonText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->showBuildingIds.clear();
            uint32_t _size189;
            ::apache::thrift::protocol::TType _etype192;
            xfer += iprot->readListBegin(_etype192, _size189);
            this->showBuildingIds.resize(_size189);
            uint32_t _i193;
            for (_i193 = 0; _i193 < _size189; ++_i193)
            {
              xfer += iprot->readString(this->showBuildingIds[_i193]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.showBuildingIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->showTierInfo);
          this->__isset.showTierInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tierYouGetBuildingId);
          this->__isset.tierYouGetBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tierTopRewardBuildingId);
          this->__isset.tierTopRewardBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tierYouGetText.read(iprot);
          this->__isset.tierYouGetText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tierTopRewardText.read(iprot);
          this->__isset.tierTopRewardText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tierBannerText.read(iprot);
          this->__isset.tierBannerText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tierBannerImage);
          this->__isset.tierBannerImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 79:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tierRarityText.read(iprot);
          this->__isset.tierRarityText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 88:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->detailCardHaveRays);
          this->__isset.detailCardHaveRays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 89:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->discountedPrice);
          this->__isset.discountedPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->upsellInBuildMenu);
          this->__isset.upsellInBuildMenu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->floorClearRewardCurrencyIds.clear();
            uint32_t _size194;
            ::apache::thrift::protocol::TType _etype197;
            xfer += iprot->readListBegin(_etype197, _size194);
            this->floorClearRewardCurrencyIds.resize(_size194);
            uint32_t _i198;
            for (_i198 = 0; _i198 < _size194; ++_i198)
            {
              xfer += iprot->readString(this->floorClearRewardCurrencyIds[_i198]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.floorClearRewardCurrencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->floorClearRewardCurrencyAmounts.clear();
            uint32_t _size199;
            ::apache::thrift::protocol::TType _etype202;
            xfer += iprot->readListBegin(_etype202, _size199);
            this->floorClearRewardCurrencyAmounts.resize(_size199);
            uint32_t _i203;
            for (_i203 = 0; _i203 < _size199; ++_i203)
            {
              xfer += iprot->readI32(this->floorClearRewardCurrencyAmounts[_i203]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.floorClearRewardCurrencyAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 105:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->detailScreenHeader.read(iprot);
          this->__isset.detailScreenHeader = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventStoreImage);
          this->__isset.eventStoreImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iapProductId);
          isset_iapProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 210:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 220:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gradientColor1);
          this->__isset.gradientColor1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 221:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gradientColor2);
          this->__isset.gradientColor2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 222:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->baseTerrainImage);
          this->__isset.baseTerrainImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 223:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->featureImage);
          this->__isset.featureImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 300:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          this->__isset.unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 301:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showGuildRank);
          this->__isset.showGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 302:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideGuildRank);
          this->__isset.hideGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 303:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockGuildRank);
          this->__isset.unlockGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gachaOfferId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_costCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_costAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaPackIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaPackSpins)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockGachaOfferIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxSpins)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxFreeSpinsPerDay)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_freeSpinCooldown)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_iapProductId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GachaOffer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GachaOffer");

  xfer += oprot->writeFieldBegin("gachaOfferId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->gachaOfferId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("costCurrencyId", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->costCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("costAmount", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->costAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaPackIds", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->gachaPackIds.size()));
    std::vector<GachaPackID> ::const_iterator _iter204;
    for (_iter204 = this->gachaPackIds.begin(); _iter204 != this->gachaPackIds.end(); ++_iter204)
    {
      xfer += oprot->writeString((*_iter204));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaPackSpins", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->gachaPackSpins.size()));
    std::vector<int32_t> ::const_iterator _iter205;
    for (_iter205 = this->gachaPackSpins.begin(); _iter205 != this->gachaPackSpins.end(); ++_iter205)
    {
      xfer += oprot->writeI32((*_iter205));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockGachaOfferIds", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->unlockGachaOfferIds.size()));
    std::vector<GachaOfferID> ::const_iterator _iter206;
    for (_iter206 = this->unlockGachaOfferIds.begin(); _iter206 != this->unlockGachaOfferIds.end(); ++_iter206)
    {
      xfer += oprot->writeString((*_iter206));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxSpins", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->maxSpins);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxFreeSpinsPerDay", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->maxFreeSpinsPerDay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeSpinCooldown", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->freeSpinCooldown);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.requiredLevelId) {
    xfer += oprot->writeFieldBegin("requiredLevelId", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->requiredLevelId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cakeboxLevelDotId) {
    xfer += oprot->writeFieldBegin("cakeboxLevelDotId", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->cakeboxLevelDotId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.boxImage) {
    xfer += oprot->writeFieldBegin("boxImage", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->boxImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openBoxImage) {
    xfer += oprot->writeFieldBegin("openBoxImage", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->openBoxImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.purchaseSound) {
    xfer += oprot->writeFieldBegin("purchaseSound", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->purchaseSound);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notifyFreeSpinIndex) {
    xfer += oprot->writeFieldBegin("notifyFreeSpinIndex", ::apache::thrift::protocol::T_I32, 50);
    xfer += oprot->writeI32(this->notifyFreeSpinIndex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventLockId) {
    xfer += oprot->writeFieldBegin("eventLockId", ::apache::thrift::protocol::T_STRING, 51);
    xfer += oprot->writeString(this->eventLockId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.doesNotRestock) {
    xfer += oprot->writeFieldBegin("doesNotRestock", ::apache::thrift::protocol::T_BOOL, 52);
    xfer += oprot->writeBool(this->doesNotRestock);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.display) {
    xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 53);
    xfer += this->display.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 54);
    xfer += this->description.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeIndex) {
    xfer += oprot->writeFieldBegin("storeIndex", ::apache::thrift::protocol::T_I32, 55);
    xfer += oprot->writeI32(this->storeIndex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.badge) {
    xfer += oprot->writeFieldBegin("badge", ::apache::thrift::protocol::T_STRUCT, 56);
    xfer += this->badge.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.badge2) {
    xfer += oprot->writeFieldBegin("badge2", ::apache::thrift::protocol::T_STRUCT, 57);
    xfer += this->badge2.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.badge2Sticker) {
    xfer += oprot->writeFieldBegin("badge2Sticker", ::apache::thrift::protocol::T_STRING, 58);
    xfer += oprot->writeString(this->badge2Sticker);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeCardImage) {
    xfer += oprot->writeFieldBegin("storeCardImage", ::apache::thrift::protocol::T_STRING, 59);
    xfer += oprot->writeString(this->storeCardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeCakeboxImage) {
    xfer += oprot->writeFieldBegin("storeCakeboxImage", ::apache::thrift::protocol::T_STRING, 60);
    xfer += oprot->writeString(this->storeCakeboxImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeRewardBuildingId) {
    xfer += oprot->writeFieldBegin("storeRewardBuildingId", ::apache::thrift::protocol::T_STRING, 61);
    xfer += oprot->writeString(this->storeRewardBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeRewardImage) {
    xfer += oprot->writeFieldBegin("storeRewardImage", ::apache::thrift::protocol::T_STRING, 62);
    xfer += oprot->writeString(this->storeRewardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailCardFullscreenBg) {
    xfer += oprot->writeFieldBegin("detailCardFullscreenBg", ::apache::thrift::protocol::T_STRING, 63);
    xfer += oprot->writeString(this->detailCardFullscreenBg);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailCardFullscreenBgBottom) {
    xfer += oprot->writeFieldBegin("detailCardFullscreenBgBottom", ::apache::thrift::protocol::T_STRING, 64);
    xfer += oprot->writeString(this->detailCardFullscreenBgBottom);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeCardCountTextSingular) {
    xfer += oprot->writeFieldBegin("storeCardCountTextSingular", ::apache::thrift::protocol::T_STRUCT, 65);
    xfer += this->storeCardCountTextSingular.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeCardCountTextPlural) {
    xfer += oprot->writeFieldBegin("storeCardCountTextPlural", ::apache::thrift::protocol::T_STRUCT, 66);
    xfer += this->storeCardCountTextPlural.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventIds) {
    xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 70);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
      std::vector<EventID> ::const_iterator _iter207;
      for (_iter207 = this->eventIds.begin(); _iter207 != this->eventIds.end(); ++_iter207)
      {
        xfer += oprot->writeString((*_iter207));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPhases) {
    xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 71);
    xfer += oprot->writeI32((int32_t)this->eventPhases);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showRank) {
    xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 72);
    xfer += oprot->writeI32(this->showRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideRank) {
    xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 73);
    xfer += oprot->writeI32(this->hideRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offerBackgroundImage) {
    xfer += oprot->writeFieldBegin("offerBackgroundImage", ::apache::thrift::protocol::T_STRING, 74);
    xfer += oprot->writeString(this->offerBackgroundImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cardImage) {
    xfer += oprot->writeFieldBegin("cardImage", ::apache::thrift::protocol::T_STRING, 75);
    xfer += oprot->writeString(this->cardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.productIcon) {
    xfer += oprot->writeFieldBegin("productIcon", ::apache::thrift::protocol::T_STRING, 76);
    xfer += oprot->writeString(this->productIcon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ribbonImage) {
    xfer += oprot->writeFieldBegin("ribbonImage", ::apache::thrift::protocol::T_STRING, 77);
    xfer += oprot->writeString(this->ribbonImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ribbonText) {
    xfer += oprot->writeFieldBegin("ribbonText", ::apache::thrift::protocol::T_STRUCT, 78);
    xfer += this->ribbonText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tierRarityText) {
    xfer += oprot->writeFieldBegin("tierRarityText", ::apache::thrift::protocol::T_STRUCT, 79);
    xfer += this->tierRarityText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showBuildingIds) {
    xfer += oprot->writeFieldBegin("showBuildingIds", ::apache::thrift::protocol::T_LIST, 80);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->showBuildingIds.size()));
      std::vector<BuildingID> ::const_iterator _iter208;
      for (_iter208 = this->showBuildingIds.begin(); _iter208 != this->showBuildingIds.end(); ++_iter208)
      {
        xfer += oprot->writeString((*_iter208));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showTierInfo) {
    xfer += oprot->writeFieldBegin("showTierInfo", ::apache::thrift::protocol::T_BOOL, 81);
    xfer += oprot->writeBool(this->showTierInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tierYouGetBuildingId) {
    xfer += oprot->writeFieldBegin("tierYouGetBuildingId", ::apache::thrift::protocol::T_STRING, 82);
    xfer += oprot->writeString(this->tierYouGetBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tierTopRewardBuildingId) {
    xfer += oprot->writeFieldBegin("tierTopRewardBuildingId", ::apache::thrift::protocol::T_STRING, 83);
    xfer += oprot->writeString(this->tierTopRewardBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tierYouGetText) {
    xfer += oprot->writeFieldBegin("tierYouGetText", ::apache::thrift::protocol::T_STRUCT, 84);
    xfer += this->tierYouGetText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tierTopRewardText) {
    xfer += oprot->writeFieldBegin("tierTopRewardText", ::apache::thrift::protocol::T_STRUCT, 85);
    xfer += this->tierTopRewardText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tierBannerText) {
    xfer += oprot->writeFieldBegin("tierBannerText", ::apache::thrift::protocol::T_STRUCT, 86);
    xfer += this->tierBannerText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tierBannerImage) {
    xfer += oprot->writeFieldBegin("tierBannerImage", ::apache::thrift::protocol::T_STRING, 87);
    xfer += oprot->writeString(this->tierBannerImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailCardHaveRays) {
    xfer += oprot->writeFieldBegin("detailCardHaveRays", ::apache::thrift::protocol::T_BOOL, 88);
    xfer += oprot->writeBool(this->detailCardHaveRays);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.discountedPrice) {
    xfer += oprot->writeFieldBegin("discountedPrice", ::apache::thrift::protocol::T_I32, 89);
    xfer += oprot->writeI32(this->discountedPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsellInBuildMenu) {
    xfer += oprot->writeFieldBegin("upsellInBuildMenu", ::apache::thrift::protocol::T_BOOL, 90);
    xfer += oprot->writeBool(this->upsellInBuildMenu);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.floorClearRewardCurrencyIds) {
    xfer += oprot->writeFieldBegin("floorClearRewardCurrencyIds", ::apache::thrift::protocol::T_LIST, 100);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->floorClearRewardCurrencyIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter209;
      for (_iter209 = this->floorClearRewardCurrencyIds.begin(); _iter209 != this->floorClearRewardCurrencyIds.end(); ++_iter209)
      {
        xfer += oprot->writeString((*_iter209));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.floorClearRewardCurrencyAmounts) {
    xfer += oprot->writeFieldBegin("floorClearRewardCurrencyAmounts", ::apache::thrift::protocol::T_LIST, 101);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->floorClearRewardCurrencyAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter210;
      for (_iter210 = this->floorClearRewardCurrencyAmounts.begin(); _iter210 != this->floorClearRewardCurrencyAmounts.end(); ++_iter210)
      {
        xfer += oprot->writeI32((*_iter210));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detailScreenHeader) {
    xfer += oprot->writeFieldBegin("detailScreenHeader", ::apache::thrift::protocol::T_STRUCT, 105);
    xfer += this->detailScreenHeader.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventStoreImage) {
    xfer += oprot->writeFieldBegin("eventStoreImage", ::apache::thrift::protocol::T_STRING, 110);
    xfer += oprot->writeString(this->eventStoreImage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("iapProductId", ::apache::thrift::protocol::T_STRING, 200);
  xfer += oprot->writeString(this->iapProductId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 210);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gradientColor1) {
    xfer += oprot->writeFieldBegin("gradientColor1", ::apache::thrift::protocol::T_STRING, 220);
    xfer += oprot->writeString(this->gradientColor1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gradientColor2) {
    xfer += oprot->writeFieldBegin("gradientColor2", ::apache::thrift::protocol::T_STRING, 221);
    xfer += oprot->writeString(this->gradientColor2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.baseTerrainImage) {
    xfer += oprot->writeFieldBegin("baseTerrainImage", ::apache::thrift::protocol::T_STRING, 222);
    xfer += oprot->writeString(this->baseTerrainImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.featureImage) {
    xfer += oprot->writeFieldBegin("featureImage", ::apache::thrift::protocol::T_STRING, 223);
    xfer += oprot->writeString(this->featureImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockRank) {
    xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 300);
    xfer += oprot->writeI32(this->unlockRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showGuildRank) {
    xfer += oprot->writeFieldBegin("showGuildRank", ::apache::thrift::protocol::T_I32, 301);
    xfer += oprot->writeI32(this->showGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideGuildRank) {
    xfer += oprot->writeFieldBegin("hideGuildRank", ::apache::thrift::protocol::T_I32, 302);
    xfer += oprot->writeI32(this->hideGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockGuildRank) {
    xfer += oprot->writeFieldBegin("unlockGuildRank", ::apache::thrift::protocol::T_I32, 303);
    xfer += oprot->writeI32(this->unlockGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GachaOffer &a, GachaOffer &b) {
  using ::std::swap;
  swap(a.gachaOfferId, b.gachaOfferId);
  swap(a.costCurrencyId, b.costCurrencyId);
  swap(a.costAmount, b.costAmount);
  swap(a.gachaPackIds, b.gachaPackIds);
  swap(a.gachaPackSpins, b.gachaPackSpins);
  swap(a.unlockGachaOfferIds, b.unlockGachaOfferIds);
  swap(a.maxSpins, b.maxSpins);
  swap(a.maxFreeSpinsPerDay, b.maxFreeSpinsPerDay);
  swap(a.freeSpinCooldown, b.freeSpinCooldown);
  swap(a.requiredLevelId, b.requiredLevelId);
  swap(a.cakeboxLevelDotId, b.cakeboxLevelDotId);
  swap(a.boxImage, b.boxImage);
  swap(a.openBoxImage, b.openBoxImage);
  swap(a.purchaseSound, b.purchaseSound);
  swap(a.notifyFreeSpinIndex, b.notifyFreeSpinIndex);
  swap(a.eventLockId, b.eventLockId);
  swap(a.doesNotRestock, b.doesNotRestock);
  swap(a.display, b.display);
  swap(a.description, b.description);
  swap(a.storeIndex, b.storeIndex);
  swap(a.badge, b.badge);
  swap(a.badge2, b.badge2);
  swap(a.badge2Sticker, b.badge2Sticker);
  swap(a.storeCardImage, b.storeCardImage);
  swap(a.storeCakeboxImage, b.storeCakeboxImage);
  swap(a.storeRewardBuildingId, b.storeRewardBuildingId);
  swap(a.storeRewardImage, b.storeRewardImage);
  swap(a.detailCardFullscreenBg, b.detailCardFullscreenBg);
  swap(a.detailCardFullscreenBgBottom, b.detailCardFullscreenBgBottom);
  swap(a.storeCardCountTextSingular, b.storeCardCountTextSingular);
  swap(a.storeCardCountTextPlural, b.storeCardCountTextPlural);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.showRank, b.showRank);
  swap(a.hideRank, b.hideRank);
  swap(a.offerBackgroundImage, b.offerBackgroundImage);
  swap(a.cardImage, b.cardImage);
  swap(a.productIcon, b.productIcon);
  swap(a.ribbonImage, b.ribbonImage);
  swap(a.ribbonText, b.ribbonText);
  swap(a.showBuildingIds, b.showBuildingIds);
  swap(a.showTierInfo, b.showTierInfo);
  swap(a.tierYouGetBuildingId, b.tierYouGetBuildingId);
  swap(a.tierTopRewardBuildingId, b.tierTopRewardBuildingId);
  swap(a.tierYouGetText, b.tierYouGetText);
  swap(a.tierTopRewardText, b.tierTopRewardText);
  swap(a.tierBannerText, b.tierBannerText);
  swap(a.tierBannerImage, b.tierBannerImage);
  swap(a.tierRarityText, b.tierRarityText);
  swap(a.detailCardHaveRays, b.detailCardHaveRays);
  swap(a.discountedPrice, b.discountedPrice);
  swap(a.upsellInBuildMenu, b.upsellInBuildMenu);
  swap(a.floorClearRewardCurrencyIds, b.floorClearRewardCurrencyIds);
  swap(a.floorClearRewardCurrencyAmounts, b.floorClearRewardCurrencyAmounts);
  swap(a.detailScreenHeader, b.detailScreenHeader);
  swap(a.eventStoreImage, b.eventStoreImage);
  swap(a.iapProductId, b.iapProductId);
  swap(a.bundleId, b.bundleId);
  swap(a.gradientColor1, b.gradientColor1);
  swap(a.gradientColor2, b.gradientColor2);
  swap(a.baseTerrainImage, b.baseTerrainImage);
  swap(a.featureImage, b.featureImage);
  swap(a.unlockRank, b.unlockRank);
  swap(a.showGuildRank, b.showGuildRank);
  swap(a.hideGuildRank, b.hideGuildRank);
  swap(a.unlockGuildRank, b.unlockGuildRank);
  swap(a.__isset, b.__isset);
}

GachaOffer::GachaOffer(const GachaOffer& other211) {
  gachaOfferId = other211.gachaOfferId;
  costCurrencyId = other211.costCurrencyId;
  costAmount = other211.costAmount;
  gachaPackIds = other211.gachaPackIds;
  gachaPackSpins = other211.gachaPackSpins;
  unlockGachaOfferIds = other211.unlockGachaOfferIds;
  maxSpins = other211.maxSpins;
  maxFreeSpinsPerDay = other211.maxFreeSpinsPerDay;
  freeSpinCooldown = other211.freeSpinCooldown;
  requiredLevelId = other211.requiredLevelId;
  cakeboxLevelDotId = other211.cakeboxLevelDotId;
  boxImage = other211.boxImage;
  openBoxImage = other211.openBoxImage;
  purchaseSound = other211.purchaseSound;
  notifyFreeSpinIndex = other211.notifyFreeSpinIndex;
  eventLockId = other211.eventLockId;
  doesNotRestock = other211.doesNotRestock;
  display = other211.display;
  description = other211.description;
  storeIndex = other211.storeIndex;
  badge = other211.badge;
  badge2 = other211.badge2;
  badge2Sticker = other211.badge2Sticker;
  storeCardImage = other211.storeCardImage;
  storeCakeboxImage = other211.storeCakeboxImage;
  storeRewardBuildingId = other211.storeRewardBuildingId;
  storeRewardImage = other211.storeRewardImage;
  detailCardFullscreenBg = other211.detailCardFullscreenBg;
  detailCardFullscreenBgBottom = other211.detailCardFullscreenBgBottom;
  storeCardCountTextSingular = other211.storeCardCountTextSingular;
  storeCardCountTextPlural = other211.storeCardCountTextPlural;
  eventIds = other211.eventIds;
  eventPhases = other211.eventPhases;
  showRank = other211.showRank;
  hideRank = other211.hideRank;
  offerBackgroundImage = other211.offerBackgroundImage;
  cardImage = other211.cardImage;
  productIcon = other211.productIcon;
  ribbonImage = other211.ribbonImage;
  ribbonText = other211.ribbonText;
  showBuildingIds = other211.showBuildingIds;
  showTierInfo = other211.showTierInfo;
  tierYouGetBuildingId = other211.tierYouGetBuildingId;
  tierTopRewardBuildingId = other211.tierTopRewardBuildingId;
  tierYouGetText = other211.tierYouGetText;
  tierTopRewardText = other211.tierTopRewardText;
  tierBannerText = other211.tierBannerText;
  tierBannerImage = other211.tierBannerImage;
  tierRarityText = other211.tierRarityText;
  detailCardHaveRays = other211.detailCardHaveRays;
  discountedPrice = other211.discountedPrice;
  upsellInBuildMenu = other211.upsellInBuildMenu;
  floorClearRewardCurrencyIds = other211.floorClearRewardCurrencyIds;
  floorClearRewardCurrencyAmounts = other211.floorClearRewardCurrencyAmounts;
  detailScreenHeader = other211.detailScreenHeader;
  eventStoreImage = other211.eventStoreImage;
  iapProductId = other211.iapProductId;
  bundleId = other211.bundleId;
  gradientColor1 = other211.gradientColor1;
  gradientColor2 = other211.gradientColor2;
  baseTerrainImage = other211.baseTerrainImage;
  featureImage = other211.featureImage;
  unlockRank = other211.unlockRank;
  showGuildRank = other211.showGuildRank;
  hideGuildRank = other211.hideGuildRank;
  unlockGuildRank = other211.unlockGuildRank;
  __isset = other211.__isset;
}
GachaOffer& GachaOffer::operator=(const GachaOffer& other212) {
  gachaOfferId = other212.gachaOfferId;
  costCurrencyId = other212.costCurrencyId;
  costAmount = other212.costAmount;
  gachaPackIds = other212.gachaPackIds;
  gachaPackSpins = other212.gachaPackSpins;
  unlockGachaOfferIds = other212.unlockGachaOfferIds;
  maxSpins = other212.maxSpins;
  maxFreeSpinsPerDay = other212.maxFreeSpinsPerDay;
  freeSpinCooldown = other212.freeSpinCooldown;
  requiredLevelId = other212.requiredLevelId;
  cakeboxLevelDotId = other212.cakeboxLevelDotId;
  boxImage = other212.boxImage;
  openBoxImage = other212.openBoxImage;
  purchaseSound = other212.purchaseSound;
  notifyFreeSpinIndex = other212.notifyFreeSpinIndex;
  eventLockId = other212.eventLockId;
  doesNotRestock = other212.doesNotRestock;
  display = other212.display;
  description = other212.description;
  storeIndex = other212.storeIndex;
  badge = other212.badge;
  badge2 = other212.badge2;
  badge2Sticker = other212.badge2Sticker;
  storeCardImage = other212.storeCardImage;
  storeCakeboxImage = other212.storeCakeboxImage;
  storeRewardBuildingId = other212.storeRewardBuildingId;
  storeRewardImage = other212.storeRewardImage;
  detailCardFullscreenBg = other212.detailCardFullscreenBg;
  detailCardFullscreenBgBottom = other212.detailCardFullscreenBgBottom;
  storeCardCountTextSingular = other212.storeCardCountTextSingular;
  storeCardCountTextPlural = other212.storeCardCountTextPlural;
  eventIds = other212.eventIds;
  eventPhases = other212.eventPhases;
  showRank = other212.showRank;
  hideRank = other212.hideRank;
  offerBackgroundImage = other212.offerBackgroundImage;
  cardImage = other212.cardImage;
  productIcon = other212.productIcon;
  ribbonImage = other212.ribbonImage;
  ribbonText = other212.ribbonText;
  showBuildingIds = other212.showBuildingIds;
  showTierInfo = other212.showTierInfo;
  tierYouGetBuildingId = other212.tierYouGetBuildingId;
  tierTopRewardBuildingId = other212.tierTopRewardBuildingId;
  tierYouGetText = other212.tierYouGetText;
  tierTopRewardText = other212.tierTopRewardText;
  tierBannerText = other212.tierBannerText;
  tierBannerImage = other212.tierBannerImage;
  tierRarityText = other212.tierRarityText;
  detailCardHaveRays = other212.detailCardHaveRays;
  discountedPrice = other212.discountedPrice;
  upsellInBuildMenu = other212.upsellInBuildMenu;
  floorClearRewardCurrencyIds = other212.floorClearRewardCurrencyIds;
  floorClearRewardCurrencyAmounts = other212.floorClearRewardCurrencyAmounts;
  detailScreenHeader = other212.detailScreenHeader;
  eventStoreImage = other212.eventStoreImage;
  iapProductId = other212.iapProductId;
  bundleId = other212.bundleId;
  gradientColor1 = other212.gradientColor1;
  gradientColor2 = other212.gradientColor2;
  baseTerrainImage = other212.baseTerrainImage;
  featureImage = other212.featureImage;
  unlockRank = other212.unlockRank;
  showGuildRank = other212.showGuildRank;
  hideGuildRank = other212.hideGuildRank;
  unlockGuildRank = other212.unlockGuildRank;
  __isset = other212.__isset;
  return *this;
}
void GachaOffer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GachaOffer(";
  out << "gachaOfferId=" << to_string(gachaOfferId);
  out << ", " << "costCurrencyId=" << to_string(costCurrencyId);
  out << ", " << "costAmount=" << to_string(costAmount);
  out << ", " << "gachaPackIds=" << to_string(gachaPackIds);
  out << ", " << "gachaPackSpins=" << to_string(gachaPackSpins);
  out << ", " << "unlockGachaOfferIds=" << to_string(unlockGachaOfferIds);
  out << ", " << "maxSpins=" << to_string(maxSpins);
  out << ", " << "maxFreeSpinsPerDay=" << to_string(maxFreeSpinsPerDay);
  out << ", " << "freeSpinCooldown=" << to_string(freeSpinCooldown);
  out << ", " << "requiredLevelId="; (__isset.requiredLevelId ? (out << to_string(requiredLevelId)) : (out << "<null>"));
  out << ", " << "cakeboxLevelDotId="; (__isset.cakeboxLevelDotId ? (out << to_string(cakeboxLevelDotId)) : (out << "<null>"));
  out << ", " << "boxImage="; (__isset.boxImage ? (out << to_string(boxImage)) : (out << "<null>"));
  out << ", " << "openBoxImage="; (__isset.openBoxImage ? (out << to_string(openBoxImage)) : (out << "<null>"));
  out << ", " << "purchaseSound="; (__isset.purchaseSound ? (out << to_string(purchaseSound)) : (out << "<null>"));
  out << ", " << "notifyFreeSpinIndex="; (__isset.notifyFreeSpinIndex ? (out << to_string(notifyFreeSpinIndex)) : (out << "<null>"));
  out << ", " << "eventLockId="; (__isset.eventLockId ? (out << to_string(eventLockId)) : (out << "<null>"));
  out << ", " << "doesNotRestock="; (__isset.doesNotRestock ? (out << to_string(doesNotRestock)) : (out << "<null>"));
  out << ", " << "display="; (__isset.display ? (out << to_string(display)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "storeIndex="; (__isset.storeIndex ? (out << to_string(storeIndex)) : (out << "<null>"));
  out << ", " << "badge="; (__isset.badge ? (out << to_string(badge)) : (out << "<null>"));
  out << ", " << "badge2="; (__isset.badge2 ? (out << to_string(badge2)) : (out << "<null>"));
  out << ", " << "badge2Sticker="; (__isset.badge2Sticker ? (out << to_string(badge2Sticker)) : (out << "<null>"));
  out << ", " << "storeCardImage="; (__isset.storeCardImage ? (out << to_string(storeCardImage)) : (out << "<null>"));
  out << ", " << "storeCakeboxImage="; (__isset.storeCakeboxImage ? (out << to_string(storeCakeboxImage)) : (out << "<null>"));
  out << ", " << "storeRewardBuildingId="; (__isset.storeRewardBuildingId ? (out << to_string(storeRewardBuildingId)) : (out << "<null>"));
  out << ", " << "storeRewardImage="; (__isset.storeRewardImage ? (out << to_string(storeRewardImage)) : (out << "<null>"));
  out << ", " << "detailCardFullscreenBg="; (__isset.detailCardFullscreenBg ? (out << to_string(detailCardFullscreenBg)) : (out << "<null>"));
  out << ", " << "detailCardFullscreenBgBottom="; (__isset.detailCardFullscreenBgBottom ? (out << to_string(detailCardFullscreenBgBottom)) : (out << "<null>"));
  out << ", " << "storeCardCountTextSingular="; (__isset.storeCardCountTextSingular ? (out << to_string(storeCardCountTextSingular)) : (out << "<null>"));
  out << ", " << "storeCardCountTextPlural="; (__isset.storeCardCountTextPlural ? (out << to_string(storeCardCountTextPlural)) : (out << "<null>"));
  out << ", " << "eventIds="; (__isset.eventIds ? (out << to_string(eventIds)) : (out << "<null>"));
  out << ", " << "eventPhases="; (__isset.eventPhases ? (out << to_string(eventPhases)) : (out << "<null>"));
  out << ", " << "showRank="; (__isset.showRank ? (out << to_string(showRank)) : (out << "<null>"));
  out << ", " << "hideRank="; (__isset.hideRank ? (out << to_string(hideRank)) : (out << "<null>"));
  out << ", " << "offerBackgroundImage="; (__isset.offerBackgroundImage ? (out << to_string(offerBackgroundImage)) : (out << "<null>"));
  out << ", " << "cardImage="; (__isset.cardImage ? (out << to_string(cardImage)) : (out << "<null>"));
  out << ", " << "productIcon="; (__isset.productIcon ? (out << to_string(productIcon)) : (out << "<null>"));
  out << ", " << "ribbonImage="; (__isset.ribbonImage ? (out << to_string(ribbonImage)) : (out << "<null>"));
  out << ", " << "ribbonText="; (__isset.ribbonText ? (out << to_string(ribbonText)) : (out << "<null>"));
  out << ", " << "showBuildingIds="; (__isset.showBuildingIds ? (out << to_string(showBuildingIds)) : (out << "<null>"));
  out << ", " << "showTierInfo="; (__isset.showTierInfo ? (out << to_string(showTierInfo)) : (out << "<null>"));
  out << ", " << "tierYouGetBuildingId="; (__isset.tierYouGetBuildingId ? (out << to_string(tierYouGetBuildingId)) : (out << "<null>"));
  out << ", " << "tierTopRewardBuildingId="; (__isset.tierTopRewardBuildingId ? (out << to_string(tierTopRewardBuildingId)) : (out << "<null>"));
  out << ", " << "tierYouGetText="; (__isset.tierYouGetText ? (out << to_string(tierYouGetText)) : (out << "<null>"));
  out << ", " << "tierTopRewardText="; (__isset.tierTopRewardText ? (out << to_string(tierTopRewardText)) : (out << "<null>"));
  out << ", " << "tierBannerText="; (__isset.tierBannerText ? (out << to_string(tierBannerText)) : (out << "<null>"));
  out << ", " << "tierBannerImage="; (__isset.tierBannerImage ? (out << to_string(tierBannerImage)) : (out << "<null>"));
  out << ", " << "tierRarityText="; (__isset.tierRarityText ? (out << to_string(tierRarityText)) : (out << "<null>"));
  out << ", " << "detailCardHaveRays="; (__isset.detailCardHaveRays ? (out << to_string(detailCardHaveRays)) : (out << "<null>"));
  out << ", " << "discountedPrice="; (__isset.discountedPrice ? (out << to_string(discountedPrice)) : (out << "<null>"));
  out << ", " << "upsellInBuildMenu="; (__isset.upsellInBuildMenu ? (out << to_string(upsellInBuildMenu)) : (out << "<null>"));
  out << ", " << "floorClearRewardCurrencyIds="; (__isset.floorClearRewardCurrencyIds ? (out << to_string(floorClearRewardCurrencyIds)) : (out << "<null>"));
  out << ", " << "floorClearRewardCurrencyAmounts="; (__isset.floorClearRewardCurrencyAmounts ? (out << to_string(floorClearRewardCurrencyAmounts)) : (out << "<null>"));
  out << ", " << "detailScreenHeader="; (__isset.detailScreenHeader ? (out << to_string(detailScreenHeader)) : (out << "<null>"));
  out << ", " << "eventStoreImage="; (__isset.eventStoreImage ? (out << to_string(eventStoreImage)) : (out << "<null>"));
  out << ", " << "iapProductId=" << to_string(iapProductId);
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "gradientColor1="; (__isset.gradientColor1 ? (out << to_string(gradientColor1)) : (out << "<null>"));
  out << ", " << "gradientColor2="; (__isset.gradientColor2 ? (out << to_string(gradientColor2)) : (out << "<null>"));
  out << ", " << "baseTerrainImage="; (__isset.baseTerrainImage ? (out << to_string(baseTerrainImage)) : (out << "<null>"));
  out << ", " << "featureImage="; (__isset.featureImage ? (out << to_string(featureImage)) : (out << "<null>"));
  out << ", " << "unlockRank="; (__isset.unlockRank ? (out << to_string(unlockRank)) : (out << "<null>"));
  out << ", " << "showGuildRank="; (__isset.showGuildRank ? (out << to_string(showGuildRank)) : (out << "<null>"));
  out << ", " << "hideGuildRank="; (__isset.hideGuildRank ? (out << to_string(hideGuildRank)) : (out << "<null>"));
  out << ", " << "unlockGuildRank="; (__isset.unlockGuildRank ? (out << to_string(unlockGuildRank)) : (out << "<null>"));
  out << ")";
}


GachaPack::~GachaPack() throw() {
}


void GachaPack::__set_gachaPackId(const GachaPackID& val) {
  this->gachaPackId = val;
}

void GachaPack::__set_lootTableIds(const std::vector<LootTableID> & val) {
  this->lootTableIds = val;
}

void GachaPack::__set_lootTableSpins(const std::vector<int32_t> & val) {
  this->lootTableSpins = val;
}
std::ostream& operator<<(std::ostream& out, const GachaPack& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GachaPack::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gachaPackId = false;
  bool isset_lootTableIds = false;
  bool isset_lootTableSpins = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaPackId);
          isset_gachaPackId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableIds.clear();
            uint32_t _size213;
            ::apache::thrift::protocol::TType _etype216;
            xfer += iprot->readListBegin(_etype216, _size213);
            this->lootTableIds.resize(_size213);
            uint32_t _i217;
            for (_i217 = 0; _i217 < _size213; ++_i217)
            {
              xfer += iprot->readString(this->lootTableIds[_i217]);
            }
            xfer += iprot->readListEnd();
          }
          isset_lootTableIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableSpins.clear();
            uint32_t _size218;
            ::apache::thrift::protocol::TType _etype221;
            xfer += iprot->readListBegin(_etype221, _size218);
            this->lootTableSpins.resize(_size218);
            uint32_t _i222;
            for (_i222 = 0; _i222 < _size218; ++_i222)
            {
              xfer += iprot->readI32(this->lootTableSpins[_i222]);
            }
            xfer += iprot->readListEnd();
          }
          isset_lootTableSpins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gachaPackId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTableIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTableSpins)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GachaPack::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GachaPack");

  xfer += oprot->writeFieldBegin("gachaPackId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->gachaPackId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootTableIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->lootTableIds.size()));
    std::vector<LootTableID> ::const_iterator _iter223;
    for (_iter223 = this->lootTableIds.begin(); _iter223 != this->lootTableIds.end(); ++_iter223)
    {
      xfer += oprot->writeString((*_iter223));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootTableSpins", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->lootTableSpins.size()));
    std::vector<int32_t> ::const_iterator _iter224;
    for (_iter224 = this->lootTableSpins.begin(); _iter224 != this->lootTableSpins.end(); ++_iter224)
    {
      xfer += oprot->writeI32((*_iter224));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GachaPack &a, GachaPack &b) {
  using ::std::swap;
  swap(a.gachaPackId, b.gachaPackId);
  swap(a.lootTableIds, b.lootTableIds);
  swap(a.lootTableSpins, b.lootTableSpins);
}

GachaPack::GachaPack(const GachaPack& other225) {
  gachaPackId = other225.gachaPackId;
  lootTableIds = other225.lootTableIds;
  lootTableSpins = other225.lootTableSpins;
}
GachaPack& GachaPack::operator=(const GachaPack& other226) {
  gachaPackId = other226.gachaPackId;
  lootTableIds = other226.lootTableIds;
  lootTableSpins = other226.lootTableSpins;
  return *this;
}
void GachaPack::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GachaPack(";
  out << "gachaPackId=" << to_string(gachaPackId);
  out << ", " << "lootTableIds=" << to_string(lootTableIds);
  out << ", " << "lootTableSpins=" << to_string(lootTableSpins);
  out << ")";
}


LootTable::~LootTable() throw() {
}


void LootTable::__set_lootTableId(const LootTableID& val) {
  this->lootTableId = val;
}

void LootTable::__set_weight(const double val) {
  this->weight = val;
}

void LootTable::__set_itemType(const LootItemType::type val) {
  this->itemType = val;
}

void LootTable::__set_itemGroupIds(const std::vector<std::string> & val) {
  this->itemGroupIds = val;
}

void LootTable::__set_amount(const int32_t val) {
  this->amount = val;
}
std::ostream& operator<<(std::ostream& out, const LootTable& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LootTable::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lootTableId = false;
  bool isset_weight = false;
  bool isset_itemType = false;
  bool isset_itemGroupIds = false;
  bool isset_amount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lootTableId);
          isset_lootTableId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->weight);
          isset_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast227;
          xfer += iprot->readI32(ecast227);
          this->itemType = (LootItemType::type)ecast227;
          isset_itemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->itemGroupIds.clear();
            uint32_t _size228;
            ::apache::thrift::protocol::TType _etype231;
            xfer += iprot->readListBegin(_etype231, _size228);
            this->itemGroupIds.resize(_size228);
            uint32_t _i232;
            for (_i232 = 0; _i232 < _size228; ++_i232)
            {
              xfer += iprot->readString(this->itemGroupIds[_i232]);
            }
            xfer += iprot->readListEnd();
          }
          isset_itemGroupIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->amount);
          isset_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lootTableId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_weight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemGroupIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_amount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LootTable::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LootTable");

  xfer += oprot->writeFieldBegin("lootTableId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->lootTableId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemType", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->itemType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemGroupIds", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->itemGroupIds.size()));
    std::vector<std::string> ::const_iterator _iter233;
    for (_iter233 = this->itemGroupIds.begin(); _iter233 != this->itemGroupIds.end(); ++_iter233)
    {
      xfer += oprot->writeString((*_iter233));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LootTable &a, LootTable &b) {
  using ::std::swap;
  swap(a.lootTableId, b.lootTableId);
  swap(a.weight, b.weight);
  swap(a.itemType, b.itemType);
  swap(a.itemGroupIds, b.itemGroupIds);
  swap(a.amount, b.amount);
}

LootTable::LootTable(const LootTable& other234) {
  lootTableId = other234.lootTableId;
  weight = other234.weight;
  itemType = other234.itemType;
  itemGroupIds = other234.itemGroupIds;
  amount = other234.amount;
}
LootTable& LootTable::operator=(const LootTable& other235) {
  lootTableId = other235.lootTableId;
  weight = other235.weight;
  itemType = other235.itemType;
  itemGroupIds = other235.itemGroupIds;
  amount = other235.amount;
  return *this;
}
void LootTable::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LootTable(";
  out << "lootTableId=" << to_string(lootTableId);
  out << ", " << "weight=" << to_string(weight);
  out << ", " << "itemType=" << to_string(itemType);
  out << ", " << "itemGroupIds=" << to_string(itemGroupIds);
  out << ", " << "amount=" << to_string(amount);
  out << ")";
}


LootCurrencyGroup::~LootCurrencyGroup() throw() {
}


void LootCurrencyGroup::__set_groupId(const LootCurrencyGroupID& val) {
  this->groupId = val;
}

void LootCurrencyGroup::__set_currencyIds(const std::vector<CurrencyID> & val) {
  this->currencyIds = val;
}
std::ostream& operator<<(std::ostream& out, const LootCurrencyGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LootCurrencyGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_groupId = false;
  bool isset_currencyIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupId);
          isset_groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->currencyIds.clear();
            uint32_t _size236;
            ::apache::thrift::protocol::TType _etype239;
            xfer += iprot->readListBegin(_etype239, _size236);
            this->currencyIds.resize(_size236);
            uint32_t _i240;
            for (_i240 = 0; _i240 < _size236; ++_i240)
            {
              xfer += iprot->readString(this->currencyIds[_i240]);
            }
            xfer += iprot->readListEnd();
          }
          isset_currencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_groupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LootCurrencyGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LootCurrencyGroup");

  xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->groupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->currencyIds.size()));
    std::vector<CurrencyID> ::const_iterator _iter241;
    for (_iter241 = this->currencyIds.begin(); _iter241 != this->currencyIds.end(); ++_iter241)
    {
      xfer += oprot->writeString((*_iter241));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LootCurrencyGroup &a, LootCurrencyGroup &b) {
  using ::std::swap;
  swap(a.groupId, b.groupId);
  swap(a.currencyIds, b.currencyIds);
}

LootCurrencyGroup::LootCurrencyGroup(const LootCurrencyGroup& other242) {
  groupId = other242.groupId;
  currencyIds = other242.currencyIds;
}
LootCurrencyGroup& LootCurrencyGroup::operator=(const LootCurrencyGroup& other243) {
  groupId = other243.groupId;
  currencyIds = other243.currencyIds;
  return *this;
}
void LootCurrencyGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LootCurrencyGroup(";
  out << "groupId=" << to_string(groupId);
  out << ", " << "currencyIds=" << to_string(currencyIds);
  out << ")";
}


LootBuildingGroup::~LootBuildingGroup() throw() {
}


void LootBuildingGroup::__set_groupId(const LootBuildingGroupID& val) {
  this->groupId = val;
}

void LootBuildingGroup::__set_buildingIds(const std::vector<BuildingID> & val) {
  this->buildingIds = val;
}
std::ostream& operator<<(std::ostream& out, const LootBuildingGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LootBuildingGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_groupId = false;
  bool isset_buildingIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupId);
          isset_groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buildingIds.clear();
            uint32_t _size244;
            ::apache::thrift::protocol::TType _etype247;
            xfer += iprot->readListBegin(_etype247, _size244);
            this->buildingIds.resize(_size244);
            uint32_t _i248;
            for (_i248 = 0; _i248 < _size244; ++_i248)
            {
              xfer += iprot->readString(this->buildingIds[_i248]);
            }
            xfer += iprot->readListEnd();
          }
          isset_buildingIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_groupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LootBuildingGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LootBuildingGroup");

  xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->groupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->buildingIds.size()));
    std::vector<BuildingID> ::const_iterator _iter249;
    for (_iter249 = this->buildingIds.begin(); _iter249 != this->buildingIds.end(); ++_iter249)
    {
      xfer += oprot->writeString((*_iter249));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LootBuildingGroup &a, LootBuildingGroup &b) {
  using ::std::swap;
  swap(a.groupId, b.groupId);
  swap(a.buildingIds, b.buildingIds);
}

LootBuildingGroup::LootBuildingGroup(const LootBuildingGroup& other250) {
  groupId = other250.groupId;
  buildingIds = other250.buildingIds;
}
LootBuildingGroup& LootBuildingGroup::operator=(const LootBuildingGroup& other251) {
  groupId = other251.groupId;
  buildingIds = other251.buildingIds;
  return *this;
}
void LootBuildingGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LootBuildingGroup(";
  out << "groupId=" << to_string(groupId);
  out << ", " << "buildingIds=" << to_string(buildingIds);
  out << ")";
}


ExpansionType::~ExpansionType() throw() {
}


void ExpansionType::__set_expansionTypeId(const ExpansionTypeID& val) {
  this->expansionTypeId = val;
}

void ExpansionType::__set_spritesheet(const std::string& val) {
  this->spritesheet = val;
__isset.spritesheet = true;
}

void ExpansionType::__set_imagePrefix(const std::string& val) {
  this->imagePrefix = val;
__isset.imagePrefix = true;
}
std::ostream& operator<<(std::ostream& out, const ExpansionType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExpansionType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_expansionTypeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expansionTypeId);
          isset_expansionTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spritesheet);
          this->__isset.spritesheet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imagePrefix);
          this->__isset.imagePrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_expansionTypeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ExpansionType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExpansionType");

  xfer += oprot->writeFieldBegin("expansionTypeId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->expansionTypeId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.spritesheet) {
    xfer += oprot->writeFieldBegin("spritesheet", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->spritesheet);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.imagePrefix) {
    xfer += oprot->writeFieldBegin("imagePrefix", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->imagePrefix);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExpansionType &a, ExpansionType &b) {
  using ::std::swap;
  swap(a.expansionTypeId, b.expansionTypeId);
  swap(a.spritesheet, b.spritesheet);
  swap(a.imagePrefix, b.imagePrefix);
  swap(a.__isset, b.__isset);
}

ExpansionType::ExpansionType(const ExpansionType& other252) {
  expansionTypeId = other252.expansionTypeId;
  spritesheet = other252.spritesheet;
  imagePrefix = other252.imagePrefix;
  __isset = other252.__isset;
}
ExpansionType& ExpansionType::operator=(const ExpansionType& other253) {
  expansionTypeId = other253.expansionTypeId;
  spritesheet = other253.spritesheet;
  imagePrefix = other253.imagePrefix;
  __isset = other253.__isset;
  return *this;
}
void ExpansionType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExpansionType(";
  out << "expansionTypeId=" << to_string(expansionTypeId);
  out << ", " << "spritesheet="; (__isset.spritesheet ? (out << to_string(spritesheet)) : (out << "<null>"));
  out << ", " << "imagePrefix="; (__isset.imagePrefix ? (out << to_string(imagePrefix)) : (out << "<null>"));
  out << ")";
}


Expansion::~Expansion() throw() {
}


void Expansion::__set_expansionId(const ExpansionID& val) {
  this->expansionId = val;
}

void Expansion::__set_blockerId(const BuildingID& val) {
  this->blockerId = val;
__isset.blockerId = true;
}

void Expansion::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
__isset.buildingId = true;
}

void Expansion::__set_costCurrencyIds(const std::vector<CurrencyID> & val) {
  this->costCurrencyIds = val;
__isset.costCurrencyIds = true;
}

void Expansion::__set_costCurrencyAmounts(const std::vector<int32_t> & val) {
  this->costCurrencyAmounts = val;
__isset.costCurrencyAmounts = true;
}

void Expansion::__set_expansionTypeId(const ExpansionTypeID& val) {
  this->expansionTypeId = val;
__isset.expansionTypeId = true;
}

void Expansion::__set_spritesheet(const std::string& val) {
  this->spritesheet = val;
__isset.spritesheet = true;
}

void Expansion::__set_imagePrefix(const std::string& val) {
  this->imagePrefix = val;
__isset.imagePrefix = true;
}
std::ostream& operator<<(std::ostream& out, const Expansion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Expansion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_expansionId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expansionId);
          isset_expansionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blockerId);
          this->__isset.blockerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          this->__isset.buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->costCurrencyIds.clear();
            uint32_t _size254;
            ::apache::thrift::protocol::TType _etype257;
            xfer += iprot->readListBegin(_etype257, _size254);
            this->costCurrencyIds.resize(_size254);
            uint32_t _i258;
            for (_i258 = 0; _i258 < _size254; ++_i258)
            {
              xfer += iprot->readString(this->costCurrencyIds[_i258]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.costCurrencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->costCurrencyAmounts.clear();
            uint32_t _size259;
            ::apache::thrift::protocol::TType _etype262;
            xfer += iprot->readListBegin(_etype262, _size259);
            this->costCurrencyAmounts.resize(_size259);
            uint32_t _i263;
            for (_i263 = 0; _i263 < _size259; ++_i263)
            {
              xfer += iprot->readI32(this->costCurrencyAmounts[_i263]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.costCurrencyAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expansionTypeId);
          this->__isset.expansionTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spritesheet);
          this->__isset.spritesheet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imagePrefix);
          this->__isset.imagePrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_expansionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Expansion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Expansion");

  xfer += oprot->writeFieldBegin("expansionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->expansionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.blockerId) {
    xfer += oprot->writeFieldBegin("blockerId", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->blockerId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildingId) {
    xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->buildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.costCurrencyIds) {
    xfer += oprot->writeFieldBegin("costCurrencyIds", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->costCurrencyIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter264;
      for (_iter264 = this->costCurrencyIds.begin(); _iter264 != this->costCurrencyIds.end(); ++_iter264)
      {
        xfer += oprot->writeString((*_iter264));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.costCurrencyAmounts) {
    xfer += oprot->writeFieldBegin("costCurrencyAmounts", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->costCurrencyAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter265;
      for (_iter265 = this->costCurrencyAmounts.begin(); _iter265 != this->costCurrencyAmounts.end(); ++_iter265)
      {
        xfer += oprot->writeI32((*_iter265));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expansionTypeId) {
    xfer += oprot->writeFieldBegin("expansionTypeId", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->expansionTypeId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spritesheet) {
    xfer += oprot->writeFieldBegin("spritesheet", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->spritesheet);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.imagePrefix) {
    xfer += oprot->writeFieldBegin("imagePrefix", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->imagePrefix);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Expansion &a, Expansion &b) {
  using ::std::swap;
  swap(a.expansionId, b.expansionId);
  swap(a.blockerId, b.blockerId);
  swap(a.buildingId, b.buildingId);
  swap(a.costCurrencyIds, b.costCurrencyIds);
  swap(a.costCurrencyAmounts, b.costCurrencyAmounts);
  swap(a.expansionTypeId, b.expansionTypeId);
  swap(a.spritesheet, b.spritesheet);
  swap(a.imagePrefix, b.imagePrefix);
  swap(a.__isset, b.__isset);
}

Expansion::Expansion(const Expansion& other266) {
  expansionId = other266.expansionId;
  blockerId = other266.blockerId;
  buildingId = other266.buildingId;
  costCurrencyIds = other266.costCurrencyIds;
  costCurrencyAmounts = other266.costCurrencyAmounts;
  expansionTypeId = other266.expansionTypeId;
  spritesheet = other266.spritesheet;
  imagePrefix = other266.imagePrefix;
  __isset = other266.__isset;
}
Expansion& Expansion::operator=(const Expansion& other267) {
  expansionId = other267.expansionId;
  blockerId = other267.blockerId;
  buildingId = other267.buildingId;
  costCurrencyIds = other267.costCurrencyIds;
  costCurrencyAmounts = other267.costCurrencyAmounts;
  expansionTypeId = other267.expansionTypeId;
  spritesheet = other267.spritesheet;
  imagePrefix = other267.imagePrefix;
  __isset = other267.__isset;
  return *this;
}
void Expansion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Expansion(";
  out << "expansionId=" << to_string(expansionId);
  out << ", " << "blockerId="; (__isset.blockerId ? (out << to_string(blockerId)) : (out << "<null>"));
  out << ", " << "buildingId="; (__isset.buildingId ? (out << to_string(buildingId)) : (out << "<null>"));
  out << ", " << "costCurrencyIds="; (__isset.costCurrencyIds ? (out << to_string(costCurrencyIds)) : (out << "<null>"));
  out << ", " << "costCurrencyAmounts="; (__isset.costCurrencyAmounts ? (out << to_string(costCurrencyAmounts)) : (out << "<null>"));
  out << ", " << "expansionTypeId="; (__isset.expansionTypeId ? (out << to_string(expansionTypeId)) : (out << "<null>"));
  out << ", " << "spritesheet="; (__isset.spritesheet ? (out << to_string(spritesheet)) : (out << "<null>"));
  out << ", " << "imagePrefix="; (__isset.imagePrefix ? (out << to_string(imagePrefix)) : (out << "<null>"));
  out << ")";
}


Rank::~Rank() throw() {
}


void Rank::__set_rankId(const RankID val) {
  this->rankId = val;
}

void Rank::__set_xp(const int32_t val) {
  this->xp = val;
}

void Rank::__set_maxFriends(const int32_t val) {
  this->maxFriends = val;
}

void Rank::__set_maxBuildings(const int32_t val) {
  this->maxBuildings = val;
}

void Rank::__set_maxStamina(const int32_t val) {
  this->maxStamina = val;
}

void Rank::__set_maxKingdomLikes(const int32_t val) {
  this->maxKingdomLikes = val;
}

void Rank::__set_maxKingdomLikesGiftId(const KingdomLikeGiftID& val) {
  this->maxKingdomLikesGiftId = val;
}

void Rank::__set_rankUpCurrencyRewardId(const CurrencyID& val) {
  this->rankUpCurrencyRewardId = val;
__isset.rankUpCurrencyRewardId = true;
}

void Rank::__set_rankUpCurrencyRewardAmount(const int32_t val) {
  this->rankUpCurrencyRewardAmount = val;
__isset.rankUpCurrencyRewardAmount = true;
}

void Rank::__set_awardedStamina(const int32_t val) {
  this->awardedStamina = val;
__isset.awardedStamina = true;
}

void Rank::__set_xpNeeded(const int32_t val) {
  this->xpNeeded = val;
__isset.xpNeeded = true;
}

void Rank::__set_newDisplay(const std::string& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void Rank::__set_requiredPlacedBuildingScore(const int32_t val) {
  this->requiredPlacedBuildingScore = val;
__isset.requiredPlacedBuildingScore = true;
}

void Rank::__set_unlockedBuildingIds(const std::vector<BuildingID> & val) {
  this->unlockedBuildingIds = val;
__isset.unlockedBuildingIds = true;
}

void Rank::__set_unlockedBuildingAmounts(const std::vector<int32_t> & val) {
  this->unlockedBuildingAmounts = val;
__isset.unlockedBuildingAmounts = true;
}

void Rank::__set_lootTableIds(const std::vector<LootTableID> & val) {
  this->lootTableIds = val;
__isset.lootTableIds = true;
}

void Rank::__set_lootTableSpins(const std::vector<int32_t> & val) {
  this->lootTableSpins = val;
__isset.lootTableSpins = true;
}
std::ostream& operator<<(std::ostream& out, const Rank& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Rank::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rankId = false;
  bool isset_xp = false;
  bool isset_maxFriends = false;
  bool isset_maxBuildings = false;
  bool isset_maxStamina = false;
  bool isset_maxKingdomLikes = false;
  bool isset_maxKingdomLikesGiftId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rankId);
          isset_rankId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xp);
          isset_xp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxFriends);
          isset_maxFriends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxBuildings);
          isset_maxBuildings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxStamina);
          isset_maxStamina = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxKingdomLikes);
          isset_maxKingdomLikes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->maxKingdomLikesGiftId);
          isset_maxKingdomLikesGiftId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rankUpCurrencyRewardId);
          this->__isset.rankUpCurrencyRewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rankUpCurrencyRewardAmount);
          this->__isset.rankUpCurrencyRewardAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->awardedStamina);
          this->__isset.awardedStamina = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xpNeeded);
          this->__isset.xpNeeded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newDisplay);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requiredPlacedBuildingScore);
          this->__isset.requiredPlacedBuildingScore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->unlockedBuildingIds.clear();
            uint32_t _size268;
            ::apache::thrift::protocol::TType _etype271;
            xfer += iprot->readListBegin(_etype271, _size268);
            this->unlockedBuildingIds.resize(_size268);
            uint32_t _i272;
            for (_i272 = 0; _i272 < _size268; ++_i272)
            {
              xfer += iprot->readString(this->unlockedBuildingIds[_i272]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.unlockedBuildingIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->unlockedBuildingAmounts.clear();
            uint32_t _size273;
            ::apache::thrift::protocol::TType _etype276;
            xfer += iprot->readListBegin(_etype276, _size273);
            this->unlockedBuildingAmounts.resize(_size273);
            uint32_t _i277;
            for (_i277 = 0; _i277 < _size273; ++_i277)
            {
              xfer += iprot->readI32(this->unlockedBuildingAmounts[_i277]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.unlockedBuildingAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableIds.clear();
            uint32_t _size278;
            ::apache::thrift::protocol::TType _etype281;
            xfer += iprot->readListBegin(_etype281, _size278);
            this->lootTableIds.resize(_size278);
            uint32_t _i282;
            for (_i282 = 0; _i282 < _size278; ++_i282)
            {
              xfer += iprot->readString(this->lootTableIds[_i282]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.lootTableIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableSpins.clear();
            uint32_t _size283;
            ::apache::thrift::protocol::TType _etype286;
            xfer += iprot->readListBegin(_etype286, _size283);
            this->lootTableSpins.resize(_size283);
            uint32_t _i287;
            for (_i287 = 0; _i287 < _size283; ++_i287)
            {
              xfer += iprot->readI32(this->lootTableSpins[_i287]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.lootTableSpins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rankId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_xp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxFriends)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxBuildings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxStamina)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxKingdomLikes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxKingdomLikesGiftId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Rank::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rank");

  xfer += oprot->writeFieldBegin("rankId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->rankId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xp", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->xp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxFriends", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maxFriends);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxBuildings", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->maxBuildings);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxStamina", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->maxStamina);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxKingdomLikes", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->maxKingdomLikes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxKingdomLikesGiftId", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->maxKingdomLikesGiftId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rankUpCurrencyRewardId) {
    xfer += oprot->writeFieldBegin("rankUpCurrencyRewardId", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->rankUpCurrencyRewardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankUpCurrencyRewardAmount) {
    xfer += oprot->writeFieldBegin("rankUpCurrencyRewardAmount", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->rankUpCurrencyRewardAmount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.awardedStamina) {
    xfer += oprot->writeFieldBegin("awardedStamina", ::apache::thrift::protocol::T_I32, 18);
    xfer += oprot->writeI32(this->awardedStamina);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.xpNeeded) {
    xfer += oprot->writeFieldBegin("xpNeeded", ::apache::thrift::protocol::T_I32, 19);
    xfer += oprot->writeI32(this->xpNeeded);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->newDisplay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requiredPlacedBuildingScore) {
    xfer += oprot->writeFieldBegin("requiredPlacedBuildingScore", ::apache::thrift::protocol::T_I32, 40);
    xfer += oprot->writeI32(this->requiredPlacedBuildingScore);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockedBuildingIds) {
    xfer += oprot->writeFieldBegin("unlockedBuildingIds", ::apache::thrift::protocol::T_LIST, 50);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->unlockedBuildingIds.size()));
      std::vector<BuildingID> ::const_iterator _iter288;
      for (_iter288 = this->unlockedBuildingIds.begin(); _iter288 != this->unlockedBuildingIds.end(); ++_iter288)
      {
        xfer += oprot->writeString((*_iter288));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockedBuildingAmounts) {
    xfer += oprot->writeFieldBegin("unlockedBuildingAmounts", ::apache::thrift::protocol::T_LIST, 51);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->unlockedBuildingAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter289;
      for (_iter289 = this->unlockedBuildingAmounts.begin(); _iter289 != this->unlockedBuildingAmounts.end(); ++_iter289)
      {
        xfer += oprot->writeI32((*_iter289));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lootTableIds) {
    xfer += oprot->writeFieldBegin("lootTableIds", ::apache::thrift::protocol::T_LIST, 60);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->lootTableIds.size()));
      std::vector<LootTableID> ::const_iterator _iter290;
      for (_iter290 = this->lootTableIds.begin(); _iter290 != this->lootTableIds.end(); ++_iter290)
      {
        xfer += oprot->writeString((*_iter290));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lootTableSpins) {
    xfer += oprot->writeFieldBegin("lootTableSpins", ::apache::thrift::protocol::T_LIST, 61);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->lootTableSpins.size()));
      std::vector<int32_t> ::const_iterator _iter291;
      for (_iter291 = this->lootTableSpins.begin(); _iter291 != this->lootTableSpins.end(); ++_iter291)
      {
        xfer += oprot->writeI32((*_iter291));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rank &a, Rank &b) {
  using ::std::swap;
  swap(a.rankId, b.rankId);
  swap(a.xp, b.xp);
  swap(a.maxFriends, b.maxFriends);
  swap(a.maxBuildings, b.maxBuildings);
  swap(a.maxStamina, b.maxStamina);
  swap(a.maxKingdomLikes, b.maxKingdomLikes);
  swap(a.maxKingdomLikesGiftId, b.maxKingdomLikesGiftId);
  swap(a.rankUpCurrencyRewardId, b.rankUpCurrencyRewardId);
  swap(a.rankUpCurrencyRewardAmount, b.rankUpCurrencyRewardAmount);
  swap(a.awardedStamina, b.awardedStamina);
  swap(a.xpNeeded, b.xpNeeded);
  swap(a.newDisplay, b.newDisplay);
  swap(a.requiredPlacedBuildingScore, b.requiredPlacedBuildingScore);
  swap(a.unlockedBuildingIds, b.unlockedBuildingIds);
  swap(a.unlockedBuildingAmounts, b.unlockedBuildingAmounts);
  swap(a.lootTableIds, b.lootTableIds);
  swap(a.lootTableSpins, b.lootTableSpins);
  swap(a.__isset, b.__isset);
}

Rank::Rank(const Rank& other292) {
  rankId = other292.rankId;
  xp = other292.xp;
  maxFriends = other292.maxFriends;
  maxBuildings = other292.maxBuildings;
  maxStamina = other292.maxStamina;
  maxKingdomLikes = other292.maxKingdomLikes;
  maxKingdomLikesGiftId = other292.maxKingdomLikesGiftId;
  rankUpCurrencyRewardId = other292.rankUpCurrencyRewardId;
  rankUpCurrencyRewardAmount = other292.rankUpCurrencyRewardAmount;
  awardedStamina = other292.awardedStamina;
  xpNeeded = other292.xpNeeded;
  newDisplay = other292.newDisplay;
  requiredPlacedBuildingScore = other292.requiredPlacedBuildingScore;
  unlockedBuildingIds = other292.unlockedBuildingIds;
  unlockedBuildingAmounts = other292.unlockedBuildingAmounts;
  lootTableIds = other292.lootTableIds;
  lootTableSpins = other292.lootTableSpins;
  __isset = other292.__isset;
}
Rank& Rank::operator=(const Rank& other293) {
  rankId = other293.rankId;
  xp = other293.xp;
  maxFriends = other293.maxFriends;
  maxBuildings = other293.maxBuildings;
  maxStamina = other293.maxStamina;
  maxKingdomLikes = other293.maxKingdomLikes;
  maxKingdomLikesGiftId = other293.maxKingdomLikesGiftId;
  rankUpCurrencyRewardId = other293.rankUpCurrencyRewardId;
  rankUpCurrencyRewardAmount = other293.rankUpCurrencyRewardAmount;
  awardedStamina = other293.awardedStamina;
  xpNeeded = other293.xpNeeded;
  newDisplay = other293.newDisplay;
  requiredPlacedBuildingScore = other293.requiredPlacedBuildingScore;
  unlockedBuildingIds = other293.unlockedBuildingIds;
  unlockedBuildingAmounts = other293.unlockedBuildingAmounts;
  lootTableIds = other293.lootTableIds;
  lootTableSpins = other293.lootTableSpins;
  __isset = other293.__isset;
  return *this;
}
void Rank::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rank(";
  out << "rankId=" << to_string(rankId);
  out << ", " << "xp=" << to_string(xp);
  out << ", " << "maxFriends=" << to_string(maxFriends);
  out << ", " << "maxBuildings=" << to_string(maxBuildings);
  out << ", " << "maxStamina=" << to_string(maxStamina);
  out << ", " << "maxKingdomLikes=" << to_string(maxKingdomLikes);
  out << ", " << "maxKingdomLikesGiftId=" << to_string(maxKingdomLikesGiftId);
  out << ", " << "rankUpCurrencyRewardId="; (__isset.rankUpCurrencyRewardId ? (out << to_string(rankUpCurrencyRewardId)) : (out << "<null>"));
  out << ", " << "rankUpCurrencyRewardAmount="; (__isset.rankUpCurrencyRewardAmount ? (out << to_string(rankUpCurrencyRewardAmount)) : (out << "<null>"));
  out << ", " << "awardedStamina="; (__isset.awardedStamina ? (out << to_string(awardedStamina)) : (out << "<null>"));
  out << ", " << "xpNeeded="; (__isset.xpNeeded ? (out << to_string(xpNeeded)) : (out << "<null>"));
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "requiredPlacedBuildingScore="; (__isset.requiredPlacedBuildingScore ? (out << to_string(requiredPlacedBuildingScore)) : (out << "<null>"));
  out << ", " << "unlockedBuildingIds="; (__isset.unlockedBuildingIds ? (out << to_string(unlockedBuildingIds)) : (out << "<null>"));
  out << ", " << "unlockedBuildingAmounts="; (__isset.unlockedBuildingAmounts ? (out << to_string(unlockedBuildingAmounts)) : (out << "<null>"));
  out << ", " << "lootTableIds="; (__isset.lootTableIds ? (out << to_string(lootTableIds)) : (out << "<null>"));
  out << ", " << "lootTableSpins="; (__isset.lootTableSpins ? (out << to_string(lootTableSpins)) : (out << "<null>"));
  out << ")";
}


GuildRank::~GuildRank() throw() {
}


void GuildRank::__set_rankId(const RankID val) {
  this->rankId = val;
}

void GuildRank::__set_pointsForRank(const int64_t val) {
  this->pointsForRank = val;
}

void GuildRank::__set_guildHallImage(const AssetPath& val) {
  this->guildHallImage = val;
__isset.guildHallImage = true;
}

void GuildRank::__set_realHeight(const int32_t val) {
  this->realHeight = val;
__isset.realHeight = true;
}
std::ostream& operator<<(std::ostream& out, const GuildRank& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildRank::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rankId = false;
  bool isset_pointsForRank = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rankId);
          isset_rankId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pointsForRank);
          isset_pointsForRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guildHallImage);
          this->__isset.guildHallImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->realHeight);
          this->__isset.realHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rankId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pointsForRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildRank::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildRank");

  xfer += oprot->writeFieldBegin("rankId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->rankId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointsForRank", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->pointsForRank);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.guildHallImage) {
    xfer += oprot->writeFieldBegin("guildHallImage", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->guildHallImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.realHeight) {
    xfer += oprot->writeFieldBegin("realHeight", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->realHeight);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildRank &a, GuildRank &b) {
  using ::std::swap;
  swap(a.rankId, b.rankId);
  swap(a.pointsForRank, b.pointsForRank);
  swap(a.guildHallImage, b.guildHallImage);
  swap(a.realHeight, b.realHeight);
  swap(a.__isset, b.__isset);
}

GuildRank::GuildRank(const GuildRank& other294) {
  rankId = other294.rankId;
  pointsForRank = other294.pointsForRank;
  guildHallImage = other294.guildHallImage;
  realHeight = other294.realHeight;
  __isset = other294.__isset;
}
GuildRank& GuildRank::operator=(const GuildRank& other295) {
  rankId = other295.rankId;
  pointsForRank = other295.pointsForRank;
  guildHallImage = other295.guildHallImage;
  realHeight = other295.realHeight;
  __isset = other295.__isset;
  return *this;
}
void GuildRank::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildRank(";
  out << "rankId=" << to_string(rankId);
  out << ", " << "pointsForRank=" << to_string(pointsForRank);
  out << ", " << "guildHallImage="; (__isset.guildHallImage ? (out << to_string(guildHallImage)) : (out << "<null>"));
  out << ", " << "realHeight="; (__isset.realHeight ? (out << to_string(realHeight)) : (out << "<null>"));
  out << ")";
}


Boost::~Boost() throw() {
}


void Boost::__set_boostId(const BoostID& val) {
  this->boostId = val;
}

void Boost::__set_boostTypeId(const BoostTypeID& val) {
  this->boostTypeId = val;
}

void Boost::__set_unlockLevelId(const std::string& val) {
  this->unlockLevelId = val;
__isset.unlockLevelId = true;
}

void Boost::__set_minRank(const int32_t val) {
  this->minRank = val;
__isset.minRank = true;
}

void Boost::__set_tutorialFlag(const std::string& val) {
  this->tutorialFlag = val;
__isset.tutorialFlag = true;
}

void Boost::__set_hudText(const std::string& val) {
  this->hudText = val;
__isset.hudText = true;
}

void Boost::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void Boost::__set_newDescription(const LocalizedString& val) {
  this->newDescription = val;
__isset.newDescription = true;
}

void Boost::__set_enablePredicate(const std::string& val) {
  this->enablePredicate = val;
__isset.enablePredicate = true;
}

void Boost::__set_anim(const std::string& val) {
  this->anim = val;
__isset.anim = true;
}

void Boost::__set_blastUpgrade(const std::string& val) {
  this->blastUpgrade = val;
__isset.blastUpgrade = true;
}

void Boost::__set_conditional(const std::string& val) {
  this->conditional = val;
__isset.conditional = true;
}

void Boost::__set_priority(const int32_t val) {
  this->priority = val;
__isset.priority = true;
}

void Boost::__set_matrix(const std::string& val) {
  this->matrix = val;
__isset.matrix = true;
}

void Boost::__set_needsPlacement(const bool val) {
  this->needsPlacement = val;
__isset.needsPlacement = true;
}

void Boost::__set_predicate(const std::string& val) {
  this->predicate = val;
__isset.predicate = true;
}

void Boost::__set_selectionPredicate(const std::string& val) {
  this->selectionPredicate = val;
__isset.selectionPredicate = true;
}

void Boost::__set_immuneCellTypes(const std::vector<CellTypeID> & val) {
  this->immuneCellTypes = val;
__isset.immuneCellTypes = true;
}

void Boost::__set_order(const int32_t val) {
  this->order = val;
__isset.order = true;
}

void Boost::__set_sealImage(const AssetPath& val) {
  this->sealImage = val;
__isset.sealImage = true;
}

void Boost::__set_buttonImage(const AssetPath& val) {
  this->buttonImage = val;
__isset.buttonImage = true;
}

void Boost::__set_buttonSelectedImage(const AssetPath& val) {
  this->buttonSelectedImage = val;
__isset.buttonSelectedImage = true;
}

void Boost::__set_useGetCurrencyDialog(const bool val) {
  this->useGetCurrencyDialog = val;
__isset.useGetCurrencyDialog = true;
}

void Boost::__set_animFileName(const std::string& val) {
  this->animFileName = val;
__isset.animFileName = true;
}

void Boost::__set_soundFile(const std::string& val) {
  this->soundFile = val;
__isset.soundFile = true;
}

void Boost::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
__isset.eventIds = true;
}

void Boost::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
__isset.eventPhases = true;
}
std::ostream& operator<<(std::ostream& out, const Boost& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Boost::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_boostId = false;
  bool isset_boostTypeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->boostId);
          isset_boostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->boostTypeId);
          isset_boostTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unlockLevelId);
          this->__isset.unlockLevelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRank);
          this->__isset.minRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tutorialFlag);
          this->__isset.tutorialFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hudText);
          this->__isset.hudText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDescription.read(iprot);
          this->__isset.newDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->enablePredicate);
          this->__isset.enablePredicate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->anim);
          this->__isset.anim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blastUpgrade);
          this->__isset.blastUpgrade = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->conditional);
          this->__isset.conditional = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->matrix);
          this->__isset.matrix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needsPlacement);
          this->__isset.needsPlacement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->predicate);
          this->__isset.predicate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->selectionPredicate);
          this->__isset.selectionPredicate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->immuneCellTypes.clear();
            uint32_t _size296;
            ::apache::thrift::protocol::TType _etype299;
            xfer += iprot->readListBegin(_etype299, _size296);
            this->immuneCellTypes.resize(_size296);
            uint32_t _i300;
            for (_i300 = 0; _i300 < _size296; ++_i300)
            {
              xfer += iprot->readString(this->immuneCellTypes[_i300]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.immuneCellTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sealImage);
          this->__isset.sealImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buttonImage);
          this->__isset.buttonImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buttonSelectedImage);
          this->__isset.buttonSelectedImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useGetCurrencyDialog);
          this->__isset.useGetCurrencyDialog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->animFileName);
          this->__isset.animFileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->soundFile);
          this->__isset.soundFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size301;
            ::apache::thrift::protocol::TType _etype304;
            xfer += iprot->readListBegin(_etype304, _size301);
            this->eventIds.resize(_size301);
            uint32_t _i305;
            for (_i305 = 0; _i305 < _size301; ++_i305)
            {
              xfer += iprot->readString(this->eventIds[_i305]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast306;
          xfer += iprot->readI32(ecast306);
          this->eventPhases = (EventPhases::type)ecast306;
          this->__isset.eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_boostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_boostTypeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Boost::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Boost");

  xfer += oprot->writeFieldBegin("boostId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->boostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("boostTypeId", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->boostTypeId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.unlockLevelId) {
    xfer += oprot->writeFieldBegin("unlockLevelId", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->unlockLevelId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minRank) {
    xfer += oprot->writeFieldBegin("minRank", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->minRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tutorialFlag) {
    xfer += oprot->writeFieldBegin("tutorialFlag", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->tutorialFlag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hudText) {
    xfer += oprot->writeFieldBegin("hudText", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->hudText);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 33);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDescription) {
    xfer += oprot->writeFieldBegin("newDescription", ::apache::thrift::protocol::T_STRUCT, 34);
    xfer += this->newDescription.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enablePredicate) {
    xfer += oprot->writeFieldBegin("enablePredicate", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->enablePredicate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.anim) {
    xfer += oprot->writeFieldBegin("anim", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->anim);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blastUpgrade) {
    xfer += oprot->writeFieldBegin("blastUpgrade", ::apache::thrift::protocol::T_STRING, 42);
    xfer += oprot->writeString(this->blastUpgrade);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.conditional) {
    xfer += oprot->writeFieldBegin("conditional", ::apache::thrift::protocol::T_STRING, 43);
    xfer += oprot->writeString(this->conditional);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 44);
    xfer += oprot->writeI32(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.matrix) {
    xfer += oprot->writeFieldBegin("matrix", ::apache::thrift::protocol::T_STRING, 45);
    xfer += oprot->writeString(this->matrix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.needsPlacement) {
    xfer += oprot->writeFieldBegin("needsPlacement", ::apache::thrift::protocol::T_BOOL, 46);
    xfer += oprot->writeBool(this->needsPlacement);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.predicate) {
    xfer += oprot->writeFieldBegin("predicate", ::apache::thrift::protocol::T_STRING, 47);
    xfer += oprot->writeString(this->predicate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.selectionPredicate) {
    xfer += oprot->writeFieldBegin("selectionPredicate", ::apache::thrift::protocol::T_STRING, 48);
    xfer += oprot->writeString(this->selectionPredicate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.immuneCellTypes) {
    xfer += oprot->writeFieldBegin("immuneCellTypes", ::apache::thrift::protocol::T_LIST, 49);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->immuneCellTypes.size()));
      std::vector<CellTypeID> ::const_iterator _iter307;
      for (_iter307 = this->immuneCellTypes.begin(); _iter307 != this->immuneCellTypes.end(); ++_iter307)
      {
        xfer += oprot->writeString((*_iter307));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.order) {
    xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 50);
    xfer += oprot->writeI32(this->order);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sealImage) {
    xfer += oprot->writeFieldBegin("sealImage", ::apache::thrift::protocol::T_STRING, 60);
    xfer += oprot->writeString(this->sealImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buttonImage) {
    xfer += oprot->writeFieldBegin("buttonImage", ::apache::thrift::protocol::T_STRING, 61);
    xfer += oprot->writeString(this->buttonImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useGetCurrencyDialog) {
    xfer += oprot->writeFieldBegin("useGetCurrencyDialog", ::apache::thrift::protocol::T_BOOL, 62);
    xfer += oprot->writeBool(this->useGetCurrencyDialog);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.animFileName) {
    xfer += oprot->writeFieldBegin("animFileName", ::apache::thrift::protocol::T_STRING, 63);
    xfer += oprot->writeString(this->animFileName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buttonSelectedImage) {
    xfer += oprot->writeFieldBegin("buttonSelectedImage", ::apache::thrift::protocol::T_STRING, 64);
    xfer += oprot->writeString(this->buttonSelectedImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soundFile) {
    xfer += oprot->writeFieldBegin("soundFile", ::apache::thrift::protocol::T_STRING, 65);
    xfer += oprot->writeString(this->soundFile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventIds) {
    xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 70);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
      std::vector<EventID> ::const_iterator _iter308;
      for (_iter308 = this->eventIds.begin(); _iter308 != this->eventIds.end(); ++_iter308)
      {
        xfer += oprot->writeString((*_iter308));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPhases) {
    xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 71);
    xfer += oprot->writeI32((int32_t)this->eventPhases);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Boost &a, Boost &b) {
  using ::std::swap;
  swap(a.boostId, b.boostId);
  swap(a.boostTypeId, b.boostTypeId);
  swap(a.unlockLevelId, b.unlockLevelId);
  swap(a.minRank, b.minRank);
  swap(a.tutorialFlag, b.tutorialFlag);
  swap(a.hudText, b.hudText);
  swap(a.newDisplay, b.newDisplay);
  swap(a.newDescription, b.newDescription);
  swap(a.enablePredicate, b.enablePredicate);
  swap(a.anim, b.anim);
  swap(a.blastUpgrade, b.blastUpgrade);
  swap(a.conditional, b.conditional);
  swap(a.priority, b.priority);
  swap(a.matrix, b.matrix);
  swap(a.needsPlacement, b.needsPlacement);
  swap(a.predicate, b.predicate);
  swap(a.selectionPredicate, b.selectionPredicate);
  swap(a.immuneCellTypes, b.immuneCellTypes);
  swap(a.order, b.order);
  swap(a.sealImage, b.sealImage);
  swap(a.buttonImage, b.buttonImage);
  swap(a.buttonSelectedImage, b.buttonSelectedImage);
  swap(a.useGetCurrencyDialog, b.useGetCurrencyDialog);
  swap(a.animFileName, b.animFileName);
  swap(a.soundFile, b.soundFile);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.__isset, b.__isset);
}

Boost::Boost(const Boost& other309) {
  boostId = other309.boostId;
  boostTypeId = other309.boostTypeId;
  unlockLevelId = other309.unlockLevelId;
  minRank = other309.minRank;
  tutorialFlag = other309.tutorialFlag;
  hudText = other309.hudText;
  newDisplay = other309.newDisplay;
  newDescription = other309.newDescription;
  enablePredicate = other309.enablePredicate;
  anim = other309.anim;
  blastUpgrade = other309.blastUpgrade;
  conditional = other309.conditional;
  priority = other309.priority;
  matrix = other309.matrix;
  needsPlacement = other309.needsPlacement;
  predicate = other309.predicate;
  selectionPredicate = other309.selectionPredicate;
  immuneCellTypes = other309.immuneCellTypes;
  order = other309.order;
  sealImage = other309.sealImage;
  buttonImage = other309.buttonImage;
  buttonSelectedImage = other309.buttonSelectedImage;
  useGetCurrencyDialog = other309.useGetCurrencyDialog;
  animFileName = other309.animFileName;
  soundFile = other309.soundFile;
  eventIds = other309.eventIds;
  eventPhases = other309.eventPhases;
  __isset = other309.__isset;
}
Boost& Boost::operator=(const Boost& other310) {
  boostId = other310.boostId;
  boostTypeId = other310.boostTypeId;
  unlockLevelId = other310.unlockLevelId;
  minRank = other310.minRank;
  tutorialFlag = other310.tutorialFlag;
  hudText = other310.hudText;
  newDisplay = other310.newDisplay;
  newDescription = other310.newDescription;
  enablePredicate = other310.enablePredicate;
  anim = other310.anim;
  blastUpgrade = other310.blastUpgrade;
  conditional = other310.conditional;
  priority = other310.priority;
  matrix = other310.matrix;
  needsPlacement = other310.needsPlacement;
  predicate = other310.predicate;
  selectionPredicate = other310.selectionPredicate;
  immuneCellTypes = other310.immuneCellTypes;
  order = other310.order;
  sealImage = other310.sealImage;
  buttonImage = other310.buttonImage;
  buttonSelectedImage = other310.buttonSelectedImage;
  useGetCurrencyDialog = other310.useGetCurrencyDialog;
  animFileName = other310.animFileName;
  soundFile = other310.soundFile;
  eventIds = other310.eventIds;
  eventPhases = other310.eventPhases;
  __isset = other310.__isset;
  return *this;
}
void Boost::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Boost(";
  out << "boostId=" << to_string(boostId);
  out << ", " << "boostTypeId=" << to_string(boostTypeId);
  out << ", " << "unlockLevelId="; (__isset.unlockLevelId ? (out << to_string(unlockLevelId)) : (out << "<null>"));
  out << ", " << "minRank="; (__isset.minRank ? (out << to_string(minRank)) : (out << "<null>"));
  out << ", " << "tutorialFlag="; (__isset.tutorialFlag ? (out << to_string(tutorialFlag)) : (out << "<null>"));
  out << ", " << "hudText="; (__isset.hudText ? (out << to_string(hudText)) : (out << "<null>"));
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "newDescription="; (__isset.newDescription ? (out << to_string(newDescription)) : (out << "<null>"));
  out << ", " << "enablePredicate="; (__isset.enablePredicate ? (out << to_string(enablePredicate)) : (out << "<null>"));
  out << ", " << "anim="; (__isset.anim ? (out << to_string(anim)) : (out << "<null>"));
  out << ", " << "blastUpgrade="; (__isset.blastUpgrade ? (out << to_string(blastUpgrade)) : (out << "<null>"));
  out << ", " << "conditional="; (__isset.conditional ? (out << to_string(conditional)) : (out << "<null>"));
  out << ", " << "priority="; (__isset.priority ? (out << to_string(priority)) : (out << "<null>"));
  out << ", " << "matrix="; (__isset.matrix ? (out << to_string(matrix)) : (out << "<null>"));
  out << ", " << "needsPlacement="; (__isset.needsPlacement ? (out << to_string(needsPlacement)) : (out << "<null>"));
  out << ", " << "predicate="; (__isset.predicate ? (out << to_string(predicate)) : (out << "<null>"));
  out << ", " << "selectionPredicate="; (__isset.selectionPredicate ? (out << to_string(selectionPredicate)) : (out << "<null>"));
  out << ", " << "immuneCellTypes="; (__isset.immuneCellTypes ? (out << to_string(immuneCellTypes)) : (out << "<null>"));
  out << ", " << "order="; (__isset.order ? (out << to_string(order)) : (out << "<null>"));
  out << ", " << "sealImage="; (__isset.sealImage ? (out << to_string(sealImage)) : (out << "<null>"));
  out << ", " << "buttonImage="; (__isset.buttonImage ? (out << to_string(buttonImage)) : (out << "<null>"));
  out << ", " << "buttonSelectedImage="; (__isset.buttonSelectedImage ? (out << to_string(buttonSelectedImage)) : (out << "<null>"));
  out << ", " << "useGetCurrencyDialog="; (__isset.useGetCurrencyDialog ? (out << to_string(useGetCurrencyDialog)) : (out << "<null>"));
  out << ", " << "animFileName="; (__isset.animFileName ? (out << to_string(animFileName)) : (out << "<null>"));
  out << ", " << "soundFile="; (__isset.soundFile ? (out << to_string(soundFile)) : (out << "<null>"));
  out << ", " << "eventIds="; (__isset.eventIds ? (out << to_string(eventIds)) : (out << "<null>"));
  out << ", " << "eventPhases="; (__isset.eventPhases ? (out << to_string(eventPhases)) : (out << "<null>"));
  out << ")";
}


EventLock::~EventLock() throw() {
}


void EventLock::__set_eventLockId(const EventLockID& val) {
  this->eventLockId = val;
}

void EventLock::__set_override(const bool val) {
  this->override = val;
__isset.override = true;
}

void EventLock::__set_enabled(const bool val) {
  this->enabled = val;
__isset.enabled = true;
}

void EventLock::__set_minRank(const int32_t val) {
  this->minRank = val;
__isset.minRank = true;
}

void EventLock::__set_maxRank(const int32_t val) {
  this->maxRank = val;
__isset.maxRank = true;
}

void EventLock::__set_startTime(const std::string& val) {
  this->startTime = val;
}

void EventLock::__set_endTime(const std::string& val) {
  this->endTime = val;
}

void EventLock::__set_period(const int32_t val) {
  this->period = val;
__isset.period = true;
}

void EventLock::__set_duration(const int32_t val) {
  this->duration = val;
__isset.duration = true;
}

void EventLock::__set_gateCurrencyId(const CurrencyID& val) {
  this->gateCurrencyId = val;
__isset.gateCurrencyId = true;
}

void EventLock::__set_requiredBaseBuildingId(const BuildingID& val) {
  this->requiredBaseBuildingId = val;
__isset.requiredBaseBuildingId = true;
}
std::ostream& operator<<(std::ostream& out, const EventLock& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EventLock::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventLockId = false;
  bool isset_startTime = false;
  bool isset_endTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventLockId);
          isset_eventLockId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->override);
          this->__isset.override = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRank);
          this->__isset.minRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRank);
          this->__isset.maxRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->startTime);
          isset_startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endTime);
          isset_endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->period);
          this->__isset.period = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gateCurrencyId);
          this->__isset.gateCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requiredBaseBuildingId);
          this->__isset.requiredBaseBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventLockId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_endTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventLock::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EventLock");

  xfer += oprot->writeFieldBegin("eventLockId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eventLockId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.override) {
    xfer += oprot->writeFieldBegin("override", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->override);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enabled) {
    xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->enabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minRank) {
    xfer += oprot->writeFieldBegin("minRank", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->minRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxRank) {
    xfer += oprot->writeFieldBegin("maxRank", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->maxRank);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->endTime);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.period) {
    xfer += oprot->writeFieldBegin("period", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32(this->period);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.duration) {
    xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I32, 23);
    xfer += oprot->writeI32(this->duration);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gateCurrencyId) {
    xfer += oprot->writeFieldBegin("gateCurrencyId", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->gateCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requiredBaseBuildingId) {
    xfer += oprot->writeFieldBegin("requiredBaseBuildingId", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->requiredBaseBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventLock &a, EventLock &b) {
  using ::std::swap;
  swap(a.eventLockId, b.eventLockId);
  swap(a.override, b.override);
  swap(a.enabled, b.enabled);
  swap(a.minRank, b.minRank);
  swap(a.maxRank, b.maxRank);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.period, b.period);
  swap(a.duration, b.duration);
  swap(a.gateCurrencyId, b.gateCurrencyId);
  swap(a.requiredBaseBuildingId, b.requiredBaseBuildingId);
  swap(a.__isset, b.__isset);
}

EventLock::EventLock(const EventLock& other311) {
  eventLockId = other311.eventLockId;
  override = other311.override;
  enabled = other311.enabled;
  minRank = other311.minRank;
  maxRank = other311.maxRank;
  startTime = other311.startTime;
  endTime = other311.endTime;
  period = other311.period;
  duration = other311.duration;
  gateCurrencyId = other311.gateCurrencyId;
  requiredBaseBuildingId = other311.requiredBaseBuildingId;
  __isset = other311.__isset;
}
EventLock& EventLock::operator=(const EventLock& other312) {
  eventLockId = other312.eventLockId;
  override = other312.override;
  enabled = other312.enabled;
  minRank = other312.minRank;
  maxRank = other312.maxRank;
  startTime = other312.startTime;
  endTime = other312.endTime;
  period = other312.period;
  duration = other312.duration;
  gateCurrencyId = other312.gateCurrencyId;
  requiredBaseBuildingId = other312.requiredBaseBuildingId;
  __isset = other312.__isset;
  return *this;
}
void EventLock::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EventLock(";
  out << "eventLockId=" << to_string(eventLockId);
  out << ", " << "override="; (__isset.override ? (out << to_string(override)) : (out << "<null>"));
  out << ", " << "enabled="; (__isset.enabled ? (out << to_string(enabled)) : (out << "<null>"));
  out << ", " << "minRank="; (__isset.minRank ? (out << to_string(minRank)) : (out << "<null>"));
  out << ", " << "maxRank="; (__isset.maxRank ? (out << to_string(maxRank)) : (out << "<null>"));
  out << ", " << "startTime=" << to_string(startTime);
  out << ", " << "endTime=" << to_string(endTime);
  out << ", " << "period="; (__isset.period ? (out << to_string(period)) : (out << "<null>"));
  out << ", " << "duration="; (__isset.duration ? (out << to_string(duration)) : (out << "<null>"));
  out << ", " << "gateCurrencyId="; (__isset.gateCurrencyId ? (out << to_string(gateCurrencyId)) : (out << "<null>"));
  out << ", " << "requiredBaseBuildingId="; (__isset.requiredBaseBuildingId ? (out << to_string(requiredBaseBuildingId)) : (out << "<null>"));
  out << ")";
}


BuildMenuSpecialCard::~BuildMenuSpecialCard() throw() {
}


void BuildMenuSpecialCard::__set_cardId(const BuildMenuSpecialCardID& val) {
  this->cardId = val;
}

void BuildMenuSpecialCard::__set_order(const int32_t val) {
  this->order = val;
}

void BuildMenuSpecialCard::__set_imageFile(const std::string& val) {
  this->imageFile = val;
}

void BuildMenuSpecialCard::__set_caption(const LocalizedString& val) {
  this->caption = val;
}

void BuildMenuSpecialCard::__set_eventLockId(const EventLockID& val) {
  this->eventLockId = val;
__isset.eventLockId = true;
}

void BuildMenuSpecialCard::__set_soundFile(const std::string& val) {
  this->soundFile = val;
__isset.soundFile = true;
}

void BuildMenuSpecialCard::__set_messageAction(const MessageButtonAction::type val) {
  this->messageAction = val;
__isset.messageAction = true;
}

void BuildMenuSpecialCard::__set_messageActionParameter(const std::string& val) {
  this->messageActionParameter = val;
__isset.messageActionParameter = true;
}

void BuildMenuSpecialCard::__set_requiredLevelId(const LevelID& val) {
  this->requiredLevelId = val;
__isset.requiredLevelId = true;
}

void BuildMenuSpecialCard::__set_enabled(const bool val) {
  this->enabled = val;
__isset.enabled = true;
}

void BuildMenuSpecialCard::__set_bundleId(const std::string& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void BuildMenuSpecialCard::__set_contentImageFile(const std::string& val) {
  this->contentImageFile = val;
__isset.contentImageFile = true;
}

void BuildMenuSpecialCard::__set_withSpinningRays(const bool val) {
  this->withSpinningRays = val;
__isset.withSpinningRays = true;
}
std::ostream& operator<<(std::ostream& out, const BuildMenuSpecialCard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuildMenuSpecialCard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cardId = false;
  bool isset_order = false;
  bool isset_imageFile = false;
  bool isset_caption = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cardId);
          isset_cardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          isset_order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageFile);
          isset_imageFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->caption.read(iprot);
          isset_caption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventLockId);
          this->__isset.eventLockId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->soundFile);
          this->__isset.soundFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast313;
          xfer += iprot->readI32(ecast313);
          this->messageAction = (MessageButtonAction::type)ecast313;
          this->__isset.messageAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageActionParameter);
          this->__isset.messageActionParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requiredLevelId);
          this->__isset.requiredLevelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentImageFile);
          this->__isset.contentImageFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->withSpinningRays);
          this->__isset.withSpinningRays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_order)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_imageFile)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_caption)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BuildMenuSpecialCard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuildMenuSpecialCard");

  xfer += oprot->writeFieldBegin("cardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imageFile", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->imageFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("caption", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->caption.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventLockId) {
    xfer += oprot->writeFieldBegin("eventLockId", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->eventLockId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soundFile) {
    xfer += oprot->writeFieldBegin("soundFile", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->soundFile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageAction) {
    xfer += oprot->writeFieldBegin("messageAction", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->messageAction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageActionParameter) {
    xfer += oprot->writeFieldBegin("messageActionParameter", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->messageActionParameter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requiredLevelId) {
    xfer += oprot->writeFieldBegin("requiredLevelId", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->requiredLevelId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enabled) {
    xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->enabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentImageFile) {
    xfer += oprot->writeFieldBegin("contentImageFile", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->contentImageFile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.withSpinningRays) {
    xfer += oprot->writeFieldBegin("withSpinningRays", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->withSpinningRays);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuildMenuSpecialCard &a, BuildMenuSpecialCard &b) {
  using ::std::swap;
  swap(a.cardId, b.cardId);
  swap(a.order, b.order);
  swap(a.imageFile, b.imageFile);
  swap(a.caption, b.caption);
  swap(a.eventLockId, b.eventLockId);
  swap(a.soundFile, b.soundFile);
  swap(a.messageAction, b.messageAction);
  swap(a.messageActionParameter, b.messageActionParameter);
  swap(a.requiredLevelId, b.requiredLevelId);
  swap(a.enabled, b.enabled);
  swap(a.bundleId, b.bundleId);
  swap(a.contentImageFile, b.contentImageFile);
  swap(a.withSpinningRays, b.withSpinningRays);
  swap(a.__isset, b.__isset);
}

BuildMenuSpecialCard::BuildMenuSpecialCard(const BuildMenuSpecialCard& other314) {
  cardId = other314.cardId;
  order = other314.order;
  imageFile = other314.imageFile;
  caption = other314.caption;
  eventLockId = other314.eventLockId;
  soundFile = other314.soundFile;
  messageAction = other314.messageAction;
  messageActionParameter = other314.messageActionParameter;
  requiredLevelId = other314.requiredLevelId;
  enabled = other314.enabled;
  bundleId = other314.bundleId;
  contentImageFile = other314.contentImageFile;
  withSpinningRays = other314.withSpinningRays;
  __isset = other314.__isset;
}
BuildMenuSpecialCard& BuildMenuSpecialCard::operator=(const BuildMenuSpecialCard& other315) {
  cardId = other315.cardId;
  order = other315.order;
  imageFile = other315.imageFile;
  caption = other315.caption;
  eventLockId = other315.eventLockId;
  soundFile = other315.soundFile;
  messageAction = other315.messageAction;
  messageActionParameter = other315.messageActionParameter;
  requiredLevelId = other315.requiredLevelId;
  enabled = other315.enabled;
  bundleId = other315.bundleId;
  contentImageFile = other315.contentImageFile;
  withSpinningRays = other315.withSpinningRays;
  __isset = other315.__isset;
  return *this;
}
void BuildMenuSpecialCard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuildMenuSpecialCard(";
  out << "cardId=" << to_string(cardId);
  out << ", " << "order=" << to_string(order);
  out << ", " << "imageFile=" << to_string(imageFile);
  out << ", " << "caption=" << to_string(caption);
  out << ", " << "eventLockId="; (__isset.eventLockId ? (out << to_string(eventLockId)) : (out << "<null>"));
  out << ", " << "soundFile="; (__isset.soundFile ? (out << to_string(soundFile)) : (out << "<null>"));
  out << ", " << "messageAction="; (__isset.messageAction ? (out << to_string(messageAction)) : (out << "<null>"));
  out << ", " << "messageActionParameter="; (__isset.messageActionParameter ? (out << to_string(messageActionParameter)) : (out << "<null>"));
  out << ", " << "requiredLevelId="; (__isset.requiredLevelId ? (out << to_string(requiredLevelId)) : (out << "<null>"));
  out << ", " << "enabled="; (__isset.enabled ? (out << to_string(enabled)) : (out << "<null>"));
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "contentImageFile="; (__isset.contentImageFile ? (out << to_string(contentImageFile)) : (out << "<null>"));
  out << ", " << "withSpinningRays="; (__isset.withSpinningRays ? (out << to_string(withSpinningRays)) : (out << "<null>"));
  out << ")";
}


LevelDot::~LevelDot() throw() {
}


void LevelDot::__set_levelDotId(const LevelDotID& val) {
  this->levelDotId = val;
}

void LevelDot::__set_levelOpenImage(const AssetPath& val) {
  this->levelOpenImage = val;
__isset.levelOpenImage = true;
}

void LevelDot::__set_levelLockImage(const AssetPath& val) {
  this->levelLockImage = val;
__isset.levelLockImage = true;
}

void LevelDot::__set_level1StarImage(const AssetPath& val) {
  this->level1StarImage = val;
__isset.level1StarImage = true;
}

void LevelDot::__set_level2StarImage(const AssetPath& val) {
  this->level2StarImage = val;
__isset.level2StarImage = true;
}

void LevelDot::__set_level3StarImage(const AssetPath& val) {
  this->level3StarImage = val;
__isset.level3StarImage = true;
}

void LevelDot::__set_levelRankLockImage(const AssetPath& val) {
  this->levelRankLockImage = val;
__isset.levelRankLockImage = true;
}

void LevelDot::__set_levelFirstRankLockImage(const AssetPath& val) {
  this->levelFirstRankLockImage = val;
__isset.levelFirstRankLockImage = true;
}

void LevelDot::__set_levelFirstLockImage(const AssetPath& val) {
  this->levelFirstLockImage = val;
__isset.levelFirstLockImage = true;
}

void LevelDot::__set_levelCurrentLockImage(const AssetPath& val) {
  this->levelCurrentLockImage = val;
__isset.levelCurrentLockImage = true;
}
std::ostream& operator<<(std::ostream& out, const LevelDot& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LevelDot::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelDotId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelDotId);
          isset_levelDotId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelOpenImage);
          this->__isset.levelOpenImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelLockImage);
          this->__isset.levelLockImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->level1StarImage);
          this->__isset.level1StarImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->level2StarImage);
          this->__isset.level2StarImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->level3StarImage);
          this->__isset.level3StarImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelRankLockImage);
          this->__isset.levelRankLockImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelFirstRankLockImage);
          this->__isset.levelFirstRankLockImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelFirstLockImage);
          this->__isset.levelFirstLockImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelCurrentLockImage);
          this->__isset.levelCurrentLockImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelDotId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LevelDot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LevelDot");

  xfer += oprot->writeFieldBegin("levelDotId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelDotId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.levelOpenImage) {
    xfer += oprot->writeFieldBegin("levelOpenImage", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->levelOpenImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelLockImage) {
    xfer += oprot->writeFieldBegin("levelLockImage", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->levelLockImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level1StarImage) {
    xfer += oprot->writeFieldBegin("level1StarImage", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->level1StarImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level2StarImage) {
    xfer += oprot->writeFieldBegin("level2StarImage", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->level2StarImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level3StarImage) {
    xfer += oprot->writeFieldBegin("level3StarImage", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->level3StarImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelRankLockImage) {
    xfer += oprot->writeFieldBegin("levelRankLockImage", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->levelRankLockImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelFirstRankLockImage) {
    xfer += oprot->writeFieldBegin("levelFirstRankLockImage", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->levelFirstRankLockImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelFirstLockImage) {
    xfer += oprot->writeFieldBegin("levelFirstLockImage", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->levelFirstLockImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelCurrentLockImage) {
    xfer += oprot->writeFieldBegin("levelCurrentLockImage", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->levelCurrentLockImage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LevelDot &a, LevelDot &b) {
  using ::std::swap;
  swap(a.levelDotId, b.levelDotId);
  swap(a.levelOpenImage, b.levelOpenImage);
  swap(a.levelLockImage, b.levelLockImage);
  swap(a.level1StarImage, b.level1StarImage);
  swap(a.level2StarImage, b.level2StarImage);
  swap(a.level3StarImage, b.level3StarImage);
  swap(a.levelRankLockImage, b.levelRankLockImage);
  swap(a.levelFirstRankLockImage, b.levelFirstRankLockImage);
  swap(a.levelFirstLockImage, b.levelFirstLockImage);
  swap(a.levelCurrentLockImage, b.levelCurrentLockImage);
  swap(a.__isset, b.__isset);
}

LevelDot::LevelDot(const LevelDot& other316) {
  levelDotId = other316.levelDotId;
  levelOpenImage = other316.levelOpenImage;
  levelLockImage = other316.levelLockImage;
  level1StarImage = other316.level1StarImage;
  level2StarImage = other316.level2StarImage;
  level3StarImage = other316.level3StarImage;
  levelRankLockImage = other316.levelRankLockImage;
  levelFirstRankLockImage = other316.levelFirstRankLockImage;
  levelFirstLockImage = other316.levelFirstLockImage;
  levelCurrentLockImage = other316.levelCurrentLockImage;
  __isset = other316.__isset;
}
LevelDot& LevelDot::operator=(const LevelDot& other317) {
  levelDotId = other317.levelDotId;
  levelOpenImage = other317.levelOpenImage;
  levelLockImage = other317.levelLockImage;
  level1StarImage = other317.level1StarImage;
  level2StarImage = other317.level2StarImage;
  level3StarImage = other317.level3StarImage;
  levelRankLockImage = other317.levelRankLockImage;
  levelFirstRankLockImage = other317.levelFirstRankLockImage;
  levelFirstLockImage = other317.levelFirstLockImage;
  levelCurrentLockImage = other317.levelCurrentLockImage;
  __isset = other317.__isset;
  return *this;
}
void LevelDot::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LevelDot(";
  out << "levelDotId=" << to_string(levelDotId);
  out << ", " << "levelOpenImage="; (__isset.levelOpenImage ? (out << to_string(levelOpenImage)) : (out << "<null>"));
  out << ", " << "levelLockImage="; (__isset.levelLockImage ? (out << to_string(levelLockImage)) : (out << "<null>"));
  out << ", " << "level1StarImage="; (__isset.level1StarImage ? (out << to_string(level1StarImage)) : (out << "<null>"));
  out << ", " << "level2StarImage="; (__isset.level2StarImage ? (out << to_string(level2StarImage)) : (out << "<null>"));
  out << ", " << "level3StarImage="; (__isset.level3StarImage ? (out << to_string(level3StarImage)) : (out << "<null>"));
  out << ", " << "levelRankLockImage="; (__isset.levelRankLockImage ? (out << to_string(levelRankLockImage)) : (out << "<null>"));
  out << ", " << "levelFirstRankLockImage="; (__isset.levelFirstRankLockImage ? (out << to_string(levelFirstRankLockImage)) : (out << "<null>"));
  out << ", " << "levelFirstLockImage="; (__isset.levelFirstLockImage ? (out << to_string(levelFirstLockImage)) : (out << "<null>"));
  out << ", " << "levelCurrentLockImage="; (__isset.levelCurrentLockImage ? (out << to_string(levelCurrentLockImage)) : (out << "<null>"));
  out << ")";
}


LevelDotV2::~LevelDotV2() throw() {
}


void LevelDotV2::__set_levelDotId(const LevelDotID& val) {
  this->levelDotId = val;
}

void LevelDotV2::__set_unlockLevelImage(const std::string& val) {
  this->unlockLevelImage = val;
}

void LevelDotV2::__set_lockLevelImage(const std::string& val) {
  this->lockLevelImage = val;
}

void LevelDotV2::__set_wonLevelImage(const std::string& val) {
  this->wonLevelImage = val;
}

void LevelDotV2::__set_currentLevelImage(const std::string& val) {
  this->currentLevelImage = val;
}

void LevelDotV2::__set_emptyStarImage(const std::string& val) {
  this->emptyStarImage = val;
}

void LevelDotV2::__set_fullStarImage(const std::string& val) {
  this->fullStarImage = val;
}

void LevelDotV2::__set_postLevelDotAction(const MessageButtonAction::type val) {
  this->postLevelDotAction = val;
__isset.postLevelDotAction = true;
}

void LevelDotV2::__set_postLevelDotActionParameters(const std::vector<std::string> & val) {
  this->postLevelDotActionParameters = val;
__isset.postLevelDotActionParameters = true;
}
std::ostream& operator<<(std::ostream& out, const LevelDotV2& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LevelDotV2::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelDotId = false;
  bool isset_unlockLevelImage = false;
  bool isset_lockLevelImage = false;
  bool isset_wonLevelImage = false;
  bool isset_currentLevelImage = false;
  bool isset_emptyStarImage = false;
  bool isset_fullStarImage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelDotId);
          isset_levelDotId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unlockLevelImage);
          isset_unlockLevelImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lockLevelImage);
          isset_lockLevelImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->wonLevelImage);
          isset_wonLevelImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 103:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currentLevelImage);
          isset_currentLevelImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 104:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emptyStarImage);
          isset_emptyStarImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 105:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullStarImage);
          isset_fullStarImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 120:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast318;
          xfer += iprot->readI32(ecast318);
          this->postLevelDotAction = (MessageButtonAction::type)ecast318;
          this->__isset.postLevelDotAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 121:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->postLevelDotActionParameters.clear();
            uint32_t _size319;
            ::apache::thrift::protocol::TType _etype322;
            xfer += iprot->readListBegin(_etype322, _size319);
            this->postLevelDotActionParameters.resize(_size319);
            uint32_t _i323;
            for (_i323 = 0; _i323 < _size319; ++_i323)
            {
              xfer += iprot->readString(this->postLevelDotActionParameters[_i323]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.postLevelDotActionParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelDotId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockLevelImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lockLevelImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_wonLevelImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currentLevelImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_emptyStarImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fullStarImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LevelDotV2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LevelDotV2");

  xfer += oprot->writeFieldBegin("levelDotId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelDotId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockLevelImage", ::apache::thrift::protocol::T_STRING, 100);
  xfer += oprot->writeString(this->unlockLevelImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lockLevelImage", ::apache::thrift::protocol::T_STRING, 101);
  xfer += oprot->writeString(this->lockLevelImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wonLevelImage", ::apache::thrift::protocol::T_STRING, 102);
  xfer += oprot->writeString(this->wonLevelImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentLevelImage", ::apache::thrift::protocol::T_STRING, 103);
  xfer += oprot->writeString(this->currentLevelImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emptyStarImage", ::apache::thrift::protocol::T_STRING, 104);
  xfer += oprot->writeString(this->emptyStarImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullStarImage", ::apache::thrift::protocol::T_STRING, 105);
  xfer += oprot->writeString(this->fullStarImage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.postLevelDotAction) {
    xfer += oprot->writeFieldBegin("postLevelDotAction", ::apache::thrift::protocol::T_I32, 120);
    xfer += oprot->writeI32((int32_t)this->postLevelDotAction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.postLevelDotActionParameters) {
    xfer += oprot->writeFieldBegin("postLevelDotActionParameters", ::apache::thrift::protocol::T_LIST, 121);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->postLevelDotActionParameters.size()));
      std::vector<std::string> ::const_iterator _iter324;
      for (_iter324 = this->postLevelDotActionParameters.begin(); _iter324 != this->postLevelDotActionParameters.end(); ++_iter324)
      {
        xfer += oprot->writeString((*_iter324));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LevelDotV2 &a, LevelDotV2 &b) {
  using ::std::swap;
  swap(a.levelDotId, b.levelDotId);
  swap(a.unlockLevelImage, b.unlockLevelImage);
  swap(a.lockLevelImage, b.lockLevelImage);
  swap(a.wonLevelImage, b.wonLevelImage);
  swap(a.currentLevelImage, b.currentLevelImage);
  swap(a.emptyStarImage, b.emptyStarImage);
  swap(a.fullStarImage, b.fullStarImage);
  swap(a.postLevelDotAction, b.postLevelDotAction);
  swap(a.postLevelDotActionParameters, b.postLevelDotActionParameters);
  swap(a.__isset, b.__isset);
}

LevelDotV2::LevelDotV2(const LevelDotV2& other325) {
  levelDotId = other325.levelDotId;
  unlockLevelImage = other325.unlockLevelImage;
  lockLevelImage = other325.lockLevelImage;
  wonLevelImage = other325.wonLevelImage;
  currentLevelImage = other325.currentLevelImage;
  emptyStarImage = other325.emptyStarImage;
  fullStarImage = other325.fullStarImage;
  postLevelDotAction = other325.postLevelDotAction;
  postLevelDotActionParameters = other325.postLevelDotActionParameters;
  __isset = other325.__isset;
}
LevelDotV2& LevelDotV2::operator=(const LevelDotV2& other326) {
  levelDotId = other326.levelDotId;
  unlockLevelImage = other326.unlockLevelImage;
  lockLevelImage = other326.lockLevelImage;
  wonLevelImage = other326.wonLevelImage;
  currentLevelImage = other326.currentLevelImage;
  emptyStarImage = other326.emptyStarImage;
  fullStarImage = other326.fullStarImage;
  postLevelDotAction = other326.postLevelDotAction;
  postLevelDotActionParameters = other326.postLevelDotActionParameters;
  __isset = other326.__isset;
  return *this;
}
void LevelDotV2::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LevelDotV2(";
  out << "levelDotId=" << to_string(levelDotId);
  out << ", " << "unlockLevelImage=" << to_string(unlockLevelImage);
  out << ", " << "lockLevelImage=" << to_string(lockLevelImage);
  out << ", " << "wonLevelImage=" << to_string(wonLevelImage);
  out << ", " << "currentLevelImage=" << to_string(currentLevelImage);
  out << ", " << "emptyStarImage=" << to_string(emptyStarImage);
  out << ", " << "fullStarImage=" << to_string(fullStarImage);
  out << ", " << "postLevelDotAction="; (__isset.postLevelDotAction ? (out << to_string(postLevelDotAction)) : (out << "<null>"));
  out << ", " << "postLevelDotActionParameters="; (__isset.postLevelDotActionParameters ? (out << to_string(postLevelDotActionParameters)) : (out << "<null>"));
  out << ")";
}


Level::~Level() throw() {
}


void Level::__set_levelId(const LevelID& val) {
  this->levelId = val;
}

void Level::__set_levelName(const LevelName& val) {
  this->levelName = val;
}

void Level::__set_levelRequirements(const std::vector<LevelID> & val) {
  this->levelRequirements = val;
__isset.levelRequirements = true;
}

void Level::__set_buildingId(const std::string& val) {
  this->buildingId = val;
__isset.buildingId = true;
}

void Level::__set_islandId(const IslandID& val) {
  this->islandId = val;
__isset.islandId = true;
}

void Level::__set_villainThrowLimit(const int32_t val) {
  this->villainThrowLimit = val;
__isset.villainThrowLimit = true;
}

void Level::__set_levelNumber(const int32_t val) {
  this->levelNumber = val;
__isset.levelNumber = true;
}

void Level::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
__isset.eventIds = true;
}

void Level::__set_rankMin(const int32_t val) {
  this->rankMin = val;
__isset.rankMin = true;
}

void Level::__set_starScores(const std::vector<int32_t> & val) {
  this->starScores = val;
__isset.starScores = true;
}

void Level::__set_tutorial(const bool val) {
  this->tutorial = val;
__isset.tutorial = true;
}

void Level::__set_oneStarRewardListId(const WeightedLootListID& val) {
  this->oneStarRewardListId = val;
}

void Level::__set_twoStarRewardListId(const WeightedLootListID& val) {
  this->twoStarRewardListId = val;
}

void Level::__set_threeStarRewardListId(const WeightedLootListID& val) {
  this->threeStarRewardListId = val;
}

void Level::__set_staminaCost(const int32_t val) {
  this->staminaCost = val;
}

void Level::__set_ticketBonusCurrencyId(const CurrencyID& val) {
  this->ticketBonusCurrencyId = val;
}

void Level::__set_ticketBonus(const int32_t val) {
  this->ticketBonus = val;
}

void Level::__set_expansionRewardIds(const std::vector<ExpansionID> & val) {
  this->expansionRewardIds = val;
}

void Level::__set_expansionRewardAmounts(const std::vector<int32_t> & val) {
  this->expansionRewardAmounts = val;
}

void Level::__set_levelDotId(const LevelDotID& val) {
  this->levelDotId = val;
__isset.levelDotId = true;
}

void Level::__set_npcId(const NpcID& val) {
  this->npcId = val;
}

void Level::__set_closedText(const std::string& val) {
  this->closedText = val;
__isset.closedText = true;
}

void Level::__set_playText1Star(const std::string& val) {
  this->playText1Star = val;
__isset.playText1Star = true;
}

void Level::__set_playText2Star(const std::string& val) {
  this->playText2Star = val;
__isset.playText2Star = true;
}

void Level::__set_playText3Star(const std::string& val) {
  this->playText3Star = val;
__isset.playText3Star = true;
}

void Level::__set_winText1Star(const std::string& val) {
  this->winText1Star = val;
__isset.winText1Star = true;
}

void Level::__set_winText2Star(const std::string& val) {
  this->winText2Star = val;
__isset.winText2Star = true;
}

void Level::__set_winText3Star(const std::string& val) {
  this->winText3Star = val;
__isset.winText3Star = true;
}

void Level::__set_winText1StarReplay(const std::string& val) {
  this->winText1StarReplay = val;
__isset.winText1StarReplay = true;
}

void Level::__set_winText2StarReplay(const std::string& val) {
  this->winText2StarReplay = val;
__isset.winText2StarReplay = true;
}

void Level::__set_winText3StarReplay(const std::string& val) {
  this->winText3StarReplay = val;
__isset.winText3StarReplay = true;
}

void Level::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void Level::__set_startText0Star(const LocalizedString& val) {
  this->startText0Star = val;
__isset.startText0Star = true;
}

void Level::__set_startText1Star(const LocalizedString& val) {
  this->startText1Star = val;
__isset.startText1Star = true;
}

void Level::__set_startText2Star(const LocalizedString& val) {
  this->startText2Star = val;
__isset.startText2Star = true;
}

void Level::__set_startText3Star(const LocalizedString& val) {
  this->startText3Star = val;
__isset.startText3Star = true;
}

void Level::__set_successText1Star(const LocalizedString& val) {
  this->successText1Star = val;
__isset.successText1Star = true;
}

void Level::__set_successText2Star(const LocalizedString& val) {
  this->successText2Star = val;
__isset.successText2Star = true;
}

void Level::__set_successText3Star(const LocalizedString& val) {
  this->successText3Star = val;
__isset.successText3Star = true;
}

void Level::__set_firstTimeCurrencyRewardIds(const std::vector<CurrencyID> & val) {
  this->firstTimeCurrencyRewardIds = val;
__isset.firstTimeCurrencyRewardIds = true;
}

void Level::__set_firstTimeCurrencyRewardAmounts(const std::vector<int32_t> & val) {
  this->firstTimeCurrencyRewardAmounts = val;
__isset.firstTimeCurrencyRewardAmounts = true;
}

void Level::__set_icon(const std::string& val) {
  this->icon = val;
__isset.icon = true;
}
std::ostream& operator<<(std::ostream& out, const Level& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Level::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelId = false;
  bool isset_levelName = false;
  bool isset_oneStarRewardListId = false;
  bool isset_twoStarRewardListId = false;
  bool isset_threeStarRewardListId = false;
  bool isset_staminaCost = false;
  bool isset_ticketBonusCurrencyId = false;
  bool isset_ticketBonus = false;
  bool isset_expansionRewardIds = false;
  bool isset_expansionRewardAmounts = false;
  bool isset_npcId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelId);
          isset_levelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelName);
          isset_levelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->levelRequirements.clear();
            uint32_t _size327;
            ::apache::thrift::protocol::TType _etype330;
            xfer += iprot->readListBegin(_etype330, _size327);
            this->levelRequirements.resize(_size327);
            uint32_t _i331;
            for (_i331 = 0; _i331 < _size327; ++_i331)
            {
              xfer += iprot->readString(this->levelRequirements[_i331]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.levelRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          this->__isset.buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandId);
          this->__isset.islandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->villainThrowLimit);
          this->__isset.villainThrowLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->levelNumber);
          this->__isset.levelNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size332;
            ::apache::thrift::protocol::TType _etype335;
            xfer += iprot->readListBegin(_etype335, _size332);
            this->eventIds.resize(_size332);
            uint32_t _i336;
            for (_i336 = 0; _i336 < _size332; ++_i336)
            {
              xfer += iprot->readString(this->eventIds[_i336]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rankMin);
          this->__isset.rankMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->starScores.clear();
            uint32_t _size337;
            ::apache::thrift::protocol::TType _etype340;
            xfer += iprot->readListBegin(_etype340, _size337);
            this->starScores.resize(_size337);
            uint32_t _i341;
            for (_i341 = 0; _i341 < _size337; ++_i341)
            {
              xfer += iprot->readI32(this->starScores[_i341]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.starScores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->tutorial);
          this->__isset.tutorial = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oneStarRewardListId);
          isset_oneStarRewardListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->twoStarRewardListId);
          isset_twoStarRewardListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->threeStarRewardListId);
          isset_threeStarRewardListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->staminaCost);
          isset_staminaCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticketBonusCurrencyId);
          isset_ticketBonusCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ticketBonus);
          isset_ticketBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->expansionRewardIds.clear();
            uint32_t _size342;
            ::apache::thrift::protocol::TType _etype345;
            xfer += iprot->readListBegin(_etype345, _size342);
            this->expansionRewardIds.resize(_size342);
            uint32_t _i346;
            for (_i346 = 0; _i346 < _size342; ++_i346)
            {
              xfer += iprot->readString(this->expansionRewardIds[_i346]);
            }
            xfer += iprot->readListEnd();
          }
          isset_expansionRewardIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->expansionRewardAmounts.clear();
            uint32_t _size347;
            ::apache::thrift::protocol::TType _etype350;
            xfer += iprot->readListBegin(_etype350, _size347);
            this->expansionRewardAmounts.resize(_size347);
            uint32_t _i351;
            for (_i351 = 0; _i351 < _size347; ++_i351)
            {
              xfer += iprot->readI32(this->expansionRewardAmounts[_i351]);
            }
            xfer += iprot->readListEnd();
          }
          isset_expansionRewardAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelDotId);
          this->__isset.levelDotId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->npcId);
          isset_npcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->closedText);
          this->__isset.closedText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playText1Star);
          this->__isset.playText1Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playText2Star);
          this->__isset.playText2Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playText3Star);
          this->__isset.playText3Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText1Star);
          this->__isset.winText1Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText2Star);
          this->__isset.winText2Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText3Star);
          this->__isset.winText3Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 88:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText1StarReplay);
          this->__isset.winText1StarReplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 89:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText2StarReplay);
          this->__isset.winText2StarReplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText3StarReplay);
          this->__isset.winText3StarReplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startText0Star.read(iprot);
          this->__isset.startText0Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startText1Star.read(iprot);
          this->__isset.startText1Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 103:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startText2Star.read(iprot);
          this->__isset.startText2Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 104:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startText3Star.read(iprot);
          this->__isset.startText3Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 105:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->successText1Star.read(iprot);
          this->__isset.successText1Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 106:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->successText2Star.read(iprot);
          this->__isset.successText2Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 107:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->successText3Star.read(iprot);
          this->__isset.successText3Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 108:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->firstTimeCurrencyRewardIds.clear();
            uint32_t _size352;
            ::apache::thrift::protocol::TType _etype355;
            xfer += iprot->readListBegin(_etype355, _size352);
            this->firstTimeCurrencyRewardIds.resize(_size352);
            uint32_t _i356;
            for (_i356 = 0; _i356 < _size352; ++_i356)
            {
              xfer += iprot->readString(this->firstTimeCurrencyRewardIds[_i356]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.firstTimeCurrencyRewardIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 109:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->firstTimeCurrencyRewardAmounts.clear();
            uint32_t _size357;
            ::apache::thrift::protocol::TType _etype360;
            xfer += iprot->readListBegin(_etype360, _size357);
            this->firstTimeCurrencyRewardAmounts.resize(_size357);
            uint32_t _i361;
            for (_i361 = 0; _i361 < _size357; ++_i361)
            {
              xfer += iprot->readI32(this->firstTimeCurrencyRewardAmounts[_i361]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.firstTimeCurrencyRewardAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icon);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_oneStarRewardListId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_twoStarRewardListId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_threeStarRewardListId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_staminaCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ticketBonusCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ticketBonus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expansionRewardIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expansionRewardAmounts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npcId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Level::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Level");

  xfer += oprot->writeFieldBegin("levelId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->levelName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.levelRequirements) {
    xfer += oprot->writeFieldBegin("levelRequirements", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->levelRequirements.size()));
      std::vector<LevelID> ::const_iterator _iter362;
      for (_iter362 = this->levelRequirements.begin(); _iter362 != this->levelRequirements.end(); ++_iter362)
      {
        xfer += oprot->writeString((*_iter362));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildingId) {
    xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->buildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.islandId) {
    xfer += oprot->writeFieldBegin("islandId", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->islandId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainThrowLimit) {
    xfer += oprot->writeFieldBegin("villainThrowLimit", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->villainThrowLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelNumber) {
    xfer += oprot->writeFieldBegin("levelNumber", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->levelNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventIds) {
    xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
      std::vector<EventID> ::const_iterator _iter363;
      for (_iter363 = this->eventIds.begin(); _iter363 != this->eventIds.end(); ++_iter363)
      {
        xfer += oprot->writeString((*_iter363));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankMin) {
    xfer += oprot->writeFieldBegin("rankMin", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->rankMin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.starScores) {
    xfer += oprot->writeFieldBegin("starScores", ::apache::thrift::protocol::T_LIST, 22);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->starScores.size()));
      std::vector<int32_t> ::const_iterator _iter364;
      for (_iter364 = this->starScores.begin(); _iter364 != this->starScores.end(); ++_iter364)
      {
        xfer += oprot->writeI32((*_iter364));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tutorial) {
    xfer += oprot->writeFieldBegin("tutorial", ::apache::thrift::protocol::T_BOOL, 24);
    xfer += oprot->writeBool(this->tutorial);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("oneStarRewardListId", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->oneStarRewardListId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("twoStarRewardListId", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->twoStarRewardListId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threeStarRewardListId", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->threeStarRewardListId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("staminaCost", ::apache::thrift::protocol::T_I32, 53);
  xfer += oprot->writeI32(this->staminaCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ticketBonusCurrencyId", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->ticketBonusCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ticketBonus", ::apache::thrift::protocol::T_I32, 61);
  xfer += oprot->writeI32(this->ticketBonus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expansionRewardIds", ::apache::thrift::protocol::T_LIST, 62);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->expansionRewardIds.size()));
    std::vector<ExpansionID> ::const_iterator _iter365;
    for (_iter365 = this->expansionRewardIds.begin(); _iter365 != this->expansionRewardIds.end(); ++_iter365)
    {
      xfer += oprot->writeString((*_iter365));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expansionRewardAmounts", ::apache::thrift::protocol::T_LIST, 63);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->expansionRewardAmounts.size()));
    std::vector<int32_t> ::const_iterator _iter366;
    for (_iter366 = this->expansionRewardAmounts.begin(); _iter366 != this->expansionRewardAmounts.end(); ++_iter366)
    {
      xfer += oprot->writeI32((*_iter366));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.levelDotId) {
    xfer += oprot->writeFieldBegin("levelDotId", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->levelDotId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("npcId", ::apache::thrift::protocol::T_STRING, 80);
  xfer += oprot->writeString(this->npcId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.closedText) {
    xfer += oprot->writeFieldBegin("closedText", ::apache::thrift::protocol::T_STRING, 81);
    xfer += oprot->writeString(this->closedText);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playText1Star) {
    xfer += oprot->writeFieldBegin("playText1Star", ::apache::thrift::protocol::T_STRING, 82);
    xfer += oprot->writeString(this->playText1Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playText2Star) {
    xfer += oprot->writeFieldBegin("playText2Star", ::apache::thrift::protocol::T_STRING, 83);
    xfer += oprot->writeString(this->playText2Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playText3Star) {
    xfer += oprot->writeFieldBegin("playText3Star", ::apache::thrift::protocol::T_STRING, 84);
    xfer += oprot->writeString(this->playText3Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText1Star) {
    xfer += oprot->writeFieldBegin("winText1Star", ::apache::thrift::protocol::T_STRING, 85);
    xfer += oprot->writeString(this->winText1Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText2Star) {
    xfer += oprot->writeFieldBegin("winText2Star", ::apache::thrift::protocol::T_STRING, 86);
    xfer += oprot->writeString(this->winText2Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText3Star) {
    xfer += oprot->writeFieldBegin("winText3Star", ::apache::thrift::protocol::T_STRING, 87);
    xfer += oprot->writeString(this->winText3Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText1StarReplay) {
    xfer += oprot->writeFieldBegin("winText1StarReplay", ::apache::thrift::protocol::T_STRING, 88);
    xfer += oprot->writeString(this->winText1StarReplay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText2StarReplay) {
    xfer += oprot->writeFieldBegin("winText2StarReplay", ::apache::thrift::protocol::T_STRING, 89);
    xfer += oprot->writeString(this->winText2StarReplay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText3StarReplay) {
    xfer += oprot->writeFieldBegin("winText3StarReplay", ::apache::thrift::protocol::T_STRING, 90);
    xfer += oprot->writeString(this->winText3StarReplay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 100);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startText0Star) {
    xfer += oprot->writeFieldBegin("startText0Star", ::apache::thrift::protocol::T_STRUCT, 101);
    xfer += this->startText0Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startText1Star) {
    xfer += oprot->writeFieldBegin("startText1Star", ::apache::thrift::protocol::T_STRUCT, 102);
    xfer += this->startText1Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startText2Star) {
    xfer += oprot->writeFieldBegin("startText2Star", ::apache::thrift::protocol::T_STRUCT, 103);
    xfer += this->startText2Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startText3Star) {
    xfer += oprot->writeFieldBegin("startText3Star", ::apache::thrift::protocol::T_STRUCT, 104);
    xfer += this->startText3Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.successText1Star) {
    xfer += oprot->writeFieldBegin("successText1Star", ::apache::thrift::protocol::T_STRUCT, 105);
    xfer += this->successText1Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.successText2Star) {
    xfer += oprot->writeFieldBegin("successText2Star", ::apache::thrift::protocol::T_STRUCT, 106);
    xfer += this->successText2Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.successText3Star) {
    xfer += oprot->writeFieldBegin("successText3Star", ::apache::thrift::protocol::T_STRUCT, 107);
    xfer += this->successText3Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstTimeCurrencyRewardIds) {
    xfer += oprot->writeFieldBegin("firstTimeCurrencyRewardIds", ::apache::thrift::protocol::T_LIST, 108);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->firstTimeCurrencyRewardIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter367;
      for (_iter367 = this->firstTimeCurrencyRewardIds.begin(); _iter367 != this->firstTimeCurrencyRewardIds.end(); ++_iter367)
      {
        xfer += oprot->writeString((*_iter367));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstTimeCurrencyRewardAmounts) {
    xfer += oprot->writeFieldBegin("firstTimeCurrencyRewardAmounts", ::apache::thrift::protocol::T_LIST, 109);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->firstTimeCurrencyRewardAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter368;
      for (_iter368 = this->firstTimeCurrencyRewardAmounts.begin(); _iter368 != this->firstTimeCurrencyRewardAmounts.end(); ++_iter368)
      {
        xfer += oprot->writeI32((*_iter368));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRING, 110);
    xfer += oprot->writeString(this->icon);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Level &a, Level &b) {
  using ::std::swap;
  swap(a.levelId, b.levelId);
  swap(a.levelName, b.levelName);
  swap(a.levelRequirements, b.levelRequirements);
  swap(a.buildingId, b.buildingId);
  swap(a.islandId, b.islandId);
  swap(a.villainThrowLimit, b.villainThrowLimit);
  swap(a.levelNumber, b.levelNumber);
  swap(a.eventIds, b.eventIds);
  swap(a.rankMin, b.rankMin);
  swap(a.starScores, b.starScores);
  swap(a.tutorial, b.tutorial);
  swap(a.oneStarRewardListId, b.oneStarRewardListId);
  swap(a.twoStarRewardListId, b.twoStarRewardListId);
  swap(a.threeStarRewardListId, b.threeStarRewardListId);
  swap(a.staminaCost, b.staminaCost);
  swap(a.ticketBonusCurrencyId, b.ticketBonusCurrencyId);
  swap(a.ticketBonus, b.ticketBonus);
  swap(a.expansionRewardIds, b.expansionRewardIds);
  swap(a.expansionRewardAmounts, b.expansionRewardAmounts);
  swap(a.levelDotId, b.levelDotId);
  swap(a.npcId, b.npcId);
  swap(a.closedText, b.closedText);
  swap(a.playText1Star, b.playText1Star);
  swap(a.playText2Star, b.playText2Star);
  swap(a.playText3Star, b.playText3Star);
  swap(a.winText1Star, b.winText1Star);
  swap(a.winText2Star, b.winText2Star);
  swap(a.winText3Star, b.winText3Star);
  swap(a.winText1StarReplay, b.winText1StarReplay);
  swap(a.winText2StarReplay, b.winText2StarReplay);
  swap(a.winText3StarReplay, b.winText3StarReplay);
  swap(a.newDisplay, b.newDisplay);
  swap(a.startText0Star, b.startText0Star);
  swap(a.startText1Star, b.startText1Star);
  swap(a.startText2Star, b.startText2Star);
  swap(a.startText3Star, b.startText3Star);
  swap(a.successText1Star, b.successText1Star);
  swap(a.successText2Star, b.successText2Star);
  swap(a.successText3Star, b.successText3Star);
  swap(a.firstTimeCurrencyRewardIds, b.firstTimeCurrencyRewardIds);
  swap(a.firstTimeCurrencyRewardAmounts, b.firstTimeCurrencyRewardAmounts);
  swap(a.icon, b.icon);
  swap(a.__isset, b.__isset);
}

Level::Level(const Level& other369) {
  levelId = other369.levelId;
  levelName = other369.levelName;
  levelRequirements = other369.levelRequirements;
  buildingId = other369.buildingId;
  islandId = other369.islandId;
  villainThrowLimit = other369.villainThrowLimit;
  levelNumber = other369.levelNumber;
  eventIds = other369.eventIds;
  rankMin = other369.rankMin;
  starScores = other369.starScores;
  tutorial = other369.tutorial;
  oneStarRewardListId = other369.oneStarRewardListId;
  twoStarRewardListId = other369.twoStarRewardListId;
  threeStarRewardListId = other369.threeStarRewardListId;
  staminaCost = other369.staminaCost;
  ticketBonusCurrencyId = other369.ticketBonusCurrencyId;
  ticketBonus = other369.ticketBonus;
  expansionRewardIds = other369.expansionRewardIds;
  expansionRewardAmounts = other369.expansionRewardAmounts;
  levelDotId = other369.levelDotId;
  npcId = other369.npcId;
  closedText = other369.closedText;
  playText1Star = other369.playText1Star;
  playText2Star = other369.playText2Star;
  playText3Star = other369.playText3Star;
  winText1Star = other369.winText1Star;
  winText2Star = other369.winText2Star;
  winText3Star = other369.winText3Star;
  winText1StarReplay = other369.winText1StarReplay;
  winText2StarReplay = other369.winText2StarReplay;
  winText3StarReplay = other369.winText3StarReplay;
  newDisplay = other369.newDisplay;
  startText0Star = other369.startText0Star;
  startText1Star = other369.startText1Star;
  startText2Star = other369.startText2Star;
  startText3Star = other369.startText3Star;
  successText1Star = other369.successText1Star;
  successText2Star = other369.successText2Star;
  successText3Star = other369.successText3Star;
  firstTimeCurrencyRewardIds = other369.firstTimeCurrencyRewardIds;
  firstTimeCurrencyRewardAmounts = other369.firstTimeCurrencyRewardAmounts;
  icon = other369.icon;
  __isset = other369.__isset;
}
Level& Level::operator=(const Level& other370) {
  levelId = other370.levelId;
  levelName = other370.levelName;
  levelRequirements = other370.levelRequirements;
  buildingId = other370.buildingId;
  islandId = other370.islandId;
  villainThrowLimit = other370.villainThrowLimit;
  levelNumber = other370.levelNumber;
  eventIds = other370.eventIds;
  rankMin = other370.rankMin;
  starScores = other370.starScores;
  tutorial = other370.tutorial;
  oneStarRewardListId = other370.oneStarRewardListId;
  twoStarRewardListId = other370.twoStarRewardListId;
  threeStarRewardListId = other370.threeStarRewardListId;
  staminaCost = other370.staminaCost;
  ticketBonusCurrencyId = other370.ticketBonusCurrencyId;
  ticketBonus = other370.ticketBonus;
  expansionRewardIds = other370.expansionRewardIds;
  expansionRewardAmounts = other370.expansionRewardAmounts;
  levelDotId = other370.levelDotId;
  npcId = other370.npcId;
  closedText = other370.closedText;
  playText1Star = other370.playText1Star;
  playText2Star = other370.playText2Star;
  playText3Star = other370.playText3Star;
  winText1Star = other370.winText1Star;
  winText2Star = other370.winText2Star;
  winText3Star = other370.winText3Star;
  winText1StarReplay = other370.winText1StarReplay;
  winText2StarReplay = other370.winText2StarReplay;
  winText3StarReplay = other370.winText3StarReplay;
  newDisplay = other370.newDisplay;
  startText0Star = other370.startText0Star;
  startText1Star = other370.startText1Star;
  startText2Star = other370.startText2Star;
  startText3Star = other370.startText3Star;
  successText1Star = other370.successText1Star;
  successText2Star = other370.successText2Star;
  successText3Star = other370.successText3Star;
  firstTimeCurrencyRewardIds = other370.firstTimeCurrencyRewardIds;
  firstTimeCurrencyRewardAmounts = other370.firstTimeCurrencyRewardAmounts;
  icon = other370.icon;
  __isset = other370.__isset;
  return *this;
}
void Level::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Level(";
  out << "levelId=" << to_string(levelId);
  out << ", " << "levelName=" << to_string(levelName);
  out << ", " << "levelRequirements="; (__isset.levelRequirements ? (out << to_string(levelRequirements)) : (out << "<null>"));
  out << ", " << "buildingId="; (__isset.buildingId ? (out << to_string(buildingId)) : (out << "<null>"));
  out << ", " << "islandId="; (__isset.islandId ? (out << to_string(islandId)) : (out << "<null>"));
  out << ", " << "villainThrowLimit="; (__isset.villainThrowLimit ? (out << to_string(villainThrowLimit)) : (out << "<null>"));
  out << ", " << "levelNumber="; (__isset.levelNumber ? (out << to_string(levelNumber)) : (out << "<null>"));
  out << ", " << "eventIds="; (__isset.eventIds ? (out << to_string(eventIds)) : (out << "<null>"));
  out << ", " << "rankMin="; (__isset.rankMin ? (out << to_string(rankMin)) : (out << "<null>"));
  out << ", " << "starScores="; (__isset.starScores ? (out << to_string(starScores)) : (out << "<null>"));
  out << ", " << "tutorial="; (__isset.tutorial ? (out << to_string(tutorial)) : (out << "<null>"));
  out << ", " << "oneStarRewardListId=" << to_string(oneStarRewardListId);
  out << ", " << "twoStarRewardListId=" << to_string(twoStarRewardListId);
  out << ", " << "threeStarRewardListId=" << to_string(threeStarRewardListId);
  out << ", " << "staminaCost=" << to_string(staminaCost);
  out << ", " << "ticketBonusCurrencyId=" << to_string(ticketBonusCurrencyId);
  out << ", " << "ticketBonus=" << to_string(ticketBonus);
  out << ", " << "expansionRewardIds=" << to_string(expansionRewardIds);
  out << ", " << "expansionRewardAmounts=" << to_string(expansionRewardAmounts);
  out << ", " << "levelDotId="; (__isset.levelDotId ? (out << to_string(levelDotId)) : (out << "<null>"));
  out << ", " << "npcId=" << to_string(npcId);
  out << ", " << "closedText="; (__isset.closedText ? (out << to_string(closedText)) : (out << "<null>"));
  out << ", " << "playText1Star="; (__isset.playText1Star ? (out << to_string(playText1Star)) : (out << "<null>"));
  out << ", " << "playText2Star="; (__isset.playText2Star ? (out << to_string(playText2Star)) : (out << "<null>"));
  out << ", " << "playText3Star="; (__isset.playText3Star ? (out << to_string(playText3Star)) : (out << "<null>"));
  out << ", " << "winText1Star="; (__isset.winText1Star ? (out << to_string(winText1Star)) : (out << "<null>"));
  out << ", " << "winText2Star="; (__isset.winText2Star ? (out << to_string(winText2Star)) : (out << "<null>"));
  out << ", " << "winText3Star="; (__isset.winText3Star ? (out << to_string(winText3Star)) : (out << "<null>"));
  out << ", " << "winText1StarReplay="; (__isset.winText1StarReplay ? (out << to_string(winText1StarReplay)) : (out << "<null>"));
  out << ", " << "winText2StarReplay="; (__isset.winText2StarReplay ? (out << to_string(winText2StarReplay)) : (out << "<null>"));
  out << ", " << "winText3StarReplay="; (__isset.winText3StarReplay ? (out << to_string(winText3StarReplay)) : (out << "<null>"));
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "startText0Star="; (__isset.startText0Star ? (out << to_string(startText0Star)) : (out << "<null>"));
  out << ", " << "startText1Star="; (__isset.startText1Star ? (out << to_string(startText1Star)) : (out << "<null>"));
  out << ", " << "startText2Star="; (__isset.startText2Star ? (out << to_string(startText2Star)) : (out << "<null>"));
  out << ", " << "startText3Star="; (__isset.startText3Star ? (out << to_string(startText3Star)) : (out << "<null>"));
  out << ", " << "successText1Star="; (__isset.successText1Star ? (out << to_string(successText1Star)) : (out << "<null>"));
  out << ", " << "successText2Star="; (__isset.successText2Star ? (out << to_string(successText2Star)) : (out << "<null>"));
  out << ", " << "successText3Star="; (__isset.successText3Star ? (out << to_string(successText3Star)) : (out << "<null>"));
  out << ", " << "firstTimeCurrencyRewardIds="; (__isset.firstTimeCurrencyRewardIds ? (out << to_string(firstTimeCurrencyRewardIds)) : (out << "<null>"));
  out << ", " << "firstTimeCurrencyRewardAmounts="; (__isset.firstTimeCurrencyRewardAmounts ? (out << to_string(firstTimeCurrencyRewardAmounts)) : (out << "<null>"));
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ")";
}


NewLevel::~NewLevel() throw() {
}


void NewLevel::__set_levelId(const LevelID& val) {
  this->levelId = val;
}

void NewLevel::__set_levelName(const LevelName& val) {
  this->levelName = val;
}

void NewLevel::__set_levelRequirements(const std::vector<LevelID> & val) {
  this->levelRequirements = val;
__isset.levelRequirements = true;
}

void NewLevel::__set_buildingId(const std::string& val) {
  this->buildingId = val;
__isset.buildingId = true;
}

void NewLevel::__set_islandId(const IslandID& val) {
  this->islandId = val;
__isset.islandId = true;
}

void NewLevel::__set_villainThrowLimit(const int32_t val) {
  this->villainThrowLimit = val;
__isset.villainThrowLimit = true;
}

void NewLevel::__set_levelType(const LevelType::type val) {
  this->levelType = val;
__isset.levelType = true;
}

void NewLevel::__set_levelNumber(const int32_t val) {
  this->levelNumber = val;
__isset.levelNumber = true;
}

void NewLevel::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
__isset.eventIds = true;
}

void NewLevel::__set_rankMin(const int32_t val) {
  this->rankMin = val;
__isset.rankMin = true;
}

void NewLevel::__set_newEventIds(const std::vector<EventID> & val) {
  this->newEventIds = val;
__isset.newEventIds = true;
}

void NewLevel::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
__isset.eventPhases = true;
}

void NewLevel::__set_starScores(const std::vector<int32_t> & val) {
  this->starScores = val;
__isset.starScores = true;
}

void NewLevel::__set_tutorial(const bool val) {
  this->tutorial = val;
__isset.tutorial = true;
}

void NewLevel::__set_oneStarRewardListId(const WeightedLootListID& val) {
  this->oneStarRewardListId = val;
}

void NewLevel::__set_twoStarRewardListId(const WeightedLootListID& val) {
  this->twoStarRewardListId = val;
}

void NewLevel::__set_threeStarRewardListId(const WeightedLootListID& val) {
  this->threeStarRewardListId = val;
}

void NewLevel::__set_staminaCost(const int32_t val) {
  this->staminaCost = val;
}

void NewLevel::__set_ticketBonusCurrencyId(const CurrencyID& val) {
  this->ticketBonusCurrencyId = val;
}

void NewLevel::__set_ticketBonus(const int32_t val) {
  this->ticketBonus = val;
}

void NewLevel::__set_expansionRewardIds(const std::vector<ExpansionID> & val) {
  this->expansionRewardIds = val;
}

void NewLevel::__set_expansionRewardAmounts(const std::vector<int32_t> & val) {
  this->expansionRewardAmounts = val;
}

void NewLevel::__set_levelDotId(const LevelDotID& val) {
  this->levelDotId = val;
__isset.levelDotId = true;
}

void NewLevel::__set_npcId(const NpcID& val) {
  this->npcId = val;
}

void NewLevel::__set_closedText(const std::string& val) {
  this->closedText = val;
__isset.closedText = true;
}

void NewLevel::__set_playText1Star(const std::string& val) {
  this->playText1Star = val;
__isset.playText1Star = true;
}

void NewLevel::__set_playText2Star(const std::string& val) {
  this->playText2Star = val;
__isset.playText2Star = true;
}

void NewLevel::__set_playText3Star(const std::string& val) {
  this->playText3Star = val;
__isset.playText3Star = true;
}

void NewLevel::__set_winText1Star(const std::string& val) {
  this->winText1Star = val;
__isset.winText1Star = true;
}

void NewLevel::__set_winText2Star(const std::string& val) {
  this->winText2Star = val;
__isset.winText2Star = true;
}

void NewLevel::__set_winText3Star(const std::string& val) {
  this->winText3Star = val;
__isset.winText3Star = true;
}

void NewLevel::__set_winText1StarReplay(const std::string& val) {
  this->winText1StarReplay = val;
__isset.winText1StarReplay = true;
}

void NewLevel::__set_winText2StarReplay(const std::string& val) {
  this->winText2StarReplay = val;
__isset.winText2StarReplay = true;
}

void NewLevel::__set_winText3StarReplay(const std::string& val) {
  this->winText3StarReplay = val;
__isset.winText3StarReplay = true;
}

void NewLevel::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void NewLevel::__set_startText0Star(const LocalizedString& val) {
  this->startText0Star = val;
__isset.startText0Star = true;
}

void NewLevel::__set_startText1Star(const LocalizedString& val) {
  this->startText1Star = val;
__isset.startText1Star = true;
}

void NewLevel::__set_startText2Star(const LocalizedString& val) {
  this->startText2Star = val;
__isset.startText2Star = true;
}

void NewLevel::__set_startText3Star(const LocalizedString& val) {
  this->startText3Star = val;
__isset.startText3Star = true;
}

void NewLevel::__set_successText1Star(const LocalizedString& val) {
  this->successText1Star = val;
__isset.successText1Star = true;
}

void NewLevel::__set_successText2Star(const LocalizedString& val) {
  this->successText2Star = val;
__isset.successText2Star = true;
}

void NewLevel::__set_successText3Star(const LocalizedString& val) {
  this->successText3Star = val;
__isset.successText3Star = true;
}

void NewLevel::__set_firstTimeCurrencyRewardIds(const std::vector<CurrencyID> & val) {
  this->firstTimeCurrencyRewardIds = val;
__isset.firstTimeCurrencyRewardIds = true;
}

void NewLevel::__set_firstTimeCurrencyRewardAmounts(const std::vector<int32_t> & val) {
  this->firstTimeCurrencyRewardAmounts = val;
__isset.firstTimeCurrencyRewardAmounts = true;
}

void NewLevel::__set_icon(const std::string& val) {
  this->icon = val;
__isset.icon = true;
}

void NewLevel::__set_backgroundImage(const AssetPath& val) {
  this->backgroundImage = val;
__isset.backgroundImage = true;
}

void NewLevel::__set_cloudImage1(const AssetPath& val) {
  this->cloudImage1 = val;
__isset.cloudImage1 = true;
}

void NewLevel::__set_cloudImage2(const AssetPath& val) {
  this->cloudImage2 = val;
__isset.cloudImage2 = true;
}

void NewLevel::__set_cloudImage3(const AssetPath& val) {
  this->cloudImage3 = val;
__isset.cloudImage3 = true;
}

void NewLevel::__set_parentType(const LevelParentType::type val) {
  this->parentType = val;
}

void NewLevel::__set_parentId(const std::string& val) {
  this->parentId = val;
}

void NewLevel::__set_consolationPrizeCurrencyIds(const std::vector<CurrencyID> & val) {
  this->consolationPrizeCurrencyIds = val;
}

void NewLevel::__set_consolationPrizeCurrencyAmounts(const std::vector<int32_t> & val) {
  this->consolationPrizeCurrencyAmounts = val;
}
std::ostream& operator<<(std::ostream& out, const NewLevel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NewLevel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelId = false;
  bool isset_levelName = false;
  bool isset_oneStarRewardListId = false;
  bool isset_twoStarRewardListId = false;
  bool isset_threeStarRewardListId = false;
  bool isset_staminaCost = false;
  bool isset_ticketBonusCurrencyId = false;
  bool isset_ticketBonus = false;
  bool isset_expansionRewardIds = false;
  bool isset_expansionRewardAmounts = false;
  bool isset_npcId = false;
  bool isset_parentType = false;
  bool isset_parentId = false;
  bool isset_consolationPrizeCurrencyIds = false;
  bool isset_consolationPrizeCurrencyAmounts = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelId);
          isset_levelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelName);
          isset_levelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->levelRequirements.clear();
            uint32_t _size371;
            ::apache::thrift::protocol::TType _etype374;
            xfer += iprot->readListBegin(_etype374, _size371);
            this->levelRequirements.resize(_size371);
            uint32_t _i375;
            for (_i375 = 0; _i375 < _size371; ++_i375)
            {
              xfer += iprot->readString(this->levelRequirements[_i375]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.levelRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          this->__isset.buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->islandId);
          this->__isset.islandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->villainThrowLimit);
          this->__isset.villainThrowLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast376;
          xfer += iprot->readI32(ecast376);
          this->levelType = (LevelType::type)ecast376;
          this->__isset.levelType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->levelNumber);
          this->__isset.levelNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size377;
            ::apache::thrift::protocol::TType _etype380;
            xfer += iprot->readListBegin(_etype380, _size377);
            this->eventIds.resize(_size377);
            uint32_t _i381;
            for (_i381 = 0; _i381 < _size377; ++_i381)
            {
              xfer += iprot->readString(this->eventIds[_i381]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rankMin);
          this->__isset.rankMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->newEventIds.clear();
            uint32_t _size382;
            ::apache::thrift::protocol::TType _etype385;
            xfer += iprot->readListBegin(_etype385, _size382);
            this->newEventIds.resize(_size382);
            uint32_t _i386;
            for (_i386 = 0; _i386 < _size382; ++_i386)
            {
              xfer += iprot->readString(this->newEventIds[_i386]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.newEventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast387;
          xfer += iprot->readI32(ecast387);
          this->eventPhases = (EventPhases::type)ecast387;
          this->__isset.eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->starScores.clear();
            uint32_t _size388;
            ::apache::thrift::protocol::TType _etype391;
            xfer += iprot->readListBegin(_etype391, _size388);
            this->starScores.resize(_size388);
            uint32_t _i392;
            for (_i392 = 0; _i392 < _size388; ++_i392)
            {
              xfer += iprot->readI32(this->starScores[_i392]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.starScores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->tutorial);
          this->__isset.tutorial = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oneStarRewardListId);
          isset_oneStarRewardListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->twoStarRewardListId);
          isset_twoStarRewardListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->threeStarRewardListId);
          isset_threeStarRewardListId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->staminaCost);
          isset_staminaCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticketBonusCurrencyId);
          isset_ticketBonusCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ticketBonus);
          isset_ticketBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->expansionRewardIds.clear();
            uint32_t _size393;
            ::apache::thrift::protocol::TType _etype396;
            xfer += iprot->readListBegin(_etype396, _size393);
            this->expansionRewardIds.resize(_size393);
            uint32_t _i397;
            for (_i397 = 0; _i397 < _size393; ++_i397)
            {
              xfer += iprot->readString(this->expansionRewardIds[_i397]);
            }
            xfer += iprot->readListEnd();
          }
          isset_expansionRewardIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->expansionRewardAmounts.clear();
            uint32_t _size398;
            ::apache::thrift::protocol::TType _etype401;
            xfer += iprot->readListBegin(_etype401, _size398);
            this->expansionRewardAmounts.resize(_size398);
            uint32_t _i402;
            for (_i402 = 0; _i402 < _size398; ++_i402)
            {
              xfer += iprot->readI32(this->expansionRewardAmounts[_i402]);
            }
            xfer += iprot->readListEnd();
          }
          isset_expansionRewardAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelDotId);
          this->__isset.levelDotId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->npcId);
          isset_npcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->closedText);
          this->__isset.closedText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playText1Star);
          this->__isset.playText1Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playText2Star);
          this->__isset.playText2Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playText3Star);
          this->__isset.playText3Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText1Star);
          this->__isset.winText1Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText2Star);
          this->__isset.winText2Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText3Star);
          this->__isset.winText3Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 88:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText1StarReplay);
          this->__isset.winText1StarReplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 89:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText2StarReplay);
          this->__isset.winText2StarReplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winText3StarReplay);
          this->__isset.winText3StarReplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startText0Star.read(iprot);
          this->__isset.startText0Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startText1Star.read(iprot);
          this->__isset.startText1Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 103:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startText2Star.read(iprot);
          this->__isset.startText2Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 104:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startText3Star.read(iprot);
          this->__isset.startText3Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 105:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->successText1Star.read(iprot);
          this->__isset.successText1Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 106:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->successText2Star.read(iprot);
          this->__isset.successText2Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 107:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->successText3Star.read(iprot);
          this->__isset.successText3Star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 108:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->firstTimeCurrencyRewardIds.clear();
            uint32_t _size403;
            ::apache::thrift::protocol::TType _etype406;
            xfer += iprot->readListBegin(_etype406, _size403);
            this->firstTimeCurrencyRewardIds.resize(_size403);
            uint32_t _i407;
            for (_i407 = 0; _i407 < _size403; ++_i407)
            {
              xfer += iprot->readString(this->firstTimeCurrencyRewardIds[_i407]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.firstTimeCurrencyRewardIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 109:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->firstTimeCurrencyRewardAmounts.clear();
            uint32_t _size408;
            ::apache::thrift::protocol::TType _etype411;
            xfer += iprot->readListBegin(_etype411, _size408);
            this->firstTimeCurrencyRewardAmounts.resize(_size408);
            uint32_t _i412;
            for (_i412 = 0; _i412 < _size408; ++_i412)
            {
              xfer += iprot->readI32(this->firstTimeCurrencyRewardAmounts[_i412]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.firstTimeCurrencyRewardAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icon);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 120:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backgroundImage);
          this->__isset.backgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 121:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cloudImage1);
          this->__isset.cloudImage1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 122:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cloudImage2);
          this->__isset.cloudImage2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 123:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cloudImage3);
          this->__isset.cloudImage3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 124:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast413;
          xfer += iprot->readI32(ecast413);
          this->parentType = (LevelParentType::type)ecast413;
          isset_parentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 125:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parentId);
          isset_parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 126:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->consolationPrizeCurrencyIds.clear();
            uint32_t _size414;
            ::apache::thrift::protocol::TType _etype417;
            xfer += iprot->readListBegin(_etype417, _size414);
            this->consolationPrizeCurrencyIds.resize(_size414);
            uint32_t _i418;
            for (_i418 = 0; _i418 < _size414; ++_i418)
            {
              xfer += iprot->readString(this->consolationPrizeCurrencyIds[_i418]);
            }
            xfer += iprot->readListEnd();
          }
          isset_consolationPrizeCurrencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 127:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->consolationPrizeCurrencyAmounts.clear();
            uint32_t _size419;
            ::apache::thrift::protocol::TType _etype422;
            xfer += iprot->readListBegin(_etype422, _size419);
            this->consolationPrizeCurrencyAmounts.resize(_size419);
            uint32_t _i423;
            for (_i423 = 0; _i423 < _size419; ++_i423)
            {
              xfer += iprot->readI32(this->consolationPrizeCurrencyAmounts[_i423]);
            }
            xfer += iprot->readListEnd();
          }
          isset_consolationPrizeCurrencyAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_oneStarRewardListId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_twoStarRewardListId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_threeStarRewardListId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_staminaCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ticketBonusCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ticketBonus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expansionRewardIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expansionRewardAmounts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npcId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parentType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_consolationPrizeCurrencyIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_consolationPrizeCurrencyAmounts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NewLevel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NewLevel");

  xfer += oprot->writeFieldBegin("levelId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->levelName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.levelRequirements) {
    xfer += oprot->writeFieldBegin("levelRequirements", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->levelRequirements.size()));
      std::vector<LevelID> ::const_iterator _iter424;
      for (_iter424 = this->levelRequirements.begin(); _iter424 != this->levelRequirements.end(); ++_iter424)
      {
        xfer += oprot->writeString((*_iter424));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildingId) {
    xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->buildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.islandId) {
    xfer += oprot->writeFieldBegin("islandId", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->islandId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainThrowLimit) {
    xfer += oprot->writeFieldBegin("villainThrowLimit", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->villainThrowLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelType) {
    xfer += oprot->writeFieldBegin("levelType", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->levelType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelNumber) {
    xfer += oprot->writeFieldBegin("levelNumber", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->levelNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventIds) {
    xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
      std::vector<EventID> ::const_iterator _iter425;
      for (_iter425 = this->eventIds.begin(); _iter425 != this->eventIds.end(); ++_iter425)
      {
        xfer += oprot->writeString((*_iter425));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankMin) {
    xfer += oprot->writeFieldBegin("rankMin", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->rankMin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newEventIds) {
    xfer += oprot->writeFieldBegin("newEventIds", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->newEventIds.size()));
      std::vector<EventID> ::const_iterator _iter426;
      for (_iter426 = this->newEventIds.begin(); _iter426 != this->newEventIds.end(); ++_iter426)
      {
        xfer += oprot->writeString((*_iter426));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPhases) {
    xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32((int32_t)this->eventPhases);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.starScores) {
    xfer += oprot->writeFieldBegin("starScores", ::apache::thrift::protocol::T_LIST, 22);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->starScores.size()));
      std::vector<int32_t> ::const_iterator _iter427;
      for (_iter427 = this->starScores.begin(); _iter427 != this->starScores.end(); ++_iter427)
      {
        xfer += oprot->writeI32((*_iter427));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tutorial) {
    xfer += oprot->writeFieldBegin("tutorial", ::apache::thrift::protocol::T_BOOL, 24);
    xfer += oprot->writeBool(this->tutorial);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("oneStarRewardListId", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->oneStarRewardListId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("twoStarRewardListId", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->twoStarRewardListId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threeStarRewardListId", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->threeStarRewardListId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("staminaCost", ::apache::thrift::protocol::T_I32, 53);
  xfer += oprot->writeI32(this->staminaCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ticketBonusCurrencyId", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->ticketBonusCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ticketBonus", ::apache::thrift::protocol::T_I32, 61);
  xfer += oprot->writeI32(this->ticketBonus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expansionRewardIds", ::apache::thrift::protocol::T_LIST, 62);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->expansionRewardIds.size()));
    std::vector<ExpansionID> ::const_iterator _iter428;
    for (_iter428 = this->expansionRewardIds.begin(); _iter428 != this->expansionRewardIds.end(); ++_iter428)
    {
      xfer += oprot->writeString((*_iter428));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expansionRewardAmounts", ::apache::thrift::protocol::T_LIST, 63);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->expansionRewardAmounts.size()));
    std::vector<int32_t> ::const_iterator _iter429;
    for (_iter429 = this->expansionRewardAmounts.begin(); _iter429 != this->expansionRewardAmounts.end(); ++_iter429)
    {
      xfer += oprot->writeI32((*_iter429));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.levelDotId) {
    xfer += oprot->writeFieldBegin("levelDotId", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->levelDotId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("npcId", ::apache::thrift::protocol::T_STRING, 80);
  xfer += oprot->writeString(this->npcId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.closedText) {
    xfer += oprot->writeFieldBegin("closedText", ::apache::thrift::protocol::T_STRING, 81);
    xfer += oprot->writeString(this->closedText);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playText1Star) {
    xfer += oprot->writeFieldBegin("playText1Star", ::apache::thrift::protocol::T_STRING, 82);
    xfer += oprot->writeString(this->playText1Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playText2Star) {
    xfer += oprot->writeFieldBegin("playText2Star", ::apache::thrift::protocol::T_STRING, 83);
    xfer += oprot->writeString(this->playText2Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playText3Star) {
    xfer += oprot->writeFieldBegin("playText3Star", ::apache::thrift::protocol::T_STRING, 84);
    xfer += oprot->writeString(this->playText3Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText1Star) {
    xfer += oprot->writeFieldBegin("winText1Star", ::apache::thrift::protocol::T_STRING, 85);
    xfer += oprot->writeString(this->winText1Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText2Star) {
    xfer += oprot->writeFieldBegin("winText2Star", ::apache::thrift::protocol::T_STRING, 86);
    xfer += oprot->writeString(this->winText2Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText3Star) {
    xfer += oprot->writeFieldBegin("winText3Star", ::apache::thrift::protocol::T_STRING, 87);
    xfer += oprot->writeString(this->winText3Star);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText1StarReplay) {
    xfer += oprot->writeFieldBegin("winText1StarReplay", ::apache::thrift::protocol::T_STRING, 88);
    xfer += oprot->writeString(this->winText1StarReplay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText2StarReplay) {
    xfer += oprot->writeFieldBegin("winText2StarReplay", ::apache::thrift::protocol::T_STRING, 89);
    xfer += oprot->writeString(this->winText2StarReplay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.winText3StarReplay) {
    xfer += oprot->writeFieldBegin("winText3StarReplay", ::apache::thrift::protocol::T_STRING, 90);
    xfer += oprot->writeString(this->winText3StarReplay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 100);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startText0Star) {
    xfer += oprot->writeFieldBegin("startText0Star", ::apache::thrift::protocol::T_STRUCT, 101);
    xfer += this->startText0Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startText1Star) {
    xfer += oprot->writeFieldBegin("startText1Star", ::apache::thrift::protocol::T_STRUCT, 102);
    xfer += this->startText1Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startText2Star) {
    xfer += oprot->writeFieldBegin("startText2Star", ::apache::thrift::protocol::T_STRUCT, 103);
    xfer += this->startText2Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startText3Star) {
    xfer += oprot->writeFieldBegin("startText3Star", ::apache::thrift::protocol::T_STRUCT, 104);
    xfer += this->startText3Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.successText1Star) {
    xfer += oprot->writeFieldBegin("successText1Star", ::apache::thrift::protocol::T_STRUCT, 105);
    xfer += this->successText1Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.successText2Star) {
    xfer += oprot->writeFieldBegin("successText2Star", ::apache::thrift::protocol::T_STRUCT, 106);
    xfer += this->successText2Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.successText3Star) {
    xfer += oprot->writeFieldBegin("successText3Star", ::apache::thrift::protocol::T_STRUCT, 107);
    xfer += this->successText3Star.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstTimeCurrencyRewardIds) {
    xfer += oprot->writeFieldBegin("firstTimeCurrencyRewardIds", ::apache::thrift::protocol::T_LIST, 108);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->firstTimeCurrencyRewardIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter430;
      for (_iter430 = this->firstTimeCurrencyRewardIds.begin(); _iter430 != this->firstTimeCurrencyRewardIds.end(); ++_iter430)
      {
        xfer += oprot->writeString((*_iter430));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstTimeCurrencyRewardAmounts) {
    xfer += oprot->writeFieldBegin("firstTimeCurrencyRewardAmounts", ::apache::thrift::protocol::T_LIST, 109);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->firstTimeCurrencyRewardAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter431;
      for (_iter431 = this->firstTimeCurrencyRewardAmounts.begin(); _iter431 != this->firstTimeCurrencyRewardAmounts.end(); ++_iter431)
      {
        xfer += oprot->writeI32((*_iter431));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRING, 110);
    xfer += oprot->writeString(this->icon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.backgroundImage) {
    xfer += oprot->writeFieldBegin("backgroundImage", ::apache::thrift::protocol::T_STRING, 120);
    xfer += oprot->writeString(this->backgroundImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cloudImage1) {
    xfer += oprot->writeFieldBegin("cloudImage1", ::apache::thrift::protocol::T_STRING, 121);
    xfer += oprot->writeString(this->cloudImage1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cloudImage2) {
    xfer += oprot->writeFieldBegin("cloudImage2", ::apache::thrift::protocol::T_STRING, 122);
    xfer += oprot->writeString(this->cloudImage2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cloudImage3) {
    xfer += oprot->writeFieldBegin("cloudImage3", ::apache::thrift::protocol::T_STRING, 123);
    xfer += oprot->writeString(this->cloudImage3);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("parentType", ::apache::thrift::protocol::T_I32, 124);
  xfer += oprot->writeI32((int32_t)this->parentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentId", ::apache::thrift::protocol::T_STRING, 125);
  xfer += oprot->writeString(this->parentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("consolationPrizeCurrencyIds", ::apache::thrift::protocol::T_LIST, 126);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->consolationPrizeCurrencyIds.size()));
    std::vector<CurrencyID> ::const_iterator _iter432;
    for (_iter432 = this->consolationPrizeCurrencyIds.begin(); _iter432 != this->consolationPrizeCurrencyIds.end(); ++_iter432)
    {
      xfer += oprot->writeString((*_iter432));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("consolationPrizeCurrencyAmounts", ::apache::thrift::protocol::T_LIST, 127);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->consolationPrizeCurrencyAmounts.size()));
    std::vector<int32_t> ::const_iterator _iter433;
    for (_iter433 = this->consolationPrizeCurrencyAmounts.begin(); _iter433 != this->consolationPrizeCurrencyAmounts.end(); ++_iter433)
    {
      xfer += oprot->writeI32((*_iter433));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NewLevel &a, NewLevel &b) {
  using ::std::swap;
  swap(a.levelId, b.levelId);
  swap(a.levelName, b.levelName);
  swap(a.levelRequirements, b.levelRequirements);
  swap(a.buildingId, b.buildingId);
  swap(a.islandId, b.islandId);
  swap(a.villainThrowLimit, b.villainThrowLimit);
  swap(a.levelType, b.levelType);
  swap(a.levelNumber, b.levelNumber);
  swap(a.eventIds, b.eventIds);
  swap(a.rankMin, b.rankMin);
  swap(a.newEventIds, b.newEventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.starScores, b.starScores);
  swap(a.tutorial, b.tutorial);
  swap(a.oneStarRewardListId, b.oneStarRewardListId);
  swap(a.twoStarRewardListId, b.twoStarRewardListId);
  swap(a.threeStarRewardListId, b.threeStarRewardListId);
  swap(a.staminaCost, b.staminaCost);
  swap(a.ticketBonusCurrencyId, b.ticketBonusCurrencyId);
  swap(a.ticketBonus, b.ticketBonus);
  swap(a.expansionRewardIds, b.expansionRewardIds);
  swap(a.expansionRewardAmounts, b.expansionRewardAmounts);
  swap(a.levelDotId, b.levelDotId);
  swap(a.npcId, b.npcId);
  swap(a.closedText, b.closedText);
  swap(a.playText1Star, b.playText1Star);
  swap(a.playText2Star, b.playText2Star);
  swap(a.playText3Star, b.playText3Star);
  swap(a.winText1Star, b.winText1Star);
  swap(a.winText2Star, b.winText2Star);
  swap(a.winText3Star, b.winText3Star);
  swap(a.winText1StarReplay, b.winText1StarReplay);
  swap(a.winText2StarReplay, b.winText2StarReplay);
  swap(a.winText3StarReplay, b.winText3StarReplay);
  swap(a.newDisplay, b.newDisplay);
  swap(a.startText0Star, b.startText0Star);
  swap(a.startText1Star, b.startText1Star);
  swap(a.startText2Star, b.startText2Star);
  swap(a.startText3Star, b.startText3Star);
  swap(a.successText1Star, b.successText1Star);
  swap(a.successText2Star, b.successText2Star);
  swap(a.successText3Star, b.successText3Star);
  swap(a.firstTimeCurrencyRewardIds, b.firstTimeCurrencyRewardIds);
  swap(a.firstTimeCurrencyRewardAmounts, b.firstTimeCurrencyRewardAmounts);
  swap(a.icon, b.icon);
  swap(a.backgroundImage, b.backgroundImage);
  swap(a.cloudImage1, b.cloudImage1);
  swap(a.cloudImage2, b.cloudImage2);
  swap(a.cloudImage3, b.cloudImage3);
  swap(a.parentType, b.parentType);
  swap(a.parentId, b.parentId);
  swap(a.consolationPrizeCurrencyIds, b.consolationPrizeCurrencyIds);
  swap(a.consolationPrizeCurrencyAmounts, b.consolationPrizeCurrencyAmounts);
  swap(a.__isset, b.__isset);
}

NewLevel::NewLevel(const NewLevel& other434) {
  levelId = other434.levelId;
  levelName = other434.levelName;
  levelRequirements = other434.levelRequirements;
  buildingId = other434.buildingId;
  islandId = other434.islandId;
  villainThrowLimit = other434.villainThrowLimit;
  levelType = other434.levelType;
  levelNumber = other434.levelNumber;
  eventIds = other434.eventIds;
  rankMin = other434.rankMin;
  newEventIds = other434.newEventIds;
  eventPhases = other434.eventPhases;
  starScores = other434.starScores;
  tutorial = other434.tutorial;
  oneStarRewardListId = other434.oneStarRewardListId;
  twoStarRewardListId = other434.twoStarRewardListId;
  threeStarRewardListId = other434.threeStarRewardListId;
  staminaCost = other434.staminaCost;
  ticketBonusCurrencyId = other434.ticketBonusCurrencyId;
  ticketBonus = other434.ticketBonus;
  expansionRewardIds = other434.expansionRewardIds;
  expansionRewardAmounts = other434.expansionRewardAmounts;
  levelDotId = other434.levelDotId;
  npcId = other434.npcId;
  closedText = other434.closedText;
  playText1Star = other434.playText1Star;
  playText2Star = other434.playText2Star;
  playText3Star = other434.playText3Star;
  winText1Star = other434.winText1Star;
  winText2Star = other434.winText2Star;
  winText3Star = other434.winText3Star;
  winText1StarReplay = other434.winText1StarReplay;
  winText2StarReplay = other434.winText2StarReplay;
  winText3StarReplay = other434.winText3StarReplay;
  newDisplay = other434.newDisplay;
  startText0Star = other434.startText0Star;
  startText1Star = other434.startText1Star;
  startText2Star = other434.startText2Star;
  startText3Star = other434.startText3Star;
  successText1Star = other434.successText1Star;
  successText2Star = other434.successText2Star;
  successText3Star = other434.successText3Star;
  firstTimeCurrencyRewardIds = other434.firstTimeCurrencyRewardIds;
  firstTimeCurrencyRewardAmounts = other434.firstTimeCurrencyRewardAmounts;
  icon = other434.icon;
  backgroundImage = other434.backgroundImage;
  cloudImage1 = other434.cloudImage1;
  cloudImage2 = other434.cloudImage2;
  cloudImage3 = other434.cloudImage3;
  parentType = other434.parentType;
  parentId = other434.parentId;
  consolationPrizeCurrencyIds = other434.consolationPrizeCurrencyIds;
  consolationPrizeCurrencyAmounts = other434.consolationPrizeCurrencyAmounts;
  __isset = other434.__isset;
}
NewLevel& NewLevel::operator=(const NewLevel& other435) {
  levelId = other435.levelId;
  levelName = other435.levelName;
  levelRequirements = other435.levelRequirements;
  buildingId = other435.buildingId;
  islandId = other435.islandId;
  villainThrowLimit = other435.villainThrowLimit;
  levelType = other435.levelType;
  levelNumber = other435.levelNumber;
  eventIds = other435.eventIds;
  rankMin = other435.rankMin;
  newEventIds = other435.newEventIds;
  eventPhases = other435.eventPhases;
  starScores = other435.starScores;
  tutorial = other435.tutorial;
  oneStarRewardListId = other435.oneStarRewardListId;
  twoStarRewardListId = other435.twoStarRewardListId;
  threeStarRewardListId = other435.threeStarRewardListId;
  staminaCost = other435.staminaCost;
  ticketBonusCurrencyId = other435.ticketBonusCurrencyId;
  ticketBonus = other435.ticketBonus;
  expansionRewardIds = other435.expansionRewardIds;
  expansionRewardAmounts = other435.expansionRewardAmounts;
  levelDotId = other435.levelDotId;
  npcId = other435.npcId;
  closedText = other435.closedText;
  playText1Star = other435.playText1Star;
  playText2Star = other435.playText2Star;
  playText3Star = other435.playText3Star;
  winText1Star = other435.winText1Star;
  winText2Star = other435.winText2Star;
  winText3Star = other435.winText3Star;
  winText1StarReplay = other435.winText1StarReplay;
  winText2StarReplay = other435.winText2StarReplay;
  winText3StarReplay = other435.winText3StarReplay;
  newDisplay = other435.newDisplay;
  startText0Star = other435.startText0Star;
  startText1Star = other435.startText1Star;
  startText2Star = other435.startText2Star;
  startText3Star = other435.startText3Star;
  successText1Star = other435.successText1Star;
  successText2Star = other435.successText2Star;
  successText3Star = other435.successText3Star;
  firstTimeCurrencyRewardIds = other435.firstTimeCurrencyRewardIds;
  firstTimeCurrencyRewardAmounts = other435.firstTimeCurrencyRewardAmounts;
  icon = other435.icon;
  backgroundImage = other435.backgroundImage;
  cloudImage1 = other435.cloudImage1;
  cloudImage2 = other435.cloudImage2;
  cloudImage3 = other435.cloudImage3;
  parentType = other435.parentType;
  parentId = other435.parentId;
  consolationPrizeCurrencyIds = other435.consolationPrizeCurrencyIds;
  consolationPrizeCurrencyAmounts = other435.consolationPrizeCurrencyAmounts;
  __isset = other435.__isset;
  return *this;
}
void NewLevel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NewLevel(";
  out << "levelId=" << to_string(levelId);
  out << ", " << "levelName=" << to_string(levelName);
  out << ", " << "levelRequirements="; (__isset.levelRequirements ? (out << to_string(levelRequirements)) : (out << "<null>"));
  out << ", " << "buildingId="; (__isset.buildingId ? (out << to_string(buildingId)) : (out << "<null>"));
  out << ", " << "islandId="; (__isset.islandId ? (out << to_string(islandId)) : (out << "<null>"));
  out << ", " << "villainThrowLimit="; (__isset.villainThrowLimit ? (out << to_string(villainThrowLimit)) : (out << "<null>"));
  out << ", " << "levelType="; (__isset.levelType ? (out << to_string(levelType)) : (out << "<null>"));
  out << ", " << "levelNumber="; (__isset.levelNumber ? (out << to_string(levelNumber)) : (out << "<null>"));
  out << ", " << "eventIds="; (__isset.eventIds ? (out << to_string(eventIds)) : (out << "<null>"));
  out << ", " << "rankMin="; (__isset.rankMin ? (out << to_string(rankMin)) : (out << "<null>"));
  out << ", " << "newEventIds="; (__isset.newEventIds ? (out << to_string(newEventIds)) : (out << "<null>"));
  out << ", " << "eventPhases="; (__isset.eventPhases ? (out << to_string(eventPhases)) : (out << "<null>"));
  out << ", " << "starScores="; (__isset.starScores ? (out << to_string(starScores)) : (out << "<null>"));
  out << ", " << "tutorial="; (__isset.tutorial ? (out << to_string(tutorial)) : (out << "<null>"));
  out << ", " << "oneStarRewardListId=" << to_string(oneStarRewardListId);
  out << ", " << "twoStarRewardListId=" << to_string(twoStarRewardListId);
  out << ", " << "threeStarRewardListId=" << to_string(threeStarRewardListId);
  out << ", " << "staminaCost=" << to_string(staminaCost);
  out << ", " << "ticketBonusCurrencyId=" << to_string(ticketBonusCurrencyId);
  out << ", " << "ticketBonus=" << to_string(ticketBonus);
  out << ", " << "expansionRewardIds=" << to_string(expansionRewardIds);
  out << ", " << "expansionRewardAmounts=" << to_string(expansionRewardAmounts);
  out << ", " << "levelDotId="; (__isset.levelDotId ? (out << to_string(levelDotId)) : (out << "<null>"));
  out << ", " << "npcId=" << to_string(npcId);
  out << ", " << "closedText="; (__isset.closedText ? (out << to_string(closedText)) : (out << "<null>"));
  out << ", " << "playText1Star="; (__isset.playText1Star ? (out << to_string(playText1Star)) : (out << "<null>"));
  out << ", " << "playText2Star="; (__isset.playText2Star ? (out << to_string(playText2Star)) : (out << "<null>"));
  out << ", " << "playText3Star="; (__isset.playText3Star ? (out << to_string(playText3Star)) : (out << "<null>"));
  out << ", " << "winText1Star="; (__isset.winText1Star ? (out << to_string(winText1Star)) : (out << "<null>"));
  out << ", " << "winText2Star="; (__isset.winText2Star ? (out << to_string(winText2Star)) : (out << "<null>"));
  out << ", " << "winText3Star="; (__isset.winText3Star ? (out << to_string(winText3Star)) : (out << "<null>"));
  out << ", " << "winText1StarReplay="; (__isset.winText1StarReplay ? (out << to_string(winText1StarReplay)) : (out << "<null>"));
  out << ", " << "winText2StarReplay="; (__isset.winText2StarReplay ? (out << to_string(winText2StarReplay)) : (out << "<null>"));
  out << ", " << "winText3StarReplay="; (__isset.winText3StarReplay ? (out << to_string(winText3StarReplay)) : (out << "<null>"));
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "startText0Star="; (__isset.startText0Star ? (out << to_string(startText0Star)) : (out << "<null>"));
  out << ", " << "startText1Star="; (__isset.startText1Star ? (out << to_string(startText1Star)) : (out << "<null>"));
  out << ", " << "startText2Star="; (__isset.startText2Star ? (out << to_string(startText2Star)) : (out << "<null>"));
  out << ", " << "startText3Star="; (__isset.startText3Star ? (out << to_string(startText3Star)) : (out << "<null>"));
  out << ", " << "successText1Star="; (__isset.successText1Star ? (out << to_string(successText1Star)) : (out << "<null>"));
  out << ", " << "successText2Star="; (__isset.successText2Star ? (out << to_string(successText2Star)) : (out << "<null>"));
  out << ", " << "successText3Star="; (__isset.successText3Star ? (out << to_string(successText3Star)) : (out << "<null>"));
  out << ", " << "firstTimeCurrencyRewardIds="; (__isset.firstTimeCurrencyRewardIds ? (out << to_string(firstTimeCurrencyRewardIds)) : (out << "<null>"));
  out << ", " << "firstTimeCurrencyRewardAmounts="; (__isset.firstTimeCurrencyRewardAmounts ? (out << to_string(firstTimeCurrencyRewardAmounts)) : (out << "<null>"));
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ", " << "backgroundImage="; (__isset.backgroundImage ? (out << to_string(backgroundImage)) : (out << "<null>"));
  out << ", " << "cloudImage1="; (__isset.cloudImage1 ? (out << to_string(cloudImage1)) : (out << "<null>"));
  out << ", " << "cloudImage2="; (__isset.cloudImage2 ? (out << to_string(cloudImage2)) : (out << "<null>"));
  out << ", " << "cloudImage3="; (__isset.cloudImage3 ? (out << to_string(cloudImage3)) : (out << "<null>"));
  out << ", " << "parentType=" << to_string(parentType);
  out << ", " << "parentId=" << to_string(parentId);
  out << ", " << "consolationPrizeCurrencyIds=" << to_string(consolationPrizeCurrencyIds);
  out << ", " << "consolationPrizeCurrencyAmounts=" << to_string(consolationPrizeCurrencyAmounts);
  out << ")";
}


MatchThreeData::~MatchThreeData() throw() {
}


void MatchThreeData::__set_levelName(const LevelName& val) {
  this->levelName = val;
}

void MatchThreeData::__set_numMoves(const int32_t val) {
  this->numMoves = val;
}

void MatchThreeData::__set_starScores(const std::vector<int32_t> & val) {
  this->starScores = val;
}

void MatchThreeData::__set_numRows(const int32_t val) {
  this->numRows = val;
}

void MatchThreeData::__set_numColumns(const int32_t val) {
  this->numColumns = val;
}

void MatchThreeData::__set_numColors(const int32_t val) {
  this->numColors = val;
}

void MatchThreeData::__set_extraCount(const int32_t val) {
  this->extraCount = val;
__isset.extraCount = true;
}

void MatchThreeData::__set_villainId(const VillainID& val) {
  this->villainId = val;
__isset.villainId = true;
}

void MatchThreeData::__set_villainF(const int32_t val) {
  this->villainF = val;
__isset.villainF = true;
}

void MatchThreeData::__set_villainN(const int32_t val) {
  this->villainN = val;
__isset.villainN = true;
}

void MatchThreeData::__set_villainMechanicMin(const int32_t val) {
  this->villainMechanicMin = val;
__isset.villainMechanicMin = true;
}

void MatchThreeData::__set_villainMechanicMax(const int32_t val) {
  this->villainMechanicMax = val;
__isset.villainMechanicMax = true;
}

void MatchThreeData::__set_villainMargin(const int32_t val) {
  this->villainMargin = val;
__isset.villainMargin = true;
}

void MatchThreeData::__set_villainStartDelay(const int32_t val) {
  this->villainStartDelay = val;
__isset.villainStartDelay = true;
}

void MatchThreeData::__set_villainThrowZoneArt(const std::string& val) {
  this->villainThrowZoneArt = val;
__isset.villainThrowZoneArt = true;
}

void MatchThreeData::__set_extraLua(const std::string& val) {
  this->extraLua = val;
__isset.extraLua = true;
}

void MatchThreeData::__set_orderCount(const std::vector<int32_t> & val) {
  this->orderCount = val;
__isset.orderCount = true;
}

void MatchThreeData::__set_orderCountType(const std::vector<std::string> & val) {
  this->orderCountType = val;
__isset.orderCountType = true;
}

void MatchThreeData::__set_introuced(const std::string& val) {
  this->introuced = val;
__isset.introuced = true;
}

void MatchThreeData::__set_hiddenCellDropsPermil(const int32_t val) {
  this->hiddenCellDropsPermil = val;
__isset.hiddenCellDropsPermil = true;
}

void MatchThreeData::__set_giftDropsPermil(const int32_t val) {
  this->giftDropsPermil = val;
__isset.giftDropsPermil = true;
}

void MatchThreeData::__set_uselessDropsPermil(const int32_t val) {
  this->uselessDropsPermil = val;
__isset.uselessDropsPermil = true;
}

void MatchThreeData::__set_carrotDropsPermil(const int32_t val) {
  this->carrotDropsPermil = val;
__isset.carrotDropsPermil = true;
}

void MatchThreeData::__set_eggplantDropsPermil(const int32_t val) {
  this->eggplantDropsPermil = val;
__isset.eggplantDropsPermil = true;
}

void MatchThreeData::__set_tomatoDropsPermil(const int32_t val) {
  this->tomatoDropsPermil = val;
__isset.tomatoDropsPermil = true;
}

void MatchThreeData::__set_eventPointDropsPermil(const int32_t val) {
  this->eventPointDropsPermil = val;
__isset.eventPointDropsPermil = true;
}

void MatchThreeData::__set_slimeArt(const std::string& val) {
  this->slimeArt = val;
__isset.slimeArt = true;
}

void MatchThreeData::__set_slimeString(const std::string& val) {
  this->slimeString = val;
__isset.slimeString = true;
}

void MatchThreeData::__set_conveyorart(const std::string& val) {
  this->conveyorart = val;
__isset.conveyorart = true;
}

void MatchThreeData::__set_bottomfenceart(const std::string& val) {
  this->bottomfenceart = val;
__isset.bottomfenceart = true;
}

void MatchThreeData::__set_rightfenceart(const std::string& val) {
  this->rightfenceart = val;
__isset.rightfenceart = true;
}

void MatchThreeData::__set_spriteart(const std::string& val) {
  this->spriteart = val;
__isset.spriteart = true;
}

void MatchThreeData::__set_freezeart(const std::string& val) {
  this->freezeart = val;
__isset.freezeart = true;
}

void MatchThreeData::__set_cellart(const std::string& val) {
  this->cellart = val;
__isset.cellart = true;
}

void MatchThreeData::__set_blueWeight(const int32_t val) {
  this->blueWeight = val;
__isset.blueWeight = true;
}

void MatchThreeData::__set_greenWeight(const int32_t val) {
  this->greenWeight = val;
__isset.greenWeight = true;
}

void MatchThreeData::__set_orangeWeight(const int32_t val) {
  this->orangeWeight = val;
__isset.orangeWeight = true;
}

void MatchThreeData::__set_chocoWeight(const int32_t val) {
  this->chocoWeight = val;
__isset.chocoWeight = true;
}

void MatchThreeData::__set_pinkWeight(const int32_t val) {
  this->pinkWeight = val;
__isset.pinkWeight = true;
}

void MatchThreeData::__set_clearWeight(const int32_t val) {
  this->clearWeight = val;
__isset.clearWeight = true;
}

void MatchThreeData::__set_villainThrowTypes(const std::vector<std::string> & val) {
  this->villainThrowTypes = val;
__isset.villainThrowTypes = true;
}

void MatchThreeData::__set_villainThrowWeights(const std::vector<int32_t> & val) {
  this->villainThrowWeights = val;
__isset.villainThrowWeights = true;
}
std::ostream& operator<<(std::ostream& out, const MatchThreeData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MatchThreeData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelName = false;
  bool isset_numMoves = false;
  bool isset_starScores = false;
  bool isset_numRows = false;
  bool isset_numColumns = false;
  bool isset_numColors = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelName);
          isset_levelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numMoves);
          isset_numMoves = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->starScores.clear();
            uint32_t _size436;
            ::apache::thrift::protocol::TType _etype439;
            xfer += iprot->readListBegin(_etype439, _size436);
            this->starScores.resize(_size436);
            uint32_t _i440;
            for (_i440 = 0; _i440 < _size436; ++_i440)
            {
              xfer += iprot->readI32(this->starScores[_i440]);
            }
            xfer += iprot->readListEnd();
          }
          isset_starScores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numRows);
          isset_numRows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numColumns);
          isset_numColumns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numColors);
          isset_numColors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->extraCount);
          this->__isset.extraCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->villainId);
          this->__isset.villainId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->villainF);
          this->__isset.villainF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->villainN);
          this->__isset.villainN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->villainMechanicMin);
          this->__isset.villainMechanicMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->villainMechanicMax);
          this->__isset.villainMechanicMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->villainMargin);
          this->__isset.villainMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->villainStartDelay);
          this->__isset.villainStartDelay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->villainThrowZoneArt);
          this->__isset.villainThrowZoneArt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extraLua);
          this->__isset.extraLua = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->orderCount.clear();
            uint32_t _size441;
            ::apache::thrift::protocol::TType _etype444;
            xfer += iprot->readListBegin(_etype444, _size441);
            this->orderCount.resize(_size441);
            uint32_t _i445;
            for (_i445 = 0; _i445 < _size441; ++_i445)
            {
              xfer += iprot->readI32(this->orderCount[_i445]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.orderCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->orderCountType.clear();
            uint32_t _size446;
            ::apache::thrift::protocol::TType _etype449;
            xfer += iprot->readListBegin(_etype449, _size446);
            this->orderCountType.resize(_size446);
            uint32_t _i450;
            for (_i450 = 0; _i450 < _size446; ++_i450)
            {
              xfer += iprot->readString(this->orderCountType[_i450]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.orderCountType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->introuced);
          this->__isset.introuced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hiddenCellDropsPermil);
          this->__isset.hiddenCellDropsPermil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->giftDropsPermil);
          this->__isset.giftDropsPermil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uselessDropsPermil);
          this->__isset.uselessDropsPermil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->carrotDropsPermil);
          this->__isset.carrotDropsPermil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eggplantDropsPermil);
          this->__isset.eggplantDropsPermil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tomatoDropsPermil);
          this->__isset.tomatoDropsPermil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventPointDropsPermil);
          this->__isset.eventPointDropsPermil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->slimeArt);
          this->__isset.slimeArt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->slimeString);
          this->__isset.slimeString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->conveyorart);
          this->__isset.conveyorart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bottomfenceart);
          this->__isset.bottomfenceart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rightfenceart);
          this->__isset.rightfenceart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spriteart);
          this->__isset.spriteart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 77:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->freezeart);
          this->__isset.freezeart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 78:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellart);
          this->__isset.cellart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blueWeight);
          this->__isset.blueWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->greenWeight);
          this->__isset.greenWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orangeWeight);
          this->__isset.orangeWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chocoWeight);
          this->__isset.chocoWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pinkWeight);
          this->__isset.pinkWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clearWeight);
          this->__isset.clearWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->villainThrowTypes.clear();
            uint32_t _size451;
            ::apache::thrift::protocol::TType _etype454;
            xfer += iprot->readListBegin(_etype454, _size451);
            this->villainThrowTypes.resize(_size451);
            uint32_t _i455;
            for (_i455 = 0; _i455 < _size451; ++_i455)
            {
              xfer += iprot->readString(this->villainThrowTypes[_i455]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.villainThrowTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->villainThrowWeights.clear();
            uint32_t _size456;
            ::apache::thrift::protocol::TType _etype459;
            xfer += iprot->readListBegin(_etype459, _size456);
            this->villainThrowWeights.resize(_size456);
            uint32_t _i460;
            for (_i460 = 0; _i460 < _size456; ++_i460)
            {
              xfer += iprot->readI32(this->villainThrowWeights[_i460]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.villainThrowWeights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numMoves)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_starScores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numRows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numColumns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numColors)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MatchThreeData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MatchThreeData");

  xfer += oprot->writeFieldBegin("levelName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numMoves", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->numMoves);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("starScores", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->starScores.size()));
    std::vector<int32_t> ::const_iterator _iter461;
    for (_iter461 = this->starScores.begin(); _iter461 != this->starScores.end(); ++_iter461)
    {
      xfer += oprot->writeI32((*_iter461));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numRows", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->numRows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numColumns", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numColumns);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numColors", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->numColors);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extraCount) {
    xfer += oprot->writeFieldBegin("extraCount", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->extraCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainId) {
    xfer += oprot->writeFieldBegin("villainId", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->villainId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainF) {
    xfer += oprot->writeFieldBegin("villainF", ::apache::thrift::protocol::T_I32, 21);
    xfer += oprot->writeI32(this->villainF);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainN) {
    xfer += oprot->writeFieldBegin("villainN", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32(this->villainN);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainMechanicMin) {
    xfer += oprot->writeFieldBegin("villainMechanicMin", ::apache::thrift::protocol::T_I32, 23);
    xfer += oprot->writeI32(this->villainMechanicMin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainMechanicMax) {
    xfer += oprot->writeFieldBegin("villainMechanicMax", ::apache::thrift::protocol::T_I32, 24);
    xfer += oprot->writeI32(this->villainMechanicMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainMargin) {
    xfer += oprot->writeFieldBegin("villainMargin", ::apache::thrift::protocol::T_I32, 25);
    xfer += oprot->writeI32(this->villainMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainStartDelay) {
    xfer += oprot->writeFieldBegin("villainStartDelay", ::apache::thrift::protocol::T_I32, 26);
    xfer += oprot->writeI32(this->villainStartDelay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainThrowZoneArt) {
    xfer += oprot->writeFieldBegin("villainThrowZoneArt", ::apache::thrift::protocol::T_STRING, 27);
    xfer += oprot->writeString(this->villainThrowZoneArt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extraLua) {
    xfer += oprot->writeFieldBegin("extraLua", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->extraLua);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orderCount) {
    xfer += oprot->writeFieldBegin("orderCount", ::apache::thrift::protocol::T_LIST, 31);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->orderCount.size()));
      std::vector<int32_t> ::const_iterator _iter462;
      for (_iter462 = this->orderCount.begin(); _iter462 != this->orderCount.end(); ++_iter462)
      {
        xfer += oprot->writeI32((*_iter462));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.introuced) {
    xfer += oprot->writeFieldBegin("introuced", ::apache::thrift::protocol::T_STRING, 32);
    xfer += oprot->writeString(this->introuced);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orderCountType) {
    xfer += oprot->writeFieldBegin("orderCountType", ::apache::thrift::protocol::T_LIST, 33);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orderCountType.size()));
      std::vector<std::string> ::const_iterator _iter463;
      for (_iter463 = this->orderCountType.begin(); _iter463 != this->orderCountType.end(); ++_iter463)
      {
        xfer += oprot->writeString((*_iter463));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hiddenCellDropsPermil) {
    xfer += oprot->writeFieldBegin("hiddenCellDropsPermil", ::apache::thrift::protocol::T_I32, 50);
    xfer += oprot->writeI32(this->hiddenCellDropsPermil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.giftDropsPermil) {
    xfer += oprot->writeFieldBegin("giftDropsPermil", ::apache::thrift::protocol::T_I32, 51);
    xfer += oprot->writeI32(this->giftDropsPermil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uselessDropsPermil) {
    xfer += oprot->writeFieldBegin("uselessDropsPermil", ::apache::thrift::protocol::T_I32, 52);
    xfer += oprot->writeI32(this->uselessDropsPermil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.carrotDropsPermil) {
    xfer += oprot->writeFieldBegin("carrotDropsPermil", ::apache::thrift::protocol::T_I32, 53);
    xfer += oprot->writeI32(this->carrotDropsPermil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eggplantDropsPermil) {
    xfer += oprot->writeFieldBegin("eggplantDropsPermil", ::apache::thrift::protocol::T_I32, 54);
    xfer += oprot->writeI32(this->eggplantDropsPermil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tomatoDropsPermil) {
    xfer += oprot->writeFieldBegin("tomatoDropsPermil", ::apache::thrift::protocol::T_I32, 55);
    xfer += oprot->writeI32(this->tomatoDropsPermil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPointDropsPermil) {
    xfer += oprot->writeFieldBegin("eventPointDropsPermil", ::apache::thrift::protocol::T_I32, 56);
    xfer += oprot->writeI32(this->eventPointDropsPermil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.slimeArt) {
    xfer += oprot->writeFieldBegin("slimeArt", ::apache::thrift::protocol::T_STRING, 71);
    xfer += oprot->writeString(this->slimeArt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.slimeString) {
    xfer += oprot->writeFieldBegin("slimeString", ::apache::thrift::protocol::T_STRING, 72);
    xfer += oprot->writeString(this->slimeString);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.conveyorart) {
    xfer += oprot->writeFieldBegin("conveyorart", ::apache::thrift::protocol::T_STRING, 73);
    xfer += oprot->writeString(this->conveyorart);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bottomfenceart) {
    xfer += oprot->writeFieldBegin("bottomfenceart", ::apache::thrift::protocol::T_STRING, 74);
    xfer += oprot->writeString(this->bottomfenceart);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rightfenceart) {
    xfer += oprot->writeFieldBegin("rightfenceart", ::apache::thrift::protocol::T_STRING, 75);
    xfer += oprot->writeString(this->rightfenceart);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spriteart) {
    xfer += oprot->writeFieldBegin("spriteart", ::apache::thrift::protocol::T_STRING, 76);
    xfer += oprot->writeString(this->spriteart);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.freezeart) {
    xfer += oprot->writeFieldBegin("freezeart", ::apache::thrift::protocol::T_STRING, 77);
    xfer += oprot->writeString(this->freezeart);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cellart) {
    xfer += oprot->writeFieldBegin("cellart", ::apache::thrift::protocol::T_STRING, 78);
    xfer += oprot->writeString(this->cellart);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blueWeight) {
    xfer += oprot->writeFieldBegin("blueWeight", ::apache::thrift::protocol::T_I32, 80);
    xfer += oprot->writeI32(this->blueWeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.greenWeight) {
    xfer += oprot->writeFieldBegin("greenWeight", ::apache::thrift::protocol::T_I32, 81);
    xfer += oprot->writeI32(this->greenWeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orangeWeight) {
    xfer += oprot->writeFieldBegin("orangeWeight", ::apache::thrift::protocol::T_I32, 82);
    xfer += oprot->writeI32(this->orangeWeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.chocoWeight) {
    xfer += oprot->writeFieldBegin("chocoWeight", ::apache::thrift::protocol::T_I32, 83);
    xfer += oprot->writeI32(this->chocoWeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pinkWeight) {
    xfer += oprot->writeFieldBegin("pinkWeight", ::apache::thrift::protocol::T_I32, 84);
    xfer += oprot->writeI32(this->pinkWeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clearWeight) {
    xfer += oprot->writeFieldBegin("clearWeight", ::apache::thrift::protocol::T_I32, 85);
    xfer += oprot->writeI32(this->clearWeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainThrowTypes) {
    xfer += oprot->writeFieldBegin("villainThrowTypes", ::apache::thrift::protocol::T_LIST, 86);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->villainThrowTypes.size()));
      std::vector<std::string> ::const_iterator _iter464;
      for (_iter464 = this->villainThrowTypes.begin(); _iter464 != this->villainThrowTypes.end(); ++_iter464)
      {
        xfer += oprot->writeString((*_iter464));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainThrowWeights) {
    xfer += oprot->writeFieldBegin("villainThrowWeights", ::apache::thrift::protocol::T_LIST, 87);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->villainThrowWeights.size()));
      std::vector<int32_t> ::const_iterator _iter465;
      for (_iter465 = this->villainThrowWeights.begin(); _iter465 != this->villainThrowWeights.end(); ++_iter465)
      {
        xfer += oprot->writeI32((*_iter465));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchThreeData &a, MatchThreeData &b) {
  using ::std::swap;
  swap(a.levelName, b.levelName);
  swap(a.numMoves, b.numMoves);
  swap(a.starScores, b.starScores);
  swap(a.numRows, b.numRows);
  swap(a.numColumns, b.numColumns);
  swap(a.numColors, b.numColors);
  swap(a.extraCount, b.extraCount);
  swap(a.villainId, b.villainId);
  swap(a.villainF, b.villainF);
  swap(a.villainN, b.villainN);
  swap(a.villainMechanicMin, b.villainMechanicMin);
  swap(a.villainMechanicMax, b.villainMechanicMax);
  swap(a.villainMargin, b.villainMargin);
  swap(a.villainStartDelay, b.villainStartDelay);
  swap(a.villainThrowZoneArt, b.villainThrowZoneArt);
  swap(a.extraLua, b.extraLua);
  swap(a.orderCount, b.orderCount);
  swap(a.orderCountType, b.orderCountType);
  swap(a.introuced, b.introuced);
  swap(a.hiddenCellDropsPermil, b.hiddenCellDropsPermil);
  swap(a.giftDropsPermil, b.giftDropsPermil);
  swap(a.uselessDropsPermil, b.uselessDropsPermil);
  swap(a.carrotDropsPermil, b.carrotDropsPermil);
  swap(a.eggplantDropsPermil, b.eggplantDropsPermil);
  swap(a.tomatoDropsPermil, b.tomatoDropsPermil);
  swap(a.eventPointDropsPermil, b.eventPointDropsPermil);
  swap(a.slimeArt, b.slimeArt);
  swap(a.slimeString, b.slimeString);
  swap(a.conveyorart, b.conveyorart);
  swap(a.bottomfenceart, b.bottomfenceart);
  swap(a.rightfenceart, b.rightfenceart);
  swap(a.spriteart, b.spriteart);
  swap(a.freezeart, b.freezeart);
  swap(a.cellart, b.cellart);
  swap(a.blueWeight, b.blueWeight);
  swap(a.greenWeight, b.greenWeight);
  swap(a.orangeWeight, b.orangeWeight);
  swap(a.chocoWeight, b.chocoWeight);
  swap(a.pinkWeight, b.pinkWeight);
  swap(a.clearWeight, b.clearWeight);
  swap(a.villainThrowTypes, b.villainThrowTypes);
  swap(a.villainThrowWeights, b.villainThrowWeights);
  swap(a.__isset, b.__isset);
}

MatchThreeData::MatchThreeData(const MatchThreeData& other466) {
  levelName = other466.levelName;
  numMoves = other466.numMoves;
  starScores = other466.starScores;
  numRows = other466.numRows;
  numColumns = other466.numColumns;
  numColors = other466.numColors;
  extraCount = other466.extraCount;
  villainId = other466.villainId;
  villainF = other466.villainF;
  villainN = other466.villainN;
  villainMechanicMin = other466.villainMechanicMin;
  villainMechanicMax = other466.villainMechanicMax;
  villainMargin = other466.villainMargin;
  villainStartDelay = other466.villainStartDelay;
  villainThrowZoneArt = other466.villainThrowZoneArt;
  extraLua = other466.extraLua;
  orderCount = other466.orderCount;
  orderCountType = other466.orderCountType;
  introuced = other466.introuced;
  hiddenCellDropsPermil = other466.hiddenCellDropsPermil;
  giftDropsPermil = other466.giftDropsPermil;
  uselessDropsPermil = other466.uselessDropsPermil;
  carrotDropsPermil = other466.carrotDropsPermil;
  eggplantDropsPermil = other466.eggplantDropsPermil;
  tomatoDropsPermil = other466.tomatoDropsPermil;
  eventPointDropsPermil = other466.eventPointDropsPermil;
  slimeArt = other466.slimeArt;
  slimeString = other466.slimeString;
  conveyorart = other466.conveyorart;
  bottomfenceart = other466.bottomfenceart;
  rightfenceart = other466.rightfenceart;
  spriteart = other466.spriteart;
  freezeart = other466.freezeart;
  cellart = other466.cellart;
  blueWeight = other466.blueWeight;
  greenWeight = other466.greenWeight;
  orangeWeight = other466.orangeWeight;
  chocoWeight = other466.chocoWeight;
  pinkWeight = other466.pinkWeight;
  clearWeight = other466.clearWeight;
  villainThrowTypes = other466.villainThrowTypes;
  villainThrowWeights = other466.villainThrowWeights;
  __isset = other466.__isset;
}
MatchThreeData& MatchThreeData::operator=(const MatchThreeData& other467) {
  levelName = other467.levelName;
  numMoves = other467.numMoves;
  starScores = other467.starScores;
  numRows = other467.numRows;
  numColumns = other467.numColumns;
  numColors = other467.numColors;
  extraCount = other467.extraCount;
  villainId = other467.villainId;
  villainF = other467.villainF;
  villainN = other467.villainN;
  villainMechanicMin = other467.villainMechanicMin;
  villainMechanicMax = other467.villainMechanicMax;
  villainMargin = other467.villainMargin;
  villainStartDelay = other467.villainStartDelay;
  villainThrowZoneArt = other467.villainThrowZoneArt;
  extraLua = other467.extraLua;
  orderCount = other467.orderCount;
  orderCountType = other467.orderCountType;
  introuced = other467.introuced;
  hiddenCellDropsPermil = other467.hiddenCellDropsPermil;
  giftDropsPermil = other467.giftDropsPermil;
  uselessDropsPermil = other467.uselessDropsPermil;
  carrotDropsPermil = other467.carrotDropsPermil;
  eggplantDropsPermil = other467.eggplantDropsPermil;
  tomatoDropsPermil = other467.tomatoDropsPermil;
  eventPointDropsPermil = other467.eventPointDropsPermil;
  slimeArt = other467.slimeArt;
  slimeString = other467.slimeString;
  conveyorart = other467.conveyorart;
  bottomfenceart = other467.bottomfenceart;
  rightfenceart = other467.rightfenceart;
  spriteart = other467.spriteart;
  freezeart = other467.freezeart;
  cellart = other467.cellart;
  blueWeight = other467.blueWeight;
  greenWeight = other467.greenWeight;
  orangeWeight = other467.orangeWeight;
  chocoWeight = other467.chocoWeight;
  pinkWeight = other467.pinkWeight;
  clearWeight = other467.clearWeight;
  villainThrowTypes = other467.villainThrowTypes;
  villainThrowWeights = other467.villainThrowWeights;
  __isset = other467.__isset;
  return *this;
}
void MatchThreeData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MatchThreeData(";
  out << "levelName=" << to_string(levelName);
  out << ", " << "numMoves=" << to_string(numMoves);
  out << ", " << "starScores=" << to_string(starScores);
  out << ", " << "numRows=" << to_string(numRows);
  out << ", " << "numColumns=" << to_string(numColumns);
  out << ", " << "numColors=" << to_string(numColors);
  out << ", " << "extraCount="; (__isset.extraCount ? (out << to_string(extraCount)) : (out << "<null>"));
  out << ", " << "villainId="; (__isset.villainId ? (out << to_string(villainId)) : (out << "<null>"));
  out << ", " << "villainF="; (__isset.villainF ? (out << to_string(villainF)) : (out << "<null>"));
  out << ", " << "villainN="; (__isset.villainN ? (out << to_string(villainN)) : (out << "<null>"));
  out << ", " << "villainMechanicMin="; (__isset.villainMechanicMin ? (out << to_string(villainMechanicMin)) : (out << "<null>"));
  out << ", " << "villainMechanicMax="; (__isset.villainMechanicMax ? (out << to_string(villainMechanicMax)) : (out << "<null>"));
  out << ", " << "villainMargin="; (__isset.villainMargin ? (out << to_string(villainMargin)) : (out << "<null>"));
  out << ", " << "villainStartDelay="; (__isset.villainStartDelay ? (out << to_string(villainStartDelay)) : (out << "<null>"));
  out << ", " << "villainThrowZoneArt="; (__isset.villainThrowZoneArt ? (out << to_string(villainThrowZoneArt)) : (out << "<null>"));
  out << ", " << "extraLua="; (__isset.extraLua ? (out << to_string(extraLua)) : (out << "<null>"));
  out << ", " << "orderCount="; (__isset.orderCount ? (out << to_string(orderCount)) : (out << "<null>"));
  out << ", " << "orderCountType="; (__isset.orderCountType ? (out << to_string(orderCountType)) : (out << "<null>"));
  out << ", " << "introuced="; (__isset.introuced ? (out << to_string(introuced)) : (out << "<null>"));
  out << ", " << "hiddenCellDropsPermil="; (__isset.hiddenCellDropsPermil ? (out << to_string(hiddenCellDropsPermil)) : (out << "<null>"));
  out << ", " << "giftDropsPermil="; (__isset.giftDropsPermil ? (out << to_string(giftDropsPermil)) : (out << "<null>"));
  out << ", " << "uselessDropsPermil="; (__isset.uselessDropsPermil ? (out << to_string(uselessDropsPermil)) : (out << "<null>"));
  out << ", " << "carrotDropsPermil="; (__isset.carrotDropsPermil ? (out << to_string(carrotDropsPermil)) : (out << "<null>"));
  out << ", " << "eggplantDropsPermil="; (__isset.eggplantDropsPermil ? (out << to_string(eggplantDropsPermil)) : (out << "<null>"));
  out << ", " << "tomatoDropsPermil="; (__isset.tomatoDropsPermil ? (out << to_string(tomatoDropsPermil)) : (out << "<null>"));
  out << ", " << "eventPointDropsPermil="; (__isset.eventPointDropsPermil ? (out << to_string(eventPointDropsPermil)) : (out << "<null>"));
  out << ", " << "slimeArt="; (__isset.slimeArt ? (out << to_string(slimeArt)) : (out << "<null>"));
  out << ", " << "slimeString="; (__isset.slimeString ? (out << to_string(slimeString)) : (out << "<null>"));
  out << ", " << "conveyorart="; (__isset.conveyorart ? (out << to_string(conveyorart)) : (out << "<null>"));
  out << ", " << "bottomfenceart="; (__isset.bottomfenceart ? (out << to_string(bottomfenceart)) : (out << "<null>"));
  out << ", " << "rightfenceart="; (__isset.rightfenceart ? (out << to_string(rightfenceart)) : (out << "<null>"));
  out << ", " << "spriteart="; (__isset.spriteart ? (out << to_string(spriteart)) : (out << "<null>"));
  out << ", " << "freezeart="; (__isset.freezeart ? (out << to_string(freezeart)) : (out << "<null>"));
  out << ", " << "cellart="; (__isset.cellart ? (out << to_string(cellart)) : (out << "<null>"));
  out << ", " << "blueWeight="; (__isset.blueWeight ? (out << to_string(blueWeight)) : (out << "<null>"));
  out << ", " << "greenWeight="; (__isset.greenWeight ? (out << to_string(greenWeight)) : (out << "<null>"));
  out << ", " << "orangeWeight="; (__isset.orangeWeight ? (out << to_string(orangeWeight)) : (out << "<null>"));
  out << ", " << "chocoWeight="; (__isset.chocoWeight ? (out << to_string(chocoWeight)) : (out << "<null>"));
  out << ", " << "pinkWeight="; (__isset.pinkWeight ? (out << to_string(pinkWeight)) : (out << "<null>"));
  out << ", " << "clearWeight="; (__isset.clearWeight ? (out << to_string(clearWeight)) : (out << "<null>"));
  out << ", " << "villainThrowTypes="; (__isset.villainThrowTypes ? (out << to_string(villainThrowTypes)) : (out << "<null>"));
  out << ", " << "villainThrowWeights="; (__isset.villainThrowWeights ? (out << to_string(villainThrowWeights)) : (out << "<null>"));
  out << ")";
}


Villain::~Villain() throw() {
}


void Villain::__set_villainId(const VillainID& val) {
  this->villainId = val;
}

void Villain::__set_villainImage(const AssetPath& val) {
  this->villainImage = val;
}

void Villain::__set_villainThrowImage(const std::vector<AssetPath> & val) {
  this->villainThrowImage = val;
__isset.villainThrowImage = true;
}

void Villain::__set_animationName(const std::string& val) {
  this->animationName = val;
__isset.animationName = true;
}

void Villain::__set_villainThrowCells(const std::vector<std::string> & val) {
  this->villainThrowCells = val;
__isset.villainThrowCells = true;
}

void Villain::__set_throwCellLoseText(const std::string& val) {
  this->throwCellLoseText = val;
__isset.throwCellLoseText = true;
}

void Villain::__set_mechanicMin(const int32_t val) {
  this->mechanicMin = val;
__isset.mechanicMin = true;
}

void Villain::__set_mechanicMax(const int32_t val) {
  this->mechanicMax = val;
__isset.mechanicMax = true;
}
std::ostream& operator<<(std::ostream& out, const Villain& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Villain::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_villainId = false;
  bool isset_villainImage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->villainId);
          isset_villainId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->villainImage);
          isset_villainImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->villainThrowImage.clear();
            uint32_t _size468;
            ::apache::thrift::protocol::TType _etype471;
            xfer += iprot->readListBegin(_etype471, _size468);
            this->villainThrowImage.resize(_size468);
            uint32_t _i472;
            for (_i472 = 0; _i472 < _size468; ++_i472)
            {
              xfer += iprot->readString(this->villainThrowImage[_i472]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.villainThrowImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->animationName);
          this->__isset.animationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->villainThrowCells.clear();
            uint32_t _size473;
            ::apache::thrift::protocol::TType _etype476;
            xfer += iprot->readListBegin(_etype476, _size473);
            this->villainThrowCells.resize(_size473);
            uint32_t _i477;
            for (_i477 = 0; _i477 < _size473; ++_i477)
            {
              xfer += iprot->readString(this->villainThrowCells[_i477]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.villainThrowCells = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->throwCellLoseText);
          this->__isset.throwCellLoseText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mechanicMin);
          this->__isset.mechanicMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mechanicMax);
          this->__isset.mechanicMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_villainId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_villainImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Villain::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Villain");

  xfer += oprot->writeFieldBegin("villainId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->villainId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("villainImage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->villainImage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.villainThrowImage) {
    xfer += oprot->writeFieldBegin("villainThrowImage", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->villainThrowImage.size()));
      std::vector<AssetPath> ::const_iterator _iter478;
      for (_iter478 = this->villainThrowImage.begin(); _iter478 != this->villainThrowImage.end(); ++_iter478)
      {
        xfer += oprot->writeString((*_iter478));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.animationName) {
    xfer += oprot->writeFieldBegin("animationName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->animationName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villainThrowCells) {
    xfer += oprot->writeFieldBegin("villainThrowCells", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->villainThrowCells.size()));
      std::vector<std::string> ::const_iterator _iter479;
      for (_iter479 = this->villainThrowCells.begin(); _iter479 != this->villainThrowCells.end(); ++_iter479)
      {
        xfer += oprot->writeString((*_iter479));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.throwCellLoseText) {
    xfer += oprot->writeFieldBegin("throwCellLoseText", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->throwCellLoseText);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mechanicMin) {
    xfer += oprot->writeFieldBegin("mechanicMin", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->mechanicMin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mechanicMax) {
    xfer += oprot->writeFieldBegin("mechanicMax", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->mechanicMax);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Villain &a, Villain &b) {
  using ::std::swap;
  swap(a.villainId, b.villainId);
  swap(a.villainImage, b.villainImage);
  swap(a.villainThrowImage, b.villainThrowImage);
  swap(a.animationName, b.animationName);
  swap(a.villainThrowCells, b.villainThrowCells);
  swap(a.throwCellLoseText, b.throwCellLoseText);
  swap(a.mechanicMin, b.mechanicMin);
  swap(a.mechanicMax, b.mechanicMax);
  swap(a.__isset, b.__isset);
}

Villain::Villain(const Villain& other480) {
  villainId = other480.villainId;
  villainImage = other480.villainImage;
  villainThrowImage = other480.villainThrowImage;
  animationName = other480.animationName;
  villainThrowCells = other480.villainThrowCells;
  throwCellLoseText = other480.throwCellLoseText;
  mechanicMin = other480.mechanicMin;
  mechanicMax = other480.mechanicMax;
  __isset = other480.__isset;
}
Villain& Villain::operator=(const Villain& other481) {
  villainId = other481.villainId;
  villainImage = other481.villainImage;
  villainThrowImage = other481.villainThrowImage;
  animationName = other481.animationName;
  villainThrowCells = other481.villainThrowCells;
  throwCellLoseText = other481.throwCellLoseText;
  mechanicMin = other481.mechanicMin;
  mechanicMax = other481.mechanicMax;
  __isset = other481.__isset;
  return *this;
}
void Villain::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Villain(";
  out << "villainId=" << to_string(villainId);
  out << ", " << "villainImage=" << to_string(villainImage);
  out << ", " << "villainThrowImage="; (__isset.villainThrowImage ? (out << to_string(villainThrowImage)) : (out << "<null>"));
  out << ", " << "animationName="; (__isset.animationName ? (out << to_string(animationName)) : (out << "<null>"));
  out << ", " << "villainThrowCells="; (__isset.villainThrowCells ? (out << to_string(villainThrowCells)) : (out << "<null>"));
  out << ", " << "throwCellLoseText="; (__isset.throwCellLoseText ? (out << to_string(throwCellLoseText)) : (out << "<null>"));
  out << ", " << "mechanicMin="; (__isset.mechanicMin ? (out << to_string(mechanicMin)) : (out << "<null>"));
  out << ", " << "mechanicMax="; (__isset.mechanicMax ? (out << to_string(mechanicMax)) : (out << "<null>"));
  out << ")";
}


LevelCampaignStyle::~LevelCampaignStyle() throw() {
}


void LevelCampaignStyle::__set_levelCampaignStyleId(const LevelCampaignStyleID& val) {
  this->levelCampaignStyleId = val;
}

void LevelCampaignStyle::__set_campaignTMXFile(const std::string& val) {
  this->campaignTMXFile = val;
}

void LevelCampaignStyle::__set_characterNameBg(const std::string& val) {
  this->characterNameBg = val;
}

void LevelCampaignStyle::__set_myBalloonWithAvatar(const std::string& val) {
  this->myBalloonWithAvatar = val;
}

void LevelCampaignStyle::__set_myBalloonWithoutAvatar(const std::string& val) {
  this->myBalloonWithoutAvatar = val;
}

void LevelCampaignStyle::__set_hudButtonImage(const std::string& val) {
  this->hudButtonImage = val;
}

void LevelCampaignStyle::__set_topHudBannerBg(const std::string& val) {
  this->topHudBannerBg = val;
}

void LevelCampaignStyle::__set_campaignTitleBg9(const std::string& val) {
  this->campaignTitleBg9 = val;
}

void LevelCampaignStyle::__set_campaignTimerBg9(const std::string& val) {
  this->campaignTimerBg9 = val;
}

void LevelCampaignStyle::__set_leaderboardChestOnBanner(const std::string& val) {
  this->leaderboardChestOnBanner = val;
}

void LevelCampaignStyle::__set_infoButtonImage(const std::string& val) {
  this->infoButtonImage = val;
}

void LevelCampaignStyle::__set_leaderboardTrophyImageOnHudButton(const std::string& val) {
  this->leaderboardTrophyImageOnHudButton = val;
}

void LevelCampaignStyle::__set_eventStoreImageOnHudButton(const std::string& val) {
  this->eventStoreImageOnHudButton = val;
}

void LevelCampaignStyle::__set_rewardChestTextBg(const std::string& val) {
  this->rewardChestTextBg = val;
}

void LevelCampaignStyle::__set_eventListBanner(const std::string& val) {
  this->eventListBanner = val;
}

void LevelCampaignStyle::__set_eventListTitleTextColor(const std::string& val) {
  this->eventListTitleTextColor = val;
__isset.eventListTitleTextColor = true;
}

void LevelCampaignStyle::__set_eventListStarTextColor(const std::string& val) {
  this->eventListStarTextColor = val;
__isset.eventListStarTextColor = true;
}

void LevelCampaignStyle::__set_eventListvillainID(const VillainID& val) {
  this->eventListvillainID = val;
__isset.eventListvillainID = true;
}

void LevelCampaignStyle::__set_topRewardText(const LocalizedString& val) {
  this->topRewardText = val;
__isset.topRewardText = true;
}

void LevelCampaignStyle::__set_topPlayerText(const LocalizedString& val) {
  this->topPlayerText = val;
__isset.topPlayerText = true;
}

void LevelCampaignStyle::__set_getMoreKeyText(const LocalizedString& val) {
  this->getMoreKeyText = val;
__isset.getMoreKeyText = true;
}

void LevelCampaignStyle::__set_specialBoosterText(const LocalizedString& val) {
  this->specialBoosterText = val;
__isset.specialBoosterText = true;
}

void LevelCampaignStyle::__set_eventStoreText(const LocalizedString& val) {
  this->eventStoreText = val;
__isset.eventStoreText = true;
}

void LevelCampaignStyle::__set_campaignBackground(const AssetPath& val) {
  this->campaignBackground = val;
}

void LevelCampaignStyle::__set_campaignMapPadding(const int32_t val) {
  this->campaignMapPadding = val;
__isset.campaignMapPadding = true;
}
std::ostream& operator<<(std::ostream& out, const LevelCampaignStyle& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LevelCampaignStyle::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelCampaignStyleId = false;
  bool isset_campaignTMXFile = false;
  bool isset_characterNameBg = false;
  bool isset_myBalloonWithAvatar = false;
  bool isset_myBalloonWithoutAvatar = false;
  bool isset_hudButtonImage = false;
  bool isset_topHudBannerBg = false;
  bool isset_campaignTitleBg9 = false;
  bool isset_campaignTimerBg9 = false;
  bool isset_leaderboardChestOnBanner = false;
  bool isset_infoButtonImage = false;
  bool isset_leaderboardTrophyImageOnHudButton = false;
  bool isset_eventStoreImageOnHudButton = false;
  bool isset_rewardChestTextBg = false;
  bool isset_eventListBanner = false;
  bool isset_campaignBackground = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelCampaignStyleId);
          isset_levelCampaignStyleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->campaignTMXFile);
          isset_campaignTMXFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->characterNameBg);
          isset_characterNameBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->myBalloonWithAvatar);
          isset_myBalloonWithAvatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->myBalloonWithoutAvatar);
          isset_myBalloonWithoutAvatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hudButtonImage);
          isset_hudButtonImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topHudBannerBg);
          isset_topHudBannerBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->campaignTitleBg9);
          isset_campaignTitleBg9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->campaignTimerBg9);
          isset_campaignTimerBg9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardChestOnBanner);
          isset_leaderboardChestOnBanner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->infoButtonImage);
          isset_infoButtonImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardTrophyImageOnHudButton);
          isset_leaderboardTrophyImageOnHudButton = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventStoreImageOnHudButton);
          isset_eventStoreImageOnHudButton = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardChestTextBg);
          isset_rewardChestTextBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventListBanner);
          isset_eventListBanner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventListTitleTextColor);
          this->__isset.eventListTitleTextColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventListStarTextColor);
          this->__isset.eventListStarTextColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventListvillainID);
          this->__isset.eventListvillainID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->topRewardText.read(iprot);
          this->__isset.topRewardText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->topPlayerText.read(iprot);
          this->__isset.topPlayerText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->getMoreKeyText.read(iprot);
          this->__isset.getMoreKeyText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->specialBoosterText.read(iprot);
          this->__isset.specialBoosterText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->eventStoreText.read(iprot);
          this->__isset.eventStoreText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->campaignBackground);
          isset_campaignBackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->campaignMapPadding);
          this->__isset.campaignMapPadding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelCampaignStyleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_campaignTMXFile)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_characterNameBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_myBalloonWithAvatar)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_myBalloonWithoutAvatar)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hudButtonImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topHudBannerBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_campaignTitleBg9)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_campaignTimerBg9)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardChestOnBanner)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_infoButtonImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardTrophyImageOnHudButton)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventStoreImageOnHudButton)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardChestTextBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventListBanner)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_campaignBackground)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LevelCampaignStyle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LevelCampaignStyle");

  xfer += oprot->writeFieldBegin("levelCampaignStyleId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelCampaignStyleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("campaignTMXFile", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->campaignTMXFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("characterNameBg", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->characterNameBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myBalloonWithAvatar", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->myBalloonWithAvatar);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myBalloonWithoutAvatar", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->myBalloonWithoutAvatar);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hudButtonImage", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->hudButtonImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topHudBannerBg", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->topHudBannerBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("campaignTitleBg9", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->campaignTitleBg9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("campaignTimerBg9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->campaignTimerBg9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardChestOnBanner", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->leaderboardChestOnBanner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("infoButtonImage", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->infoButtonImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardTrophyImageOnHudButton", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->leaderboardTrophyImageOnHudButton);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventStoreImageOnHudButton", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->eventStoreImageOnHudButton);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardChestTextBg", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->rewardChestTextBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventListBanner", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->eventListBanner);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventListTitleTextColor) {
    xfer += oprot->writeFieldBegin("eventListTitleTextColor", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->eventListTitleTextColor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventListStarTextColor) {
    xfer += oprot->writeFieldBegin("eventListStarTextColor", ::apache::thrift::protocol::T_STRING, 32);
    xfer += oprot->writeString(this->eventListStarTextColor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventListvillainID) {
    xfer += oprot->writeFieldBegin("eventListvillainID", ::apache::thrift::protocol::T_STRING, 33);
    xfer += oprot->writeString(this->eventListvillainID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topRewardText) {
    xfer += oprot->writeFieldBegin("topRewardText", ::apache::thrift::protocol::T_STRUCT, 40);
    xfer += this->topRewardText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topPlayerText) {
    xfer += oprot->writeFieldBegin("topPlayerText", ::apache::thrift::protocol::T_STRUCT, 41);
    xfer += this->topPlayerText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.getMoreKeyText) {
    xfer += oprot->writeFieldBegin("getMoreKeyText", ::apache::thrift::protocol::T_STRUCT, 42);
    xfer += this->getMoreKeyText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.specialBoosterText) {
    xfer += oprot->writeFieldBegin("specialBoosterText", ::apache::thrift::protocol::T_STRUCT, 43);
    xfer += this->specialBoosterText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventStoreText) {
    xfer += oprot->writeFieldBegin("eventStoreText", ::apache::thrift::protocol::T_STRUCT, 44);
    xfer += this->eventStoreText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("campaignBackground", ::apache::thrift::protocol::T_STRING, 50);
  xfer += oprot->writeString(this->campaignBackground);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.campaignMapPadding) {
    xfer += oprot->writeFieldBegin("campaignMapPadding", ::apache::thrift::protocol::T_I32, 60);
    xfer += oprot->writeI32(this->campaignMapPadding);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LevelCampaignStyle &a, LevelCampaignStyle &b) {
  using ::std::swap;
  swap(a.levelCampaignStyleId, b.levelCampaignStyleId);
  swap(a.campaignTMXFile, b.campaignTMXFile);
  swap(a.characterNameBg, b.characterNameBg);
  swap(a.myBalloonWithAvatar, b.myBalloonWithAvatar);
  swap(a.myBalloonWithoutAvatar, b.myBalloonWithoutAvatar);
  swap(a.hudButtonImage, b.hudButtonImage);
  swap(a.topHudBannerBg, b.topHudBannerBg);
  swap(a.campaignTitleBg9, b.campaignTitleBg9);
  swap(a.campaignTimerBg9, b.campaignTimerBg9);
  swap(a.leaderboardChestOnBanner, b.leaderboardChestOnBanner);
  swap(a.infoButtonImage, b.infoButtonImage);
  swap(a.leaderboardTrophyImageOnHudButton, b.leaderboardTrophyImageOnHudButton);
  swap(a.eventStoreImageOnHudButton, b.eventStoreImageOnHudButton);
  swap(a.rewardChestTextBg, b.rewardChestTextBg);
  swap(a.eventListBanner, b.eventListBanner);
  swap(a.eventListTitleTextColor, b.eventListTitleTextColor);
  swap(a.eventListStarTextColor, b.eventListStarTextColor);
  swap(a.eventListvillainID, b.eventListvillainID);
  swap(a.topRewardText, b.topRewardText);
  swap(a.topPlayerText, b.topPlayerText);
  swap(a.getMoreKeyText, b.getMoreKeyText);
  swap(a.specialBoosterText, b.specialBoosterText);
  swap(a.eventStoreText, b.eventStoreText);
  swap(a.campaignBackground, b.campaignBackground);
  swap(a.campaignMapPadding, b.campaignMapPadding);
  swap(a.__isset, b.__isset);
}

LevelCampaignStyle::LevelCampaignStyle(const LevelCampaignStyle& other482) {
  levelCampaignStyleId = other482.levelCampaignStyleId;
  campaignTMXFile = other482.campaignTMXFile;
  characterNameBg = other482.characterNameBg;
  myBalloonWithAvatar = other482.myBalloonWithAvatar;
  myBalloonWithoutAvatar = other482.myBalloonWithoutAvatar;
  hudButtonImage = other482.hudButtonImage;
  topHudBannerBg = other482.topHudBannerBg;
  campaignTitleBg9 = other482.campaignTitleBg9;
  campaignTimerBg9 = other482.campaignTimerBg9;
  leaderboardChestOnBanner = other482.leaderboardChestOnBanner;
  infoButtonImage = other482.infoButtonImage;
  leaderboardTrophyImageOnHudButton = other482.leaderboardTrophyImageOnHudButton;
  eventStoreImageOnHudButton = other482.eventStoreImageOnHudButton;
  rewardChestTextBg = other482.rewardChestTextBg;
  eventListBanner = other482.eventListBanner;
  eventListTitleTextColor = other482.eventListTitleTextColor;
  eventListStarTextColor = other482.eventListStarTextColor;
  eventListvillainID = other482.eventListvillainID;
  topRewardText = other482.topRewardText;
  topPlayerText = other482.topPlayerText;
  getMoreKeyText = other482.getMoreKeyText;
  specialBoosterText = other482.specialBoosterText;
  eventStoreText = other482.eventStoreText;
  campaignBackground = other482.campaignBackground;
  campaignMapPadding = other482.campaignMapPadding;
  __isset = other482.__isset;
}
LevelCampaignStyle& LevelCampaignStyle::operator=(const LevelCampaignStyle& other483) {
  levelCampaignStyleId = other483.levelCampaignStyleId;
  campaignTMXFile = other483.campaignTMXFile;
  characterNameBg = other483.characterNameBg;
  myBalloonWithAvatar = other483.myBalloonWithAvatar;
  myBalloonWithoutAvatar = other483.myBalloonWithoutAvatar;
  hudButtonImage = other483.hudButtonImage;
  topHudBannerBg = other483.topHudBannerBg;
  campaignTitleBg9 = other483.campaignTitleBg9;
  campaignTimerBg9 = other483.campaignTimerBg9;
  leaderboardChestOnBanner = other483.leaderboardChestOnBanner;
  infoButtonImage = other483.infoButtonImage;
  leaderboardTrophyImageOnHudButton = other483.leaderboardTrophyImageOnHudButton;
  eventStoreImageOnHudButton = other483.eventStoreImageOnHudButton;
  rewardChestTextBg = other483.rewardChestTextBg;
  eventListBanner = other483.eventListBanner;
  eventListTitleTextColor = other483.eventListTitleTextColor;
  eventListStarTextColor = other483.eventListStarTextColor;
  eventListvillainID = other483.eventListvillainID;
  topRewardText = other483.topRewardText;
  topPlayerText = other483.topPlayerText;
  getMoreKeyText = other483.getMoreKeyText;
  specialBoosterText = other483.specialBoosterText;
  eventStoreText = other483.eventStoreText;
  campaignBackground = other483.campaignBackground;
  campaignMapPadding = other483.campaignMapPadding;
  __isset = other483.__isset;
  return *this;
}
void LevelCampaignStyle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LevelCampaignStyle(";
  out << "levelCampaignStyleId=" << to_string(levelCampaignStyleId);
  out << ", " << "campaignTMXFile=" << to_string(campaignTMXFile);
  out << ", " << "characterNameBg=" << to_string(characterNameBg);
  out << ", " << "myBalloonWithAvatar=" << to_string(myBalloonWithAvatar);
  out << ", " << "myBalloonWithoutAvatar=" << to_string(myBalloonWithoutAvatar);
  out << ", " << "hudButtonImage=" << to_string(hudButtonImage);
  out << ", " << "topHudBannerBg=" << to_string(topHudBannerBg);
  out << ", " << "campaignTitleBg9=" << to_string(campaignTitleBg9);
  out << ", " << "campaignTimerBg9=" << to_string(campaignTimerBg9);
  out << ", " << "leaderboardChestOnBanner=" << to_string(leaderboardChestOnBanner);
  out << ", " << "infoButtonImage=" << to_string(infoButtonImage);
  out << ", " << "leaderboardTrophyImageOnHudButton=" << to_string(leaderboardTrophyImageOnHudButton);
  out << ", " << "eventStoreImageOnHudButton=" << to_string(eventStoreImageOnHudButton);
  out << ", " << "rewardChestTextBg=" << to_string(rewardChestTextBg);
  out << ", " << "eventListBanner=" << to_string(eventListBanner);
  out << ", " << "eventListTitleTextColor="; (__isset.eventListTitleTextColor ? (out << to_string(eventListTitleTextColor)) : (out << "<null>"));
  out << ", " << "eventListStarTextColor="; (__isset.eventListStarTextColor ? (out << to_string(eventListStarTextColor)) : (out << "<null>"));
  out << ", " << "eventListvillainID="; (__isset.eventListvillainID ? (out << to_string(eventListvillainID)) : (out << "<null>"));
  out << ", " << "topRewardText="; (__isset.topRewardText ? (out << to_string(topRewardText)) : (out << "<null>"));
  out << ", " << "topPlayerText="; (__isset.topPlayerText ? (out << to_string(topPlayerText)) : (out << "<null>"));
  out << ", " << "getMoreKeyText="; (__isset.getMoreKeyText ? (out << to_string(getMoreKeyText)) : (out << "<null>"));
  out << ", " << "specialBoosterText="; (__isset.specialBoosterText ? (out << to_string(specialBoosterText)) : (out << "<null>"));
  out << ", " << "eventStoreText="; (__isset.eventStoreText ? (out << to_string(eventStoreText)) : (out << "<null>"));
  out << ", " << "campaignBackground=" << to_string(campaignBackground);
  out << ", " << "campaignMapPadding="; (__isset.campaignMapPadding ? (out << to_string(campaignMapPadding)) : (out << "<null>"));
  out << ")";
}


LevelCampaign::~LevelCampaign() throw() {
}


void LevelCampaign::__set_levelCampaignId(const LevelCampaignID& val) {
  this->levelCampaignId = val;
}

void LevelCampaign::__set_campaignType(const LevelParentType::type val) {
  this->campaignType = val;
}

void LevelCampaign::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void LevelCampaign::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void LevelCampaign::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void LevelCampaign::__set_availability(const LevelAvailability::type val) {
  this->availability = val;
}

void LevelCampaign::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void LevelCampaign::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
}

void LevelCampaign::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void LevelCampaign::__set_numberOfFloors(const int32_t val) {
  this->numberOfFloors = val;
}

void LevelCampaign::__set_visibleFloors(const int32_t val) {
  this->visibleFloors = val;
}

void LevelCampaign::__set_hidden(const bool val) {
  this->hidden = val;
}

void LevelCampaign::__set_hideWhenComplete(const bool val) {
  this->hideWhenComplete = val;
}

void LevelCampaign::__set_eventIslandId(const EventIslandID& val) {
  this->eventIslandId = val;
}

void LevelCampaign::__set_levelCampaignStyleID(const LevelCampaignStyleID& val) {
  this->levelCampaignStyleID = val;
}

void LevelCampaign::__set_display(const LocalizedString& val) {
  this->display = val;
__isset.display = true;
}

void LevelCampaign::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void LevelCampaign::__set_match3ThemeId(const Match3ThemeId& val) {
  this->match3ThemeId = val;
}
std::ostream& operator<<(std::ostream& out, const LevelCampaign& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LevelCampaign::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelCampaignId = false;
  bool isset_campaignType = false;
  bool isset_displayOrder = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_availability = false;
  bool isset_showRank = false;
  bool isset_unlockRank = false;
  bool isset_hideRank = false;
  bool isset_numberOfFloors = false;
  bool isset_visibleFloors = false;
  bool isset_hidden = false;
  bool isset_hideWhenComplete = false;
  bool isset_eventIslandId = false;
  bool isset_levelCampaignStyleID = false;
  bool isset_match3ThemeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelCampaignId);
          isset_levelCampaignId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast484;
          xfer += iprot->readI32(ecast484);
          this->campaignType = (LevelParentType::type)ecast484;
          isset_campaignType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size485;
            ::apache::thrift::protocol::TType _etype488;
            xfer += iprot->readListBegin(_etype488, _size485);
            this->eventIds.resize(_size485);
            uint32_t _i489;
            for (_i489 = 0; _i489 < _size485; ++_i489)
            {
              xfer += iprot->readString(this->eventIds[_i489]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast490;
          xfer += iprot->readI32(ecast490);
          this->eventPhases = (EventPhases::type)ecast490;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast491;
          xfer += iprot->readI32(ecast491);
          this->availability = (LevelAvailability::type)ecast491;
          isset_availability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          isset_unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfFloors);
          isset_numberOfFloors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->visibleFloors);
          isset_visibleFloors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hidden);
          isset_hidden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideWhenComplete);
          isset_hideWhenComplete = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventIslandId);
          isset_eventIslandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelCampaignStyleID);
          isset_levelCampaignStyleID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          this->__isset.display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->match3ThemeId);
          isset_match3ThemeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelCampaignId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_campaignType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_availability)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numberOfFloors)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_visibleFloors)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hidden)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideWhenComplete)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIslandId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelCampaignStyleID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_match3ThemeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LevelCampaign::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LevelCampaign");

  xfer += oprot->writeFieldBegin("levelCampaignId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelCampaignId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("campaignType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->campaignType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter492;
    for (_iter492 = this->eventIds.begin(); _iter492 != this->eventIds.end(); ++_iter492)
    {
      xfer += oprot->writeString((*_iter492));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("availability", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32((int32_t)this->availability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->unlockRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfFloors", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->numberOfFloors);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("visibleFloors", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->visibleFloors);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden", ::apache::thrift::protocol::T_BOOL, 19);
  xfer += oprot->writeBool(this->hidden);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideWhenComplete", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->hideWhenComplete);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIslandId", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->eventIslandId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelCampaignStyleID", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->levelCampaignStyleID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.display) {
    xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 40);
    xfer += this->display.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("match3ThemeId", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->match3ThemeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LevelCampaign &a, LevelCampaign &b) {
  using ::std::swap;
  swap(a.levelCampaignId, b.levelCampaignId);
  swap(a.campaignType, b.campaignType);
  swap(a.displayOrder, b.displayOrder);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.availability, b.availability);
  swap(a.showRank, b.showRank);
  swap(a.unlockRank, b.unlockRank);
  swap(a.hideRank, b.hideRank);
  swap(a.numberOfFloors, b.numberOfFloors);
  swap(a.visibleFloors, b.visibleFloors);
  swap(a.hidden, b.hidden);
  swap(a.hideWhenComplete, b.hideWhenComplete);
  swap(a.eventIslandId, b.eventIslandId);
  swap(a.levelCampaignStyleID, b.levelCampaignStyleID);
  swap(a.display, b.display);
  swap(a.bundleId, b.bundleId);
  swap(a.match3ThemeId, b.match3ThemeId);
  swap(a.__isset, b.__isset);
}

LevelCampaign::LevelCampaign(const LevelCampaign& other493) {
  levelCampaignId = other493.levelCampaignId;
  campaignType = other493.campaignType;
  displayOrder = other493.displayOrder;
  eventIds = other493.eventIds;
  eventPhases = other493.eventPhases;
  availability = other493.availability;
  showRank = other493.showRank;
  unlockRank = other493.unlockRank;
  hideRank = other493.hideRank;
  numberOfFloors = other493.numberOfFloors;
  visibleFloors = other493.visibleFloors;
  hidden = other493.hidden;
  hideWhenComplete = other493.hideWhenComplete;
  eventIslandId = other493.eventIslandId;
  levelCampaignStyleID = other493.levelCampaignStyleID;
  display = other493.display;
  bundleId = other493.bundleId;
  match3ThemeId = other493.match3ThemeId;
  __isset = other493.__isset;
}
LevelCampaign& LevelCampaign::operator=(const LevelCampaign& other494) {
  levelCampaignId = other494.levelCampaignId;
  campaignType = other494.campaignType;
  displayOrder = other494.displayOrder;
  eventIds = other494.eventIds;
  eventPhases = other494.eventPhases;
  availability = other494.availability;
  showRank = other494.showRank;
  unlockRank = other494.unlockRank;
  hideRank = other494.hideRank;
  numberOfFloors = other494.numberOfFloors;
  visibleFloors = other494.visibleFloors;
  hidden = other494.hidden;
  hideWhenComplete = other494.hideWhenComplete;
  eventIslandId = other494.eventIslandId;
  levelCampaignStyleID = other494.levelCampaignStyleID;
  display = other494.display;
  bundleId = other494.bundleId;
  match3ThemeId = other494.match3ThemeId;
  __isset = other494.__isset;
  return *this;
}
void LevelCampaign::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LevelCampaign(";
  out << "levelCampaignId=" << to_string(levelCampaignId);
  out << ", " << "campaignType=" << to_string(campaignType);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "availability=" << to_string(availability);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "unlockRank=" << to_string(unlockRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "numberOfFloors=" << to_string(numberOfFloors);
  out << ", " << "visibleFloors=" << to_string(visibleFloors);
  out << ", " << "hidden=" << to_string(hidden);
  out << ", " << "hideWhenComplete=" << to_string(hideWhenComplete);
  out << ", " << "eventIslandId=" << to_string(eventIslandId);
  out << ", " << "levelCampaignStyleID=" << to_string(levelCampaignStyleID);
  out << ", " << "display="; (__isset.display ? (out << to_string(display)) : (out << "<null>"));
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "match3ThemeId=" << to_string(match3ThemeId);
  out << ")";
}


LevelCampaignLevelsList::~LevelCampaignLevelsList() throw() {
}


void LevelCampaignLevelsList::__set_levelCampaignId(const LevelCampaignID& val) {
  this->levelCampaignId = val;
}

void LevelCampaignLevelsList::__set_levelIds(const std::vector<LevelID> & val) {
  this->levelIds = val;
}
std::ostream& operator<<(std::ostream& out, const LevelCampaignLevelsList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LevelCampaignLevelsList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelCampaignId = false;
  bool isset_levelIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelCampaignId);
          isset_levelCampaignId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->levelIds.clear();
            uint32_t _size495;
            ::apache::thrift::protocol::TType _etype498;
            xfer += iprot->readListBegin(_etype498, _size495);
            this->levelIds.resize(_size495);
            uint32_t _i499;
            for (_i499 = 0; _i499 < _size495; ++_i499)
            {
              xfer += iprot->readString(this->levelIds[_i499]);
            }
            xfer += iprot->readListEnd();
          }
          isset_levelIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelCampaignId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LevelCampaignLevelsList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LevelCampaignLevelsList");

  xfer += oprot->writeFieldBegin("levelCampaignId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelCampaignId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->levelIds.size()));
    std::vector<LevelID> ::const_iterator _iter500;
    for (_iter500 = this->levelIds.begin(); _iter500 != this->levelIds.end(); ++_iter500)
    {
      xfer += oprot->writeString((*_iter500));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LevelCampaignLevelsList &a, LevelCampaignLevelsList &b) {
  using ::std::swap;
  swap(a.levelCampaignId, b.levelCampaignId);
  swap(a.levelIds, b.levelIds);
}

LevelCampaignLevelsList::LevelCampaignLevelsList(const LevelCampaignLevelsList& other501) {
  levelCampaignId = other501.levelCampaignId;
  levelIds = other501.levelIds;
}
LevelCampaignLevelsList& LevelCampaignLevelsList::operator=(const LevelCampaignLevelsList& other502) {
  levelCampaignId = other502.levelCampaignId;
  levelIds = other502.levelIds;
  return *this;
}
void LevelCampaignLevelsList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LevelCampaignLevelsList(";
  out << "levelCampaignId=" << to_string(levelCampaignId);
  out << ", " << "levelIds=" << to_string(levelIds);
  out << ")";
}


BusinessLevelsList::~BusinessLevelsList() throw() {
}


void BusinessLevelsList::__set_levelCampaignId(const LevelCampaignID& val) {
  this->levelCampaignId = val;
}

void BusinessLevelsList::__set_levelIds(const std::vector<LevelID> & val) {
  this->levelIds = val;
}
std::ostream& operator<<(std::ostream& out, const BusinessLevelsList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BusinessLevelsList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelCampaignId = false;
  bool isset_levelIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelCampaignId);
          isset_levelCampaignId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->levelIds.clear();
            uint32_t _size503;
            ::apache::thrift::protocol::TType _etype506;
            xfer += iprot->readListBegin(_etype506, _size503);
            this->levelIds.resize(_size503);
            uint32_t _i507;
            for (_i507 = 0; _i507 < _size503; ++_i507)
            {
              xfer += iprot->readString(this->levelIds[_i507]);
            }
            xfer += iprot->readListEnd();
          }
          isset_levelIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelCampaignId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BusinessLevelsList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessLevelsList");

  xfer += oprot->writeFieldBegin("levelCampaignId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelCampaignId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->levelIds.size()));
    std::vector<LevelID> ::const_iterator _iter508;
    for (_iter508 = this->levelIds.begin(); _iter508 != this->levelIds.end(); ++_iter508)
    {
      xfer += oprot->writeString((*_iter508));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessLevelsList &a, BusinessLevelsList &b) {
  using ::std::swap;
  swap(a.levelCampaignId, b.levelCampaignId);
  swap(a.levelIds, b.levelIds);
}

BusinessLevelsList::BusinessLevelsList(const BusinessLevelsList& other509) {
  levelCampaignId = other509.levelCampaignId;
  levelIds = other509.levelIds;
}
BusinessLevelsList& BusinessLevelsList::operator=(const BusinessLevelsList& other510) {
  levelCampaignId = other510.levelCampaignId;
  levelIds = other510.levelIds;
  return *this;
}
void BusinessLevelsList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessLevelsList(";
  out << "levelCampaignId=" << to_string(levelCampaignId);
  out << ", " << "levelIds=" << to_string(levelIds);
  out << ")";
}


CastleEventLevelsList::~CastleEventLevelsList() throw() {
}


void CastleEventLevelsList::__set_levelCampaignId(const LevelCampaignID& val) {
  this->levelCampaignId = val;
}

void CastleEventLevelsList::__set_levelIds(const std::vector<LevelID> & val) {
  this->levelIds = val;
}
std::ostream& operator<<(std::ostream& out, const CastleEventLevelsList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CastleEventLevelsList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_levelCampaignId = false;
  bool isset_levelIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelCampaignId);
          isset_levelCampaignId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->levelIds.clear();
            uint32_t _size511;
            ::apache::thrift::protocol::TType _etype514;
            xfer += iprot->readListBegin(_etype514, _size511);
            this->levelIds.resize(_size511);
            uint32_t _i515;
            for (_i515 = 0; _i515 < _size511; ++_i515)
            {
              xfer += iprot->readString(this->levelIds[_i515]);
            }
            xfer += iprot->readListEnd();
          }
          isset_levelIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_levelCampaignId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CastleEventLevelsList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CastleEventLevelsList");

  xfer += oprot->writeFieldBegin("levelCampaignId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->levelCampaignId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->levelIds.size()));
    std::vector<LevelID> ::const_iterator _iter516;
    for (_iter516 = this->levelIds.begin(); _iter516 != this->levelIds.end(); ++_iter516)
    {
      xfer += oprot->writeString((*_iter516));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CastleEventLevelsList &a, CastleEventLevelsList &b) {
  using ::std::swap;
  swap(a.levelCampaignId, b.levelCampaignId);
  swap(a.levelIds, b.levelIds);
}

CastleEventLevelsList::CastleEventLevelsList(const CastleEventLevelsList& other517) {
  levelCampaignId = other517.levelCampaignId;
  levelIds = other517.levelIds;
}
CastleEventLevelsList& CastleEventLevelsList::operator=(const CastleEventLevelsList& other518) {
  levelCampaignId = other518.levelCampaignId;
  levelIds = other518.levelIds;
  return *this;
}
void CastleEventLevelsList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CastleEventLevelsList(";
  out << "levelCampaignId=" << to_string(levelCampaignId);
  out << ", " << "levelIds=" << to_string(levelIds);
  out << ")";
}


CampaignSettings::~CampaignSettings() throw() {
}


void CampaignSettings::__set_starterCampaignId(const LevelCampaignID& val) {
  this->starterCampaignId = val;
}

void CampaignSettings::__set_starterCampaignLengthDays(const int32_t val) {
  this->starterCampaignLengthDays = val;
}

void CampaignSettings::__set_starterCampaignWidgetPrefix(const std::string& val) {
  this->starterCampaignWidgetPrefix = val;
__isset.starterCampaignWidgetPrefix = true;
}
std::ostream& operator<<(std::ostream& out, const CampaignSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CampaignSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_starterCampaignId = false;
  bool isset_starterCampaignLengthDays = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->starterCampaignId);
          isset_starterCampaignId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->starterCampaignLengthDays);
          isset_starterCampaignLengthDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->starterCampaignWidgetPrefix);
          this->__isset.starterCampaignWidgetPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_starterCampaignId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_starterCampaignLengthDays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CampaignSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CampaignSettings");

  xfer += oprot->writeFieldBegin("starterCampaignId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->starterCampaignId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("starterCampaignLengthDays", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->starterCampaignLengthDays);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.starterCampaignWidgetPrefix) {
    xfer += oprot->writeFieldBegin("starterCampaignWidgetPrefix", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->starterCampaignWidgetPrefix);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CampaignSettings &a, CampaignSettings &b) {
  using ::std::swap;
  swap(a.starterCampaignId, b.starterCampaignId);
  swap(a.starterCampaignLengthDays, b.starterCampaignLengthDays);
  swap(a.starterCampaignWidgetPrefix, b.starterCampaignWidgetPrefix);
  swap(a.__isset, b.__isset);
}

CampaignSettings::CampaignSettings(const CampaignSettings& other519) {
  starterCampaignId = other519.starterCampaignId;
  starterCampaignLengthDays = other519.starterCampaignLengthDays;
  starterCampaignWidgetPrefix = other519.starterCampaignWidgetPrefix;
  __isset = other519.__isset;
}
CampaignSettings& CampaignSettings::operator=(const CampaignSettings& other520) {
  starterCampaignId = other520.starterCampaignId;
  starterCampaignLengthDays = other520.starterCampaignLengthDays;
  starterCampaignWidgetPrefix = other520.starterCampaignWidgetPrefix;
  __isset = other520.__isset;
  return *this;
}
void CampaignSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CampaignSettings(";
  out << "starterCampaignId=" << to_string(starterCampaignId);
  out << ", " << "starterCampaignLengthDays=" << to_string(starterCampaignLengthDays);
  out << ", " << "starterCampaignWidgetPrefix="; (__isset.starterCampaignWidgetPrefix ? (out << to_string(starterCampaignWidgetPrefix)) : (out << "<null>"));
  out << ")";
}


FTUESettings::~FTUESettings() throw() {
}


void FTUESettings::__set_donutQuestId(const std::string& val) {
  this->donutQuestId = val;
}

void FTUESettings::__set_sundaeQuestId(const std::string& val) {
  this->sundaeQuestId = val;
}

void FTUESettings::__set_starterEventQuestId(const std::string& val) {
  this->starterEventQuestId = val;
}

void FTUESettings::__set_disableFtue(const bool val) {
  this->disableFtue = val;
}

void FTUESettings::__set_mainShopEntryId(const MainShopEntryID& val) {
  this->mainShopEntryId = val;
}

void FTUESettings::__set_businessBuildingId(const BuildingID& val) {
  this->businessBuildingId = val;
}

void FTUESettings::__set_decoBuildingId(const BuildingID& val) {
  this->decoBuildingId = val;
}

void FTUESettings::__set_evolveDonutStandQuestId(const QuestID& val) {
  this->evolveDonutStandQuestId = val;
}
std::ostream& operator<<(std::ostream& out, const FTUESettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FTUESettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_donutQuestId = false;
  bool isset_sundaeQuestId = false;
  bool isset_starterEventQuestId = false;
  bool isset_disableFtue = false;
  bool isset_mainShopEntryId = false;
  bool isset_businessBuildingId = false;
  bool isset_decoBuildingId = false;
  bool isset_evolveDonutStandQuestId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->donutQuestId);
          isset_donutQuestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sundaeQuestId);
          isset_sundaeQuestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->starterEventQuestId);
          isset_starterEventQuestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disableFtue);
          isset_disableFtue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mainShopEntryId);
          isset_mainShopEntryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessBuildingId);
          isset_businessBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->decoBuildingId);
          isset_decoBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->evolveDonutStandQuestId);
          isset_evolveDonutStandQuestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_donutQuestId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sundaeQuestId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_starterEventQuestId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_disableFtue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mainShopEntryId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_businessBuildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_decoBuildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_evolveDonutStandQuestId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FTUESettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FTUESettings");

  xfer += oprot->writeFieldBegin("donutQuestId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->donutQuestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sundaeQuestId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sundaeQuestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("starterEventQuestId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->starterEventQuestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("disableFtue", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->disableFtue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mainShopEntryId", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->mainShopEntryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessBuildingId", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->businessBuildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decoBuildingId", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->decoBuildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("evolveDonutStandQuestId", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->evolveDonutStandQuestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FTUESettings &a, FTUESettings &b) {
  using ::std::swap;
  swap(a.donutQuestId, b.donutQuestId);
  swap(a.sundaeQuestId, b.sundaeQuestId);
  swap(a.starterEventQuestId, b.starterEventQuestId);
  swap(a.disableFtue, b.disableFtue);
  swap(a.mainShopEntryId, b.mainShopEntryId);
  swap(a.businessBuildingId, b.businessBuildingId);
  swap(a.decoBuildingId, b.decoBuildingId);
  swap(a.evolveDonutStandQuestId, b.evolveDonutStandQuestId);
}

FTUESettings::FTUESettings(const FTUESettings& other521) {
  donutQuestId = other521.donutQuestId;
  sundaeQuestId = other521.sundaeQuestId;
  starterEventQuestId = other521.starterEventQuestId;
  disableFtue = other521.disableFtue;
  mainShopEntryId = other521.mainShopEntryId;
  businessBuildingId = other521.businessBuildingId;
  decoBuildingId = other521.decoBuildingId;
  evolveDonutStandQuestId = other521.evolveDonutStandQuestId;
}
FTUESettings& FTUESettings::operator=(const FTUESettings& other522) {
  donutQuestId = other522.donutQuestId;
  sundaeQuestId = other522.sundaeQuestId;
  starterEventQuestId = other522.starterEventQuestId;
  disableFtue = other522.disableFtue;
  mainShopEntryId = other522.mainShopEntryId;
  businessBuildingId = other522.businessBuildingId;
  decoBuildingId = other522.decoBuildingId;
  evolveDonutStandQuestId = other522.evolveDonutStandQuestId;
  return *this;
}
void FTUESettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FTUESettings(";
  out << "donutQuestId=" << to_string(donutQuestId);
  out << ", " << "sundaeQuestId=" << to_string(sundaeQuestId);
  out << ", " << "starterEventQuestId=" << to_string(starterEventQuestId);
  out << ", " << "disableFtue=" << to_string(disableFtue);
  out << ", " << "mainShopEntryId=" << to_string(mainShopEntryId);
  out << ", " << "businessBuildingId=" << to_string(businessBuildingId);
  out << ", " << "decoBuildingId=" << to_string(decoBuildingId);
  out << ", " << "evolveDonutStandQuestId=" << to_string(evolveDonutStandQuestId);
  out << ")";
}


StartingGameState::~StartingGameState() throw() {
}


void StartingGameState::__set_gems(const int32_t val) {
  this->gems = val;
}

void StartingGameState::__set_gold(const int32_t val) {
  this->gold = val;
}

void StartingGameState::__set_ticket(const int32_t val) {
  this->ticket = val;
}

void StartingGameState::__set_kingdomVersion(const PresetKingdomID& val) {
  this->kingdomVersion = val;
__isset.kingdomVersion = true;
}

void StartingGameState::__set_demoKingdomVersion(const PresetKingdomID& val) {
  this->demoKingdomVersion = val;
__isset.demoKingdomVersion = true;
}

void StartingGameState::__set_demoKingdomZoomDuration(const double val) {
  this->demoKingdomZoomDuration = val;
__isset.demoKingdomZoomDuration = true;
}

void StartingGameState::__set_freeRushOrderBusinessIds(const std::vector<BusinessID> & val) {
  this->freeRushOrderBusinessIds = val;
}

void StartingGameState::__set_freeRushOrderAmounts(const std::vector<int32_t> & val) {
  this->freeRushOrderAmounts = val;
}
std::ostream& operator<<(std::ostream& out, const StartingGameState& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StartingGameState::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gems = false;
  bool isset_gold = false;
  bool isset_ticket = false;
  bool isset_freeRushOrderBusinessIds = false;
  bool isset_freeRushOrderAmounts = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gems);
          isset_gems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gold);
          isset_gold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ticket);
          isset_ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kingdomVersion);
          this->__isset.kingdomVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->demoKingdomVersion);
          this->__isset.demoKingdomVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->demoKingdomZoomDuration);
          this->__isset.demoKingdomZoomDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->freeRushOrderBusinessIds.clear();
            uint32_t _size523;
            ::apache::thrift::protocol::TType _etype526;
            xfer += iprot->readListBegin(_etype526, _size523);
            this->freeRushOrderBusinessIds.resize(_size523);
            uint32_t _i527;
            for (_i527 = 0; _i527 < _size523; ++_i527)
            {
              xfer += iprot->readString(this->freeRushOrderBusinessIds[_i527]);
            }
            xfer += iprot->readListEnd();
          }
          isset_freeRushOrderBusinessIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->freeRushOrderAmounts.clear();
            uint32_t _size528;
            ::apache::thrift::protocol::TType _etype531;
            xfer += iprot->readListBegin(_etype531, _size528);
            this->freeRushOrderAmounts.resize(_size528);
            uint32_t _i532;
            for (_i532 = 0; _i532 < _size528; ++_i532)
            {
              xfer += iprot->readI32(this->freeRushOrderAmounts[_i532]);
            }
            xfer += iprot->readListEnd();
          }
          isset_freeRushOrderAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gems)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gold)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ticket)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_freeRushOrderBusinessIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_freeRushOrderAmounts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StartingGameState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StartingGameState");

  xfer += oprot->writeFieldBegin("gems", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->gems);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gold", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->gold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ticket", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->ticket);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.kingdomVersion) {
    xfer += oprot->writeFieldBegin("kingdomVersion", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->kingdomVersion);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.demoKingdomVersion) {
    xfer += oprot->writeFieldBegin("demoKingdomVersion", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->demoKingdomVersion);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.demoKingdomZoomDuration) {
    xfer += oprot->writeFieldBegin("demoKingdomZoomDuration", ::apache::thrift::protocol::T_DOUBLE, 20);
    xfer += oprot->writeDouble(this->demoKingdomZoomDuration);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("freeRushOrderBusinessIds", ::apache::thrift::protocol::T_LIST, 21);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->freeRushOrderBusinessIds.size()));
    std::vector<BusinessID> ::const_iterator _iter533;
    for (_iter533 = this->freeRushOrderBusinessIds.begin(); _iter533 != this->freeRushOrderBusinessIds.end(); ++_iter533)
    {
      xfer += oprot->writeString((*_iter533));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeRushOrderAmounts", ::apache::thrift::protocol::T_LIST, 22);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->freeRushOrderAmounts.size()));
    std::vector<int32_t> ::const_iterator _iter534;
    for (_iter534 = this->freeRushOrderAmounts.begin(); _iter534 != this->freeRushOrderAmounts.end(); ++_iter534)
    {
      xfer += oprot->writeI32((*_iter534));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StartingGameState &a, StartingGameState &b) {
  using ::std::swap;
  swap(a.gems, b.gems);
  swap(a.gold, b.gold);
  swap(a.ticket, b.ticket);
  swap(a.kingdomVersion, b.kingdomVersion);
  swap(a.demoKingdomVersion, b.demoKingdomVersion);
  swap(a.demoKingdomZoomDuration, b.demoKingdomZoomDuration);
  swap(a.freeRushOrderBusinessIds, b.freeRushOrderBusinessIds);
  swap(a.freeRushOrderAmounts, b.freeRushOrderAmounts);
  swap(a.__isset, b.__isset);
}

StartingGameState::StartingGameState(const StartingGameState& other535) {
  gems = other535.gems;
  gold = other535.gold;
  ticket = other535.ticket;
  kingdomVersion = other535.kingdomVersion;
  demoKingdomVersion = other535.demoKingdomVersion;
  demoKingdomZoomDuration = other535.demoKingdomZoomDuration;
  freeRushOrderBusinessIds = other535.freeRushOrderBusinessIds;
  freeRushOrderAmounts = other535.freeRushOrderAmounts;
  __isset = other535.__isset;
}
StartingGameState& StartingGameState::operator=(const StartingGameState& other536) {
  gems = other536.gems;
  gold = other536.gold;
  ticket = other536.ticket;
  kingdomVersion = other536.kingdomVersion;
  demoKingdomVersion = other536.demoKingdomVersion;
  demoKingdomZoomDuration = other536.demoKingdomZoomDuration;
  freeRushOrderBusinessIds = other536.freeRushOrderBusinessIds;
  freeRushOrderAmounts = other536.freeRushOrderAmounts;
  __isset = other536.__isset;
  return *this;
}
void StartingGameState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StartingGameState(";
  out << "gems=" << to_string(gems);
  out << ", " << "gold=" << to_string(gold);
  out << ", " << "ticket=" << to_string(ticket);
  out << ", " << "kingdomVersion="; (__isset.kingdomVersion ? (out << to_string(kingdomVersion)) : (out << "<null>"));
  out << ", " << "demoKingdomVersion="; (__isset.demoKingdomVersion ? (out << to_string(demoKingdomVersion)) : (out << "<null>"));
  out << ", " << "demoKingdomZoomDuration="; (__isset.demoKingdomZoomDuration ? (out << to_string(demoKingdomZoomDuration)) : (out << "<null>"));
  out << ", " << "freeRushOrderBusinessIds=" << to_string(freeRushOrderBusinessIds);
  out << ", " << "freeRushOrderAmounts=" << to_string(freeRushOrderAmounts);
  out << ")";
}


SocialUnlockReward::~SocialUnlockReward() throw() {
}


void SocialUnlockReward::__set_rewardId(const SocialUnlockRewardID& val) {
  this->rewardId = val;
}

void SocialUnlockReward::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void SocialUnlockReward::__set_currencyAmount(const int32_t val) {
  this->currencyAmount = val;
}
std::ostream& operator<<(std::ostream& out, const SocialUnlockReward& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SocialUnlockReward::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rewardId = false;
  bool isset_currencyId = false;
  bool isset_currencyAmount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardId);
          isset_rewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currencyAmount);
          isset_currencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rewardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SocialUnlockReward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SocialUnlockReward");

  xfer += oprot->writeFieldBegin("rewardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->rewardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyAmount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->currencyAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SocialUnlockReward &a, SocialUnlockReward &b) {
  using ::std::swap;
  swap(a.rewardId, b.rewardId);
  swap(a.currencyId, b.currencyId);
  swap(a.currencyAmount, b.currencyAmount);
}

SocialUnlockReward::SocialUnlockReward(const SocialUnlockReward& other537) {
  rewardId = other537.rewardId;
  currencyId = other537.currencyId;
  currencyAmount = other537.currencyAmount;
}
SocialUnlockReward& SocialUnlockReward::operator=(const SocialUnlockReward& other538) {
  rewardId = other538.rewardId;
  currencyId = other538.currencyId;
  currencyAmount = other538.currencyAmount;
  return *this;
}
void SocialUnlockReward::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SocialUnlockReward(";
  out << "rewardId=" << to_string(rewardId);
  out << ", " << "currencyId=" << to_string(currencyId);
  out << ", " << "currencyAmount=" << to_string(currencyAmount);
  out << ")";
}


BusinessMenuSettings::~BusinessMenuSettings() throw() {
}


void BusinessMenuSettings::__set_getGearGachaGroupId(const GachaGroupID& val) {
  this->getGearGachaGroupId = val;
__isset.getGearGachaGroupId = true;
}

void BusinessMenuSettings::__set_getBusinessGachaGroupId(const GachaGroupID& val) {
  this->getBusinessGachaGroupId = val;
__isset.getBusinessGachaGroupId = true;
}

void BusinessMenuSettings::__set_getGearGachaOfferId(const GachaOfferID& val) {
  this->getGearGachaOfferId = val;
__isset.getGearGachaOfferId = true;
}

void BusinessMenuSettings::__set_getBusinessGachaOfferId(const GachaOfferID& val) {
  this->getBusinessGachaOfferId = val;
__isset.getBusinessGachaOfferId = true;
}

void BusinessMenuSettings::__set_getGearImage(const AssetID& val) {
  this->getGearImage = val;
__isset.getGearImage = true;
}

void BusinessMenuSettings::__set_getGearText(const LocalizedString& val) {
  this->getGearText = val;
__isset.getGearText = true;
}
std::ostream& operator<<(std::ostream& out, const BusinessMenuSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BusinessMenuSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->getGearGachaGroupId);
          this->__isset.getGearGachaGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->getBusinessGachaGroupId);
          this->__isset.getBusinessGachaGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->getGearGachaOfferId);
          this->__isset.getGearGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->getBusinessGachaOfferId);
          this->__isset.getBusinessGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->getGearImage);
          this->__isset.getGearImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->getGearText.read(iprot);
          this->__isset.getGearText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusinessMenuSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessMenuSettings");

  if (this->__isset.getGearGachaGroupId) {
    xfer += oprot->writeFieldBegin("getGearGachaGroupId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->getGearGachaGroupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.getBusinessGachaGroupId) {
    xfer += oprot->writeFieldBegin("getBusinessGachaGroupId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->getBusinessGachaGroupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.getGearGachaOfferId) {
    xfer += oprot->writeFieldBegin("getGearGachaOfferId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->getGearGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.getBusinessGachaOfferId) {
    xfer += oprot->writeFieldBegin("getBusinessGachaOfferId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->getBusinessGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.getGearImage) {
    xfer += oprot->writeFieldBegin("getGearImage", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->getGearImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.getGearText) {
    xfer += oprot->writeFieldBegin("getGearText", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->getGearText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessMenuSettings &a, BusinessMenuSettings &b) {
  using ::std::swap;
  swap(a.getGearGachaGroupId, b.getGearGachaGroupId);
  swap(a.getBusinessGachaGroupId, b.getBusinessGachaGroupId);
  swap(a.getGearGachaOfferId, b.getGearGachaOfferId);
  swap(a.getBusinessGachaOfferId, b.getBusinessGachaOfferId);
  swap(a.getGearImage, b.getGearImage);
  swap(a.getGearText, b.getGearText);
  swap(a.__isset, b.__isset);
}

BusinessMenuSettings::BusinessMenuSettings(const BusinessMenuSettings& other539) {
  getGearGachaGroupId = other539.getGearGachaGroupId;
  getBusinessGachaGroupId = other539.getBusinessGachaGroupId;
  getGearGachaOfferId = other539.getGearGachaOfferId;
  getBusinessGachaOfferId = other539.getBusinessGachaOfferId;
  getGearImage = other539.getGearImage;
  getGearText = other539.getGearText;
  __isset = other539.__isset;
}
BusinessMenuSettings& BusinessMenuSettings::operator=(const BusinessMenuSettings& other540) {
  getGearGachaGroupId = other540.getGearGachaGroupId;
  getBusinessGachaGroupId = other540.getBusinessGachaGroupId;
  getGearGachaOfferId = other540.getGearGachaOfferId;
  getBusinessGachaOfferId = other540.getBusinessGachaOfferId;
  getGearImage = other540.getGearImage;
  getGearText = other540.getGearText;
  __isset = other540.__isset;
  return *this;
}
void BusinessMenuSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessMenuSettings(";
  out << "getGearGachaGroupId="; (__isset.getGearGachaGroupId ? (out << to_string(getGearGachaGroupId)) : (out << "<null>"));
  out << ", " << "getBusinessGachaGroupId="; (__isset.getBusinessGachaGroupId ? (out << to_string(getBusinessGachaGroupId)) : (out << "<null>"));
  out << ", " << "getGearGachaOfferId="; (__isset.getGearGachaOfferId ? (out << to_string(getGearGachaOfferId)) : (out << "<null>"));
  out << ", " << "getBusinessGachaOfferId="; (__isset.getBusinessGachaOfferId ? (out << to_string(getBusinessGachaOfferId)) : (out << "<null>"));
  out << ", " << "getGearImage="; (__isset.getGearImage ? (out << to_string(getGearImage)) : (out << "<null>"));
  out << ", " << "getGearText="; (__isset.getGearText ? (out << to_string(getGearText)) : (out << "<null>"));
  out << ")";
}


Settings::~Settings() throw() {
}


void Settings::__set_numBusinessMaterialSlots(const int32_t val) {
  this->numBusinessMaterialSlots = val;
}

void Settings::__set_staminaCurrencyId(const std::string& val) {
  this->staminaCurrencyId = val;
}

void Settings::__set_goldCurrencyId(const std::string& val) {
  this->goldCurrencyId = val;
}

void Settings::__set_xpStatId(const std::string& val) {
  this->xpStatId = val;
}

void Settings::__set_gemCurrencyId(const std::string& val) {
  this->gemCurrencyId = val;
}

void Settings::__set_maxFriendInvites(const int32_t val) {
  this->maxFriendInvites = val;
}

void Settings::__set_disableFtue(const bool val) {
  this->disableFtue = val;
__isset.disableFtue = true;
}

void Settings::__set_disableBusinessIdleBullets(const bool val) {
  this->disableBusinessIdleBullets = val;
__isset.disableBusinessIdleBullets = true;
}

void Settings::__set_palPointsCurrencyId(const std::string& val) {
  this->palPointsCurrencyId = val;
}

void Settings::__set_disableGoldStopgapMinRank(const int32_t val) {
  this->disableGoldStopgapMinRank = val;
__isset.disableGoldStopgapMinRank = true;
}

void Settings::__set_maxAllowedClockChanges(const int32_t val) {
  this->maxAllowedClockChanges = val;
}

void Settings::__set_maxAllowedClockChangesPeriod(const int32_t val) {
  this->maxAllowedClockChangesPeriod = val;
}

void Settings::__set_refreshMarketOrdersCurrency(const std::string& val) {
  this->refreshMarketOrdersCurrency = val;
}

void Settings::__set_refreshMarketOrdersCost(const int32_t val) {
  this->refreshMarketOrdersCost = val;
}

void Settings::__set_ticketCurrencyId(const std::string& val) {
  this->ticketCurrencyId = val;
}

void Settings::__set_maxRarity(const RarityID val) {
  this->maxRarity = val;
}

void Settings::__set_defaultRegularLevelDotID(const LevelDotID& val) {
  this->defaultRegularLevelDotID = val;
__isset.defaultRegularLevelDotID = true;
}

void Settings::__set_defaultIngredientLevelDotID(const LevelDotID& val) {
  this->defaultIngredientLevelDotID = val;
__isset.defaultIngredientLevelDotID = true;
}

void Settings::__set_defaultCakeBoxLevelDotID(const LevelDotID& val) {
  this->defaultCakeBoxLevelDotID = val;
__isset.defaultCakeBoxLevelDotID = true;
}

void Settings::__set_defaultLevelDotID(const LevelDotID& val) {
  this->defaultLevelDotID = val;
}

void Settings::__set_trackedCurrencies(const std::vector<CurrencyID> & val) {
  this->trackedCurrencies = val;
__isset.trackedCurrencies = true;
}

void Settings::__set_ticketsMinRank(const int32_t val) {
  this->ticketsMinRank = val;
}

void Settings::__set_defaultDimensions(const std::vector<std::string> & val) {
  this->defaultDimensions = val;
}

void Settings::__set_staminaRechargeRate(const int32_t val) {
  this->staminaRechargeRate = val;
}

void Settings::__set_orderBoardSize(const int32_t val) {
  this->orderBoardSize = val;
}

void Settings::__set_kingdomAmbientSounds(const std::vector<std::string> & val) {
  this->kingdomAmbientSounds = val;
__isset.kingdomAmbientSounds = true;
}

void Settings::__set_kingdomAmbientMusic(const std::vector<std::string> & val) {
  this->kingdomAmbientMusic = val;
__isset.kingdomAmbientMusic = true;
}

void Settings::__set_localNotificationTimeSlots(const std::vector<int32_t> & val) {
  this->localNotificationTimeSlots = val;
__isset.localNotificationTimeSlots = true;
}

void Settings::__set_dailyDecoBonusNotificationHour(const int32_t val) {
  this->dailyDecoBonusNotificationHour = val;
__isset.dailyDecoBonusNotificationHour = true;
}

void Settings::__set_dailyDecoBonusNotificationRepeatDays(const int32_t val) {
  this->dailyDecoBonusNotificationRepeatDays = val;
__isset.dailyDecoBonusNotificationRepeatDays = true;
}

void Settings::__set_socialMaxInactiveMinutes(const int32_t val) {
  this->socialMaxInactiveMinutes = val;
__isset.socialMaxInactiveMinutes = true;
}

void Settings::__set_pollIntervalSeconds(const int32_t val) {
  this->pollIntervalSeconds = val;
__isset.pollIntervalSeconds = true;
}

void Settings::__set_socialUnlockRewardId(const SocialUnlockRewardID& val) {
  this->socialUnlockRewardId = val;
__isset.socialUnlockRewardId = true;
}

void Settings::__set_maxKingdomSizeX(const int32_t val) {
  this->maxKingdomSizeX = val;
__isset.maxKingdomSizeX = true;
}

void Settings::__set_maxKingdomSizeY(const int32_t val) {
  this->maxKingdomSizeY = val;
__isset.maxKingdomSizeY = true;
}

void Settings::__set_privacyPolicyURL(const std::string& val) {
  this->privacyPolicyURL = val;
}

void Settings::__set_termsOfUseURL(const std::string& val) {
  this->termsOfUseURL = val;
}

void Settings::__set_legalURL(const std::string& val) {
  this->legalURL = val;
}

void Settings::__set_iOSRateGameURL1(const std::string& val) {
  this->iOSRateGameURL1 = val;
__isset.iOSRateGameURL1 = true;
}

void Settings::__set_iOSRateGameURL2(const std::string& val) {
  this->iOSRateGameURL2 = val;
__isset.iOSRateGameURL2 = true;
}

void Settings::__set_androidRateGameURL1(const std::string& val) {
  this->androidRateGameURL1 = val;
__isset.androidRateGameURL1 = true;
}

void Settings::__set_androidRateGameURL2(const std::string& val) {
  this->androidRateGameURL2 = val;
__isset.androidRateGameURL2 = true;
}

void Settings::__set_feedbackURL(const std::string& val) {
  this->feedbackURL = val;
__isset.feedbackURL = true;
}

void Settings::__set_supportURL(const std::string& val) {
  this->supportURL = val;
__isset.supportURL = true;
}

void Settings::__set_analyticsSchemaId(const int32_t val) {
  this->analyticsSchemaId = val;
__isset.analyticsSchemaId = true;
}

void Settings::__set_centerKingdomEntityId(const int32_t val) {
  this->centerKingdomEntityId = val;
}

void Settings::__set_watchAdCooldown(const int32_t val) {
  this->watchAdCooldown = val;
__isset.watchAdCooldown = true;
}

void Settings::__set_iOSReRateGameBuildNumber(const std::string& val) {
  this->iOSReRateGameBuildNumber = val;
__isset.iOSReRateGameBuildNumber = true;
}

void Settings::__set_androidReRateGameBuildNumber(const std::string& val) {
  this->androidReRateGameBuildNumber = val;
__isset.androidReRateGameBuildNumber = true;
}

void Settings::__set_gachaFtueGachaGroupId(const std::string& val) {
  this->gachaFtueGachaGroupId = val;
__isset.gachaFtueGachaGroupId = true;
}

void Settings::__set_gachaFtueRareGachaGroupId(const std::string& val) {
  this->gachaFtueRareGachaGroupId = val;
__isset.gachaFtueRareGachaGroupId = true;
}

void Settings::__set_recipeIslandFirstRareCakebox(const std::string& val) {
  this->recipeIslandFirstRareCakebox = val;
__isset.recipeIslandFirstRareCakebox = true;
}

void Settings::__set_gachaFtueGachaOfferId(const std::string& val) {
  this->gachaFtueGachaOfferId = val;
__isset.gachaFtueGachaOfferId = true;
}

void Settings::__set_gachaFtueRareGachaOfferId(const std::string& val) {
  this->gachaFtueRareGachaOfferId = val;
__isset.gachaFtueRareGachaOfferId = true;
}

void Settings::__set_socialMenuMinRank(const int32_t val) {
  this->socialMenuMinRank = val;
__isset.socialMenuMinRank = true;
}

void Settings::__set_gachaStoreMinRank(const int32_t val) {
  this->gachaStoreMinRank = val;
__isset.gachaStoreMinRank = true;
}

void Settings::__set_gachaStorePopoverMinLevel(const LevelID& val) {
  this->gachaStorePopoverMinLevel = val;
__isset.gachaStorePopoverMinLevel = true;
}

void Settings::__set_inboxPopoverMinRank(const int32_t val) {
  this->inboxPopoverMinRank = val;
__isset.inboxPopoverMinRank = true;
}

void Settings::__set_gachaBannerDuration(const int32_t val) {
  this->gachaBannerDuration = val;
__isset.gachaBannerDuration = true;
}

void Settings::__set_placedBuildingStatId(const std::string& val) {
  this->placedBuildingStatId = val;
__isset.placedBuildingStatId = true;
}

void Settings::__set_spendGemsFTUETriggerOnObjectiveId(const AchievementID& val) {
  this->spendGemsFTUETriggerOnObjectiveId = val;
__isset.spendGemsFTUETriggerOnObjectiveId = true;
}

void Settings::__set_lockLinearObjectiveProgressionUntilCompleteObjectiveId(const AchievementID& val) {
  this->lockLinearObjectiveProgressionUntilCompleteObjectiveId = val;
__isset.lockLinearObjectiveProgressionUntilCompleteObjectiveId = true;
}

void Settings::__set_playerDisplayMaxLength(const int32_t val) {
  this->playerDisplayMaxLength = val;
__isset.playerDisplayMaxLength = true;
}

void Settings::__set_playerDisplayAllowedCharacters(const std::string& val) {
  this->playerDisplayAllowedCharacters = val;
__isset.playerDisplayAllowedCharacters = true;
}

void Settings::__set_autoPopulatePlayerName(const bool val) {
  this->autoPopulatePlayerName = val;
__isset.autoPopulatePlayerName = true;
}

void Settings::__set_disableGuild(const bool val) {
  this->disableGuild = val;
__isset.disableGuild = true;
}

void Settings::__set_placedBusinessScoreStatId(const std::string& val) {
  this->placedBusinessScoreStatId = val;
__isset.placedBusinessScoreStatId = true;
}

void Settings::__set_earnedCurrencyBonus(const int32_t val) {
  this->earnedCurrencyBonus = val;
__isset.earnedCurrencyBonus = true;
}

void Settings::__set_keyGearGetMoreText(const LocalizedString& val) {
  this->keyGearGetMoreText = val;
__isset.keyGearGetMoreText = true;
}

void Settings::__set_disableEvolveBullet(const bool val) {
  this->disableEvolveBullet = val;
__isset.disableEvolveBullet = true;
}

void Settings::__set_generalStoreId(const StoreID& val) {
  this->generalStoreId = val;
}

void Settings::__set_additionalNpcsWalkingOnKingdom(const std::vector<NpcID> & val) {
  this->additionalNpcsWalkingOnKingdom = val;
__isset.additionalNpcsWalkingOnKingdom = true;
}
std::ostream& operator<<(std::ostream& out, const Settings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Settings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numBusinessMaterialSlots = false;
  bool isset_staminaCurrencyId = false;
  bool isset_goldCurrencyId = false;
  bool isset_xpStatId = false;
  bool isset_gemCurrencyId = false;
  bool isset_maxFriendInvites = false;
  bool isset_palPointsCurrencyId = false;
  bool isset_maxAllowedClockChanges = false;
  bool isset_maxAllowedClockChangesPeriod = false;
  bool isset_refreshMarketOrdersCurrency = false;
  bool isset_refreshMarketOrdersCost = false;
  bool isset_ticketCurrencyId = false;
  bool isset_maxRarity = false;
  bool isset_defaultLevelDotID = false;
  bool isset_ticketsMinRank = false;
  bool isset_defaultDimensions = false;
  bool isset_staminaRechargeRate = false;
  bool isset_orderBoardSize = false;
  bool isset_privacyPolicyURL = false;
  bool isset_termsOfUseURL = false;
  bool isset_legalURL = false;
  bool isset_centerKingdomEntityId = false;
  bool isset_generalStoreId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numBusinessMaterialSlots);
          isset_numBusinessMaterialSlots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->staminaCurrencyId);
          isset_staminaCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->goldCurrencyId);
          isset_goldCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->xpStatId);
          isset_xpStatId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gemCurrencyId);
          isset_gemCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxFriendInvites);
          isset_maxFriendInvites = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disableFtue);
          this->__isset.disableFtue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disableBusinessIdleBullets);
          this->__isset.disableBusinessIdleBullets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->palPointsCurrencyId);
          isset_palPointsCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->disableGoldStopgapMinRank);
          this->__isset.disableGoldStopgapMinRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxAllowedClockChanges);
          isset_maxAllowedClockChanges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxAllowedClockChangesPeriod);
          isset_maxAllowedClockChangesPeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refreshMarketOrdersCurrency);
          isset_refreshMarketOrdersCurrency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->refreshMarketOrdersCost);
          isset_refreshMarketOrdersCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticketCurrencyId);
          isset_ticketCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRarity);
          isset_maxRarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultRegularLevelDotID);
          this->__isset.defaultRegularLevelDotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultIngredientLevelDotID);
          this->__isset.defaultIngredientLevelDotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultCakeBoxLevelDotID);
          this->__isset.defaultCakeBoxLevelDotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultLevelDotID);
          isset_defaultLevelDotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->trackedCurrencies.clear();
            uint32_t _size541;
            ::apache::thrift::protocol::TType _etype544;
            xfer += iprot->readListBegin(_etype544, _size541);
            this->trackedCurrencies.resize(_size541);
            uint32_t _i545;
            for (_i545 = 0; _i545 < _size541; ++_i545)
            {
              xfer += iprot->readString(this->trackedCurrencies[_i545]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.trackedCurrencies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ticketsMinRank);
          isset_ticketsMinRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->defaultDimensions.clear();
            uint32_t _size546;
            ::apache::thrift::protocol::TType _etype549;
            xfer += iprot->readListBegin(_etype549, _size546);
            this->defaultDimensions.resize(_size546);
            uint32_t _i550;
            for (_i550 = 0; _i550 < _size546; ++_i550)
            {
              xfer += iprot->readString(this->defaultDimensions[_i550]);
            }
            xfer += iprot->readListEnd();
          }
          isset_defaultDimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->staminaRechargeRate);
          isset_staminaRechargeRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderBoardSize);
          isset_orderBoardSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->kingdomAmbientSounds.clear();
            uint32_t _size551;
            ::apache::thrift::protocol::TType _etype554;
            xfer += iprot->readListBegin(_etype554, _size551);
            this->kingdomAmbientSounds.resize(_size551);
            uint32_t _i555;
            for (_i555 = 0; _i555 < _size551; ++_i555)
            {
              xfer += iprot->readString(this->kingdomAmbientSounds[_i555]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.kingdomAmbientSounds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->kingdomAmbientMusic.clear();
            uint32_t _size556;
            ::apache::thrift::protocol::TType _etype559;
            xfer += iprot->readListBegin(_etype559, _size556);
            this->kingdomAmbientMusic.resize(_size556);
            uint32_t _i560;
            for (_i560 = 0; _i560 < _size556; ++_i560)
            {
              xfer += iprot->readString(this->kingdomAmbientMusic[_i560]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.kingdomAmbientMusic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->localNotificationTimeSlots.clear();
            uint32_t _size561;
            ::apache::thrift::protocol::TType _etype564;
            xfer += iprot->readListBegin(_etype564, _size561);
            this->localNotificationTimeSlots.resize(_size561);
            uint32_t _i565;
            for (_i565 = 0; _i565 < _size561; ++_i565)
            {
              xfer += iprot->readI32(this->localNotificationTimeSlots[_i565]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.localNotificationTimeSlots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 120:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dailyDecoBonusNotificationHour);
          this->__isset.dailyDecoBonusNotificationHour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 121:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dailyDecoBonusNotificationRepeatDays);
          this->__isset.dailyDecoBonusNotificationRepeatDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 122:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialMaxInactiveMinutes);
          this->__isset.socialMaxInactiveMinutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 123:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pollIntervalSeconds);
          this->__isset.pollIntervalSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 124:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->socialUnlockRewardId);
          this->__isset.socialUnlockRewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 130:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxKingdomSizeX);
          this->__isset.maxKingdomSizeX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 131:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxKingdomSizeY);
          this->__isset.maxKingdomSizeY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 140:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->privacyPolicyURL);
          isset_privacyPolicyURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 141:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->termsOfUseURL);
          isset_termsOfUseURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 142:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->legalURL);
          isset_legalURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 143:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iOSRateGameURL1);
          this->__isset.iOSRateGameURL1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 144:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iOSRateGameURL2);
          this->__isset.iOSRateGameURL2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 145:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->androidRateGameURL1);
          this->__isset.androidRateGameURL1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 146:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->androidRateGameURL2);
          this->__isset.androidRateGameURL2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 147:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->feedbackURL);
          this->__isset.feedbackURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 148:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->supportURL);
          this->__isset.supportURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 150:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->analyticsSchemaId);
          this->__isset.analyticsSchemaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 160:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->centerKingdomEntityId);
          isset_centerKingdomEntityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 170:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->watchAdCooldown);
          this->__isset.watchAdCooldown = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 180:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iOSReRateGameBuildNumber);
          this->__isset.iOSReRateGameBuildNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 181:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->androidReRateGameBuildNumber);
          this->__isset.androidReRateGameBuildNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 190:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaFtueGachaGroupId);
          this->__isset.gachaFtueGachaGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 191:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaFtueRareGachaGroupId);
          this->__isset.gachaFtueRareGachaGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 192:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recipeIslandFirstRareCakebox);
          this->__isset.recipeIslandFirstRareCakebox = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 193:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaFtueGachaOfferId);
          this->__isset.gachaFtueGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 194:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaFtueRareGachaOfferId);
          this->__isset.gachaFtueRareGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialMenuMinRank);
          this->__isset.socialMenuMinRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 201:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gachaStoreMinRank);
          this->__isset.gachaStoreMinRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 202:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaStorePopoverMinLevel);
          this->__isset.gachaStorePopoverMinLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 203:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->inboxPopoverMinRank);
          this->__isset.inboxPopoverMinRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 210:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gachaBannerDuration);
          this->__isset.gachaBannerDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 211:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->placedBuildingStatId);
          this->__isset.placedBuildingStatId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 212:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spendGemsFTUETriggerOnObjectiveId);
          this->__isset.spendGemsFTUETriggerOnObjectiveId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 213:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lockLinearObjectiveProgressionUntilCompleteObjectiveId);
          this->__isset.lockLinearObjectiveProgressionUntilCompleteObjectiveId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 214:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playerDisplayMaxLength);
          this->__isset.playerDisplayMaxLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 215:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->playerDisplayAllowedCharacters);
          this->__isset.playerDisplayAllowedCharacters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 220:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->autoPopulatePlayerName);
          this->__isset.autoPopulatePlayerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 230:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disableGuild);
          this->__isset.disableGuild = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 240:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->placedBusinessScoreStatId);
          this->__isset.placedBusinessScoreStatId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 250:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->earnedCurrencyBonus);
          this->__isset.earnedCurrencyBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 260:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->keyGearGetMoreText.read(iprot);
          this->__isset.keyGearGetMoreText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 261:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disableEvolveBullet);
          this->__isset.disableEvolveBullet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 262:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->generalStoreId);
          isset_generalStoreId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 263:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->additionalNpcsWalkingOnKingdom.clear();
            uint32_t _size566;
            ::apache::thrift::protocol::TType _etype569;
            xfer += iprot->readListBegin(_etype569, _size566);
            this->additionalNpcsWalkingOnKingdom.resize(_size566);
            uint32_t _i570;
            for (_i570 = 0; _i570 < _size566; ++_i570)
            {
              xfer += iprot->readString(this->additionalNpcsWalkingOnKingdom[_i570]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.additionalNpcsWalkingOnKingdom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numBusinessMaterialSlots)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_staminaCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goldCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_xpStatId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gemCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxFriendInvites)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_palPointsCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxAllowedClockChanges)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxAllowedClockChangesPeriod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_refreshMarketOrdersCurrency)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_refreshMarketOrdersCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ticketCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxRarity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_defaultLevelDotID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ticketsMinRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_defaultDimensions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_staminaRechargeRate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_orderBoardSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_privacyPolicyURL)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_termsOfUseURL)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_legalURL)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_centerKingdomEntityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_generalStoreId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Settings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Settings");

  xfer += oprot->writeFieldBegin("numBusinessMaterialSlots", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->numBusinessMaterialSlots);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("staminaCurrencyId", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->staminaCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goldCurrencyId", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->goldCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xpStatId", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->xpStatId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gemCurrencyId", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->gemCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxFriendInvites", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->maxFriendInvites);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.disableFtue) {
    xfer += oprot->writeFieldBegin("disableFtue", ::apache::thrift::protocol::T_BOOL, 18);
    xfer += oprot->writeBool(this->disableFtue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disableBusinessIdleBullets) {
    xfer += oprot->writeFieldBegin("disableBusinessIdleBullets", ::apache::thrift::protocol::T_BOOL, 19);
    xfer += oprot->writeBool(this->disableBusinessIdleBullets);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("palPointsCurrencyId", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->palPointsCurrencyId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.disableGoldStopgapMinRank) {
    xfer += oprot->writeFieldBegin("disableGoldStopgapMinRank", ::apache::thrift::protocol::T_I32, 21);
    xfer += oprot->writeI32(this->disableGoldStopgapMinRank);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("maxAllowedClockChanges", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->maxAllowedClockChanges);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxAllowedClockChangesPeriod", ::apache::thrift::protocol::T_I32, 27);
  xfer += oprot->writeI32(this->maxAllowedClockChangesPeriod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refreshMarketOrdersCurrency", ::apache::thrift::protocol::T_STRING, 28);
  xfer += oprot->writeString(this->refreshMarketOrdersCurrency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refreshMarketOrdersCost", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32(this->refreshMarketOrdersCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ticketCurrencyId", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->ticketCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRarity", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32(this->maxRarity);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.defaultRegularLevelDotID) {
    xfer += oprot->writeFieldBegin("defaultRegularLevelDotID", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->defaultRegularLevelDotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultIngredientLevelDotID) {
    xfer += oprot->writeFieldBegin("defaultIngredientLevelDotID", ::apache::thrift::protocol::T_STRING, 42);
    xfer += oprot->writeString(this->defaultIngredientLevelDotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultCakeBoxLevelDotID) {
    xfer += oprot->writeFieldBegin("defaultCakeBoxLevelDotID", ::apache::thrift::protocol::T_STRING, 43);
    xfer += oprot->writeString(this->defaultCakeBoxLevelDotID);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("defaultLevelDotID", ::apache::thrift::protocol::T_STRING, 44);
  xfer += oprot->writeString(this->defaultLevelDotID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.trackedCurrencies) {
    xfer += oprot->writeFieldBegin("trackedCurrencies", ::apache::thrift::protocol::T_LIST, 60);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->trackedCurrencies.size()));
      std::vector<CurrencyID> ::const_iterator _iter571;
      for (_iter571 = this->trackedCurrencies.begin(); _iter571 != this->trackedCurrencies.end(); ++_iter571)
      {
        xfer += oprot->writeString((*_iter571));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("ticketsMinRank", ::apache::thrift::protocol::T_I32, 61);
  xfer += oprot->writeI32(this->ticketsMinRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defaultDimensions", ::apache::thrift::protocol::T_LIST, 62);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->defaultDimensions.size()));
    std::vector<std::string> ::const_iterator _iter572;
    for (_iter572 = this->defaultDimensions.begin(); _iter572 != this->defaultDimensions.end(); ++_iter572)
    {
      xfer += oprot->writeString((*_iter572));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("staminaRechargeRate", ::apache::thrift::protocol::T_I32, 70);
  xfer += oprot->writeI32(this->staminaRechargeRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderBoardSize", ::apache::thrift::protocol::T_I32, 80);
  xfer += oprot->writeI32(this->orderBoardSize);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.kingdomAmbientSounds) {
    xfer += oprot->writeFieldBegin("kingdomAmbientSounds", ::apache::thrift::protocol::T_LIST, 100);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->kingdomAmbientSounds.size()));
      std::vector<std::string> ::const_iterator _iter573;
      for (_iter573 = this->kingdomAmbientSounds.begin(); _iter573 != this->kingdomAmbientSounds.end(); ++_iter573)
      {
        xfer += oprot->writeString((*_iter573));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kingdomAmbientMusic) {
    xfer += oprot->writeFieldBegin("kingdomAmbientMusic", ::apache::thrift::protocol::T_LIST, 101);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->kingdomAmbientMusic.size()));
      std::vector<std::string> ::const_iterator _iter574;
      for (_iter574 = this->kingdomAmbientMusic.begin(); _iter574 != this->kingdomAmbientMusic.end(); ++_iter574)
      {
        xfer += oprot->writeString((*_iter574));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localNotificationTimeSlots) {
    xfer += oprot->writeFieldBegin("localNotificationTimeSlots", ::apache::thrift::protocol::T_LIST, 110);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->localNotificationTimeSlots.size()));
      std::vector<int32_t> ::const_iterator _iter575;
      for (_iter575 = this->localNotificationTimeSlots.begin(); _iter575 != this->localNotificationTimeSlots.end(); ++_iter575)
      {
        xfer += oprot->writeI32((*_iter575));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dailyDecoBonusNotificationHour) {
    xfer += oprot->writeFieldBegin("dailyDecoBonusNotificationHour", ::apache::thrift::protocol::T_I32, 120);
    xfer += oprot->writeI32(this->dailyDecoBonusNotificationHour);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dailyDecoBonusNotificationRepeatDays) {
    xfer += oprot->writeFieldBegin("dailyDecoBonusNotificationRepeatDays", ::apache::thrift::protocol::T_I32, 121);
    xfer += oprot->writeI32(this->dailyDecoBonusNotificationRepeatDays);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.socialMaxInactiveMinutes) {
    xfer += oprot->writeFieldBegin("socialMaxInactiveMinutes", ::apache::thrift::protocol::T_I32, 122);
    xfer += oprot->writeI32(this->socialMaxInactiveMinutes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pollIntervalSeconds) {
    xfer += oprot->writeFieldBegin("pollIntervalSeconds", ::apache::thrift::protocol::T_I32, 123);
    xfer += oprot->writeI32(this->pollIntervalSeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.socialUnlockRewardId) {
    xfer += oprot->writeFieldBegin("socialUnlockRewardId", ::apache::thrift::protocol::T_STRING, 124);
    xfer += oprot->writeString(this->socialUnlockRewardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxKingdomSizeX) {
    xfer += oprot->writeFieldBegin("maxKingdomSizeX", ::apache::thrift::protocol::T_I32, 130);
    xfer += oprot->writeI32(this->maxKingdomSizeX);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxKingdomSizeY) {
    xfer += oprot->writeFieldBegin("maxKingdomSizeY", ::apache::thrift::protocol::T_I32, 131);
    xfer += oprot->writeI32(this->maxKingdomSizeY);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("privacyPolicyURL", ::apache::thrift::protocol::T_STRING, 140);
  xfer += oprot->writeString(this->privacyPolicyURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("termsOfUseURL", ::apache::thrift::protocol::T_STRING, 141);
  xfer += oprot->writeString(this->termsOfUseURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("legalURL", ::apache::thrift::protocol::T_STRING, 142);
  xfer += oprot->writeString(this->legalURL);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.iOSRateGameURL1) {
    xfer += oprot->writeFieldBegin("iOSRateGameURL1", ::apache::thrift::protocol::T_STRING, 143);
    xfer += oprot->writeString(this->iOSRateGameURL1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iOSRateGameURL2) {
    xfer += oprot->writeFieldBegin("iOSRateGameURL2", ::apache::thrift::protocol::T_STRING, 144);
    xfer += oprot->writeString(this->iOSRateGameURL2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.androidRateGameURL1) {
    xfer += oprot->writeFieldBegin("androidRateGameURL1", ::apache::thrift::protocol::T_STRING, 145);
    xfer += oprot->writeString(this->androidRateGameURL1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.androidRateGameURL2) {
    xfer += oprot->writeFieldBegin("androidRateGameURL2", ::apache::thrift::protocol::T_STRING, 146);
    xfer += oprot->writeString(this->androidRateGameURL2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.feedbackURL) {
    xfer += oprot->writeFieldBegin("feedbackURL", ::apache::thrift::protocol::T_STRING, 147);
    xfer += oprot->writeString(this->feedbackURL);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.supportURL) {
    xfer += oprot->writeFieldBegin("supportURL", ::apache::thrift::protocol::T_STRING, 148);
    xfer += oprot->writeString(this->supportURL);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.analyticsSchemaId) {
    xfer += oprot->writeFieldBegin("analyticsSchemaId", ::apache::thrift::protocol::T_I32, 150);
    xfer += oprot->writeI32(this->analyticsSchemaId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("centerKingdomEntityId", ::apache::thrift::protocol::T_I32, 160);
  xfer += oprot->writeI32(this->centerKingdomEntityId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.watchAdCooldown) {
    xfer += oprot->writeFieldBegin("watchAdCooldown", ::apache::thrift::protocol::T_I32, 170);
    xfer += oprot->writeI32(this->watchAdCooldown);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iOSReRateGameBuildNumber) {
    xfer += oprot->writeFieldBegin("iOSReRateGameBuildNumber", ::apache::thrift::protocol::T_STRING, 180);
    xfer += oprot->writeString(this->iOSReRateGameBuildNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.androidReRateGameBuildNumber) {
    xfer += oprot->writeFieldBegin("androidReRateGameBuildNumber", ::apache::thrift::protocol::T_STRING, 181);
    xfer += oprot->writeString(this->androidReRateGameBuildNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaFtueGachaGroupId) {
    xfer += oprot->writeFieldBegin("gachaFtueGachaGroupId", ::apache::thrift::protocol::T_STRING, 190);
    xfer += oprot->writeString(this->gachaFtueGachaGroupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaFtueRareGachaGroupId) {
    xfer += oprot->writeFieldBegin("gachaFtueRareGachaGroupId", ::apache::thrift::protocol::T_STRING, 191);
    xfer += oprot->writeString(this->gachaFtueRareGachaGroupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipeIslandFirstRareCakebox) {
    xfer += oprot->writeFieldBegin("recipeIslandFirstRareCakebox", ::apache::thrift::protocol::T_STRING, 192);
    xfer += oprot->writeString(this->recipeIslandFirstRareCakebox);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaFtueGachaOfferId) {
    xfer += oprot->writeFieldBegin("gachaFtueGachaOfferId", ::apache::thrift::protocol::T_STRING, 193);
    xfer += oprot->writeString(this->gachaFtueGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaFtueRareGachaOfferId) {
    xfer += oprot->writeFieldBegin("gachaFtueRareGachaOfferId", ::apache::thrift::protocol::T_STRING, 194);
    xfer += oprot->writeString(this->gachaFtueRareGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.socialMenuMinRank) {
    xfer += oprot->writeFieldBegin("socialMenuMinRank", ::apache::thrift::protocol::T_I32, 200);
    xfer += oprot->writeI32(this->socialMenuMinRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaStoreMinRank) {
    xfer += oprot->writeFieldBegin("gachaStoreMinRank", ::apache::thrift::protocol::T_I32, 201);
    xfer += oprot->writeI32(this->gachaStoreMinRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaStorePopoverMinLevel) {
    xfer += oprot->writeFieldBegin("gachaStorePopoverMinLevel", ::apache::thrift::protocol::T_STRING, 202);
    xfer += oprot->writeString(this->gachaStorePopoverMinLevel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inboxPopoverMinRank) {
    xfer += oprot->writeFieldBegin("inboxPopoverMinRank", ::apache::thrift::protocol::T_I32, 203);
    xfer += oprot->writeI32(this->inboxPopoverMinRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaBannerDuration) {
    xfer += oprot->writeFieldBegin("gachaBannerDuration", ::apache::thrift::protocol::T_I32, 210);
    xfer += oprot->writeI32(this->gachaBannerDuration);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.placedBuildingStatId) {
    xfer += oprot->writeFieldBegin("placedBuildingStatId", ::apache::thrift::protocol::T_STRING, 211);
    xfer += oprot->writeString(this->placedBuildingStatId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spendGemsFTUETriggerOnObjectiveId) {
    xfer += oprot->writeFieldBegin("spendGemsFTUETriggerOnObjectiveId", ::apache::thrift::protocol::T_STRING, 212);
    xfer += oprot->writeString(this->spendGemsFTUETriggerOnObjectiveId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lockLinearObjectiveProgressionUntilCompleteObjectiveId) {
    xfer += oprot->writeFieldBegin("lockLinearObjectiveProgressionUntilCompleteObjectiveId", ::apache::thrift::protocol::T_STRING, 213);
    xfer += oprot->writeString(this->lockLinearObjectiveProgressionUntilCompleteObjectiveId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playerDisplayMaxLength) {
    xfer += oprot->writeFieldBegin("playerDisplayMaxLength", ::apache::thrift::protocol::T_I32, 214);
    xfer += oprot->writeI32(this->playerDisplayMaxLength);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playerDisplayAllowedCharacters) {
    xfer += oprot->writeFieldBegin("playerDisplayAllowedCharacters", ::apache::thrift::protocol::T_STRING, 215);
    xfer += oprot->writeString(this->playerDisplayAllowedCharacters);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.autoPopulatePlayerName) {
    xfer += oprot->writeFieldBegin("autoPopulatePlayerName", ::apache::thrift::protocol::T_BOOL, 220);
    xfer += oprot->writeBool(this->autoPopulatePlayerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disableGuild) {
    xfer += oprot->writeFieldBegin("disableGuild", ::apache::thrift::protocol::T_BOOL, 230);
    xfer += oprot->writeBool(this->disableGuild);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.placedBusinessScoreStatId) {
    xfer += oprot->writeFieldBegin("placedBusinessScoreStatId", ::apache::thrift::protocol::T_STRING, 240);
    xfer += oprot->writeString(this->placedBusinessScoreStatId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.earnedCurrencyBonus) {
    xfer += oprot->writeFieldBegin("earnedCurrencyBonus", ::apache::thrift::protocol::T_I32, 250);
    xfer += oprot->writeI32(this->earnedCurrencyBonus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keyGearGetMoreText) {
    xfer += oprot->writeFieldBegin("keyGearGetMoreText", ::apache::thrift::protocol::T_STRUCT, 260);
    xfer += this->keyGearGetMoreText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disableEvolveBullet) {
    xfer += oprot->writeFieldBegin("disableEvolveBullet", ::apache::thrift::protocol::T_BOOL, 261);
    xfer += oprot->writeBool(this->disableEvolveBullet);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("generalStoreId", ::apache::thrift::protocol::T_STRING, 262);
  xfer += oprot->writeString(this->generalStoreId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.additionalNpcsWalkingOnKingdom) {
    xfer += oprot->writeFieldBegin("additionalNpcsWalkingOnKingdom", ::apache::thrift::protocol::T_LIST, 263);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->additionalNpcsWalkingOnKingdom.size()));
      std::vector<NpcID> ::const_iterator _iter576;
      for (_iter576 = this->additionalNpcsWalkingOnKingdom.begin(); _iter576 != this->additionalNpcsWalkingOnKingdom.end(); ++_iter576)
      {
        xfer += oprot->writeString((*_iter576));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Settings &a, Settings &b) {
  using ::std::swap;
  swap(a.numBusinessMaterialSlots, b.numBusinessMaterialSlots);
  swap(a.staminaCurrencyId, b.staminaCurrencyId);
  swap(a.goldCurrencyId, b.goldCurrencyId);
  swap(a.xpStatId, b.xpStatId);
  swap(a.gemCurrencyId, b.gemCurrencyId);
  swap(a.maxFriendInvites, b.maxFriendInvites);
  swap(a.disableFtue, b.disableFtue);
  swap(a.disableBusinessIdleBullets, b.disableBusinessIdleBullets);
  swap(a.palPointsCurrencyId, b.palPointsCurrencyId);
  swap(a.disableGoldStopgapMinRank, b.disableGoldStopgapMinRank);
  swap(a.maxAllowedClockChanges, b.maxAllowedClockChanges);
  swap(a.maxAllowedClockChangesPeriod, b.maxAllowedClockChangesPeriod);
  swap(a.refreshMarketOrdersCurrency, b.refreshMarketOrdersCurrency);
  swap(a.refreshMarketOrdersCost, b.refreshMarketOrdersCost);
  swap(a.ticketCurrencyId, b.ticketCurrencyId);
  swap(a.maxRarity, b.maxRarity);
  swap(a.defaultRegularLevelDotID, b.defaultRegularLevelDotID);
  swap(a.defaultIngredientLevelDotID, b.defaultIngredientLevelDotID);
  swap(a.defaultCakeBoxLevelDotID, b.defaultCakeBoxLevelDotID);
  swap(a.defaultLevelDotID, b.defaultLevelDotID);
  swap(a.trackedCurrencies, b.trackedCurrencies);
  swap(a.ticketsMinRank, b.ticketsMinRank);
  swap(a.defaultDimensions, b.defaultDimensions);
  swap(a.staminaRechargeRate, b.staminaRechargeRate);
  swap(a.orderBoardSize, b.orderBoardSize);
  swap(a.kingdomAmbientSounds, b.kingdomAmbientSounds);
  swap(a.kingdomAmbientMusic, b.kingdomAmbientMusic);
  swap(a.localNotificationTimeSlots, b.localNotificationTimeSlots);
  swap(a.dailyDecoBonusNotificationHour, b.dailyDecoBonusNotificationHour);
  swap(a.dailyDecoBonusNotificationRepeatDays, b.dailyDecoBonusNotificationRepeatDays);
  swap(a.socialMaxInactiveMinutes, b.socialMaxInactiveMinutes);
  swap(a.pollIntervalSeconds, b.pollIntervalSeconds);
  swap(a.socialUnlockRewardId, b.socialUnlockRewardId);
  swap(a.maxKingdomSizeX, b.maxKingdomSizeX);
  swap(a.maxKingdomSizeY, b.maxKingdomSizeY);
  swap(a.privacyPolicyURL, b.privacyPolicyURL);
  swap(a.termsOfUseURL, b.termsOfUseURL);
  swap(a.legalURL, b.legalURL);
  swap(a.iOSRateGameURL1, b.iOSRateGameURL1);
  swap(a.iOSRateGameURL2, b.iOSRateGameURL2);
  swap(a.androidRateGameURL1, b.androidRateGameURL1);
  swap(a.androidRateGameURL2, b.androidRateGameURL2);
  swap(a.feedbackURL, b.feedbackURL);
  swap(a.supportURL, b.supportURL);
  swap(a.analyticsSchemaId, b.analyticsSchemaId);
  swap(a.centerKingdomEntityId, b.centerKingdomEntityId);
  swap(a.watchAdCooldown, b.watchAdCooldown);
  swap(a.iOSReRateGameBuildNumber, b.iOSReRateGameBuildNumber);
  swap(a.androidReRateGameBuildNumber, b.androidReRateGameBuildNumber);
  swap(a.gachaFtueGachaGroupId, b.gachaFtueGachaGroupId);
  swap(a.gachaFtueRareGachaGroupId, b.gachaFtueRareGachaGroupId);
  swap(a.recipeIslandFirstRareCakebox, b.recipeIslandFirstRareCakebox);
  swap(a.gachaFtueGachaOfferId, b.gachaFtueGachaOfferId);
  swap(a.gachaFtueRareGachaOfferId, b.gachaFtueRareGachaOfferId);
  swap(a.socialMenuMinRank, b.socialMenuMinRank);
  swap(a.gachaStoreMinRank, b.gachaStoreMinRank);
  swap(a.gachaStorePopoverMinLevel, b.gachaStorePopoverMinLevel);
  swap(a.inboxPopoverMinRank, b.inboxPopoverMinRank);
  swap(a.gachaBannerDuration, b.gachaBannerDuration);
  swap(a.placedBuildingStatId, b.placedBuildingStatId);
  swap(a.spendGemsFTUETriggerOnObjectiveId, b.spendGemsFTUETriggerOnObjectiveId);
  swap(a.lockLinearObjectiveProgressionUntilCompleteObjectiveId, b.lockLinearObjectiveProgressionUntilCompleteObjectiveId);
  swap(a.playerDisplayMaxLength, b.playerDisplayMaxLength);
  swap(a.playerDisplayAllowedCharacters, b.playerDisplayAllowedCharacters);
  swap(a.autoPopulatePlayerName, b.autoPopulatePlayerName);
  swap(a.disableGuild, b.disableGuild);
  swap(a.placedBusinessScoreStatId, b.placedBusinessScoreStatId);
  swap(a.earnedCurrencyBonus, b.earnedCurrencyBonus);
  swap(a.keyGearGetMoreText, b.keyGearGetMoreText);
  swap(a.disableEvolveBullet, b.disableEvolveBullet);
  swap(a.generalStoreId, b.generalStoreId);
  swap(a.additionalNpcsWalkingOnKingdom, b.additionalNpcsWalkingOnKingdom);
  swap(a.__isset, b.__isset);
}

Settings::Settings(const Settings& other577) {
  numBusinessMaterialSlots = other577.numBusinessMaterialSlots;
  staminaCurrencyId = other577.staminaCurrencyId;
  goldCurrencyId = other577.goldCurrencyId;
  xpStatId = other577.xpStatId;
  gemCurrencyId = other577.gemCurrencyId;
  maxFriendInvites = other577.maxFriendInvites;
  disableFtue = other577.disableFtue;
  disableBusinessIdleBullets = other577.disableBusinessIdleBullets;
  palPointsCurrencyId = other577.palPointsCurrencyId;
  disableGoldStopgapMinRank = other577.disableGoldStopgapMinRank;
  maxAllowedClockChanges = other577.maxAllowedClockChanges;
  maxAllowedClockChangesPeriod = other577.maxAllowedClockChangesPeriod;
  refreshMarketOrdersCurrency = other577.refreshMarketOrdersCurrency;
  refreshMarketOrdersCost = other577.refreshMarketOrdersCost;
  ticketCurrencyId = other577.ticketCurrencyId;
  maxRarity = other577.maxRarity;
  defaultRegularLevelDotID = other577.defaultRegularLevelDotID;
  defaultIngredientLevelDotID = other577.defaultIngredientLevelDotID;
  defaultCakeBoxLevelDotID = other577.defaultCakeBoxLevelDotID;
  defaultLevelDotID = other577.defaultLevelDotID;
  trackedCurrencies = other577.trackedCurrencies;
  ticketsMinRank = other577.ticketsMinRank;
  defaultDimensions = other577.defaultDimensions;
  staminaRechargeRate = other577.staminaRechargeRate;
  orderBoardSize = other577.orderBoardSize;
  kingdomAmbientSounds = other577.kingdomAmbientSounds;
  kingdomAmbientMusic = other577.kingdomAmbientMusic;
  localNotificationTimeSlots = other577.localNotificationTimeSlots;
  dailyDecoBonusNotificationHour = other577.dailyDecoBonusNotificationHour;
  dailyDecoBonusNotificationRepeatDays = other577.dailyDecoBonusNotificationRepeatDays;
  socialMaxInactiveMinutes = other577.socialMaxInactiveMinutes;
  pollIntervalSeconds = other577.pollIntervalSeconds;
  socialUnlockRewardId = other577.socialUnlockRewardId;
  maxKingdomSizeX = other577.maxKingdomSizeX;
  maxKingdomSizeY = other577.maxKingdomSizeY;
  privacyPolicyURL = other577.privacyPolicyURL;
  termsOfUseURL = other577.termsOfUseURL;
  legalURL = other577.legalURL;
  iOSRateGameURL1 = other577.iOSRateGameURL1;
  iOSRateGameURL2 = other577.iOSRateGameURL2;
  androidRateGameURL1 = other577.androidRateGameURL1;
  androidRateGameURL2 = other577.androidRateGameURL2;
  feedbackURL = other577.feedbackURL;
  supportURL = other577.supportURL;
  analyticsSchemaId = other577.analyticsSchemaId;
  centerKingdomEntityId = other577.centerKingdomEntityId;
  watchAdCooldown = other577.watchAdCooldown;
  iOSReRateGameBuildNumber = other577.iOSReRateGameBuildNumber;
  androidReRateGameBuildNumber = other577.androidReRateGameBuildNumber;
  gachaFtueGachaGroupId = other577.gachaFtueGachaGroupId;
  gachaFtueRareGachaGroupId = other577.gachaFtueRareGachaGroupId;
  recipeIslandFirstRareCakebox = other577.recipeIslandFirstRareCakebox;
  gachaFtueGachaOfferId = other577.gachaFtueGachaOfferId;
  gachaFtueRareGachaOfferId = other577.gachaFtueRareGachaOfferId;
  socialMenuMinRank = other577.socialMenuMinRank;
  gachaStoreMinRank = other577.gachaStoreMinRank;
  gachaStorePopoverMinLevel = other577.gachaStorePopoverMinLevel;
  inboxPopoverMinRank = other577.inboxPopoverMinRank;
  gachaBannerDuration = other577.gachaBannerDuration;
  placedBuildingStatId = other577.placedBuildingStatId;
  spendGemsFTUETriggerOnObjectiveId = other577.spendGemsFTUETriggerOnObjectiveId;
  lockLinearObjectiveProgressionUntilCompleteObjectiveId = other577.lockLinearObjectiveProgressionUntilCompleteObjectiveId;
  playerDisplayMaxLength = other577.playerDisplayMaxLength;
  playerDisplayAllowedCharacters = other577.playerDisplayAllowedCharacters;
  autoPopulatePlayerName = other577.autoPopulatePlayerName;
  disableGuild = other577.disableGuild;
  placedBusinessScoreStatId = other577.placedBusinessScoreStatId;
  earnedCurrencyBonus = other577.earnedCurrencyBonus;
  keyGearGetMoreText = other577.keyGearGetMoreText;
  disableEvolveBullet = other577.disableEvolveBullet;
  generalStoreId = other577.generalStoreId;
  additionalNpcsWalkingOnKingdom = other577.additionalNpcsWalkingOnKingdom;
  __isset = other577.__isset;
}
Settings& Settings::operator=(const Settings& other578) {
  numBusinessMaterialSlots = other578.numBusinessMaterialSlots;
  staminaCurrencyId = other578.staminaCurrencyId;
  goldCurrencyId = other578.goldCurrencyId;
  xpStatId = other578.xpStatId;
  gemCurrencyId = other578.gemCurrencyId;
  maxFriendInvites = other578.maxFriendInvites;
  disableFtue = other578.disableFtue;
  disableBusinessIdleBullets = other578.disableBusinessIdleBullets;
  palPointsCurrencyId = other578.palPointsCurrencyId;
  disableGoldStopgapMinRank = other578.disableGoldStopgapMinRank;
  maxAllowedClockChanges = other578.maxAllowedClockChanges;
  maxAllowedClockChangesPeriod = other578.maxAllowedClockChangesPeriod;
  refreshMarketOrdersCurrency = other578.refreshMarketOrdersCurrency;
  refreshMarketOrdersCost = other578.refreshMarketOrdersCost;
  ticketCurrencyId = other578.ticketCurrencyId;
  maxRarity = other578.maxRarity;
  defaultRegularLevelDotID = other578.defaultRegularLevelDotID;
  defaultIngredientLevelDotID = other578.defaultIngredientLevelDotID;
  defaultCakeBoxLevelDotID = other578.defaultCakeBoxLevelDotID;
  defaultLevelDotID = other578.defaultLevelDotID;
  trackedCurrencies = other578.trackedCurrencies;
  ticketsMinRank = other578.ticketsMinRank;
  defaultDimensions = other578.defaultDimensions;
  staminaRechargeRate = other578.staminaRechargeRate;
  orderBoardSize = other578.orderBoardSize;
  kingdomAmbientSounds = other578.kingdomAmbientSounds;
  kingdomAmbientMusic = other578.kingdomAmbientMusic;
  localNotificationTimeSlots = other578.localNotificationTimeSlots;
  dailyDecoBonusNotificationHour = other578.dailyDecoBonusNotificationHour;
  dailyDecoBonusNotificationRepeatDays = other578.dailyDecoBonusNotificationRepeatDays;
  socialMaxInactiveMinutes = other578.socialMaxInactiveMinutes;
  pollIntervalSeconds = other578.pollIntervalSeconds;
  socialUnlockRewardId = other578.socialUnlockRewardId;
  maxKingdomSizeX = other578.maxKingdomSizeX;
  maxKingdomSizeY = other578.maxKingdomSizeY;
  privacyPolicyURL = other578.privacyPolicyURL;
  termsOfUseURL = other578.termsOfUseURL;
  legalURL = other578.legalURL;
  iOSRateGameURL1 = other578.iOSRateGameURL1;
  iOSRateGameURL2 = other578.iOSRateGameURL2;
  androidRateGameURL1 = other578.androidRateGameURL1;
  androidRateGameURL2 = other578.androidRateGameURL2;
  feedbackURL = other578.feedbackURL;
  supportURL = other578.supportURL;
  analyticsSchemaId = other578.analyticsSchemaId;
  centerKingdomEntityId = other578.centerKingdomEntityId;
  watchAdCooldown = other578.watchAdCooldown;
  iOSReRateGameBuildNumber = other578.iOSReRateGameBuildNumber;
  androidReRateGameBuildNumber = other578.androidReRateGameBuildNumber;
  gachaFtueGachaGroupId = other578.gachaFtueGachaGroupId;
  gachaFtueRareGachaGroupId = other578.gachaFtueRareGachaGroupId;
  recipeIslandFirstRareCakebox = other578.recipeIslandFirstRareCakebox;
  gachaFtueGachaOfferId = other578.gachaFtueGachaOfferId;
  gachaFtueRareGachaOfferId = other578.gachaFtueRareGachaOfferId;
  socialMenuMinRank = other578.socialMenuMinRank;
  gachaStoreMinRank = other578.gachaStoreMinRank;
  gachaStorePopoverMinLevel = other578.gachaStorePopoverMinLevel;
  inboxPopoverMinRank = other578.inboxPopoverMinRank;
  gachaBannerDuration = other578.gachaBannerDuration;
  placedBuildingStatId = other578.placedBuildingStatId;
  spendGemsFTUETriggerOnObjectiveId = other578.spendGemsFTUETriggerOnObjectiveId;
  lockLinearObjectiveProgressionUntilCompleteObjectiveId = other578.lockLinearObjectiveProgressionUntilCompleteObjectiveId;
  playerDisplayMaxLength = other578.playerDisplayMaxLength;
  playerDisplayAllowedCharacters = other578.playerDisplayAllowedCharacters;
  autoPopulatePlayerName = other578.autoPopulatePlayerName;
  disableGuild = other578.disableGuild;
  placedBusinessScoreStatId = other578.placedBusinessScoreStatId;
  earnedCurrencyBonus = other578.earnedCurrencyBonus;
  keyGearGetMoreText = other578.keyGearGetMoreText;
  disableEvolveBullet = other578.disableEvolveBullet;
  generalStoreId = other578.generalStoreId;
  additionalNpcsWalkingOnKingdom = other578.additionalNpcsWalkingOnKingdom;
  __isset = other578.__isset;
  return *this;
}
void Settings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Settings(";
  out << "numBusinessMaterialSlots=" << to_string(numBusinessMaterialSlots);
  out << ", " << "staminaCurrencyId=" << to_string(staminaCurrencyId);
  out << ", " << "goldCurrencyId=" << to_string(goldCurrencyId);
  out << ", " << "xpStatId=" << to_string(xpStatId);
  out << ", " << "gemCurrencyId=" << to_string(gemCurrencyId);
  out << ", " << "maxFriendInvites=" << to_string(maxFriendInvites);
  out << ", " << "disableFtue="; (__isset.disableFtue ? (out << to_string(disableFtue)) : (out << "<null>"));
  out << ", " << "disableBusinessIdleBullets="; (__isset.disableBusinessIdleBullets ? (out << to_string(disableBusinessIdleBullets)) : (out << "<null>"));
  out << ", " << "palPointsCurrencyId=" << to_string(palPointsCurrencyId);
  out << ", " << "disableGoldStopgapMinRank="; (__isset.disableGoldStopgapMinRank ? (out << to_string(disableGoldStopgapMinRank)) : (out << "<null>"));
  out << ", " << "maxAllowedClockChanges=" << to_string(maxAllowedClockChanges);
  out << ", " << "maxAllowedClockChangesPeriod=" << to_string(maxAllowedClockChangesPeriod);
  out << ", " << "refreshMarketOrdersCurrency=" << to_string(refreshMarketOrdersCurrency);
  out << ", " << "refreshMarketOrdersCost=" << to_string(refreshMarketOrdersCost);
  out << ", " << "ticketCurrencyId=" << to_string(ticketCurrencyId);
  out << ", " << "maxRarity=" << to_string(maxRarity);
  out << ", " << "defaultRegularLevelDotID="; (__isset.defaultRegularLevelDotID ? (out << to_string(defaultRegularLevelDotID)) : (out << "<null>"));
  out << ", " << "defaultIngredientLevelDotID="; (__isset.defaultIngredientLevelDotID ? (out << to_string(defaultIngredientLevelDotID)) : (out << "<null>"));
  out << ", " << "defaultCakeBoxLevelDotID="; (__isset.defaultCakeBoxLevelDotID ? (out << to_string(defaultCakeBoxLevelDotID)) : (out << "<null>"));
  out << ", " << "defaultLevelDotID=" << to_string(defaultLevelDotID);
  out << ", " << "trackedCurrencies="; (__isset.trackedCurrencies ? (out << to_string(trackedCurrencies)) : (out << "<null>"));
  out << ", " << "ticketsMinRank=" << to_string(ticketsMinRank);
  out << ", " << "defaultDimensions=" << to_string(defaultDimensions);
  out << ", " << "staminaRechargeRate=" << to_string(staminaRechargeRate);
  out << ", " << "orderBoardSize=" << to_string(orderBoardSize);
  out << ", " << "kingdomAmbientSounds="; (__isset.kingdomAmbientSounds ? (out << to_string(kingdomAmbientSounds)) : (out << "<null>"));
  out << ", " << "kingdomAmbientMusic="; (__isset.kingdomAmbientMusic ? (out << to_string(kingdomAmbientMusic)) : (out << "<null>"));
  out << ", " << "localNotificationTimeSlots="; (__isset.localNotificationTimeSlots ? (out << to_string(localNotificationTimeSlots)) : (out << "<null>"));
  out << ", " << "dailyDecoBonusNotificationHour="; (__isset.dailyDecoBonusNotificationHour ? (out << to_string(dailyDecoBonusNotificationHour)) : (out << "<null>"));
  out << ", " << "dailyDecoBonusNotificationRepeatDays="; (__isset.dailyDecoBonusNotificationRepeatDays ? (out << to_string(dailyDecoBonusNotificationRepeatDays)) : (out << "<null>"));
  out << ", " << "socialMaxInactiveMinutes="; (__isset.socialMaxInactiveMinutes ? (out << to_string(socialMaxInactiveMinutes)) : (out << "<null>"));
  out << ", " << "pollIntervalSeconds="; (__isset.pollIntervalSeconds ? (out << to_string(pollIntervalSeconds)) : (out << "<null>"));
  out << ", " << "socialUnlockRewardId="; (__isset.socialUnlockRewardId ? (out << to_string(socialUnlockRewardId)) : (out << "<null>"));
  out << ", " << "maxKingdomSizeX="; (__isset.maxKingdomSizeX ? (out << to_string(maxKingdomSizeX)) : (out << "<null>"));
  out << ", " << "maxKingdomSizeY="; (__isset.maxKingdomSizeY ? (out << to_string(maxKingdomSizeY)) : (out << "<null>"));
  out << ", " << "privacyPolicyURL=" << to_string(privacyPolicyURL);
  out << ", " << "termsOfUseURL=" << to_string(termsOfUseURL);
  out << ", " << "legalURL=" << to_string(legalURL);
  out << ", " << "iOSRateGameURL1="; (__isset.iOSRateGameURL1 ? (out << to_string(iOSRateGameURL1)) : (out << "<null>"));
  out << ", " << "iOSRateGameURL2="; (__isset.iOSRateGameURL2 ? (out << to_string(iOSRateGameURL2)) : (out << "<null>"));
  out << ", " << "androidRateGameURL1="; (__isset.androidRateGameURL1 ? (out << to_string(androidRateGameURL1)) : (out << "<null>"));
  out << ", " << "androidRateGameURL2="; (__isset.androidRateGameURL2 ? (out << to_string(androidRateGameURL2)) : (out << "<null>"));
  out << ", " << "feedbackURL="; (__isset.feedbackURL ? (out << to_string(feedbackURL)) : (out << "<null>"));
  out << ", " << "supportURL="; (__isset.supportURL ? (out << to_string(supportURL)) : (out << "<null>"));
  out << ", " << "analyticsSchemaId="; (__isset.analyticsSchemaId ? (out << to_string(analyticsSchemaId)) : (out << "<null>"));
  out << ", " << "centerKingdomEntityId=" << to_string(centerKingdomEntityId);
  out << ", " << "watchAdCooldown="; (__isset.watchAdCooldown ? (out << to_string(watchAdCooldown)) : (out << "<null>"));
  out << ", " << "iOSReRateGameBuildNumber="; (__isset.iOSReRateGameBuildNumber ? (out << to_string(iOSReRateGameBuildNumber)) : (out << "<null>"));
  out << ", " << "androidReRateGameBuildNumber="; (__isset.androidReRateGameBuildNumber ? (out << to_string(androidReRateGameBuildNumber)) : (out << "<null>"));
  out << ", " << "gachaFtueGachaGroupId="; (__isset.gachaFtueGachaGroupId ? (out << to_string(gachaFtueGachaGroupId)) : (out << "<null>"));
  out << ", " << "gachaFtueRareGachaGroupId="; (__isset.gachaFtueRareGachaGroupId ? (out << to_string(gachaFtueRareGachaGroupId)) : (out << "<null>"));
  out << ", " << "recipeIslandFirstRareCakebox="; (__isset.recipeIslandFirstRareCakebox ? (out << to_string(recipeIslandFirstRareCakebox)) : (out << "<null>"));
  out << ", " << "gachaFtueGachaOfferId="; (__isset.gachaFtueGachaOfferId ? (out << to_string(gachaFtueGachaOfferId)) : (out << "<null>"));
  out << ", " << "gachaFtueRareGachaOfferId="; (__isset.gachaFtueRareGachaOfferId ? (out << to_string(gachaFtueRareGachaOfferId)) : (out << "<null>"));
  out << ", " << "socialMenuMinRank="; (__isset.socialMenuMinRank ? (out << to_string(socialMenuMinRank)) : (out << "<null>"));
  out << ", " << "gachaStoreMinRank="; (__isset.gachaStoreMinRank ? (out << to_string(gachaStoreMinRank)) : (out << "<null>"));
  out << ", " << "gachaStorePopoverMinLevel="; (__isset.gachaStorePopoverMinLevel ? (out << to_string(gachaStorePopoverMinLevel)) : (out << "<null>"));
  out << ", " << "inboxPopoverMinRank="; (__isset.inboxPopoverMinRank ? (out << to_string(inboxPopoverMinRank)) : (out << "<null>"));
  out << ", " << "gachaBannerDuration="; (__isset.gachaBannerDuration ? (out << to_string(gachaBannerDuration)) : (out << "<null>"));
  out << ", " << "placedBuildingStatId="; (__isset.placedBuildingStatId ? (out << to_string(placedBuildingStatId)) : (out << "<null>"));
  out << ", " << "spendGemsFTUETriggerOnObjectiveId="; (__isset.spendGemsFTUETriggerOnObjectiveId ? (out << to_string(spendGemsFTUETriggerOnObjectiveId)) : (out << "<null>"));
  out << ", " << "lockLinearObjectiveProgressionUntilCompleteObjectiveId="; (__isset.lockLinearObjectiveProgressionUntilCompleteObjectiveId ? (out << to_string(lockLinearObjectiveProgressionUntilCompleteObjectiveId)) : (out << "<null>"));
  out << ", " << "playerDisplayMaxLength="; (__isset.playerDisplayMaxLength ? (out << to_string(playerDisplayMaxLength)) : (out << "<null>"));
  out << ", " << "playerDisplayAllowedCharacters="; (__isset.playerDisplayAllowedCharacters ? (out << to_string(playerDisplayAllowedCharacters)) : (out << "<null>"));
  out << ", " << "autoPopulatePlayerName="; (__isset.autoPopulatePlayerName ? (out << to_string(autoPopulatePlayerName)) : (out << "<null>"));
  out << ", " << "disableGuild="; (__isset.disableGuild ? (out << to_string(disableGuild)) : (out << "<null>"));
  out << ", " << "placedBusinessScoreStatId="; (__isset.placedBusinessScoreStatId ? (out << to_string(placedBusinessScoreStatId)) : (out << "<null>"));
  out << ", " << "earnedCurrencyBonus="; (__isset.earnedCurrencyBonus ? (out << to_string(earnedCurrencyBonus)) : (out << "<null>"));
  out << ", " << "keyGearGetMoreText="; (__isset.keyGearGetMoreText ? (out << to_string(keyGearGetMoreText)) : (out << "<null>"));
  out << ", " << "disableEvolveBullet="; (__isset.disableEvolveBullet ? (out << to_string(disableEvolveBullet)) : (out << "<null>"));
  out << ", " << "generalStoreId=" << to_string(generalStoreId);
  out << ", " << "additionalNpcsWalkingOnKingdom="; (__isset.additionalNpcsWalkingOnKingdom ? (out << to_string(additionalNpcsWalkingOnKingdom)) : (out << "<null>"));
  out << ")";
}


PollSettings::~PollSettings() throw() {
}


void PollSettings::__set_kingomIntervalSeconds(const int32_t val) {
  this->kingomIntervalSeconds = val;
}

void PollSettings::__set_eventIntervalSeconds(const int32_t val) {
  this->eventIntervalSeconds = val;
}

void PollSettings::__set_gachaIntervalSeconds(const int32_t val) {
  this->gachaIntervalSeconds = val;
}

void PollSettings::__set_guildIntervalSeconds(const int32_t val) {
  this->guildIntervalSeconds = val;
}

void PollSettings::__set_guildChatIntervalSeconds(const int32_t val) {
  this->guildChatIntervalSeconds = val;
}

void PollSettings::__set_inboxIntervalSeconds(const int32_t val) {
  this->inboxIntervalSeconds = val;
}

void PollSettings::__set_questMenuIntervalSeconds(const int32_t val) {
  this->questMenuIntervalSeconds = val;
}
std::ostream& operator<<(std::ostream& out, const PollSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PollSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_kingomIntervalSeconds = false;
  bool isset_eventIntervalSeconds = false;
  bool isset_gachaIntervalSeconds = false;
  bool isset_guildIntervalSeconds = false;
  bool isset_guildChatIntervalSeconds = false;
  bool isset_inboxIntervalSeconds = false;
  bool isset_questMenuIntervalSeconds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->kingomIntervalSeconds);
          isset_kingomIntervalSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventIntervalSeconds);
          isset_eventIntervalSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gachaIntervalSeconds);
          isset_gachaIntervalSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guildIntervalSeconds);
          isset_guildIntervalSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guildChatIntervalSeconds);
          isset_guildChatIntervalSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->inboxIntervalSeconds);
          isset_inboxIntervalSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->questMenuIntervalSeconds);
          isset_questMenuIntervalSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_kingomIntervalSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIntervalSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaIntervalSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildIntervalSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildChatIntervalSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inboxIntervalSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questMenuIntervalSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PollSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PollSettings");

  xfer += oprot->writeFieldBegin("kingomIntervalSeconds", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->kingomIntervalSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIntervalSeconds", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->eventIntervalSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaIntervalSeconds", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->gachaIntervalSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildIntervalSeconds", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->guildIntervalSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildChatIntervalSeconds", ::apache::thrift::protocol::T_I32, 41);
  xfer += oprot->writeI32(this->guildChatIntervalSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inboxIntervalSeconds", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32(this->inboxIntervalSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questMenuIntervalSeconds", ::apache::thrift::protocol::T_I32, 60);
  xfer += oprot->writeI32(this->questMenuIntervalSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PollSettings &a, PollSettings &b) {
  using ::std::swap;
  swap(a.kingomIntervalSeconds, b.kingomIntervalSeconds);
  swap(a.eventIntervalSeconds, b.eventIntervalSeconds);
  swap(a.gachaIntervalSeconds, b.gachaIntervalSeconds);
  swap(a.guildIntervalSeconds, b.guildIntervalSeconds);
  swap(a.guildChatIntervalSeconds, b.guildChatIntervalSeconds);
  swap(a.inboxIntervalSeconds, b.inboxIntervalSeconds);
  swap(a.questMenuIntervalSeconds, b.questMenuIntervalSeconds);
}

PollSettings::PollSettings(const PollSettings& other579) {
  kingomIntervalSeconds = other579.kingomIntervalSeconds;
  eventIntervalSeconds = other579.eventIntervalSeconds;
  gachaIntervalSeconds = other579.gachaIntervalSeconds;
  guildIntervalSeconds = other579.guildIntervalSeconds;
  guildChatIntervalSeconds = other579.guildChatIntervalSeconds;
  inboxIntervalSeconds = other579.inboxIntervalSeconds;
  questMenuIntervalSeconds = other579.questMenuIntervalSeconds;
}
PollSettings& PollSettings::operator=(const PollSettings& other580) {
  kingomIntervalSeconds = other580.kingomIntervalSeconds;
  eventIntervalSeconds = other580.eventIntervalSeconds;
  gachaIntervalSeconds = other580.gachaIntervalSeconds;
  guildIntervalSeconds = other580.guildIntervalSeconds;
  guildChatIntervalSeconds = other580.guildChatIntervalSeconds;
  inboxIntervalSeconds = other580.inboxIntervalSeconds;
  questMenuIntervalSeconds = other580.questMenuIntervalSeconds;
  return *this;
}
void PollSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PollSettings(";
  out << "kingomIntervalSeconds=" << to_string(kingomIntervalSeconds);
  out << ", " << "eventIntervalSeconds=" << to_string(eventIntervalSeconds);
  out << ", " << "gachaIntervalSeconds=" << to_string(gachaIntervalSeconds);
  out << ", " << "guildIntervalSeconds=" << to_string(guildIntervalSeconds);
  out << ", " << "guildChatIntervalSeconds=" << to_string(guildChatIntervalSeconds);
  out << ", " << "inboxIntervalSeconds=" << to_string(inboxIntervalSeconds);
  out << ", " << "questMenuIntervalSeconds=" << to_string(questMenuIntervalSeconds);
  out << ")";
}


HappinessSettings::~HappinessSettings() throw() {
}


void HappinessSettings::__set_happinessSuperHappy(const int32_t val) {
  this->happinessSuperHappy = val;
__isset.happinessSuperHappy = true;
}

void HappinessSettings::__set_happinessMediumHappy(const int32_t val) {
  this->happinessMediumHappy = val;
__isset.happinessMediumHappy = true;
}

void HappinessSettings::__set_happinessNormal(const int32_t val) {
  this->happinessNormal = val;
__isset.happinessNormal = true;
}
std::ostream& operator<<(std::ostream& out, const HappinessSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HappinessSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->happinessSuperHappy);
          this->__isset.happinessSuperHappy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->happinessMediumHappy);
          this->__isset.happinessMediumHappy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->happinessNormal);
          this->__isset.happinessNormal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HappinessSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HappinessSettings");

  if (this->__isset.happinessSuperHappy) {
    xfer += oprot->writeFieldBegin("happinessSuperHappy", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->happinessSuperHappy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.happinessMediumHappy) {
    xfer += oprot->writeFieldBegin("happinessMediumHappy", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->happinessMediumHappy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.happinessNormal) {
    xfer += oprot->writeFieldBegin("happinessNormal", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->happinessNormal);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HappinessSettings &a, HappinessSettings &b) {
  using ::std::swap;
  swap(a.happinessSuperHappy, b.happinessSuperHappy);
  swap(a.happinessMediumHappy, b.happinessMediumHappy);
  swap(a.happinessNormal, b.happinessNormal);
  swap(a.__isset, b.__isset);
}

HappinessSettings::HappinessSettings(const HappinessSettings& other581) {
  happinessSuperHappy = other581.happinessSuperHappy;
  happinessMediumHappy = other581.happinessMediumHappy;
  happinessNormal = other581.happinessNormal;
  __isset = other581.__isset;
}
HappinessSettings& HappinessSettings::operator=(const HappinessSettings& other582) {
  happinessSuperHappy = other582.happinessSuperHappy;
  happinessMediumHappy = other582.happinessMediumHappy;
  happinessNormal = other582.happinessNormal;
  __isset = other582.__isset;
  return *this;
}
void HappinessSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HappinessSettings(";
  out << "happinessSuperHappy="; (__isset.happinessSuperHappy ? (out << to_string(happinessSuperHappy)) : (out << "<null>"));
  out << ", " << "happinessMediumHappy="; (__isset.happinessMediumHappy ? (out << to_string(happinessMediumHappy)) : (out << "<null>"));
  out << ", " << "happinessNormal="; (__isset.happinessNormal ? (out << to_string(happinessNormal)) : (out << "<null>"));
  out << ")";
}


LevelBlob::~LevelBlob() throw() {
}


void LevelBlob::__set_blobId(const BlobID& val) {
  this->blobId = val;
}

void LevelBlob::__set_keyValuePairs(const std::map<std::string, std::string> & val) {
  this->keyValuePairs = val;
}
std::ostream& operator<<(std::ostream& out, const LevelBlob& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LevelBlob::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_blobId = false;
  bool isset_keyValuePairs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blobId);
          isset_blobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->keyValuePairs.clear();
            uint32_t _size583;
            ::apache::thrift::protocol::TType _ktype584;
            ::apache::thrift::protocol::TType _vtype585;
            xfer += iprot->readMapBegin(_ktype584, _vtype585, _size583);
            uint32_t _i587;
            for (_i587 = 0; _i587 < _size583; ++_i587)
            {
              std::string _key588;
              xfer += iprot->readString(_key588);
              std::string& _val589 = this->keyValuePairs[_key588];
              xfer += iprot->readString(_val589);
            }
            xfer += iprot->readMapEnd();
          }
          isset_keyValuePairs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_blobId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyValuePairs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LevelBlob::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LevelBlob");

  xfer += oprot->writeFieldBegin("blobId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->blobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyValuePairs", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->keyValuePairs.size()));
    std::map<std::string, std::string> ::const_iterator _iter590;
    for (_iter590 = this->keyValuePairs.begin(); _iter590 != this->keyValuePairs.end(); ++_iter590)
    {
      xfer += oprot->writeString(_iter590->first);
      xfer += oprot->writeString(_iter590->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LevelBlob &a, LevelBlob &b) {
  using ::std::swap;
  swap(a.blobId, b.blobId);
  swap(a.keyValuePairs, b.keyValuePairs);
}

LevelBlob::LevelBlob(const LevelBlob& other591) {
  blobId = other591.blobId;
  keyValuePairs = other591.keyValuePairs;
}
LevelBlob& LevelBlob::operator=(const LevelBlob& other592) {
  blobId = other592.blobId;
  keyValuePairs = other592.keyValuePairs;
  return *this;
}
void LevelBlob::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LevelBlob(";
  out << "blobId=" << to_string(blobId);
  out << ", " << "keyValuePairs=" << to_string(keyValuePairs);
  out << ")";
}


ScreenNameMapping::~ScreenNameMapping() throw() {
}


void ScreenNameMapping::__set_luaFilenameOrCustomName(const std::string& val) {
  this->luaFilenameOrCustomName = val;
}

void ScreenNameMapping::__set_analyticsScreenName(const std::string& val) {
  this->analyticsScreenName = val;
}
std::ostream& operator<<(std::ostream& out, const ScreenNameMapping& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ScreenNameMapping::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_luaFilenameOrCustomName = false;
  bool isset_analyticsScreenName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->luaFilenameOrCustomName);
          isset_luaFilenameOrCustomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->analyticsScreenName);
          isset_analyticsScreenName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_luaFilenameOrCustomName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_analyticsScreenName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ScreenNameMapping::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ScreenNameMapping");

  xfer += oprot->writeFieldBegin("luaFilenameOrCustomName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->luaFilenameOrCustomName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyticsScreenName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->analyticsScreenName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ScreenNameMapping &a, ScreenNameMapping &b) {
  using ::std::swap;
  swap(a.luaFilenameOrCustomName, b.luaFilenameOrCustomName);
  swap(a.analyticsScreenName, b.analyticsScreenName);
}

ScreenNameMapping::ScreenNameMapping(const ScreenNameMapping& other593) {
  luaFilenameOrCustomName = other593.luaFilenameOrCustomName;
  analyticsScreenName = other593.analyticsScreenName;
}
ScreenNameMapping& ScreenNameMapping::operator=(const ScreenNameMapping& other594) {
  luaFilenameOrCustomName = other594.luaFilenameOrCustomName;
  analyticsScreenName = other594.analyticsScreenName;
  return *this;
}
void ScreenNameMapping::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScreenNameMapping(";
  out << "luaFilenameOrCustomName=" << to_string(luaFilenameOrCustomName);
  out << ", " << "analyticsScreenName=" << to_string(analyticsScreenName);
  out << ")";
}


Avatar::~Avatar() throw() {
}


void Avatar::__set_avatarId(const AvatarID& val) {
  this->avatarId = val;
}

void Avatar::__set_npcId(const NpcID& val) {
  this->npcId = val;
}

void Avatar::__set_emotionId(const std::string& val) {
  this->emotionId = val;
}

void Avatar::__set_index(const int32_t val) {
  this->index = val;
}

void Avatar::__set_eventMapImage(const std::string& val) {
  this->eventMapImage = val;
__isset.eventMapImage = true;
}
std::ostream& operator<<(std::ostream& out, const Avatar& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Avatar::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_avatarId = false;
  bool isset_npcId = false;
  bool isset_emotionId = false;
  bool isset_index = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatarId);
          isset_avatarId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->npcId);
          isset_npcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emotionId);
          isset_emotionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          isset_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventMapImage);
          this->__isset.eventMapImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_avatarId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npcId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_emotionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_index)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Avatar::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Avatar");

  xfer += oprot->writeFieldBegin("avatarId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->avatarId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npcId", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->npcId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emotionId", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->emotionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventMapImage) {
    xfer += oprot->writeFieldBegin("eventMapImage", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->eventMapImage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Avatar &a, Avatar &b) {
  using ::std::swap;
  swap(a.avatarId, b.avatarId);
  swap(a.npcId, b.npcId);
  swap(a.emotionId, b.emotionId);
  swap(a.index, b.index);
  swap(a.eventMapImage, b.eventMapImage);
  swap(a.__isset, b.__isset);
}

Avatar::Avatar(const Avatar& other595) {
  avatarId = other595.avatarId;
  npcId = other595.npcId;
  emotionId = other595.emotionId;
  index = other595.index;
  eventMapImage = other595.eventMapImage;
  __isset = other595.__isset;
}
Avatar& Avatar::operator=(const Avatar& other596) {
  avatarId = other596.avatarId;
  npcId = other596.npcId;
  emotionId = other596.emotionId;
  index = other596.index;
  eventMapImage = other596.eventMapImage;
  __isset = other596.__isset;
  return *this;
}
void Avatar::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Avatar(";
  out << "avatarId=" << to_string(avatarId);
  out << ", " << "npcId=" << to_string(npcId);
  out << ", " << "emotionId=" << to_string(emotionId);
  out << ", " << "index=" << to_string(index);
  out << ", " << "eventMapImage="; (__isset.eventMapImage ? (out << to_string(eventMapImage)) : (out << "<null>"));
  out << ")";
}


AnalyticsEvent::~AnalyticsEvent() throw() {
}


void AnalyticsEvent::__set_analyticsEventId(const AnalyticsEventID& val) {
  this->analyticsEventId = val;
}

void AnalyticsEvent::__set_category(const std::string& val) {
  this->category = val;
}

void AnalyticsEvent::__set_label(const std::string& val) {
  this->label = val;
}

void AnalyticsEvent::__set_value(const int32_t val) {
  this->value = val;
}

void AnalyticsEvent::__set_payload(const std::vector<std::string> & val) {
  this->payload = val;
__isset.payload = true;
}
std::ostream& operator<<(std::ostream& out, const AnalyticsEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AnalyticsEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_analyticsEventId = false;
  bool isset_category = false;
  bool isset_label = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->analyticsEventId);
          isset_analyticsEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->category);
          isset_category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          isset_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->payload.clear();
            uint32_t _size597;
            ::apache::thrift::protocol::TType _etype600;
            xfer += iprot->readListBegin(_etype600, _size597);
            this->payload.resize(_size597);
            uint32_t _i601;
            for (_i601 = 0; _i601 < _size597; ++_i601)
            {
              xfer += iprot->readString(this->payload[_i601]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_analyticsEventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_category)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AnalyticsEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AnalyticsEvent");

  xfer += oprot->writeFieldBegin("analyticsEventId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->analyticsEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->payload.size()));
      std::vector<std::string> ::const_iterator _iter602;
      for (_iter602 = this->payload.begin(); _iter602 != this->payload.end(); ++_iter602)
      {
        xfer += oprot->writeString((*_iter602));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AnalyticsEvent &a, AnalyticsEvent &b) {
  using ::std::swap;
  swap(a.analyticsEventId, b.analyticsEventId);
  swap(a.category, b.category);
  swap(a.label, b.label);
  swap(a.value, b.value);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

AnalyticsEvent::AnalyticsEvent(const AnalyticsEvent& other603) {
  analyticsEventId = other603.analyticsEventId;
  category = other603.category;
  label = other603.label;
  value = other603.value;
  payload = other603.payload;
  __isset = other603.__isset;
}
AnalyticsEvent& AnalyticsEvent::operator=(const AnalyticsEvent& other604) {
  analyticsEventId = other604.analyticsEventId;
  category = other604.category;
  label = other604.label;
  value = other604.value;
  payload = other604.payload;
  __isset = other604.__isset;
  return *this;
}
void AnalyticsEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AnalyticsEvent(";
  out << "analyticsEventId=" << to_string(analyticsEventId);
  out << ", " << "category=" << to_string(category);
  out << ", " << "label=" << to_string(label);
  out << ", " << "value=" << to_string(value);
  out << ", " << "payload="; (__isset.payload ? (out << to_string(payload)) : (out << "<null>"));
  out << ")";
}


AnalyticsDimension::~AnalyticsDimension() throw() {
}


void AnalyticsDimension::__set_analyticsDimensionId(const AnalyticsDimensionID& val) {
  this->analyticsDimensionId = val;
}

void AnalyticsDimension::__set_shortName(const std::string& val) {
  this->shortName = val;
__isset.shortName = true;
}

void AnalyticsDimension::__set_googleDimensionIndex(const int32_t val) {
  this->googleDimensionIndex = val;
}

void AnalyticsDimension::__set_pooleSchemaKey(const std::string& val) {
  this->pooleSchemaKey = val;
__isset.pooleSchemaKey = true;
}
std::ostream& operator<<(std::ostream& out, const AnalyticsDimension& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AnalyticsDimension::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_analyticsDimensionId = false;
  bool isset_googleDimensionIndex = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->analyticsDimensionId);
          isset_analyticsDimensionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shortName);
          this->__isset.shortName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->googleDimensionIndex);
          isset_googleDimensionIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pooleSchemaKey);
          this->__isset.pooleSchemaKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_analyticsDimensionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_googleDimensionIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AnalyticsDimension::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AnalyticsDimension");

  xfer += oprot->writeFieldBegin("analyticsDimensionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->analyticsDimensionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.shortName) {
    xfer += oprot->writeFieldBegin("shortName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->shortName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("googleDimensionIndex", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->googleDimensionIndex);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.pooleSchemaKey) {
    xfer += oprot->writeFieldBegin("pooleSchemaKey", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->pooleSchemaKey);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AnalyticsDimension &a, AnalyticsDimension &b) {
  using ::std::swap;
  swap(a.analyticsDimensionId, b.analyticsDimensionId);
  swap(a.shortName, b.shortName);
  swap(a.googleDimensionIndex, b.googleDimensionIndex);
  swap(a.pooleSchemaKey, b.pooleSchemaKey);
  swap(a.__isset, b.__isset);
}

AnalyticsDimension::AnalyticsDimension(const AnalyticsDimension& other605) {
  analyticsDimensionId = other605.analyticsDimensionId;
  shortName = other605.shortName;
  googleDimensionIndex = other605.googleDimensionIndex;
  pooleSchemaKey = other605.pooleSchemaKey;
  __isset = other605.__isset;
}
AnalyticsDimension& AnalyticsDimension::operator=(const AnalyticsDimension& other606) {
  analyticsDimensionId = other606.analyticsDimensionId;
  shortName = other606.shortName;
  googleDimensionIndex = other606.googleDimensionIndex;
  pooleSchemaKey = other606.pooleSchemaKey;
  __isset = other606.__isset;
  return *this;
}
void AnalyticsDimension::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AnalyticsDimension(";
  out << "analyticsDimensionId=" << to_string(analyticsDimensionId);
  out << ", " << "shortName="; (__isset.shortName ? (out << to_string(shortName)) : (out << "<null>"));
  out << ", " << "googleDimensionIndex=" << to_string(googleDimensionIndex);
  out << ", " << "pooleSchemaKey="; (__isset.pooleSchemaKey ? (out << to_string(pooleSchemaKey)) : (out << "<null>"));
  out << ")";
}


AppBoyEvent::~AppBoyEvent() throw() {
}


void AppBoyEvent::__set_analyticsEventId(const AnalyticsEventID& val) {
  this->analyticsEventId = val;
}
std::ostream& operator<<(std::ostream& out, const AppBoyEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AppBoyEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_analyticsEventId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->analyticsEventId);
          isset_analyticsEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_analyticsEventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AppBoyEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AppBoyEvent");

  xfer += oprot->writeFieldBegin("analyticsEventId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->analyticsEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AppBoyEvent &a, AppBoyEvent &b) {
  using ::std::swap;
  swap(a.analyticsEventId, b.analyticsEventId);
}

AppBoyEvent::AppBoyEvent(const AppBoyEvent& other607) {
  analyticsEventId = other607.analyticsEventId;
}
AppBoyEvent& AppBoyEvent::operator=(const AppBoyEvent& other608) {
  analyticsEventId = other608.analyticsEventId;
  return *this;
}
void AppBoyEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AppBoyEvent(";
  out << "analyticsEventId=" << to_string(analyticsEventId);
  out << ")";
}


ApsalarEvent::~ApsalarEvent() throw() {
}


void ApsalarEvent::__set_analyticsEventId(const AnalyticsEventID& val) {
  this->analyticsEventId = val;
}
std::ostream& operator<<(std::ostream& out, const ApsalarEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ApsalarEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_analyticsEventId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->analyticsEventId);
          isset_analyticsEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_analyticsEventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApsalarEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApsalarEvent");

  xfer += oprot->writeFieldBegin("analyticsEventId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->analyticsEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApsalarEvent &a, ApsalarEvent &b) {
  using ::std::swap;
  swap(a.analyticsEventId, b.analyticsEventId);
}

ApsalarEvent::ApsalarEvent(const ApsalarEvent& other609) {
  analyticsEventId = other609.analyticsEventId;
}
ApsalarEvent& ApsalarEvent::operator=(const ApsalarEvent& other610) {
  analyticsEventId = other610.analyticsEventId;
  return *this;
}
void ApsalarEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApsalarEvent(";
  out << "analyticsEventId=" << to_string(analyticsEventId);
  out << ")";
}


PopupTemplate::~PopupTemplate() throw() {
}


void PopupTemplate::__set_templateId(const TemplateID& val) {
  this->templateId = val;
}

void PopupTemplate::__set_background(const std::string& val) {
  this->background = val;
__isset.background = true;
}

void PopupTemplate::__set_overlay(const std::string& val) {
  this->overlay = val;
__isset.overlay = true;
}

void PopupTemplate::__set_buttonImages(const std::vector<std::string> & val) {
  this->buttonImages = val;
__isset.buttonImages = true;
}

void PopupTemplate::__set_buttonTexts(const std::vector<std::string> & val) {
  this->buttonTexts = val;
__isset.buttonTexts = true;
}

void PopupTemplate::__set_buttonActions(const std::vector<MessageButtonAction::type> & val) {
  this->buttonActions = val;
__isset.buttonActions = true;
}

void PopupTemplate::__set_buttonParameters(const std::vector<std::string> & val) {
  this->buttonParameters = val;
__isset.buttonParameters = true;
}

void PopupTemplate::__set_bundleId(const std::string& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void PopupTemplate::__set_avatarId(const std::string& val) {
  this->avatarId = val;
__isset.avatarId = true;
}

void PopupTemplate::__set_inboxHideRewards(const bool val) {
  this->inboxHideRewards = val;
__isset.inboxHideRewards = true;
}

void PopupTemplate::__set_inboxMessageIcon(const AssetID& val) {
  this->inboxMessageIcon = val;
__isset.inboxMessageIcon = true;
}

void PopupTemplate::__set_luaFile(const std::string& val) {
  this->luaFile = val;
__isset.luaFile = true;
}

void PopupTemplate::__set_showEventTimer(const bool val) {
  this->showEventTimer = val;
__isset.showEventTimer = true;
}

void PopupTemplate::__set_backgroundLandscape(const std::string& val) {
  this->backgroundLandscape = val;
__isset.backgroundLandscape = true;
}

void PopupTemplate::__set_overlayLandscape(const std::string& val) {
  this->overlayLandscape = val;
__isset.overlayLandscape = true;
}
std::ostream& operator<<(std::ostream& out, const PopupTemplate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PopupTemplate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_templateId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->templateId);
          isset_templateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->background);
          this->__isset.background = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->overlay);
          this->__isset.overlay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buttonImages.clear();
            uint32_t _size611;
            ::apache::thrift::protocol::TType _etype614;
            xfer += iprot->readListBegin(_etype614, _size611);
            this->buttonImages.resize(_size611);
            uint32_t _i615;
            for (_i615 = 0; _i615 < _size611; ++_i615)
            {
              xfer += iprot->readString(this->buttonImages[_i615]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buttonImages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buttonTexts.clear();
            uint32_t _size616;
            ::apache::thrift::protocol::TType _etype619;
            xfer += iprot->readListBegin(_etype619, _size616);
            this->buttonTexts.resize(_size616);
            uint32_t _i620;
            for (_i620 = 0; _i620 < _size616; ++_i620)
            {
              xfer += iprot->readString(this->buttonTexts[_i620]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buttonTexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buttonActions.clear();
            uint32_t _size621;
            ::apache::thrift::protocol::TType _etype624;
            xfer += iprot->readListBegin(_etype624, _size621);
            this->buttonActions.resize(_size621);
            uint32_t _i625;
            for (_i625 = 0; _i625 < _size621; ++_i625)
            {
              int32_t ecast626;
              xfer += iprot->readI32(ecast626);
              this->buttonActions[_i625] = (MessageButtonAction::type)ecast626;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buttonActions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buttonParameters.clear();
            uint32_t _size627;
            ::apache::thrift::protocol::TType _etype630;
            xfer += iprot->readListBegin(_etype630, _size627);
            this->buttonParameters.resize(_size627);
            uint32_t _i631;
            for (_i631 = 0; _i631 < _size627; ++_i631)
            {
              xfer += iprot->readString(this->buttonParameters[_i631]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buttonParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatarId);
          this->__isset.avatarId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inboxHideRewards);
          this->__isset.inboxHideRewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inboxMessageIcon);
          this->__isset.inboxMessageIcon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->luaFile);
          this->__isset.luaFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->showEventTimer);
          this->__isset.showEventTimer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backgroundLandscape);
          this->__isset.backgroundLandscape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->overlayLandscape);
          this->__isset.overlayLandscape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_templateId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PopupTemplate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PopupTemplate");

  xfer += oprot->writeFieldBegin("templateId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->templateId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.background) {
    xfer += oprot->writeFieldBegin("background", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->background);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.overlay) {
    xfer += oprot->writeFieldBegin("overlay", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->overlay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buttonTexts) {
    xfer += oprot->writeFieldBegin("buttonTexts", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->buttonTexts.size()));
      std::vector<std::string> ::const_iterator _iter632;
      for (_iter632 = this->buttonTexts.begin(); _iter632 != this->buttonTexts.end(); ++_iter632)
      {
        xfer += oprot->writeString((*_iter632));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buttonActions) {
    xfer += oprot->writeFieldBegin("buttonActions", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->buttonActions.size()));
      std::vector<MessageButtonAction::type> ::const_iterator _iter633;
      for (_iter633 = this->buttonActions.begin(); _iter633 != this->buttonActions.end(); ++_iter633)
      {
        xfer += oprot->writeI32((int32_t)(*_iter633));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buttonParameters) {
    xfer += oprot->writeFieldBegin("buttonParameters", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->buttonParameters.size()));
      std::vector<std::string> ::const_iterator _iter634;
      for (_iter634 = this->buttonParameters.begin(); _iter634 != this->buttonParameters.end(); ++_iter634)
      {
        xfer += oprot->writeString((*_iter634));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.avatarId) {
    xfer += oprot->writeFieldBegin("avatarId", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->avatarId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buttonImages) {
    xfer += oprot->writeFieldBegin("buttonImages", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->buttonImages.size()));
      std::vector<std::string> ::const_iterator _iter635;
      for (_iter635 = this->buttonImages.begin(); _iter635 != this->buttonImages.end(); ++_iter635)
      {
        xfer += oprot->writeString((*_iter635));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inboxHideRewards) {
    xfer += oprot->writeFieldBegin("inboxHideRewards", ::apache::thrift::protocol::T_BOOL, 20);
    xfer += oprot->writeBool(this->inboxHideRewards);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inboxMessageIcon) {
    xfer += oprot->writeFieldBegin("inboxMessageIcon", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->inboxMessageIcon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.luaFile) {
    xfer += oprot->writeFieldBegin("luaFile", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->luaFile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showEventTimer) {
    xfer += oprot->writeFieldBegin("showEventTimer", ::apache::thrift::protocol::T_BOOL, 31);
    xfer += oprot->writeBool(this->showEventTimer);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.backgroundLandscape) {
    xfer += oprot->writeFieldBegin("backgroundLandscape", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->backgroundLandscape);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.overlayLandscape) {
    xfer += oprot->writeFieldBegin("overlayLandscape", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->overlayLandscape);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PopupTemplate &a, PopupTemplate &b) {
  using ::std::swap;
  swap(a.templateId, b.templateId);
  swap(a.background, b.background);
  swap(a.overlay, b.overlay);
  swap(a.buttonImages, b.buttonImages);
  swap(a.buttonTexts, b.buttonTexts);
  swap(a.buttonActions, b.buttonActions);
  swap(a.buttonParameters, b.buttonParameters);
  swap(a.bundleId, b.bundleId);
  swap(a.avatarId, b.avatarId);
  swap(a.inboxHideRewards, b.inboxHideRewards);
  swap(a.inboxMessageIcon, b.inboxMessageIcon);
  swap(a.luaFile, b.luaFile);
  swap(a.showEventTimer, b.showEventTimer);
  swap(a.backgroundLandscape, b.backgroundLandscape);
  swap(a.overlayLandscape, b.overlayLandscape);
  swap(a.__isset, b.__isset);
}

PopupTemplate::PopupTemplate(const PopupTemplate& other636) {
  templateId = other636.templateId;
  background = other636.background;
  overlay = other636.overlay;
  buttonImages = other636.buttonImages;
  buttonTexts = other636.buttonTexts;
  buttonActions = other636.buttonActions;
  buttonParameters = other636.buttonParameters;
  bundleId = other636.bundleId;
  avatarId = other636.avatarId;
  inboxHideRewards = other636.inboxHideRewards;
  inboxMessageIcon = other636.inboxMessageIcon;
  luaFile = other636.luaFile;
  showEventTimer = other636.showEventTimer;
  backgroundLandscape = other636.backgroundLandscape;
  overlayLandscape = other636.overlayLandscape;
  __isset = other636.__isset;
}
PopupTemplate& PopupTemplate::operator=(const PopupTemplate& other637) {
  templateId = other637.templateId;
  background = other637.background;
  overlay = other637.overlay;
  buttonImages = other637.buttonImages;
  buttonTexts = other637.buttonTexts;
  buttonActions = other637.buttonActions;
  buttonParameters = other637.buttonParameters;
  bundleId = other637.bundleId;
  avatarId = other637.avatarId;
  inboxHideRewards = other637.inboxHideRewards;
  inboxMessageIcon = other637.inboxMessageIcon;
  luaFile = other637.luaFile;
  showEventTimer = other637.showEventTimer;
  backgroundLandscape = other637.backgroundLandscape;
  overlayLandscape = other637.overlayLandscape;
  __isset = other637.__isset;
  return *this;
}
void PopupTemplate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PopupTemplate(";
  out << "templateId=" << to_string(templateId);
  out << ", " << "background="; (__isset.background ? (out << to_string(background)) : (out << "<null>"));
  out << ", " << "overlay="; (__isset.overlay ? (out << to_string(overlay)) : (out << "<null>"));
  out << ", " << "buttonImages="; (__isset.buttonImages ? (out << to_string(buttonImages)) : (out << "<null>"));
  out << ", " << "buttonTexts="; (__isset.buttonTexts ? (out << to_string(buttonTexts)) : (out << "<null>"));
  out << ", " << "buttonActions="; (__isset.buttonActions ? (out << to_string(buttonActions)) : (out << "<null>"));
  out << ", " << "buttonParameters="; (__isset.buttonParameters ? (out << to_string(buttonParameters)) : (out << "<null>"));
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "avatarId="; (__isset.avatarId ? (out << to_string(avatarId)) : (out << "<null>"));
  out << ", " << "inboxHideRewards="; (__isset.inboxHideRewards ? (out << to_string(inboxHideRewards)) : (out << "<null>"));
  out << ", " << "inboxMessageIcon="; (__isset.inboxMessageIcon ? (out << to_string(inboxMessageIcon)) : (out << "<null>"));
  out << ", " << "luaFile="; (__isset.luaFile ? (out << to_string(luaFile)) : (out << "<null>"));
  out << ", " << "showEventTimer="; (__isset.showEventTimer ? (out << to_string(showEventTimer)) : (out << "<null>"));
  out << ", " << "backgroundLandscape="; (__isset.backgroundLandscape ? (out << to_string(backgroundLandscape)) : (out << "<null>"));
  out << ", " << "overlayLandscape="; (__isset.overlayLandscape ? (out << to_string(overlayLandscape)) : (out << "<null>"));
  out << ")";
}


DefaultTemplate::~DefaultTemplate() throw() {
}


void DefaultTemplate::__set_popupTemplateType(const PopupTemplateType::type val) {
  this->popupTemplateType = val;
}

void DefaultTemplate::__set_templateId(const TemplateID& val) {
  this->templateId = val;
}
std::ostream& operator<<(std::ostream& out, const DefaultTemplate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DefaultTemplate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_popupTemplateType = false;
  bool isset_templateId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast638;
          xfer += iprot->readI32(ecast638);
          this->popupTemplateType = (PopupTemplateType::type)ecast638;
          isset_popupTemplateType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->templateId);
          isset_templateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_popupTemplateType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_templateId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DefaultTemplate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DefaultTemplate");

  xfer += oprot->writeFieldBegin("popupTemplateType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->popupTemplateType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("templateId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->templateId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DefaultTemplate &a, DefaultTemplate &b) {
  using ::std::swap;
  swap(a.popupTemplateType, b.popupTemplateType);
  swap(a.templateId, b.templateId);
}

DefaultTemplate::DefaultTemplate(const DefaultTemplate& other639) {
  popupTemplateType = other639.popupTemplateType;
  templateId = other639.templateId;
}
DefaultTemplate& DefaultTemplate::operator=(const DefaultTemplate& other640) {
  popupTemplateType = other640.popupTemplateType;
  templateId = other640.templateId;
  return *this;
}
void DefaultTemplate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DefaultTemplate(";
  out << "popupTemplateType=" << to_string(popupTemplateType);
  out << ", " << "templateId=" << to_string(templateId);
  out << ")";
}


MessageTemplateModifier::~MessageTemplateModifier() throw() {
}


void MessageTemplateModifier::__set_popupMessageId(const PopupMessageID& val) {
  this->popupMessageId = val;
}

void MessageTemplateModifier::__set_nodeName(const std::string& val) {
  this->nodeName = val;
}

void MessageTemplateModifier::__set_fieldName(const std::string& val) {
  this->fieldName = val;
}

void MessageTemplateModifier::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const MessageTemplateModifier& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MessageTemplateModifier::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_popupMessageId = false;
  bool isset_nodeName = false;
  bool isset_fieldName = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->popupMessageId);
          isset_popupMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nodeName);
          isset_nodeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fieldName);
          isset_fieldName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_popupMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nodeName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fieldName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageTemplateModifier::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MessageTemplateModifier");

  xfer += oprot->writeFieldBegin("popupMessageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->popupMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodeName", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->nodeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fieldName", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->fieldName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageTemplateModifier &a, MessageTemplateModifier &b) {
  using ::std::swap;
  swap(a.popupMessageId, b.popupMessageId);
  swap(a.nodeName, b.nodeName);
  swap(a.fieldName, b.fieldName);
  swap(a.value, b.value);
}

MessageTemplateModifier::MessageTemplateModifier(const MessageTemplateModifier& other641) {
  popupMessageId = other641.popupMessageId;
  nodeName = other641.nodeName;
  fieldName = other641.fieldName;
  value = other641.value;
}
MessageTemplateModifier& MessageTemplateModifier::operator=(const MessageTemplateModifier& other642) {
  popupMessageId = other642.popupMessageId;
  nodeName = other642.nodeName;
  fieldName = other642.fieldName;
  value = other642.value;
  return *this;
}
void MessageTemplateModifier::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MessageTemplateModifier(";
  out << "popupMessageId=" << to_string(popupMessageId);
  out << ", " << "nodeName=" << to_string(nodeName);
  out << ", " << "fieldName=" << to_string(fieldName);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


AdminMessage::~AdminMessage() throw() {
}


void AdminMessage::__set_adminMessageId(const AdminMessageID& val) {
  this->adminMessageId = val;
}

void AdminMessage::__set_priority(const int32_t val) {
  this->priority = val;
__isset.priority = true;
}

void AdminMessage::__set_eventLockId(const EventLockID& val) {
  this->eventLockId = val;
}

void AdminMessage::__set_title(const std::string& val) {
  this->title = val;
}

void AdminMessage::__set_body(const std::string& val) {
  this->body = val;
}

void AdminMessage::__set_openable(const bool val) {
  this->openable = val;
__isset.openable = true;
}

void AdminMessage::__set_openTitle(const std::string& val) {
  this->openTitle = val;
__isset.openTitle = true;
}

void AdminMessage::__set_openBody(const std::string& val) {
  this->openBody = val;
__isset.openBody = true;
}

void AdminMessage::__set_autoOpen(const bool val) {
  this->autoOpen = val;
__isset.autoOpen = true;
}

void AdminMessage::__set_giftCurrencyIds(const std::vector<CurrencyID> & val) {
  this->giftCurrencyIds = val;
__isset.giftCurrencyIds = true;
}

void AdminMessage::__set_giftCurrencyAmounts(const std::vector<int32_t> & val) {
  this->giftCurrencyAmounts = val;
__isset.giftCurrencyAmounts = true;
}

void AdminMessage::__set_startTimeOfDay(const int32_t val) {
  this->startTimeOfDay = val;
__isset.startTimeOfDay = true;
}

void AdminMessage::__set_duration(const int32_t val) {
  this->duration = val;
__isset.duration = true;
}

void AdminMessage::__set_enabled(const bool val) {
  this->enabled = val;
__isset.enabled = true;
}

void AdminMessage::__set_minRank(const int32_t val) {
  this->minRank = val;
__isset.minRank = true;
}

void AdminMessage::__set_templateId(const TemplateID& val) {
  this->templateId = val;
__isset.templateId = true;
}

void AdminMessage::__set_oneTimeOnly(const bool val) {
  this->oneTimeOnly = val;
__isset.oneTimeOnly = true;
}

void AdminMessage::__set_characterId(const std::string& val) {
  this->characterId = val;
}

void AdminMessage::__set_openCharacterImage(const std::string& val) {
  this->openCharacterImage = val;
__isset.openCharacterImage = true;
}

void AdminMessage::__set_openBackground(const std::string& val) {
  this->openBackground = val;
__isset.openBackground = true;
}

void AdminMessage::__set_openButtonAction(const MessageButtonAction::type val) {
  this->openButtonAction = val;
__isset.openButtonAction = true;
}

void AdminMessage::__set_openButtonParameters(const std::vector<std::string> & val) {
  this->openButtonParameters = val;
__isset.openButtonParameters = true;
}

void AdminMessage::__set_openOverlay(const std::string& val) {
  this->openOverlay = val;
__isset.openOverlay = true;
}

void AdminMessage::__set_openButtonText(const std::string& val) {
  this->openButtonText = val;
__isset.openButtonText = true;
}

void AdminMessage::__set_gachaOfferId(const GachaOfferID& val) {
  this->gachaOfferId = val;
__isset.gachaOfferId = true;
}

void AdminMessage::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void AdminMessage::__set_giftMessageType(const GiftMessageType::type val) {
  this->giftMessageType = val;
__isset.giftMessageType = true;
}
std::ostream& operator<<(std::ostream& out, const AdminMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AdminMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_adminMessageId = false;
  bool isset_eventLockId = false;
  bool isset_title = false;
  bool isset_body = false;
  bool isset_characterId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->adminMessageId);
          isset_adminMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventLockId);
          isset_eventLockId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->body);
          isset_body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->openable);
          this->__isset.openable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->openTitle);
          this->__isset.openTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->openBody);
          this->__isset.openBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->autoOpen);
          this->__isset.autoOpen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->giftCurrencyIds.clear();
            uint32_t _size643;
            ::apache::thrift::protocol::TType _etype646;
            xfer += iprot->readListBegin(_etype646, _size643);
            this->giftCurrencyIds.resize(_size643);
            uint32_t _i647;
            for (_i647 = 0; _i647 < _size643; ++_i647)
            {
              xfer += iprot->readString(this->giftCurrencyIds[_i647]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.giftCurrencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->giftCurrencyAmounts.clear();
            uint32_t _size648;
            ::apache::thrift::protocol::TType _etype651;
            xfer += iprot->readListBegin(_etype651, _size648);
            this->giftCurrencyAmounts.resize(_size648);
            uint32_t _i652;
            for (_i652 = 0; _i652 < _size648; ++_i652)
            {
              xfer += iprot->readI32(this->giftCurrencyAmounts[_i652]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.giftCurrencyAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTimeOfDay);
          this->__isset.startTimeOfDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRank);
          this->__isset.minRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->templateId);
          this->__isset.templateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->oneTimeOnly);
          this->__isset.oneTimeOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->characterId);
          isset_characterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->openCharacterImage);
          this->__isset.openCharacterImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->openBackground);
          this->__isset.openBackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast653;
          xfer += iprot->readI32(ecast653);
          this->openButtonAction = (MessageButtonAction::type)ecast653;
          this->__isset.openButtonAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->openButtonParameters.clear();
            uint32_t _size654;
            ::apache::thrift::protocol::TType _etype657;
            xfer += iprot->readListBegin(_etype657, _size654);
            this->openButtonParameters.resize(_size654);
            uint32_t _i658;
            for (_i658 = 0; _i658 < _size654; ++_i658)
            {
              xfer += iprot->readString(this->openButtonParameters[_i658]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.openButtonParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->openOverlay);
          this->__isset.openOverlay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->openButtonText);
          this->__isset.openButtonText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaOfferId);
          this->__isset.gachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast659;
          xfer += iprot->readI32(ecast659);
          this->giftMessageType = (GiftMessageType::type)ecast659;
          this->__isset.giftMessageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_adminMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventLockId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_body)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_characterId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AdminMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdminMessage");

  xfer += oprot->writeFieldBegin("adminMessageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->adminMessageId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("eventLockId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->eventLockId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("characterId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->characterId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->body);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.openable) {
    xfer += oprot->writeFieldBegin("openable", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->openable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openTitle) {
    xfer += oprot->writeFieldBegin("openTitle", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->openTitle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openBody) {
    xfer += oprot->writeFieldBegin("openBody", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->openBody);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openCharacterImage) {
    xfer += oprot->writeFieldBegin("openCharacterImage", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->openCharacterImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.autoOpen) {
    xfer += oprot->writeFieldBegin("autoOpen", ::apache::thrift::protocol::T_BOOL, 14);
    xfer += oprot->writeBool(this->autoOpen);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openBackground) {
    xfer += oprot->writeFieldBegin("openBackground", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->openBackground);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openButtonAction) {
    xfer += oprot->writeFieldBegin("openButtonAction", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32((int32_t)this->openButtonAction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openButtonParameters) {
    xfer += oprot->writeFieldBegin("openButtonParameters", ::apache::thrift::protocol::T_LIST, 17);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->openButtonParameters.size()));
      std::vector<std::string> ::const_iterator _iter660;
      for (_iter660 = this->openButtonParameters.begin(); _iter660 != this->openButtonParameters.end(); ++_iter660)
      {
        xfer += oprot->writeString((*_iter660));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openOverlay) {
    xfer += oprot->writeFieldBegin("openOverlay", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->openOverlay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openButtonText) {
    xfer += oprot->writeFieldBegin("openButtonText", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->openButtonText);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.giftCurrencyIds) {
    xfer += oprot->writeFieldBegin("giftCurrencyIds", ::apache::thrift::protocol::T_LIST, 20);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->giftCurrencyIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter661;
      for (_iter661 = this->giftCurrencyIds.begin(); _iter661 != this->giftCurrencyIds.end(); ++_iter661)
      {
        xfer += oprot->writeString((*_iter661));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.giftCurrencyAmounts) {
    xfer += oprot->writeFieldBegin("giftCurrencyAmounts", ::apache::thrift::protocol::T_LIST, 21);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->giftCurrencyAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter662;
      for (_iter662 = this->giftCurrencyAmounts.begin(); _iter662 != this->giftCurrencyAmounts.end(); ++_iter662)
      {
        xfer += oprot->writeI32((*_iter662));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaOfferId) {
    xfer += oprot->writeFieldBegin("gachaOfferId", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->gachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startTimeOfDay) {
    xfer += oprot->writeFieldBegin("startTimeOfDay", ::apache::thrift::protocol::T_I32, 50);
    xfer += oprot->writeI32(this->startTimeOfDay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.duration) {
    xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I32, 60);
    xfer += oprot->writeI32(this->duration);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enabled) {
    xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 61);
    xfer += oprot->writeBool(this->enabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minRank) {
    xfer += oprot->writeFieldBegin("minRank", ::apache::thrift::protocol::T_I32, 62);
    xfer += oprot->writeI32(this->minRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.giftMessageType) {
    xfer += oprot->writeFieldBegin("giftMessageType", ::apache::thrift::protocol::T_I32, 63);
    xfer += oprot->writeI32((int32_t)this->giftMessageType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.templateId) {
    xfer += oprot->writeFieldBegin("templateId", ::apache::thrift::protocol::T_STRING, 64);
    xfer += oprot->writeString(this->templateId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oneTimeOnly) {
    xfer += oprot->writeFieldBegin("oneTimeOnly", ::apache::thrift::protocol::T_BOOL, 65);
    xfer += oprot->writeBool(this->oneTimeOnly);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdminMessage &a, AdminMessage &b) {
  using ::std::swap;
  swap(a.adminMessageId, b.adminMessageId);
  swap(a.priority, b.priority);
  swap(a.eventLockId, b.eventLockId);
  swap(a.title, b.title);
  swap(a.body, b.body);
  swap(a.openable, b.openable);
  swap(a.openTitle, b.openTitle);
  swap(a.openBody, b.openBody);
  swap(a.autoOpen, b.autoOpen);
  swap(a.giftCurrencyIds, b.giftCurrencyIds);
  swap(a.giftCurrencyAmounts, b.giftCurrencyAmounts);
  swap(a.startTimeOfDay, b.startTimeOfDay);
  swap(a.duration, b.duration);
  swap(a.enabled, b.enabled);
  swap(a.minRank, b.minRank);
  swap(a.templateId, b.templateId);
  swap(a.oneTimeOnly, b.oneTimeOnly);
  swap(a.characterId, b.characterId);
  swap(a.openCharacterImage, b.openCharacterImage);
  swap(a.openBackground, b.openBackground);
  swap(a.openButtonAction, b.openButtonAction);
  swap(a.openButtonParameters, b.openButtonParameters);
  swap(a.openOverlay, b.openOverlay);
  swap(a.openButtonText, b.openButtonText);
  swap(a.gachaOfferId, b.gachaOfferId);
  swap(a.bundleId, b.bundleId);
  swap(a.giftMessageType, b.giftMessageType);
  swap(a.__isset, b.__isset);
}

AdminMessage::AdminMessage(const AdminMessage& other663) {
  adminMessageId = other663.adminMessageId;
  priority = other663.priority;
  eventLockId = other663.eventLockId;
  title = other663.title;
  body = other663.body;
  openable = other663.openable;
  openTitle = other663.openTitle;
  openBody = other663.openBody;
  autoOpen = other663.autoOpen;
  giftCurrencyIds = other663.giftCurrencyIds;
  giftCurrencyAmounts = other663.giftCurrencyAmounts;
  startTimeOfDay = other663.startTimeOfDay;
  duration = other663.duration;
  enabled = other663.enabled;
  minRank = other663.minRank;
  templateId = other663.templateId;
  oneTimeOnly = other663.oneTimeOnly;
  characterId = other663.characterId;
  openCharacterImage = other663.openCharacterImage;
  openBackground = other663.openBackground;
  openButtonAction = other663.openButtonAction;
  openButtonParameters = other663.openButtonParameters;
  openOverlay = other663.openOverlay;
  openButtonText = other663.openButtonText;
  gachaOfferId = other663.gachaOfferId;
  bundleId = other663.bundleId;
  giftMessageType = other663.giftMessageType;
  __isset = other663.__isset;
}
AdminMessage& AdminMessage::operator=(const AdminMessage& other664) {
  adminMessageId = other664.adminMessageId;
  priority = other664.priority;
  eventLockId = other664.eventLockId;
  title = other664.title;
  body = other664.body;
  openable = other664.openable;
  openTitle = other664.openTitle;
  openBody = other664.openBody;
  autoOpen = other664.autoOpen;
  giftCurrencyIds = other664.giftCurrencyIds;
  giftCurrencyAmounts = other664.giftCurrencyAmounts;
  startTimeOfDay = other664.startTimeOfDay;
  duration = other664.duration;
  enabled = other664.enabled;
  minRank = other664.minRank;
  templateId = other664.templateId;
  oneTimeOnly = other664.oneTimeOnly;
  characterId = other664.characterId;
  openCharacterImage = other664.openCharacterImage;
  openBackground = other664.openBackground;
  openButtonAction = other664.openButtonAction;
  openButtonParameters = other664.openButtonParameters;
  openOverlay = other664.openOverlay;
  openButtonText = other664.openButtonText;
  gachaOfferId = other664.gachaOfferId;
  bundleId = other664.bundleId;
  giftMessageType = other664.giftMessageType;
  __isset = other664.__isset;
  return *this;
}
void AdminMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdminMessage(";
  out << "adminMessageId=" << to_string(adminMessageId);
  out << ", " << "priority="; (__isset.priority ? (out << to_string(priority)) : (out << "<null>"));
  out << ", " << "eventLockId=" << to_string(eventLockId);
  out << ", " << "title=" << to_string(title);
  out << ", " << "body=" << to_string(body);
  out << ", " << "openable="; (__isset.openable ? (out << to_string(openable)) : (out << "<null>"));
  out << ", " << "openTitle="; (__isset.openTitle ? (out << to_string(openTitle)) : (out << "<null>"));
  out << ", " << "openBody="; (__isset.openBody ? (out << to_string(openBody)) : (out << "<null>"));
  out << ", " << "autoOpen="; (__isset.autoOpen ? (out << to_string(autoOpen)) : (out << "<null>"));
  out << ", " << "giftCurrencyIds="; (__isset.giftCurrencyIds ? (out << to_string(giftCurrencyIds)) : (out << "<null>"));
  out << ", " << "giftCurrencyAmounts="; (__isset.giftCurrencyAmounts ? (out << to_string(giftCurrencyAmounts)) : (out << "<null>"));
  out << ", " << "startTimeOfDay="; (__isset.startTimeOfDay ? (out << to_string(startTimeOfDay)) : (out << "<null>"));
  out << ", " << "duration="; (__isset.duration ? (out << to_string(duration)) : (out << "<null>"));
  out << ", " << "enabled="; (__isset.enabled ? (out << to_string(enabled)) : (out << "<null>"));
  out << ", " << "minRank="; (__isset.minRank ? (out << to_string(minRank)) : (out << "<null>"));
  out << ", " << "templateId="; (__isset.templateId ? (out << to_string(templateId)) : (out << "<null>"));
  out << ", " << "oneTimeOnly="; (__isset.oneTimeOnly ? (out << to_string(oneTimeOnly)) : (out << "<null>"));
  out << ", " << "characterId=" << to_string(characterId);
  out << ", " << "openCharacterImage="; (__isset.openCharacterImage ? (out << to_string(openCharacterImage)) : (out << "<null>"));
  out << ", " << "openBackground="; (__isset.openBackground ? (out << to_string(openBackground)) : (out << "<null>"));
  out << ", " << "openButtonAction="; (__isset.openButtonAction ? (out << to_string(openButtonAction)) : (out << "<null>"));
  out << ", " << "openButtonParameters="; (__isset.openButtonParameters ? (out << to_string(openButtonParameters)) : (out << "<null>"));
  out << ", " << "openOverlay="; (__isset.openOverlay ? (out << to_string(openOverlay)) : (out << "<null>"));
  out << ", " << "openButtonText="; (__isset.openButtonText ? (out << to_string(openButtonText)) : (out << "<null>"));
  out << ", " << "gachaOfferId="; (__isset.gachaOfferId ? (out << to_string(gachaOfferId)) : (out << "<null>"));
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "giftMessageType="; (__isset.giftMessageType ? (out << to_string(giftMessageType)) : (out << "<null>"));
  out << ")";
}


Npc::~Npc() throw() {
}


void Npc::__set_npcId(const NpcID& val) {
  this->npcId = val;
}

void Npc::__set_eyesLidBodyOffsetX(const int32_t val) {
  this->eyesLidBodyOffsetX = val;
__isset.eyesLidBodyOffsetX = true;
}

void Npc::__set_eyesLidBodyOffsetY(const int32_t val) {
  this->eyesLidBodyOffsetY = val;
__isset.eyesLidBodyOffsetY = true;
}

void Npc::__set_eyesLidLargeOffsetX(const int32_t val) {
  this->eyesLidLargeOffsetX = val;
__isset.eyesLidLargeOffsetX = true;
}

void Npc::__set_eyesLidLargeOffsetY(const int32_t val) {
  this->eyesLidLargeOffsetY = val;
__isset.eyesLidLargeOffsetY = true;
}

void Npc::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Npc::__set_kingdomAnimation(const std::string& val) {
  this->kingdomAnimation = val;
__isset.kingdomAnimation = true;
}

void Npc::__set_kingdomAnimationFile(const std::string& val) {
  this->kingdomAnimationFile = val;
__isset.kingdomAnimationFile = true;
}

void Npc::__set_kingdomAnimationFile2(const std::string& val) {
  this->kingdomAnimationFile2 = val;
__isset.kingdomAnimationFile2 = true;
}

void Npc::__set_bigImage(const std::string& val) {
  this->bigImage = val;
__isset.bigImage = true;
}
std::ostream& operator<<(std::ostream& out, const Npc& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Npc::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_npcId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->npcId);
          isset_npcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eyesLidBodyOffsetX);
          this->__isset.eyesLidBodyOffsetX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eyesLidBodyOffsetY);
          this->__isset.eyesLidBodyOffsetY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eyesLidLargeOffsetX);
          this->__isset.eyesLidLargeOffsetX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eyesLidLargeOffsetY);
          this->__isset.eyesLidLargeOffsetY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kingdomAnimation);
          this->__isset.kingdomAnimation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kingdomAnimationFile);
          this->__isset.kingdomAnimationFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kingdomAnimationFile2);
          this->__isset.kingdomAnimationFile2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bigImage);
          this->__isset.bigImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_npcId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Npc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Npc");

  xfer += oprot->writeFieldBegin("npcId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->npcId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eyesLidBodyOffsetX) {
    xfer += oprot->writeFieldBegin("eyesLidBodyOffsetX", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->eyesLidBodyOffsetX);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eyesLidBodyOffsetY) {
    xfer += oprot->writeFieldBegin("eyesLidBodyOffsetY", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->eyesLidBodyOffsetY);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eyesLidLargeOffsetX) {
    xfer += oprot->writeFieldBegin("eyesLidLargeOffsetX", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->eyesLidLargeOffsetX);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eyesLidLargeOffsetY) {
    xfer += oprot->writeFieldBegin("eyesLidLargeOffsetY", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->eyesLidLargeOffsetY);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kingdomAnimation) {
    xfer += oprot->writeFieldBegin("kingdomAnimation", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->kingdomAnimation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kingdomAnimationFile) {
    xfer += oprot->writeFieldBegin("kingdomAnimationFile", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->kingdomAnimationFile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kingdomAnimationFile2) {
    xfer += oprot->writeFieldBegin("kingdomAnimationFile2", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->kingdomAnimationFile2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bigImage) {
    xfer += oprot->writeFieldBegin("bigImage", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->bigImage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Npc &a, Npc &b) {
  using ::std::swap;
  swap(a.npcId, b.npcId);
  swap(a.eyesLidBodyOffsetX, b.eyesLidBodyOffsetX);
  swap(a.eyesLidBodyOffsetY, b.eyesLidBodyOffsetY);
  swap(a.eyesLidLargeOffsetX, b.eyesLidLargeOffsetX);
  swap(a.eyesLidLargeOffsetY, b.eyesLidLargeOffsetY);
  swap(a.name, b.name);
  swap(a.kingdomAnimation, b.kingdomAnimation);
  swap(a.kingdomAnimationFile, b.kingdomAnimationFile);
  swap(a.kingdomAnimationFile2, b.kingdomAnimationFile2);
  swap(a.bigImage, b.bigImage);
  swap(a.__isset, b.__isset);
}

Npc::Npc(const Npc& other665) {
  npcId = other665.npcId;
  eyesLidBodyOffsetX = other665.eyesLidBodyOffsetX;
  eyesLidBodyOffsetY = other665.eyesLidBodyOffsetY;
  eyesLidLargeOffsetX = other665.eyesLidLargeOffsetX;
  eyesLidLargeOffsetY = other665.eyesLidLargeOffsetY;
  name = other665.name;
  kingdomAnimation = other665.kingdomAnimation;
  kingdomAnimationFile = other665.kingdomAnimationFile;
  kingdomAnimationFile2 = other665.kingdomAnimationFile2;
  bigImage = other665.bigImage;
  __isset = other665.__isset;
}
Npc& Npc::operator=(const Npc& other666) {
  npcId = other666.npcId;
  eyesLidBodyOffsetX = other666.eyesLidBodyOffsetX;
  eyesLidBodyOffsetY = other666.eyesLidBodyOffsetY;
  eyesLidLargeOffsetX = other666.eyesLidLargeOffsetX;
  eyesLidLargeOffsetY = other666.eyesLidLargeOffsetY;
  name = other666.name;
  kingdomAnimation = other666.kingdomAnimation;
  kingdomAnimationFile = other666.kingdomAnimationFile;
  kingdomAnimationFile2 = other666.kingdomAnimationFile2;
  bigImage = other666.bigImage;
  __isset = other666.__isset;
  return *this;
}
void Npc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Npc(";
  out << "npcId=" << to_string(npcId);
  out << ", " << "eyesLidBodyOffsetX="; (__isset.eyesLidBodyOffsetX ? (out << to_string(eyesLidBodyOffsetX)) : (out << "<null>"));
  out << ", " << "eyesLidBodyOffsetY="; (__isset.eyesLidBodyOffsetY ? (out << to_string(eyesLidBodyOffsetY)) : (out << "<null>"));
  out << ", " << "eyesLidLargeOffsetX="; (__isset.eyesLidLargeOffsetX ? (out << to_string(eyesLidLargeOffsetX)) : (out << "<null>"));
  out << ", " << "eyesLidLargeOffsetY="; (__isset.eyesLidLargeOffsetY ? (out << to_string(eyesLidLargeOffsetY)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "kingdomAnimation="; (__isset.kingdomAnimation ? (out << to_string(kingdomAnimation)) : (out << "<null>"));
  out << ", " << "kingdomAnimationFile="; (__isset.kingdomAnimationFile ? (out << to_string(kingdomAnimationFile)) : (out << "<null>"));
  out << ", " << "kingdomAnimationFile2="; (__isset.kingdomAnimationFile2 ? (out << to_string(kingdomAnimationFile2)) : (out << "<null>"));
  out << ", " << "bigImage="; (__isset.bigImage ? (out << to_string(bigImage)) : (out << "<null>"));
  out << ")";
}


PurchasableOffer::~PurchasableOffer() throw() {
}


void PurchasableOffer::__set_offerType(const PurchasableOfferType::type val) {
  this->offerType = val;
}

void PurchasableOffer::__set_offerId(const std::string& val) {
  this->offerId = val;
}
std::ostream& operator<<(std::ostream& out, const PurchasableOffer& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PurchasableOffer::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_offerType = false;
  bool isset_offerId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast667;
          xfer += iprot->readI32(ecast667);
          this->offerType = (PurchasableOfferType::type)ecast667;
          isset_offerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->offerId);
          isset_offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_offerType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PurchasableOffer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PurchasableOffer");

  xfer += oprot->writeFieldBegin("offerType", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->offerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offerId", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PurchasableOffer &a, PurchasableOffer &b) {
  using ::std::swap;
  swap(a.offerType, b.offerType);
  swap(a.offerId, b.offerId);
}

PurchasableOffer::PurchasableOffer(const PurchasableOffer& other668) {
  offerType = other668.offerType;
  offerId = other668.offerId;
}
PurchasableOffer& PurchasableOffer::operator=(const PurchasableOffer& other669) {
  offerType = other669.offerType;
  offerId = other669.offerId;
  return *this;
}
void PurchasableOffer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PurchasableOffer(";
  out << "offerType=" << to_string(offerType);
  out << ", " << "offerId=" << to_string(offerId);
  out << ")";
}


IAPProduct::~IAPProduct() throw() {
}


void IAPProduct::__set_iapProductId(const IAPProductID& val) {
  this->iapProductId = val;
}

void IAPProduct::__set_appleProductId(const AppleProductID& val) {
  this->appleProductId = val;
}

void IAPProduct::__set_googleProductId(const GoogleProductID& val) {
  this->googleProductId = val;
}

void IAPProduct::__set_offer(const PurchasableOffer& val) {
  this->offer = val;
__isset.offer = true;
}
std::ostream& operator<<(std::ostream& out, const IAPProduct& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IAPProduct::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_iapProductId = false;
  bool isset_appleProductId = false;
  bool isset_googleProductId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iapProductId);
          isset_iapProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appleProductId);
          isset_appleProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->googleProductId);
          isset_googleProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->offer.read(iprot);
          this->__isset.offer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_iapProductId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appleProductId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_googleProductId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IAPProduct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IAPProduct");

  xfer += oprot->writeFieldBegin("iapProductId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->iapProductId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appleProductId", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->appleProductId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("googleProductId", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->googleProductId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.offer) {
    xfer += oprot->writeFieldBegin("offer", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->offer.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IAPProduct &a, IAPProduct &b) {
  using ::std::swap;
  swap(a.iapProductId, b.iapProductId);
  swap(a.appleProductId, b.appleProductId);
  swap(a.googleProductId, b.googleProductId);
  swap(a.offer, b.offer);
  swap(a.__isset, b.__isset);
}

IAPProduct::IAPProduct(const IAPProduct& other670) {
  iapProductId = other670.iapProductId;
  appleProductId = other670.appleProductId;
  googleProductId = other670.googleProductId;
  offer = other670.offer;
  __isset = other670.__isset;
}
IAPProduct& IAPProduct::operator=(const IAPProduct& other671) {
  iapProductId = other671.iapProductId;
  appleProductId = other671.appleProductId;
  googleProductId = other671.googleProductId;
  offer = other671.offer;
  __isset = other671.__isset;
  return *this;
}
void IAPProduct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IAPProduct(";
  out << "iapProductId=" << to_string(iapProductId);
  out << ", " << "appleProductId=" << to_string(appleProductId);
  out << ", " << "googleProductId=" << to_string(googleProductId);
  out << ", " << "offer="; (__isset.offer ? (out << to_string(offer)) : (out << "<null>"));
  out << ")";
}


CardOffer::~CardOffer() throw() {
}


void CardOffer::__set_cardOfferId(const CardOfferID& val) {
  this->cardOfferId = val;
}

void CardOffer::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void CardOffer::__set_currencyCost(const int32_t val) {
  this->currencyCost = val;
}

void CardOffer::__set_unlockCardOfferId(const CardOfferID& val) {
  this->unlockCardOfferId = val;
}

void CardOffer::__set_maxInventory(const int32_t val) {
  this->maxInventory = val;
}

void CardOffer::__set_doesNotRestock(const bool val) {
  this->doesNotRestock = val;
}

void CardOffer::__set_name(const LocalizedString& val) {
  this->name = val;
}

void CardOffer::__set_description(const LocalizedString& val) {
  this->description = val;
}

void CardOffer::__set_displayRewardsReceived(const bool val) {
  this->displayRewardsReceived = val;
__isset.displayRewardsReceived = true;
}

void CardOffer::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void CardOffer::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void CardOffer::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
}

void CardOffer::__set_showGuildRank(const int32_t val) {
  this->showGuildRank = val;
__isset.showGuildRank = true;
}

void CardOffer::__set_hideGuildRank(const int32_t val) {
  this->hideGuildRank = val;
__isset.hideGuildRank = true;
}

void CardOffer::__set_unlockGuildRank(const int32_t val) {
  this->unlockGuildRank = val;
__isset.unlockGuildRank = true;
}

void CardOffer::__set_productType(const LootItemType::type val) {
  this->productType = val;
}

void CardOffer::__set_productId(const std::string& val) {
  this->productId = val;
}

void CardOffer::__set_productAmount(const int32_t val) {
  this->productAmount = val;
}

void CardOffer::__set_iapProductId(const IAPProductID& val) {
  this->iapProductId = val;
}

void CardOffer::__set_offerBackgroundImage(const std::string& val) {
  this->offerBackgroundImage = val;
__isset.offerBackgroundImage = true;
}

void CardOffer::__set_cardImage(const std::string& val) {
  this->cardImage = val;
__isset.cardImage = true;
}

void CardOffer::__set_productIcon(const std::string& val) {
  this->productIcon = val;
__isset.productIcon = true;
}

void CardOffer::__set_ribbonImage(const std::string& val) {
  this->ribbonImage = val;
__isset.ribbonImage = true;
}

void CardOffer::__set_ribbonText(const LocalizedString& val) {
  this->ribbonText = val;
__isset.ribbonText = true;
}

void CardOffer::__set_titleText(const LocalizedString& val) {
  this->titleText = val;
__isset.titleText = true;
}

void CardOffer::__set_bodyText(const LocalizedString& val) {
  this->bodyText = val;
__isset.bodyText = true;
}
std::ostream& operator<<(std::ostream& out, const CardOffer& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CardOffer::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cardOfferId = false;
  bool isset_currencyId = false;
  bool isset_currencyCost = false;
  bool isset_unlockCardOfferId = false;
  bool isset_maxInventory = false;
  bool isset_doesNotRestock = false;
  bool isset_name = false;
  bool isset_description = false;
  bool isset_showRank = false;
  bool isset_hideRank = false;
  bool isset_unlockRank = false;
  bool isset_productType = false;
  bool isset_productId = false;
  bool isset_productAmount = false;
  bool isset_iapProductId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cardOfferId);
          isset_cardOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currencyCost);
          isset_currencyCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unlockCardOfferId);
          isset_unlockCardOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxInventory);
          isset_maxInventory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->doesNotRestock);
          isset_doesNotRestock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->name.read(iprot);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          isset_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->displayRewardsReceived);
          this->__isset.displayRewardsReceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          isset_unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showGuildRank);
          this->__isset.showGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideGuildRank);
          this->__isset.hideGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockGuildRank);
          this->__isset.unlockGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast672;
          xfer += iprot->readI32(ecast672);
          this->productType = (LootItemType::type)ecast672;
          isset_productType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productId);
          isset_productId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->productAmount);
          isset_productAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iapProductId);
          isset_iapProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->offerBackgroundImage);
          this->__isset.offerBackgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cardImage);
          this->__isset.cardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productIcon);
          this->__isset.productIcon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ribbonImage);
          this->__isset.ribbonImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ribbonText.read(iprot);
          this->__isset.ribbonText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->titleText.read(iprot);
          this->__isset.titleText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bodyText.read(iprot);
          this->__isset.bodyText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cardOfferId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockCardOfferId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxInventory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_doesNotRestock)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_description)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_productType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_productId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_productAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_iapProductId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CardOffer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CardOffer");

  xfer += oprot->writeFieldBegin("cardOfferId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cardOfferId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyCost", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->currencyCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockCardOfferId", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->unlockCardOfferId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxInventory", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->maxInventory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doesNotRestock", ::apache::thrift::protocol::T_BOOL, 27);
  xfer += oprot->writeBool(this->doesNotRestock);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRUCT, 32);
  xfer += this->name.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 33);
  xfer += this->description.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.displayRewardsReceived) {
    xfer += oprot->writeFieldBegin("displayRewardsReceived", ::apache::thrift::protocol::T_BOOL, 34);
    xfer += oprot->writeBool(this->displayRewardsReceived);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 41);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 42);
  xfer += oprot->writeI32(this->unlockRank);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.showGuildRank) {
    xfer += oprot->writeFieldBegin("showGuildRank", ::apache::thrift::protocol::T_I32, 43);
    xfer += oprot->writeI32(this->showGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideGuildRank) {
    xfer += oprot->writeFieldBegin("hideGuildRank", ::apache::thrift::protocol::T_I32, 44);
    xfer += oprot->writeI32(this->hideGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockGuildRank) {
    xfer += oprot->writeFieldBegin("unlockGuildRank", ::apache::thrift::protocol::T_I32, 45);
    xfer += oprot->writeI32(this->unlockGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("productType", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32((int32_t)this->productType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productId", ::apache::thrift::protocol::T_STRING, 51);
  xfer += oprot->writeString(this->productId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productAmount", ::apache::thrift::protocol::T_I32, 52);
  xfer += oprot->writeI32(this->productAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iapProductId", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->iapProductId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.offerBackgroundImage) {
    xfer += oprot->writeFieldBegin("offerBackgroundImage", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->offerBackgroundImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cardImage) {
    xfer += oprot->writeFieldBegin("cardImage", ::apache::thrift::protocol::T_STRING, 71);
    xfer += oprot->writeString(this->cardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.productIcon) {
    xfer += oprot->writeFieldBegin("productIcon", ::apache::thrift::protocol::T_STRING, 72);
    xfer += oprot->writeString(this->productIcon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ribbonImage) {
    xfer += oprot->writeFieldBegin("ribbonImage", ::apache::thrift::protocol::T_STRING, 73);
    xfer += oprot->writeString(this->ribbonImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ribbonText) {
    xfer += oprot->writeFieldBegin("ribbonText", ::apache::thrift::protocol::T_STRUCT, 74);
    xfer += this->ribbonText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.titleText) {
    xfer += oprot->writeFieldBegin("titleText", ::apache::thrift::protocol::T_STRUCT, 75);
    xfer += this->titleText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bodyText) {
    xfer += oprot->writeFieldBegin("bodyText", ::apache::thrift::protocol::T_STRUCT, 76);
    xfer += this->bodyText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CardOffer &a, CardOffer &b) {
  using ::std::swap;
  swap(a.cardOfferId, b.cardOfferId);
  swap(a.currencyId, b.currencyId);
  swap(a.currencyCost, b.currencyCost);
  swap(a.unlockCardOfferId, b.unlockCardOfferId);
  swap(a.maxInventory, b.maxInventory);
  swap(a.doesNotRestock, b.doesNotRestock);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.displayRewardsReceived, b.displayRewardsReceived);
  swap(a.showRank, b.showRank);
  swap(a.hideRank, b.hideRank);
  swap(a.unlockRank, b.unlockRank);
  swap(a.showGuildRank, b.showGuildRank);
  swap(a.hideGuildRank, b.hideGuildRank);
  swap(a.unlockGuildRank, b.unlockGuildRank);
  swap(a.productType, b.productType);
  swap(a.productId, b.productId);
  swap(a.productAmount, b.productAmount);
  swap(a.iapProductId, b.iapProductId);
  swap(a.offerBackgroundImage, b.offerBackgroundImage);
  swap(a.cardImage, b.cardImage);
  swap(a.productIcon, b.productIcon);
  swap(a.ribbonImage, b.ribbonImage);
  swap(a.ribbonText, b.ribbonText);
  swap(a.titleText, b.titleText);
  swap(a.bodyText, b.bodyText);
  swap(a.__isset, b.__isset);
}

CardOffer::CardOffer(const CardOffer& other673) {
  cardOfferId = other673.cardOfferId;
  currencyId = other673.currencyId;
  currencyCost = other673.currencyCost;
  unlockCardOfferId = other673.unlockCardOfferId;
  maxInventory = other673.maxInventory;
  doesNotRestock = other673.doesNotRestock;
  name = other673.name;
  description = other673.description;
  displayRewardsReceived = other673.displayRewardsReceived;
  showRank = other673.showRank;
  hideRank = other673.hideRank;
  unlockRank = other673.unlockRank;
  showGuildRank = other673.showGuildRank;
  hideGuildRank = other673.hideGuildRank;
  unlockGuildRank = other673.unlockGuildRank;
  productType = other673.productType;
  productId = other673.productId;
  productAmount = other673.productAmount;
  iapProductId = other673.iapProductId;
  offerBackgroundImage = other673.offerBackgroundImage;
  cardImage = other673.cardImage;
  productIcon = other673.productIcon;
  ribbonImage = other673.ribbonImage;
  ribbonText = other673.ribbonText;
  titleText = other673.titleText;
  bodyText = other673.bodyText;
  __isset = other673.__isset;
}
CardOffer& CardOffer::operator=(const CardOffer& other674) {
  cardOfferId = other674.cardOfferId;
  currencyId = other674.currencyId;
  currencyCost = other674.currencyCost;
  unlockCardOfferId = other674.unlockCardOfferId;
  maxInventory = other674.maxInventory;
  doesNotRestock = other674.doesNotRestock;
  name = other674.name;
  description = other674.description;
  displayRewardsReceived = other674.displayRewardsReceived;
  showRank = other674.showRank;
  hideRank = other674.hideRank;
  unlockRank = other674.unlockRank;
  showGuildRank = other674.showGuildRank;
  hideGuildRank = other674.hideGuildRank;
  unlockGuildRank = other674.unlockGuildRank;
  productType = other674.productType;
  productId = other674.productId;
  productAmount = other674.productAmount;
  iapProductId = other674.iapProductId;
  offerBackgroundImage = other674.offerBackgroundImage;
  cardImage = other674.cardImage;
  productIcon = other674.productIcon;
  ribbonImage = other674.ribbonImage;
  ribbonText = other674.ribbonText;
  titleText = other674.titleText;
  bodyText = other674.bodyText;
  __isset = other674.__isset;
  return *this;
}
void CardOffer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CardOffer(";
  out << "cardOfferId=" << to_string(cardOfferId);
  out << ", " << "currencyId=" << to_string(currencyId);
  out << ", " << "currencyCost=" << to_string(currencyCost);
  out << ", " << "unlockCardOfferId=" << to_string(unlockCardOfferId);
  out << ", " << "maxInventory=" << to_string(maxInventory);
  out << ", " << "doesNotRestock=" << to_string(doesNotRestock);
  out << ", " << "name=" << to_string(name);
  out << ", " << "description=" << to_string(description);
  out << ", " << "displayRewardsReceived="; (__isset.displayRewardsReceived ? (out << to_string(displayRewardsReceived)) : (out << "<null>"));
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "unlockRank=" << to_string(unlockRank);
  out << ", " << "showGuildRank="; (__isset.showGuildRank ? (out << to_string(showGuildRank)) : (out << "<null>"));
  out << ", " << "hideGuildRank="; (__isset.hideGuildRank ? (out << to_string(hideGuildRank)) : (out << "<null>"));
  out << ", " << "unlockGuildRank="; (__isset.unlockGuildRank ? (out << to_string(unlockGuildRank)) : (out << "<null>"));
  out << ", " << "productType=" << to_string(productType);
  out << ", " << "productId=" << to_string(productId);
  out << ", " << "productAmount=" << to_string(productAmount);
  out << ", " << "iapProductId=" << to_string(iapProductId);
  out << ", " << "offerBackgroundImage="; (__isset.offerBackgroundImage ? (out << to_string(offerBackgroundImage)) : (out << "<null>"));
  out << ", " << "cardImage="; (__isset.cardImage ? (out << to_string(cardImage)) : (out << "<null>"));
  out << ", " << "productIcon="; (__isset.productIcon ? (out << to_string(productIcon)) : (out << "<null>"));
  out << ", " << "ribbonImage="; (__isset.ribbonImage ? (out << to_string(ribbonImage)) : (out << "<null>"));
  out << ", " << "ribbonText="; (__isset.ribbonText ? (out << to_string(ribbonText)) : (out << "<null>"));
  out << ", " << "titleText="; (__isset.titleText ? (out << to_string(titleText)) : (out << "<null>"));
  out << ", " << "bodyText="; (__isset.bodyText ? (out << to_string(bodyText)) : (out << "<null>"));
  out << ")";
}


StoreTab::~StoreTab() throw() {
}


void StoreTab::__set_storeTabId(const StoreTabID& val) {
  this->storeTabId = val;
}

void StoreTab::__set_image(const AssetPath& val) {
  this->image = val;
}

void StoreTab::__set_selectionSound(const std::string& val) {
  this->selectionSound = val;
__isset.selectionSound = true;
}

void StoreTab::__set_title(const LocalizedString& val) {
  this->title = val;
}
std::ostream& operator<<(std::ostream& out, const StoreTab& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StoreTab::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_storeTabId = false;
  bool isset_image = false;
  bool isset_title = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeTabId);
          isset_storeTabId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->image);
          isset_image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->selectionSound);
          this->__isset.selectionSound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->title.read(iprot);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_storeTabId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_image)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoreTab::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StoreTab");

  xfer += oprot->writeFieldBegin("storeTabId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->storeTabId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("image", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->image);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.selectionSound) {
    xfer += oprot->writeFieldBegin("selectionSound", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->selectionSound);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->title.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoreTab &a, StoreTab &b) {
  using ::std::swap;
  swap(a.storeTabId, b.storeTabId);
  swap(a.image, b.image);
  swap(a.selectionSound, b.selectionSound);
  swap(a.title, b.title);
  swap(a.__isset, b.__isset);
}

StoreTab::StoreTab(const StoreTab& other675) {
  storeTabId = other675.storeTabId;
  image = other675.image;
  selectionSound = other675.selectionSound;
  title = other675.title;
  __isset = other675.__isset;
}
StoreTab& StoreTab::operator=(const StoreTab& other676) {
  storeTabId = other676.storeTabId;
  image = other676.image;
  selectionSound = other676.selectionSound;
  title = other676.title;
  __isset = other676.__isset;
  return *this;
}
void StoreTab::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StoreTab(";
  out << "storeTabId=" << to_string(storeTabId);
  out << ", " << "image=" << to_string(image);
  out << ", " << "selectionSound="; (__isset.selectionSound ? (out << to_string(selectionSound)) : (out << "<null>"));
  out << ", " << "title=" << to_string(title);
  out << ")";
}


Store::~Store() throw() {
}


void Store::__set_storeId(const StoreID& val) {
  this->storeId = val;
}

void Store::__set_currencyIds(const std::vector<CurrencyID> & val) {
  this->currencyIds = val;
}

void Store::__set_localizedDisplay(const std::string& val) {
  this->localizedDisplay = val;
__isset.localizedDisplay = true;
}

void Store::__set_oneItemPerLine(const bool val) {
  this->oneItemPerLine = val;
__isset.oneItemPerLine = true;
}

void Store::__set_display(const LocalizedString& val) {
  this->display = val;
}

void Store::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void Store::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void Store::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void Store::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void Store::__set_restockTimerMinutes(const int32_t val) {
  this->restockTimerMinutes = val;
}

void Store::__set_restockCurrencyId(const CurrencyID& val) {
  this->restockCurrencyId = val;
}

void Store::__set_restockCurrencyAmount(const int32_t val) {
  this->restockCurrencyAmount = val;
}

void Store::__set_unaffordableMessage(const LocalizedString& val) {
  this->unaffordableMessage = val;
}

void Store::__set_outOfStockMessage(const LocalizedString& val) {
  this->outOfStockMessage = val;
__isset.outOfStockMessage = true;
}

void Store::__set_description(const LocalizedString& val) {
  this->description = val;
__isset.description = true;
}

void Store::__set_storeCardImage(const AssetPath& val) {
  this->storeCardImage = val;
__isset.storeCardImage = true;
}

void Store::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void Store::__set_buttonImage(const std::string& val) {
  this->buttonImage = val;
__isset.buttonImage = true;
}

void Store::__set_awningImage(const std::string& val) {
  this->awningImage = val;
__isset.awningImage = true;
}

void Store::__set_storeTabIds(const std::vector<StoreTabID> & val) {
  this->storeTabIds = val;
__isset.storeTabIds = true;
}
std::ostream& operator<<(std::ostream& out, const Store& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Store::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_storeId = false;
  bool isset_currencyIds = false;
  bool isset_display = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_showRank = false;
  bool isset_hideRank = false;
  bool isset_restockTimerMinutes = false;
  bool isset_restockCurrencyId = false;
  bool isset_restockCurrencyAmount = false;
  bool isset_unaffordableMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeId);
          isset_storeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->currencyIds.clear();
            uint32_t _size677;
            ::apache::thrift::protocol::TType _etype680;
            xfer += iprot->readListBegin(_etype680, _size677);
            this->currencyIds.resize(_size677);
            uint32_t _i681;
            for (_i681 = 0; _i681 < _size677; ++_i681)
            {
              xfer += iprot->readString(this->currencyIds[_i681]);
            }
            xfer += iprot->readListEnd();
          }
          isset_currencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localizedDisplay);
          this->__isset.localizedDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->oneItemPerLine);
          this->__isset.oneItemPerLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size682;
            ::apache::thrift::protocol::TType _etype685;
            xfer += iprot->readListBegin(_etype685, _size682);
            this->eventIds.resize(_size682);
            uint32_t _i686;
            for (_i686 = 0; _i686 < _size682; ++_i686)
            {
              xfer += iprot->readString(this->eventIds[_i686]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast687;
          xfer += iprot->readI32(ecast687);
          this->eventPhases = (EventPhases::type)ecast687;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->restockTimerMinutes);
          isset_restockTimerMinutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->restockCurrencyId);
          isset_restockCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->restockCurrencyAmount);
          isset_restockCurrencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->unaffordableMessage.read(iprot);
          isset_unaffordableMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->outOfStockMessage.read(iprot);
          this->__isset.outOfStockMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeCardImage);
          this->__isset.storeCardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buttonImage);
          this->__isset.buttonImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->awningImage);
          this->__isset.awningImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->storeTabIds.clear();
            uint32_t _size688;
            ::apache::thrift::protocol::TType _etype691;
            xfer += iprot->readListBegin(_etype691, _size688);
            this->storeTabIds.resize(_size688);
            uint32_t _i692;
            for (_i692 = 0; _i692 < _size688; ++_i692)
            {
              xfer += iprot->readString(this->storeTabIds[_i692]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.storeTabIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_storeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_restockTimerMinutes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_restockCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_restockCurrencyAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unaffordableMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Store::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Store");

  xfer += oprot->writeFieldBegin("storeId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->storeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->currencyIds.size()));
    std::vector<CurrencyID> ::const_iterator _iter693;
    for (_iter693 = this->currencyIds.begin(); _iter693 != this->currencyIds.end(); ++_iter693)
    {
      xfer += oprot->writeString((*_iter693));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.localizedDisplay) {
    xfer += oprot->writeFieldBegin("localizedDisplay", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->localizedDisplay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oneItemPerLine) {
    xfer += oprot->writeFieldBegin("oneItemPerLine", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->oneItemPerLine);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter694;
    for (_iter694 = this->eventIds.begin(); _iter694 != this->eventIds.end(); ++_iter694)
    {
      xfer += oprot->writeString((*_iter694));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("restockTimerMinutes", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->restockTimerMinutes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("restockCurrencyId", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->restockCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("restockCurrencyAmount", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->restockCurrencyAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unaffordableMessage", ::apache::thrift::protocol::T_STRUCT, 32);
  xfer += this->unaffordableMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.outOfStockMessage) {
    xfer += oprot->writeFieldBegin("outOfStockMessage", ::apache::thrift::protocol::T_STRUCT, 33);
    xfer += this->outOfStockMessage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 40);
    xfer += this->description.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeCardImage) {
    xfer += oprot->writeFieldBegin("storeCardImage", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->storeCardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 42);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buttonImage) {
    xfer += oprot->writeFieldBegin("buttonImage", ::apache::thrift::protocol::T_STRING, 43);
    xfer += oprot->writeString(this->buttonImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.awningImage) {
    xfer += oprot->writeFieldBegin("awningImage", ::apache::thrift::protocol::T_STRING, 44);
    xfer += oprot->writeString(this->awningImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeTabIds) {
    xfer += oprot->writeFieldBegin("storeTabIds", ::apache::thrift::protocol::T_LIST, 45);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->storeTabIds.size()));
      std::vector<StoreTabID> ::const_iterator _iter695;
      for (_iter695 = this->storeTabIds.begin(); _iter695 != this->storeTabIds.end(); ++_iter695)
      {
        xfer += oprot->writeString((*_iter695));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Store &a, Store &b) {
  using ::std::swap;
  swap(a.storeId, b.storeId);
  swap(a.currencyIds, b.currencyIds);
  swap(a.localizedDisplay, b.localizedDisplay);
  swap(a.oneItemPerLine, b.oneItemPerLine);
  swap(a.display, b.display);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.showRank, b.showRank);
  swap(a.hideRank, b.hideRank);
  swap(a.restockTimerMinutes, b.restockTimerMinutes);
  swap(a.restockCurrencyId, b.restockCurrencyId);
  swap(a.restockCurrencyAmount, b.restockCurrencyAmount);
  swap(a.unaffordableMessage, b.unaffordableMessage);
  swap(a.outOfStockMessage, b.outOfStockMessage);
  swap(a.description, b.description);
  swap(a.storeCardImage, b.storeCardImage);
  swap(a.bundleId, b.bundleId);
  swap(a.buttonImage, b.buttonImage);
  swap(a.awningImage, b.awningImage);
  swap(a.storeTabIds, b.storeTabIds);
  swap(a.__isset, b.__isset);
}

Store::Store(const Store& other696) {
  storeId = other696.storeId;
  currencyIds = other696.currencyIds;
  localizedDisplay = other696.localizedDisplay;
  oneItemPerLine = other696.oneItemPerLine;
  display = other696.display;
  eventIds = other696.eventIds;
  eventPhases = other696.eventPhases;
  showRank = other696.showRank;
  hideRank = other696.hideRank;
  restockTimerMinutes = other696.restockTimerMinutes;
  restockCurrencyId = other696.restockCurrencyId;
  restockCurrencyAmount = other696.restockCurrencyAmount;
  unaffordableMessage = other696.unaffordableMessage;
  outOfStockMessage = other696.outOfStockMessage;
  description = other696.description;
  storeCardImage = other696.storeCardImage;
  bundleId = other696.bundleId;
  buttonImage = other696.buttonImage;
  awningImage = other696.awningImage;
  storeTabIds = other696.storeTabIds;
  __isset = other696.__isset;
}
Store& Store::operator=(const Store& other697) {
  storeId = other697.storeId;
  currencyIds = other697.currencyIds;
  localizedDisplay = other697.localizedDisplay;
  oneItemPerLine = other697.oneItemPerLine;
  display = other697.display;
  eventIds = other697.eventIds;
  eventPhases = other697.eventPhases;
  showRank = other697.showRank;
  hideRank = other697.hideRank;
  restockTimerMinutes = other697.restockTimerMinutes;
  restockCurrencyId = other697.restockCurrencyId;
  restockCurrencyAmount = other697.restockCurrencyAmount;
  unaffordableMessage = other697.unaffordableMessage;
  outOfStockMessage = other697.outOfStockMessage;
  description = other697.description;
  storeCardImage = other697.storeCardImage;
  bundleId = other697.bundleId;
  buttonImage = other697.buttonImage;
  awningImage = other697.awningImage;
  storeTabIds = other697.storeTabIds;
  __isset = other697.__isset;
  return *this;
}
void Store::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Store(";
  out << "storeId=" << to_string(storeId);
  out << ", " << "currencyIds=" << to_string(currencyIds);
  out << ", " << "localizedDisplay="; (__isset.localizedDisplay ? (out << to_string(localizedDisplay)) : (out << "<null>"));
  out << ", " << "oneItemPerLine="; (__isset.oneItemPerLine ? (out << to_string(oneItemPerLine)) : (out << "<null>"));
  out << ", " << "display=" << to_string(display);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "restockTimerMinutes=" << to_string(restockTimerMinutes);
  out << ", " << "restockCurrencyId=" << to_string(restockCurrencyId);
  out << ", " << "restockCurrencyAmount=" << to_string(restockCurrencyAmount);
  out << ", " << "unaffordableMessage=" << to_string(unaffordableMessage);
  out << ", " << "outOfStockMessage="; (__isset.outOfStockMessage ? (out << to_string(outOfStockMessage)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "storeCardImage="; (__isset.storeCardImage ? (out << to_string(storeCardImage)) : (out << "<null>"));
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "buttonImage="; (__isset.buttonImage ? (out << to_string(buttonImage)) : (out << "<null>"));
  out << ", " << "awningImage="; (__isset.awningImage ? (out << to_string(awningImage)) : (out << "<null>"));
  out << ", " << "storeTabIds="; (__isset.storeTabIds ? (out << to_string(storeTabIds)) : (out << "<null>"));
  out << ")";
}


StoreInventoryItem::~StoreInventoryItem() throw() {
}


void StoreInventoryItem::__set_storeId(const StoreID& val) {
  this->storeId = val;
}

void StoreInventoryItem::__set_offerType(const OfferType::type val) {
  this->offerType = val;
}

void StoreInventoryItem::__set_offerId(const std::string& val) {
  this->offerId = val;
}

void StoreInventoryItem::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void StoreInventoryItem::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void StoreInventoryItem::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void StoreInventoryItem::__set_display(const LocalizedString& val) {
  this->display = val;
}

void StoreInventoryItem::__set_storeTabId(const StoreTabID& val) {
  this->storeTabId = val;
__isset.storeTabId = true;
}
std::ostream& operator<<(std::ostream& out, const StoreInventoryItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StoreInventoryItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_storeId = false;
  bool isset_offerType = false;
  bool isset_offerId = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_displayOrder = false;
  bool isset_display = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeId);
          isset_storeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast698;
          xfer += iprot->readI32(ecast698);
          this->offerType = (OfferType::type)ecast698;
          isset_offerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->offerId);
          isset_offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size699;
            ::apache::thrift::protocol::TType _etype702;
            xfer += iprot->readListBegin(_etype702, _size699);
            this->eventIds.resize(_size699);
            uint32_t _i703;
            for (_i703 = 0; _i703 < _size699; ++_i703)
            {
              xfer += iprot->readString(this->eventIds[_i703]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast704;
          xfer += iprot->readI32(ecast704);
          this->eventPhases = (EventPhases::type)ecast704;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeTabId);
          this->__isset.storeTabId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_storeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offerType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoreInventoryItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StoreInventoryItem");

  xfer += oprot->writeFieldBegin("storeId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->storeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offerType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->offerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offerId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter705;
    for (_iter705 = this->eventIds.begin(); _iter705 != this->eventIds.end(); ++_iter705)
    {
      xfer += oprot->writeString((*_iter705));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.storeTabId) {
    xfer += oprot->writeFieldBegin("storeTabId", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->storeTabId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoreInventoryItem &a, StoreInventoryItem &b) {
  using ::std::swap;
  swap(a.storeId, b.storeId);
  swap(a.offerType, b.offerType);
  swap(a.offerId, b.offerId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.displayOrder, b.displayOrder);
  swap(a.display, b.display);
  swap(a.storeTabId, b.storeTabId);
  swap(a.__isset, b.__isset);
}

StoreInventoryItem::StoreInventoryItem(const StoreInventoryItem& other706) {
  storeId = other706.storeId;
  offerType = other706.offerType;
  offerId = other706.offerId;
  eventIds = other706.eventIds;
  eventPhases = other706.eventPhases;
  displayOrder = other706.displayOrder;
  display = other706.display;
  storeTabId = other706.storeTabId;
  __isset = other706.__isset;
}
StoreInventoryItem& StoreInventoryItem::operator=(const StoreInventoryItem& other707) {
  storeId = other707.storeId;
  offerType = other707.offerType;
  offerId = other707.offerId;
  eventIds = other707.eventIds;
  eventPhases = other707.eventPhases;
  displayOrder = other707.displayOrder;
  display = other707.display;
  storeTabId = other707.storeTabId;
  __isset = other707.__isset;
  return *this;
}
void StoreInventoryItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StoreInventoryItem(";
  out << "storeId=" << to_string(storeId);
  out << ", " << "offerType=" << to_string(offerType);
  out << ", " << "offerId=" << to_string(offerId);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "display=" << to_string(display);
  out << ", " << "storeTabId="; (__isset.storeTabId ? (out << to_string(storeTabId)) : (out << "<null>"));
  out << ")";
}


VendorProduct::~VendorProduct() throw() {
}


void VendorProduct::__set_storeProductId(const StoreProductID& val) {
  this->storeProductId = val;
}

void VendorProduct::__set_appleProductId(const AppleProductID& val) {
  this->appleProductId = val;
__isset.appleProductId = true;
}

void VendorProduct::__set_googleProductId(const GoogleProductID& val) {
  this->googleProductId = val;
__isset.googleProductId = true;
}
std::ostream& operator<<(std::ostream& out, const VendorProduct& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VendorProduct::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_storeProductId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeProductId);
          isset_storeProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appleProductId);
          this->__isset.appleProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->googleProductId);
          this->__isset.googleProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_storeProductId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t VendorProduct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VendorProduct");

  xfer += oprot->writeFieldBegin("storeProductId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->storeProductId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.appleProductId) {
    xfer += oprot->writeFieldBegin("appleProductId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->appleProductId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.googleProductId) {
    xfer += oprot->writeFieldBegin("googleProductId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->googleProductId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VendorProduct &a, VendorProduct &b) {
  using ::std::swap;
  swap(a.storeProductId, b.storeProductId);
  swap(a.appleProductId, b.appleProductId);
  swap(a.googleProductId, b.googleProductId);
  swap(a.__isset, b.__isset);
}

VendorProduct::VendorProduct(const VendorProduct& other708) {
  storeProductId = other708.storeProductId;
  appleProductId = other708.appleProductId;
  googleProductId = other708.googleProductId;
  __isset = other708.__isset;
}
VendorProduct& VendorProduct::operator=(const VendorProduct& other709) {
  storeProductId = other709.storeProductId;
  appleProductId = other709.appleProductId;
  googleProductId = other709.googleProductId;
  __isset = other709.__isset;
  return *this;
}
void VendorProduct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VendorProduct(";
  out << "storeProductId=" << to_string(storeProductId);
  out << ", " << "appleProductId="; (__isset.appleProductId ? (out << to_string(appleProductId)) : (out << "<null>"));
  out << ", " << "googleProductId="; (__isset.googleProductId ? (out << to_string(googleProductId)) : (out << "<null>"));
  out << ")";
}


StoreProduct::~StoreProduct() throw() {
}


void StoreProduct::__set_storeProductId(const StoreProductID& val) {
  this->storeProductId = val;
}

void StoreProduct::__set_itemType(const LootItemType::type val) {
  this->itemType = val;
}

void StoreProduct::__set_itemId(const CurrencyID& val) {
  this->itemId = val;
}

void StoreProduct::__set_amount(const int32_t val) {
  this->amount = val;
}

void StoreProduct::__set_billingType(const StoreProductBillingType::type val) {
  this->billingType = val;
}

void StoreProduct::__set_billingCurrencyId(const CurrencyID& val) {
  this->billingCurrencyId = val;
__isset.billingCurrencyId = true;
}

void StoreProduct::__set_billingPrice(const int32_t val) {
  this->billingPrice = val;
__isset.billingPrice = true;
}

void StoreProduct::__set_icon(const AssetPath& val) {
  this->icon = val;
__isset.icon = true;
}

void StoreProduct::__set_listOrder(const int32_t val) {
  this->listOrder = val;
__isset.listOrder = true;
}

void StoreProduct::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
__isset.newDisplay = true;
}

void StoreProduct::__set_bundleId(const BundleID& val) {
  this->bundleId = val;
__isset.bundleId = true;
}

void StoreProduct::__set_debugPrice(const std::string& val) {
  this->debugPrice = val;
__isset.debugPrice = true;
}

void StoreProduct::__set_lootTableIds(const std::vector<LootTableID> & val) {
  this->lootTableIds = val;
}

void StoreProduct::__set_lootTableSpins(const std::vector<int32_t> & val) {
  this->lootTableSpins = val;
}

void StoreProduct::__set_details(const LocalizedString& val) {
  this->details = val;
__isset.details = true;
}

void StoreProduct::__set_disabled(const bool val) {
  this->disabled = val;
__isset.disabled = true;
}
std::ostream& operator<<(std::ostream& out, const StoreProduct& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StoreProduct::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_storeProductId = false;
  bool isset_itemType = false;
  bool isset_itemId = false;
  bool isset_amount = false;
  bool isset_billingType = false;
  bool isset_lootTableIds = false;
  bool isset_lootTableSpins = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeProductId);
          isset_storeProductId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast710;
          xfer += iprot->readI32(ecast710);
          this->itemType = (LootItemType::type)ecast710;
          isset_itemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemId);
          isset_itemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->amount);
          isset_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast711;
          xfer += iprot->readI32(ecast711);
          this->billingType = (StoreProductBillingType::type)ecast711;
          isset_billingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->billingCurrencyId);
          this->__isset.billingCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->billingPrice);
          this->__isset.billingPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icon);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->listOrder);
          this->__isset.listOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          this->__isset.newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bundleId);
          this->__isset.bundleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->debugPrice);
          this->__isset.debugPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableIds.clear();
            uint32_t _size712;
            ::apache::thrift::protocol::TType _etype715;
            xfer += iprot->readListBegin(_etype715, _size712);
            this->lootTableIds.resize(_size712);
            uint32_t _i716;
            for (_i716 = 0; _i716 < _size712; ++_i716)
            {
              xfer += iprot->readString(this->lootTableIds[_i716]);
            }
            xfer += iprot->readListEnd();
          }
          isset_lootTableIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableSpins.clear();
            uint32_t _size717;
            ::apache::thrift::protocol::TType _etype720;
            xfer += iprot->readListBegin(_etype720, _size717);
            this->lootTableSpins.resize(_size717);
            uint32_t _i721;
            for (_i721 = 0; _i721 < _size717; ++_i721)
            {
              xfer += iprot->readI32(this->lootTableSpins[_i721]);
            }
            xfer += iprot->readListEnd();
          }
          isset_lootTableSpins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->details.read(iprot);
          this->__isset.details = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disabled);
          this->__isset.disabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_storeProductId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_amount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_billingType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTableIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTableSpins)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoreProduct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StoreProduct");

  xfer += oprot->writeFieldBegin("storeProductId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->storeProductId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->itemType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->itemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("billingType", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->billingType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.billingCurrencyId) {
    xfer += oprot->writeFieldBegin("billingCurrencyId", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->billingCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.billingPrice) {
    xfer += oprot->writeFieldBegin("billingPrice", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->billingPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->icon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.listOrder) {
    xfer += oprot->writeFieldBegin("listOrder", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->listOrder);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDisplay) {
    xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->newDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleId) {
    xfer += oprot->writeFieldBegin("bundleId", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->bundleId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.debugPrice) {
    xfer += oprot->writeFieldBegin("debugPrice", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->debugPrice);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("lootTableIds", ::apache::thrift::protocol::T_LIST, 31);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->lootTableIds.size()));
    std::vector<LootTableID> ::const_iterator _iter722;
    for (_iter722 = this->lootTableIds.begin(); _iter722 != this->lootTableIds.end(); ++_iter722)
    {
      xfer += oprot->writeString((*_iter722));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootTableSpins", ::apache::thrift::protocol::T_LIST, 32);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->lootTableSpins.size()));
    std::vector<int32_t> ::const_iterator _iter723;
    for (_iter723 = this->lootTableSpins.begin(); _iter723 != this->lootTableSpins.end(); ++_iter723)
    {
      xfer += oprot->writeI32((*_iter723));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.details) {
    xfer += oprot->writeFieldBegin("details", ::apache::thrift::protocol::T_STRUCT, 40);
    xfer += this->details.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disabled) {
    xfer += oprot->writeFieldBegin("disabled", ::apache::thrift::protocol::T_BOOL, 50);
    xfer += oprot->writeBool(this->disabled);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoreProduct &a, StoreProduct &b) {
  using ::std::swap;
  swap(a.storeProductId, b.storeProductId);
  swap(a.itemType, b.itemType);
  swap(a.itemId, b.itemId);
  swap(a.amount, b.amount);
  swap(a.billingType, b.billingType);
  swap(a.billingCurrencyId, b.billingCurrencyId);
  swap(a.billingPrice, b.billingPrice);
  swap(a.icon, b.icon);
  swap(a.listOrder, b.listOrder);
  swap(a.newDisplay, b.newDisplay);
  swap(a.bundleId, b.bundleId);
  swap(a.debugPrice, b.debugPrice);
  swap(a.lootTableIds, b.lootTableIds);
  swap(a.lootTableSpins, b.lootTableSpins);
  swap(a.details, b.details);
  swap(a.disabled, b.disabled);
  swap(a.__isset, b.__isset);
}

StoreProduct::StoreProduct(const StoreProduct& other724) {
  storeProductId = other724.storeProductId;
  itemType = other724.itemType;
  itemId = other724.itemId;
  amount = other724.amount;
  billingType = other724.billingType;
  billingCurrencyId = other724.billingCurrencyId;
  billingPrice = other724.billingPrice;
  icon = other724.icon;
  listOrder = other724.listOrder;
  newDisplay = other724.newDisplay;
  bundleId = other724.bundleId;
  debugPrice = other724.debugPrice;
  lootTableIds = other724.lootTableIds;
  lootTableSpins = other724.lootTableSpins;
  details = other724.details;
  disabled = other724.disabled;
  __isset = other724.__isset;
}
StoreProduct& StoreProduct::operator=(const StoreProduct& other725) {
  storeProductId = other725.storeProductId;
  itemType = other725.itemType;
  itemId = other725.itemId;
  amount = other725.amount;
  billingType = other725.billingType;
  billingCurrencyId = other725.billingCurrencyId;
  billingPrice = other725.billingPrice;
  icon = other725.icon;
  listOrder = other725.listOrder;
  newDisplay = other725.newDisplay;
  bundleId = other725.bundleId;
  debugPrice = other725.debugPrice;
  lootTableIds = other725.lootTableIds;
  lootTableSpins = other725.lootTableSpins;
  details = other725.details;
  disabled = other725.disabled;
  __isset = other725.__isset;
  return *this;
}
void StoreProduct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StoreProduct(";
  out << "storeProductId=" << to_string(storeProductId);
  out << ", " << "itemType=" << to_string(itemType);
  out << ", " << "itemId=" << to_string(itemId);
  out << ", " << "amount=" << to_string(amount);
  out << ", " << "billingType=" << to_string(billingType);
  out << ", " << "billingCurrencyId="; (__isset.billingCurrencyId ? (out << to_string(billingCurrencyId)) : (out << "<null>"));
  out << ", " << "billingPrice="; (__isset.billingPrice ? (out << to_string(billingPrice)) : (out << "<null>"));
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ", " << "listOrder="; (__isset.listOrder ? (out << to_string(listOrder)) : (out << "<null>"));
  out << ", " << "newDisplay="; (__isset.newDisplay ? (out << to_string(newDisplay)) : (out << "<null>"));
  out << ", " << "bundleId="; (__isset.bundleId ? (out << to_string(bundleId)) : (out << "<null>"));
  out << ", " << "debugPrice="; (__isset.debugPrice ? (out << to_string(debugPrice)) : (out << "<null>"));
  out << ", " << "lootTableIds=" << to_string(lootTableIds);
  out << ", " << "lootTableSpins=" << to_string(lootTableSpins);
  out << ", " << "details="; (__isset.details ? (out << to_string(details)) : (out << "<null>"));
  out << ", " << "disabled="; (__isset.disabled ? (out << to_string(disabled)) : (out << "<null>"));
  out << ")";
}


BuyItemOrder::~BuyItemOrder() throw() {
}


void BuyItemOrder::__set_orderId(const MarketOrderID& val) {
  this->orderId = val;
}

void BuyItemOrder::__set_marketType(const MarketType::type val) {
  this->marketType = val;
}

void BuyItemOrder::__set_buyCurrencyId(const CurrencyID& val) {
  this->buyCurrencyId = val;
}

void BuyItemOrder::__set_buyCurrencyAmount(const int32_t val) {
  this->buyCurrencyAmount = val;
}

void BuyItemOrder::__set_priceCurrencyId(const CurrencyID& val) {
  this->priceCurrencyId = val;
}

void BuyItemOrder::__set_price(const int32_t val) {
  this->price = val;
}

void BuyItemOrder::__set_eventLockId(const EventLockID& val) {
  this->eventLockId = val;
}
std::ostream& operator<<(std::ostream& out, const BuyItemOrder& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuyItemOrder::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_orderId = false;
  bool isset_marketType = false;
  bool isset_buyCurrencyId = false;
  bool isset_buyCurrencyAmount = false;
  bool isset_priceCurrencyId = false;
  bool isset_price = false;
  bool isset_eventLockId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderId);
          isset_orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast726;
          xfer += iprot->readI32(ecast726);
          this->marketType = (MarketType::type)ecast726;
          isset_marketType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buyCurrencyId);
          isset_buyCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buyCurrencyAmount);
          isset_buyCurrencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->priceCurrencyId);
          isset_priceCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->price);
          isset_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventLockId);
          isset_eventLockId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_orderId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_marketType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buyCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buyCurrencyAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priceCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_price)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventLockId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BuyItemOrder::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuyItemOrder");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->orderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("marketType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->marketType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyCurrencyId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->buyCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyCurrencyAmount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->buyCurrencyAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priceCurrencyId", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->priceCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventLockId", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->eventLockId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuyItemOrder &a, BuyItemOrder &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.marketType, b.marketType);
  swap(a.buyCurrencyId, b.buyCurrencyId);
  swap(a.buyCurrencyAmount, b.buyCurrencyAmount);
  swap(a.priceCurrencyId, b.priceCurrencyId);
  swap(a.price, b.price);
  swap(a.eventLockId, b.eventLockId);
}

BuyItemOrder::BuyItemOrder(const BuyItemOrder& other727) {
  orderId = other727.orderId;
  marketType = other727.marketType;
  buyCurrencyId = other727.buyCurrencyId;
  buyCurrencyAmount = other727.buyCurrencyAmount;
  priceCurrencyId = other727.priceCurrencyId;
  price = other727.price;
  eventLockId = other727.eventLockId;
}
BuyItemOrder& BuyItemOrder::operator=(const BuyItemOrder& other728) {
  orderId = other728.orderId;
  marketType = other728.marketType;
  buyCurrencyId = other728.buyCurrencyId;
  buyCurrencyAmount = other728.buyCurrencyAmount;
  priceCurrencyId = other728.priceCurrencyId;
  price = other728.price;
  eventLockId = other728.eventLockId;
  return *this;
}
void BuyItemOrder::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuyItemOrder(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "marketType=" << to_string(marketType);
  out << ", " << "buyCurrencyId=" << to_string(buyCurrencyId);
  out << ", " << "buyCurrencyAmount=" << to_string(buyCurrencyAmount);
  out << ", " << "priceCurrencyId=" << to_string(priceCurrencyId);
  out << ", " << "price=" << to_string(price);
  out << ", " << "eventLockId=" << to_string(eventLockId);
  out << ")";
}


Market::~Market() throw() {
}


void Market::__set_marketTypeId(const MarketType::type val) {
  this->marketTypeId = val;
}

void Market::__set_numberOfSlots(const int32_t val) {
  this->numberOfSlots = val;
__isset.numberOfSlots = true;
}

void Market::__set_openForInSecs(const int32_t val) {
  this->openForInSecs = val;
__isset.openForInSecs = true;
}
std::ostream& operator<<(std::ostream& out, const Market& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Market::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_marketTypeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast729;
          xfer += iprot->readI32(ecast729);
          this->marketTypeId = (MarketType::type)ecast729;
          isset_marketTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfSlots);
          this->__isset.numberOfSlots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->openForInSecs);
          this->__isset.openForInSecs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_marketTypeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Market::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Market");

  xfer += oprot->writeFieldBegin("marketTypeId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->marketTypeId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.numberOfSlots) {
    xfer += oprot->writeFieldBegin("numberOfSlots", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->numberOfSlots);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openForInSecs) {
    xfer += oprot->writeFieldBegin("openForInSecs", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->openForInSecs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Market &a, Market &b) {
  using ::std::swap;
  swap(a.marketTypeId, b.marketTypeId);
  swap(a.numberOfSlots, b.numberOfSlots);
  swap(a.openForInSecs, b.openForInSecs);
  swap(a.__isset, b.__isset);
}

Market::Market(const Market& other730) {
  marketTypeId = other730.marketTypeId;
  numberOfSlots = other730.numberOfSlots;
  openForInSecs = other730.openForInSecs;
  __isset = other730.__isset;
}
Market& Market::operator=(const Market& other731) {
  marketTypeId = other731.marketTypeId;
  numberOfSlots = other731.numberOfSlots;
  openForInSecs = other731.openForInSecs;
  __isset = other731.__isset;
  return *this;
}
void Market::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Market(";
  out << "marketTypeId=" << to_string(marketTypeId);
  out << ", " << "numberOfSlots="; (__isset.numberOfSlots ? (out << to_string(numberOfSlots)) : (out << "<null>"));
  out << ", " << "openForInSecs="; (__isset.openForInSecs ? (out << to_string(openForInSecs)) : (out << "<null>"));
  out << ")";
}


Achievement::~Achievement() throw() {
}


void Achievement::__set_achievementId(const AchievementID& val) {
  this->achievementId = val;
}

void Achievement::__set_minRank(const int32_t val) {
  this->minRank = val;
__isset.minRank = true;
}

void Achievement::__set_achievementType(const AchievementType::type val) {
  this->achievementType = val;
}

void Achievement::__set_requiredAmount(const int32_t val) {
  this->requiredAmount = val;
}

void Achievement::__set_newDisplay(const LocalizedString& val) {
  this->newDisplay = val;
}

void Achievement::__set_newDescription(const LocalizedString& val) {
  this->newDescription = val;
}

void Achievement::__set_param(const std::string& val) {
  this->param = val;
__isset.param = true;
}

void Achievement::__set_rewardCurrencyIds(const std::vector<CurrencyID> & val) {
  this->rewardCurrencyIds = val;
__isset.rewardCurrencyIds = true;
}

void Achievement::__set_rewardAmounts(const std::vector<int32_t> & val) {
  this->rewardAmounts = val;
__isset.rewardAmounts = true;
}

void Achievement::__set_achievementGroupId(const AchievementGroupID& val) {
  this->achievementGroupId = val;
__isset.achievementGroupId = true;
}

void Achievement::__set_achievementGroupOrder(const int32_t val) {
  this->achievementGroupOrder = val;
__isset.achievementGroupOrder = true;
}

void Achievement::__set_goButtonFtue(const std::string& val) {
  this->goButtonFtue = val;
__isset.goButtonFtue = true;
}

void Achievement::__set_catalogImage(const AssetPath& val) {
  this->catalogImage = val;
__isset.catalogImage = true;
}

void Achievement::__set_forceShowMe(const bool val) {
  this->forceShowMe = val;
__isset.forceShowMe = true;
}

void Achievement::__set_noAutoPop(const bool val) {
  this->noAutoPop = val;
__isset.noAutoPop = true;
}
std::ostream& operator<<(std::ostream& out, const Achievement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Achievement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_achievementId = false;
  bool isset_achievementType = false;
  bool isset_requiredAmount = false;
  bool isset_newDisplay = false;
  bool isset_newDescription = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->achievementId);
          isset_achievementId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRank);
          this->__isset.minRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast732;
          xfer += iprot->readI32(ecast732);
          this->achievementType = (AchievementType::type)ecast732;
          isset_achievementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requiredAmount);
          isset_requiredAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDisplay.read(iprot);
          isset_newDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newDescription.read(iprot);
          isset_newDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param);
          this->__isset.param = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rewardCurrencyIds.clear();
            uint32_t _size733;
            ::apache::thrift::protocol::TType _etype736;
            xfer += iprot->readListBegin(_etype736, _size733);
            this->rewardCurrencyIds.resize(_size733);
            uint32_t _i737;
            for (_i737 = 0; _i737 < _size733; ++_i737)
            {
              xfer += iprot->readString(this->rewardCurrencyIds[_i737]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rewardCurrencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rewardAmounts.clear();
            uint32_t _size738;
            ::apache::thrift::protocol::TType _etype741;
            xfer += iprot->readListBegin(_etype741, _size738);
            this->rewardAmounts.resize(_size738);
            uint32_t _i742;
            for (_i742 = 0; _i742 < _size738; ++_i742)
            {
              xfer += iprot->readI32(this->rewardAmounts[_i742]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rewardAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->achievementGroupId);
          this->__isset.achievementGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->achievementGroupOrder);
          this->__isset.achievementGroupOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->goButtonFtue);
          this->__isset.goButtonFtue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catalogImage);
          this->__isset.catalogImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->forceShowMe);
          this->__isset.forceShowMe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noAutoPop);
          this->__isset.noAutoPop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_achievementId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_achievementType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_requiredAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_newDisplay)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_newDescription)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Achievement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Achievement");

  xfer += oprot->writeFieldBegin("achievementId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->achievementId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.minRank) {
    xfer += oprot->writeFieldBegin("minRank", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->minRank);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("achievementType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->achievementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requiredAmount", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->requiredAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newDisplay", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->newDisplay.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newDescription", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->newDescription.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.param) {
    xfer += oprot->writeFieldBegin("param", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->param);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rewardCurrencyIds) {
    xfer += oprot->writeFieldBegin("rewardCurrencyIds", ::apache::thrift::protocol::T_LIST, 20);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->rewardCurrencyIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter743;
      for (_iter743 = this->rewardCurrencyIds.begin(); _iter743 != this->rewardCurrencyIds.end(); ++_iter743)
      {
        xfer += oprot->writeString((*_iter743));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rewardAmounts) {
    xfer += oprot->writeFieldBegin("rewardAmounts", ::apache::thrift::protocol::T_LIST, 21);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->rewardAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter744;
      for (_iter744 = this->rewardAmounts.begin(); _iter744 != this->rewardAmounts.end(); ++_iter744)
      {
        xfer += oprot->writeI32((*_iter744));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.achievementGroupId) {
    xfer += oprot->writeFieldBegin("achievementGroupId", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->achievementGroupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.achievementGroupOrder) {
    xfer += oprot->writeFieldBegin("achievementGroupOrder", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32(this->achievementGroupOrder);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goButtonFtue) {
    xfer += oprot->writeFieldBegin("goButtonFtue", ::apache::thrift::protocol::T_STRING, 32);
    xfer += oprot->writeString(this->goButtonFtue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catalogImage) {
    xfer += oprot->writeFieldBegin("catalogImage", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->catalogImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.forceShowMe) {
    xfer += oprot->writeFieldBegin("forceShowMe", ::apache::thrift::protocol::T_BOOL, 50);
    xfer += oprot->writeBool(this->forceShowMe);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noAutoPop) {
    xfer += oprot->writeFieldBegin("noAutoPop", ::apache::thrift::protocol::T_BOOL, 51);
    xfer += oprot->writeBool(this->noAutoPop);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Achievement &a, Achievement &b) {
  using ::std::swap;
  swap(a.achievementId, b.achievementId);
  swap(a.minRank, b.minRank);
  swap(a.achievementType, b.achievementType);
  swap(a.requiredAmount, b.requiredAmount);
  swap(a.newDisplay, b.newDisplay);
  swap(a.newDescription, b.newDescription);
  swap(a.param, b.param);
  swap(a.rewardCurrencyIds, b.rewardCurrencyIds);
  swap(a.rewardAmounts, b.rewardAmounts);
  swap(a.achievementGroupId, b.achievementGroupId);
  swap(a.achievementGroupOrder, b.achievementGroupOrder);
  swap(a.goButtonFtue, b.goButtonFtue);
  swap(a.catalogImage, b.catalogImage);
  swap(a.forceShowMe, b.forceShowMe);
  swap(a.noAutoPop, b.noAutoPop);
  swap(a.__isset, b.__isset);
}

Achievement::Achievement(const Achievement& other745) {
  achievementId = other745.achievementId;
  minRank = other745.minRank;
  achievementType = other745.achievementType;
  requiredAmount = other745.requiredAmount;
  newDisplay = other745.newDisplay;
  newDescription = other745.newDescription;
  param = other745.param;
  rewardCurrencyIds = other745.rewardCurrencyIds;
  rewardAmounts = other745.rewardAmounts;
  achievementGroupId = other745.achievementGroupId;
  achievementGroupOrder = other745.achievementGroupOrder;
  goButtonFtue = other745.goButtonFtue;
  catalogImage = other745.catalogImage;
  forceShowMe = other745.forceShowMe;
  noAutoPop = other745.noAutoPop;
  __isset = other745.__isset;
}
Achievement& Achievement::operator=(const Achievement& other746) {
  achievementId = other746.achievementId;
  minRank = other746.minRank;
  achievementType = other746.achievementType;
  requiredAmount = other746.requiredAmount;
  newDisplay = other746.newDisplay;
  newDescription = other746.newDescription;
  param = other746.param;
  rewardCurrencyIds = other746.rewardCurrencyIds;
  rewardAmounts = other746.rewardAmounts;
  achievementGroupId = other746.achievementGroupId;
  achievementGroupOrder = other746.achievementGroupOrder;
  goButtonFtue = other746.goButtonFtue;
  catalogImage = other746.catalogImage;
  forceShowMe = other746.forceShowMe;
  noAutoPop = other746.noAutoPop;
  __isset = other746.__isset;
  return *this;
}
void Achievement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Achievement(";
  out << "achievementId=" << to_string(achievementId);
  out << ", " << "minRank="; (__isset.minRank ? (out << to_string(minRank)) : (out << "<null>"));
  out << ", " << "achievementType=" << to_string(achievementType);
  out << ", " << "requiredAmount=" << to_string(requiredAmount);
  out << ", " << "newDisplay=" << to_string(newDisplay);
  out << ", " << "newDescription=" << to_string(newDescription);
  out << ", " << "param="; (__isset.param ? (out << to_string(param)) : (out << "<null>"));
  out << ", " << "rewardCurrencyIds="; (__isset.rewardCurrencyIds ? (out << to_string(rewardCurrencyIds)) : (out << "<null>"));
  out << ", " << "rewardAmounts="; (__isset.rewardAmounts ? (out << to_string(rewardAmounts)) : (out << "<null>"));
  out << ", " << "achievementGroupId="; (__isset.achievementGroupId ? (out << to_string(achievementGroupId)) : (out << "<null>"));
  out << ", " << "achievementGroupOrder="; (__isset.achievementGroupOrder ? (out << to_string(achievementGroupOrder)) : (out << "<null>"));
  out << ", " << "goButtonFtue="; (__isset.goButtonFtue ? (out << to_string(goButtonFtue)) : (out << "<null>"));
  out << ", " << "catalogImage="; (__isset.catalogImage ? (out << to_string(catalogImage)) : (out << "<null>"));
  out << ", " << "forceShowMe="; (__isset.forceShowMe ? (out << to_string(forceShowMe)) : (out << "<null>"));
  out << ", " << "noAutoPop="; (__isset.noAutoPop ? (out << to_string(noAutoPop)) : (out << "<null>"));
  out << ")";
}


AchievementGroup::~AchievementGroup() throw() {
}


void AchievementGroup::__set_achievementGroupId(const AchievementGroupID& val) {
  this->achievementGroupId = val;
}

void AchievementGroup::__set_eventLockId(const EventLockID& val) {
  this->eventLockId = val;
__isset.eventLockId = true;
}

void AchievementGroup::__set_order(const int32_t val) {
  this->order = val;
__isset.order = true;
}
std::ostream& operator<<(std::ostream& out, const AchievementGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AchievementGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_achievementGroupId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->achievementGroupId);
          isset_achievementGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventLockId);
          this->__isset.eventLockId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_achievementGroupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AchievementGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AchievementGroup");

  xfer += oprot->writeFieldBegin("achievementGroupId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->achievementGroupId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventLockId) {
    xfer += oprot->writeFieldBegin("eventLockId", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->eventLockId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.order) {
    xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32(this->order);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AchievementGroup &a, AchievementGroup &b) {
  using ::std::swap;
  swap(a.achievementGroupId, b.achievementGroupId);
  swap(a.eventLockId, b.eventLockId);
  swap(a.order, b.order);
  swap(a.__isset, b.__isset);
}

AchievementGroup::AchievementGroup(const AchievementGroup& other747) {
  achievementGroupId = other747.achievementGroupId;
  eventLockId = other747.eventLockId;
  order = other747.order;
  __isset = other747.__isset;
}
AchievementGroup& AchievementGroup::operator=(const AchievementGroup& other748) {
  achievementGroupId = other748.achievementGroupId;
  eventLockId = other748.eventLockId;
  order = other748.order;
  __isset = other748.__isset;
  return *this;
}
void AchievementGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AchievementGroup(";
  out << "achievementGroupId=" << to_string(achievementGroupId);
  out << ", " << "eventLockId="; (__isset.eventLockId ? (out << to_string(eventLockId)) : (out << "<null>"));
  out << ", " << "order="; (__isset.order ? (out << to_string(order)) : (out << "<null>"));
  out << ")";
}


Goal::~Goal() throw() {
}


void Goal::__set_goalId(const GoalID& val) {
  this->goalId = val;
}

void Goal::__set_displayText(const LocalizedString& val) {
  this->displayText = val;
}

void Goal::__set_questId(const QuestID& val) {
  this->questId = val;
}

void Goal::__set_orderIndex(const int32_t val) {
  this->orderIndex = val;
}

void Goal::__set_goalType(const GoalType::type val) {
  this->goalType = val;
}

void Goal::__set_requiredProgress(const int32_t val) {
  this->requiredProgress = val;
}

void Goal::__set_requiredRank(const RankID val) {
  this->requiredRank = val;
__isset.requiredRank = true;
}

void Goal::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
__isset.eventIds = true;
}

void Goal::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
__isset.eventPhases = true;
}

void Goal::__set_levelId(const LevelID& val) {
  this->levelId = val;
__isset.levelId = true;
}

void Goal::__set_buildingType(const BuildingType::type val) {
  this->buildingType = val;
__isset.buildingType = true;
}

void Goal::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
__isset.buildingId = true;
}

void Goal::__set_rarity(const RarityID val) {
  this->rarity = val;
__isset.rarity = true;
}

void Goal::__set_evoLevel(const int32_t val) {
  this->evoLevel = val;
__isset.evoLevel = true;
}

void Goal::__set_gearId(const CurrencyID& val) {
  this->gearId = val;
__isset.gearId = true;
}

void Goal::__set_boosterId(const BoostID& val) {
  this->boosterId = val;
__isset.boosterId = true;
}

void Goal::__set_cellTypes(const std::vector<CellTypeID> & val) {
  this->cellTypes = val;
__isset.cellTypes = true;
}

void Goal::__set_levelStars(const int32_t val) {
  this->levelStars = val;
__isset.levelStars = true;
}

void Goal::__set_offerId(const GachaOfferID& val) {
  this->offerId = val;
__isset.offerId = true;
}
std::ostream& operator<<(std::ostream& out, const Goal& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Goal::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_goalId = false;
  bool isset_displayText = false;
  bool isset_questId = false;
  bool isset_orderIndex = false;
  bool isset_goalType = false;
  bool isset_requiredProgress = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->goalId);
          isset_goalId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->displayText.read(iprot);
          isset_displayText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->questId);
          isset_questId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderIndex);
          isset_orderIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast749;
          xfer += iprot->readI32(ecast749);
          this->goalType = (GoalType::type)ecast749;
          isset_goalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requiredProgress);
          isset_requiredProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requiredRank);
          this->__isset.requiredRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size750;
            ::apache::thrift::protocol::TType _etype753;
            xfer += iprot->readListBegin(_etype753, _size750);
            this->eventIds.resize(_size750);
            uint32_t _i754;
            for (_i754 = 0; _i754 < _size750; ++_i754)
            {
              xfer += iprot->readString(this->eventIds[_i754]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast755;
          xfer += iprot->readI32(ecast755);
          this->eventPhases = (EventPhases::type)ecast755;
          this->__isset.eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelId);
          this->__isset.levelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast756;
          xfer += iprot->readI32(ecast756);
          this->buildingType = (BuildingType::type)ecast756;
          this->__isset.buildingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          this->__isset.buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rarity);
          this->__isset.rarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->evoLevel);
          this->__isset.evoLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gearId);
          this->__isset.gearId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->boosterId);
          this->__isset.boosterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cellTypes.clear();
            uint32_t _size757;
            ::apache::thrift::protocol::TType _etype760;
            xfer += iprot->readListBegin(_etype760, _size757);
            this->cellTypes.resize(_size757);
            uint32_t _i761;
            for (_i761 = 0; _i761 < _size757; ++_i761)
            {
              xfer += iprot->readString(this->cellTypes[_i761]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cellTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->levelStars);
          this->__isset.levelStars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->offerId);
          this->__isset.offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_goalId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_orderIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goalType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_requiredProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Goal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Goal");

  xfer += oprot->writeFieldBegin("goalId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->goalId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayText", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->displayText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->questId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderIndex", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->orderIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalType", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->goalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requiredProgress", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->requiredProgress);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.requiredRank) {
    xfer += oprot->writeFieldBegin("requiredRank", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->requiredRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventIds) {
    xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 20);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
      std::vector<EventID> ::const_iterator _iter762;
      for (_iter762 = this->eventIds.begin(); _iter762 != this->eventIds.end(); ++_iter762)
      {
        xfer += oprot->writeString((*_iter762));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPhases) {
    xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 21);
    xfer += oprot->writeI32((int32_t)this->eventPhases);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelId) {
    xfer += oprot->writeFieldBegin("levelId", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->levelId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildingType) {
    xfer += oprot->writeFieldBegin("buildingType", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32((int32_t)this->buildingType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildingId) {
    xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 33);
    xfer += oprot->writeString(this->buildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rarity) {
    xfer += oprot->writeFieldBegin("rarity", ::apache::thrift::protocol::T_I32, 34);
    xfer += oprot->writeI32(this->rarity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.evoLevel) {
    xfer += oprot->writeFieldBegin("evoLevel", ::apache::thrift::protocol::T_I32, 36);
    xfer += oprot->writeI32(this->evoLevel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gearId) {
    xfer += oprot->writeFieldBegin("gearId", ::apache::thrift::protocol::T_STRING, 37);
    xfer += oprot->writeString(this->gearId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.boosterId) {
    xfer += oprot->writeFieldBegin("boosterId", ::apache::thrift::protocol::T_STRING, 38);
    xfer += oprot->writeString(this->boosterId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cellTypes) {
    xfer += oprot->writeFieldBegin("cellTypes", ::apache::thrift::protocol::T_LIST, 39);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->cellTypes.size()));
      std::vector<CellTypeID> ::const_iterator _iter763;
      for (_iter763 = this->cellTypes.begin(); _iter763 != this->cellTypes.end(); ++_iter763)
      {
        xfer += oprot->writeString((*_iter763));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelStars) {
    xfer += oprot->writeFieldBegin("levelStars", ::apache::thrift::protocol::T_I32, 40);
    xfer += oprot->writeI32(this->levelStars);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offerId) {
    xfer += oprot->writeFieldBegin("offerId", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->offerId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Goal &a, Goal &b) {
  using ::std::swap;
  swap(a.goalId, b.goalId);
  swap(a.displayText, b.displayText);
  swap(a.questId, b.questId);
  swap(a.orderIndex, b.orderIndex);
  swap(a.goalType, b.goalType);
  swap(a.requiredProgress, b.requiredProgress);
  swap(a.requiredRank, b.requiredRank);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.levelId, b.levelId);
  swap(a.buildingType, b.buildingType);
  swap(a.buildingId, b.buildingId);
  swap(a.rarity, b.rarity);
  swap(a.evoLevel, b.evoLevel);
  swap(a.gearId, b.gearId);
  swap(a.boosterId, b.boosterId);
  swap(a.cellTypes, b.cellTypes);
  swap(a.levelStars, b.levelStars);
  swap(a.offerId, b.offerId);
  swap(a.__isset, b.__isset);
}

Goal::Goal(const Goal& other764) {
  goalId = other764.goalId;
  displayText = other764.displayText;
  questId = other764.questId;
  orderIndex = other764.orderIndex;
  goalType = other764.goalType;
  requiredProgress = other764.requiredProgress;
  requiredRank = other764.requiredRank;
  eventIds = other764.eventIds;
  eventPhases = other764.eventPhases;
  levelId = other764.levelId;
  buildingType = other764.buildingType;
  buildingId = other764.buildingId;
  rarity = other764.rarity;
  evoLevel = other764.evoLevel;
  gearId = other764.gearId;
  boosterId = other764.boosterId;
  cellTypes = other764.cellTypes;
  levelStars = other764.levelStars;
  offerId = other764.offerId;
  __isset = other764.__isset;
}
Goal& Goal::operator=(const Goal& other765) {
  goalId = other765.goalId;
  displayText = other765.displayText;
  questId = other765.questId;
  orderIndex = other765.orderIndex;
  goalType = other765.goalType;
  requiredProgress = other765.requiredProgress;
  requiredRank = other765.requiredRank;
  eventIds = other765.eventIds;
  eventPhases = other765.eventPhases;
  levelId = other765.levelId;
  buildingType = other765.buildingType;
  buildingId = other765.buildingId;
  rarity = other765.rarity;
  evoLevel = other765.evoLevel;
  gearId = other765.gearId;
  boosterId = other765.boosterId;
  cellTypes = other765.cellTypes;
  levelStars = other765.levelStars;
  offerId = other765.offerId;
  __isset = other765.__isset;
  return *this;
}
void Goal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Goal(";
  out << "goalId=" << to_string(goalId);
  out << ", " << "displayText=" << to_string(displayText);
  out << ", " << "questId=" << to_string(questId);
  out << ", " << "orderIndex=" << to_string(orderIndex);
  out << ", " << "goalType=" << to_string(goalType);
  out << ", " << "requiredProgress=" << to_string(requiredProgress);
  out << ", " << "requiredRank="; (__isset.requiredRank ? (out << to_string(requiredRank)) : (out << "<null>"));
  out << ", " << "eventIds="; (__isset.eventIds ? (out << to_string(eventIds)) : (out << "<null>"));
  out << ", " << "eventPhases="; (__isset.eventPhases ? (out << to_string(eventPhases)) : (out << "<null>"));
  out << ", " << "levelId="; (__isset.levelId ? (out << to_string(levelId)) : (out << "<null>"));
  out << ", " << "buildingType="; (__isset.buildingType ? (out << to_string(buildingType)) : (out << "<null>"));
  out << ", " << "buildingId="; (__isset.buildingId ? (out << to_string(buildingId)) : (out << "<null>"));
  out << ", " << "rarity="; (__isset.rarity ? (out << to_string(rarity)) : (out << "<null>"));
  out << ", " << "evoLevel="; (__isset.evoLevel ? (out << to_string(evoLevel)) : (out << "<null>"));
  out << ", " << "gearId="; (__isset.gearId ? (out << to_string(gearId)) : (out << "<null>"));
  out << ", " << "boosterId="; (__isset.boosterId ? (out << to_string(boosterId)) : (out << "<null>"));
  out << ", " << "cellTypes="; (__isset.cellTypes ? (out << to_string(cellTypes)) : (out << "<null>"));
  out << ", " << "levelStars="; (__isset.levelStars ? (out << to_string(levelStars)) : (out << "<null>"));
  out << ", " << "offerId="; (__isset.offerId ? (out << to_string(offerId)) : (out << "<null>"));
  out << ")";
}


QuestNpc::~QuestNpc() throw() {
}


void QuestNpc::__set_questNpcId(const QuestNpcID& val) {
  this->questNpcId = val;
}

void QuestNpc::__set_npcId(const NpcID& val) {
  this->npcId = val;
}

void QuestNpc::__set_questDescriptionText(const LocalizedString& val) {
  this->questDescriptionText = val;
}

void QuestNpc::__set_questCompletedText(const LocalizedString& val) {
  this->questCompletedText = val;
}

void QuestNpc::__set_backgroundImage(const AssetPath& val) {
  this->backgroundImage = val;
__isset.backgroundImage = true;
}
std::ostream& operator<<(std::ostream& out, const QuestNpc& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QuestNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_questNpcId = false;
  bool isset_npcId = false;
  bool isset_questDescriptionText = false;
  bool isset_questCompletedText = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->questNpcId);
          isset_questNpcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->npcId);
          isset_npcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->questDescriptionText.read(iprot);
          isset_questDescriptionText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->questCompletedText.read(iprot);
          isset_questCompletedText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backgroundImage);
          this->__isset.backgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_questNpcId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npcId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questDescriptionText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questCompletedText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QuestNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QuestNpc");

  xfer += oprot->writeFieldBegin("questNpcId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->questNpcId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npcId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->npcId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questDescriptionText", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->questDescriptionText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questCompletedText", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->questCompletedText.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.backgroundImage) {
    xfer += oprot->writeFieldBegin("backgroundImage", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->backgroundImage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuestNpc &a, QuestNpc &b) {
  using ::std::swap;
  swap(a.questNpcId, b.questNpcId);
  swap(a.npcId, b.npcId);
  swap(a.questDescriptionText, b.questDescriptionText);
  swap(a.questCompletedText, b.questCompletedText);
  swap(a.backgroundImage, b.backgroundImage);
  swap(a.__isset, b.__isset);
}

QuestNpc::QuestNpc(const QuestNpc& other766) {
  questNpcId = other766.questNpcId;
  npcId = other766.npcId;
  questDescriptionText = other766.questDescriptionText;
  questCompletedText = other766.questCompletedText;
  backgroundImage = other766.backgroundImage;
  __isset = other766.__isset;
}
QuestNpc& QuestNpc::operator=(const QuestNpc& other767) {
  questNpcId = other767.questNpcId;
  npcId = other767.npcId;
  questDescriptionText = other767.questDescriptionText;
  questCompletedText = other767.questCompletedText;
  backgroundImage = other767.backgroundImage;
  __isset = other767.__isset;
  return *this;
}
void QuestNpc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QuestNpc(";
  out << "questNpcId=" << to_string(questNpcId);
  out << ", " << "npcId=" << to_string(npcId);
  out << ", " << "questDescriptionText=" << to_string(questDescriptionText);
  out << ", " << "questCompletedText=" << to_string(questCompletedText);
  out << ", " << "backgroundImage="; (__isset.backgroundImage ? (out << to_string(backgroundImage)) : (out << "<null>"));
  out << ")";
}


BusinessQuestNpc::~BusinessQuestNpc() throw() {
}


void BusinessQuestNpc::__set_baseBusinessId(const BuildingID& val) {
  this->baseBusinessId = val;
}

void BusinessQuestNpc::__set_questNpcId(const QuestNpcID& val) {
  this->questNpcId = val;
}
std::ostream& operator<<(std::ostream& out, const BusinessQuestNpc& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BusinessQuestNpc::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_baseBusinessId = false;
  bool isset_questNpcId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->baseBusinessId);
          isset_baseBusinessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->questNpcId);
          isset_questNpcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_baseBusinessId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questNpcId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BusinessQuestNpc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessQuestNpc");

  xfer += oprot->writeFieldBegin("baseBusinessId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->baseBusinessId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questNpcId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->questNpcId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessQuestNpc &a, BusinessQuestNpc &b) {
  using ::std::swap;
  swap(a.baseBusinessId, b.baseBusinessId);
  swap(a.questNpcId, b.questNpcId);
}

BusinessQuestNpc::BusinessQuestNpc(const BusinessQuestNpc& other768) {
  baseBusinessId = other768.baseBusinessId;
  questNpcId = other768.questNpcId;
}
BusinessQuestNpc& BusinessQuestNpc::operator=(const BusinessQuestNpc& other769) {
  baseBusinessId = other769.baseBusinessId;
  questNpcId = other769.questNpcId;
  return *this;
}
void BusinessQuestNpc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessQuestNpc(";
  out << "baseBusinessId=" << to_string(baseBusinessId);
  out << ", " << "questNpcId=" << to_string(questNpcId);
  out << ")";
}


GuildQuestReward::~GuildQuestReward() throw() {
}


void GuildQuestReward::__set_guildQuestRewardId(const GuildQuestRewardID& val) {
  this->guildQuestRewardId = val;
}

void GuildQuestReward::__set_rewardRecipientType(const GuildQuestRewardType::type val) {
  this->rewardRecipientType = val;
}

void GuildQuestReward::__set_lootTableIds(const std::vector<LootTableID> & val) {
  this->lootTableIds = val;
}

void GuildQuestReward::__set_lootTableSpins(const std::vector<int32_t> & val) {
  this->lootTableSpins = val;
}
std::ostream& operator<<(std::ostream& out, const GuildQuestReward& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildQuestReward::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guildQuestRewardId = false;
  bool isset_rewardRecipientType = false;
  bool isset_lootTableIds = false;
  bool isset_lootTableSpins = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guildQuestRewardId);
          isset_guildQuestRewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast770;
          xfer += iprot->readI32(ecast770);
          this->rewardRecipientType = (GuildQuestRewardType::type)ecast770;
          isset_rewardRecipientType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableIds.clear();
            uint32_t _size771;
            ::apache::thrift::protocol::TType _etype774;
            xfer += iprot->readListBegin(_etype774, _size771);
            this->lootTableIds.resize(_size771);
            uint32_t _i775;
            for (_i775 = 0; _i775 < _size771; ++_i775)
            {
              xfer += iprot->readString(this->lootTableIds[_i775]);
            }
            xfer += iprot->readListEnd();
          }
          isset_lootTableIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableSpins.clear();
            uint32_t _size776;
            ::apache::thrift::protocol::TType _etype779;
            xfer += iprot->readListBegin(_etype779, _size776);
            this->lootTableSpins.resize(_size776);
            uint32_t _i780;
            for (_i780 = 0; _i780 < _size776; ++_i780)
            {
              xfer += iprot->readI32(this->lootTableSpins[_i780]);
            }
            xfer += iprot->readListEnd();
          }
          isset_lootTableSpins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guildQuestRewardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardRecipientType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTableIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTableSpins)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildQuestReward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildQuestReward");

  xfer += oprot->writeFieldBegin("guildQuestRewardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guildQuestRewardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardRecipientType", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->rewardRecipientType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootTableIds", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->lootTableIds.size()));
    std::vector<LootTableID> ::const_iterator _iter781;
    for (_iter781 = this->lootTableIds.begin(); _iter781 != this->lootTableIds.end(); ++_iter781)
    {
      xfer += oprot->writeString((*_iter781));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootTableSpins", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->lootTableSpins.size()));
    std::vector<int32_t> ::const_iterator _iter782;
    for (_iter782 = this->lootTableSpins.begin(); _iter782 != this->lootTableSpins.end(); ++_iter782)
    {
      xfer += oprot->writeI32((*_iter782));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildQuestReward &a, GuildQuestReward &b) {
  using ::std::swap;
  swap(a.guildQuestRewardId, b.guildQuestRewardId);
  swap(a.rewardRecipientType, b.rewardRecipientType);
  swap(a.lootTableIds, b.lootTableIds);
  swap(a.lootTableSpins, b.lootTableSpins);
}

GuildQuestReward::GuildQuestReward(const GuildQuestReward& other783) {
  guildQuestRewardId = other783.guildQuestRewardId;
  rewardRecipientType = other783.rewardRecipientType;
  lootTableIds = other783.lootTableIds;
  lootTableSpins = other783.lootTableSpins;
}
GuildQuestReward& GuildQuestReward::operator=(const GuildQuestReward& other784) {
  guildQuestRewardId = other784.guildQuestRewardId;
  rewardRecipientType = other784.rewardRecipientType;
  lootTableIds = other784.lootTableIds;
  lootTableSpins = other784.lootTableSpins;
  return *this;
}
void GuildQuestReward::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildQuestReward(";
  out << "guildQuestRewardId=" << to_string(guildQuestRewardId);
  out << ", " << "rewardRecipientType=" << to_string(rewardRecipientType);
  out << ", " << "lootTableIds=" << to_string(lootTableIds);
  out << ", " << "lootTableSpins=" << to_string(lootTableSpins);
  out << ")";
}


Quest::~Quest() throw() {
}


void Quest::__set_questId(const QuestID& val) {
  this->questId = val;
}

void Quest::__set_orderIndex(const int32_t val) {
  this->orderIndex = val;
}

void Quest::__set_questNpcId(const QuestNpcID& val) {
  this->questNpcId = val;
}

void Quest::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
__isset.eventIds = true;
}

void Quest::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
__isset.eventPhases = true;
}

void Quest::__set_disabled(const bool val) {
  this->disabled = val;
__isset.disabled = true;
}

void Quest::__set_chained(const bool val) {
  this->chained = val;
__isset.chained = true;
}

void Quest::__set_unlockedByBusiness(const bool val) {
  this->unlockedByBusiness = val;
__isset.unlockedByBusiness = true;
}

void Quest::__set_periodic(const bool val) {
  this->periodic = val;
__isset.periodic = true;
}

void Quest::__set_showRank(const int32_t val) {
  this->showRank = val;
__isset.showRank = true;
}

void Quest::__set_hideRank(const int32_t val) {
  this->hideRank = val;
__isset.hideRank = true;
}

void Quest::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
__isset.unlockRank = true;
}

void Quest::__set_countPerPeriod(const int32_t val) {
  this->countPerPeriod = val;
__isset.countPerPeriod = true;
}

void Quest::__set_period(const int64_t val) {
  this->period = val;
__isset.period = true;
}

void Quest::__set_unlockedByQuest(const QuestID& val) {
  this->unlockedByQuest = val;
__isset.unlockedByQuest = true;
}

void Quest::__set_xpReward(const int32_t val) {
  this->xpReward = val;
}

void Quest::__set_rewardCurrencyIds(const std::vector<CurrencyID> & val) {
  this->rewardCurrencyIds = val;
__isset.rewardCurrencyIds = true;
}

void Quest::__set_rewardCurrencyAmounts(const std::vector<int32_t> & val) {
  this->rewardCurrencyAmounts = val;
__isset.rewardCurrencyAmounts = true;
}

void Quest::__set_titleText(const LocalizedString& val) {
  this->titleText = val;
}

void Quest::__set_descriptionText(const LocalizedString& val) {
  this->descriptionText = val;
}

void Quest::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
__isset.buildingId = true;
}

void Quest::__set_guildQuest(const bool val) {
  this->guildQuest = val;
__isset.guildQuest = true;
}

void Quest::__set_showGuildRank(const int32_t val) {
  this->showGuildRank = val;
__isset.showGuildRank = true;
}

void Quest::__set_hideGuildRank(const int32_t val) {
  this->hideGuildRank = val;
__isset.hideGuildRank = true;
}

void Quest::__set_unlockGuildRank(const int32_t val) {
  this->unlockGuildRank = val;
__isset.unlockGuildRank = true;
}

void Quest::__set_guildQuestRewardId(const GuildQuestRewardID& val) {
  this->guildQuestRewardId = val;
__isset.guildQuestRewardId = true;
}

void Quest::__set_displayCurrencyId(const CurrencyID& val) {
  this->displayCurrencyId = val;
__isset.displayCurrencyId = true;
}

void Quest::__set_displayCurrencyAmount(const int32_t val) {
  this->displayCurrencyAmount = val;
__isset.displayCurrencyAmount = true;
}

void Quest::__set_goals(const std::map<GoalID, Goal> & val) {
  this->goals = val;
__isset.goals = true;
}
std::ostream& operator<<(std::ostream& out, const Quest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Quest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_questId = false;
  bool isset_orderIndex = false;
  bool isset_questNpcId = false;
  bool isset_xpReward = false;
  bool isset_titleText = false;
  bool isset_descriptionText = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->questId);
          isset_questId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderIndex);
          isset_orderIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->questNpcId);
          isset_questNpcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size785;
            ::apache::thrift::protocol::TType _etype788;
            xfer += iprot->readListBegin(_etype788, _size785);
            this->eventIds.resize(_size785);
            uint32_t _i789;
            for (_i789 = 0; _i789 < _size785; ++_i789)
            {
              xfer += iprot->readString(this->eventIds[_i789]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast790;
          xfer += iprot->readI32(ecast790);
          this->eventPhases = (EventPhases::type)ecast790;
          this->__isset.eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disabled);
          this->__isset.disabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->chained);
          this->__isset.chained = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->unlockedByBusiness);
          this->__isset.unlockedByBusiness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->periodic);
          this->__isset.periodic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          this->__isset.showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          this->__isset.hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          this->__isset.unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->countPerPeriod);
          this->__isset.countPerPeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->period);
          this->__isset.period = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unlockedByQuest);
          this->__isset.unlockedByQuest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xpReward);
          isset_xpReward = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rewardCurrencyIds.clear();
            uint32_t _size791;
            ::apache::thrift::protocol::TType _etype794;
            xfer += iprot->readListBegin(_etype794, _size791);
            this->rewardCurrencyIds.resize(_size791);
            uint32_t _i795;
            for (_i795 = 0; _i795 < _size791; ++_i795)
            {
              xfer += iprot->readString(this->rewardCurrencyIds[_i795]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rewardCurrencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rewardCurrencyAmounts.clear();
            uint32_t _size796;
            ::apache::thrift::protocol::TType _etype799;
            xfer += iprot->readListBegin(_etype799, _size796);
            this->rewardCurrencyAmounts.resize(_size796);
            uint32_t _i800;
            for (_i800 = 0; _i800 < _size796; ++_i800)
            {
              xfer += iprot->readI32(this->rewardCurrencyAmounts[_i800]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rewardCurrencyAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->titleText.read(iprot);
          isset_titleText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->descriptionText.read(iprot);
          isset_descriptionText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          this->__isset.buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->guildQuest);
          this->__isset.guildQuest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showGuildRank);
          this->__isset.showGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideGuildRank);
          this->__isset.hideGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockGuildRank);
          this->__isset.unlockGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guildQuestRewardId);
          this->__isset.guildQuestRewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayCurrencyId);
          this->__isset.displayCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayCurrencyAmount);
          this->__isset.displayCurrencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->goals.clear();
            uint32_t _size801;
            ::apache::thrift::protocol::TType _ktype802;
            ::apache::thrift::protocol::TType _vtype803;
            xfer += iprot->readMapBegin(_ktype802, _vtype803, _size801);
            uint32_t _i805;
            for (_i805 = 0; _i805 < _size801; ++_i805)
            {
              GoalID _key806;
              xfer += iprot->readString(_key806);
              Goal& _val807 = this->goals[_key806];
              xfer += _val807.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.goals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_questId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_orderIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questNpcId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_xpReward)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_titleText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_descriptionText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Quest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Quest");

  xfer += oprot->writeFieldBegin("questId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->questId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderIndex", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->orderIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questNpcId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->questNpcId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventIds) {
    xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
      std::vector<EventID> ::const_iterator _iter808;
      for (_iter808 = this->eventIds.begin(); _iter808 != this->eventIds.end(); ++_iter808)
      {
        xfer += oprot->writeString((*_iter808));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPhases) {
    xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->eventPhases);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disabled) {
    xfer += oprot->writeFieldBegin("disabled", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->disabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.chained) {
    xfer += oprot->writeFieldBegin("chained", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->chained);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockedByBusiness) {
    xfer += oprot->writeFieldBegin("unlockedByBusiness", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->unlockedByBusiness);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.periodic) {
    xfer += oprot->writeFieldBegin("periodic", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->periodic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showRank) {
    xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->showRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideRank) {
    xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->hideRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockRank) {
    xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->unlockRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.countPerPeriod) {
    xfer += oprot->writeFieldBegin("countPerPeriod", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->countPerPeriod);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.period) {
    xfer += oprot->writeFieldBegin("period", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->period);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockedByQuest) {
    xfer += oprot->writeFieldBegin("unlockedByQuest", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->unlockedByQuest);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("xpReward", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->xpReward);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rewardCurrencyIds) {
    xfer += oprot->writeFieldBegin("rewardCurrencyIds", ::apache::thrift::protocol::T_LIST, 17);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->rewardCurrencyIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter809;
      for (_iter809 = this->rewardCurrencyIds.begin(); _iter809 != this->rewardCurrencyIds.end(); ++_iter809)
      {
        xfer += oprot->writeString((*_iter809));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rewardCurrencyAmounts) {
    xfer += oprot->writeFieldBegin("rewardCurrencyAmounts", ::apache::thrift::protocol::T_LIST, 18);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->rewardCurrencyAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter810;
      for (_iter810 = this->rewardCurrencyAmounts.begin(); _iter810 != this->rewardCurrencyAmounts.end(); ++_iter810)
      {
        xfer += oprot->writeI32((*_iter810));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("titleText", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->titleText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("descriptionText", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->descriptionText.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.buildingId) {
    xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->buildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildQuest) {
    xfer += oprot->writeFieldBegin("guildQuest", ::apache::thrift::protocol::T_BOOL, 50);
    xfer += oprot->writeBool(this->guildQuest);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.showGuildRank) {
    xfer += oprot->writeFieldBegin("showGuildRank", ::apache::thrift::protocol::T_I32, 51);
    xfer += oprot->writeI32(this->showGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideGuildRank) {
    xfer += oprot->writeFieldBegin("hideGuildRank", ::apache::thrift::protocol::T_I32, 52);
    xfer += oprot->writeI32(this->hideGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unlockGuildRank) {
    xfer += oprot->writeFieldBegin("unlockGuildRank", ::apache::thrift::protocol::T_I32, 53);
    xfer += oprot->writeI32(this->unlockGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildQuestRewardId) {
    xfer += oprot->writeFieldBegin("guildQuestRewardId", ::apache::thrift::protocol::T_STRING, 54);
    xfer += oprot->writeString(this->guildQuestRewardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.displayCurrencyId) {
    xfer += oprot->writeFieldBegin("displayCurrencyId", ::apache::thrift::protocol::T_STRING, 55);
    xfer += oprot->writeString(this->displayCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.displayCurrencyAmount) {
    xfer += oprot->writeFieldBegin("displayCurrencyAmount", ::apache::thrift::protocol::T_I32, 56);
    xfer += oprot->writeI32(this->displayCurrencyAmount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goals) {
    xfer += oprot->writeFieldBegin("goals", ::apache::thrift::protocol::T_MAP, 200);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->goals.size()));
      std::map<GoalID, Goal> ::const_iterator _iter811;
      for (_iter811 = this->goals.begin(); _iter811 != this->goals.end(); ++_iter811)
      {
        xfer += oprot->writeString(_iter811->first);
        xfer += _iter811->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Quest &a, Quest &b) {
  using ::std::swap;
  swap(a.questId, b.questId);
  swap(a.orderIndex, b.orderIndex);
  swap(a.questNpcId, b.questNpcId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.disabled, b.disabled);
  swap(a.chained, b.chained);
  swap(a.unlockedByBusiness, b.unlockedByBusiness);
  swap(a.periodic, b.periodic);
  swap(a.showRank, b.showRank);
  swap(a.hideRank, b.hideRank);
  swap(a.unlockRank, b.unlockRank);
  swap(a.countPerPeriod, b.countPerPeriod);
  swap(a.period, b.period);
  swap(a.unlockedByQuest, b.unlockedByQuest);
  swap(a.xpReward, b.xpReward);
  swap(a.rewardCurrencyIds, b.rewardCurrencyIds);
  swap(a.rewardCurrencyAmounts, b.rewardCurrencyAmounts);
  swap(a.titleText, b.titleText);
  swap(a.descriptionText, b.descriptionText);
  swap(a.buildingId, b.buildingId);
  swap(a.guildQuest, b.guildQuest);
  swap(a.showGuildRank, b.showGuildRank);
  swap(a.hideGuildRank, b.hideGuildRank);
  swap(a.unlockGuildRank, b.unlockGuildRank);
  swap(a.guildQuestRewardId, b.guildQuestRewardId);
  swap(a.displayCurrencyId, b.displayCurrencyId);
  swap(a.displayCurrencyAmount, b.displayCurrencyAmount);
  swap(a.goals, b.goals);
  swap(a.__isset, b.__isset);
}

Quest::Quest(const Quest& other812) {
  questId = other812.questId;
  orderIndex = other812.orderIndex;
  questNpcId = other812.questNpcId;
  eventIds = other812.eventIds;
  eventPhases = other812.eventPhases;
  disabled = other812.disabled;
  chained = other812.chained;
  unlockedByBusiness = other812.unlockedByBusiness;
  periodic = other812.periodic;
  showRank = other812.showRank;
  hideRank = other812.hideRank;
  unlockRank = other812.unlockRank;
  countPerPeriod = other812.countPerPeriod;
  period = other812.period;
  unlockedByQuest = other812.unlockedByQuest;
  xpReward = other812.xpReward;
  rewardCurrencyIds = other812.rewardCurrencyIds;
  rewardCurrencyAmounts = other812.rewardCurrencyAmounts;
  titleText = other812.titleText;
  descriptionText = other812.descriptionText;
  buildingId = other812.buildingId;
  guildQuest = other812.guildQuest;
  showGuildRank = other812.showGuildRank;
  hideGuildRank = other812.hideGuildRank;
  unlockGuildRank = other812.unlockGuildRank;
  guildQuestRewardId = other812.guildQuestRewardId;
  displayCurrencyId = other812.displayCurrencyId;
  displayCurrencyAmount = other812.displayCurrencyAmount;
  goals = other812.goals;
  __isset = other812.__isset;
}
Quest& Quest::operator=(const Quest& other813) {
  questId = other813.questId;
  orderIndex = other813.orderIndex;
  questNpcId = other813.questNpcId;
  eventIds = other813.eventIds;
  eventPhases = other813.eventPhases;
  disabled = other813.disabled;
  chained = other813.chained;
  unlockedByBusiness = other813.unlockedByBusiness;
  periodic = other813.periodic;
  showRank = other813.showRank;
  hideRank = other813.hideRank;
  unlockRank = other813.unlockRank;
  countPerPeriod = other813.countPerPeriod;
  period = other813.period;
  unlockedByQuest = other813.unlockedByQuest;
  xpReward = other813.xpReward;
  rewardCurrencyIds = other813.rewardCurrencyIds;
  rewardCurrencyAmounts = other813.rewardCurrencyAmounts;
  titleText = other813.titleText;
  descriptionText = other813.descriptionText;
  buildingId = other813.buildingId;
  guildQuest = other813.guildQuest;
  showGuildRank = other813.showGuildRank;
  hideGuildRank = other813.hideGuildRank;
  unlockGuildRank = other813.unlockGuildRank;
  guildQuestRewardId = other813.guildQuestRewardId;
  displayCurrencyId = other813.displayCurrencyId;
  displayCurrencyAmount = other813.displayCurrencyAmount;
  goals = other813.goals;
  __isset = other813.__isset;
  return *this;
}
void Quest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Quest(";
  out << "questId=" << to_string(questId);
  out << ", " << "orderIndex=" << to_string(orderIndex);
  out << ", " << "questNpcId=" << to_string(questNpcId);
  out << ", " << "eventIds="; (__isset.eventIds ? (out << to_string(eventIds)) : (out << "<null>"));
  out << ", " << "eventPhases="; (__isset.eventPhases ? (out << to_string(eventPhases)) : (out << "<null>"));
  out << ", " << "disabled="; (__isset.disabled ? (out << to_string(disabled)) : (out << "<null>"));
  out << ", " << "chained="; (__isset.chained ? (out << to_string(chained)) : (out << "<null>"));
  out << ", " << "unlockedByBusiness="; (__isset.unlockedByBusiness ? (out << to_string(unlockedByBusiness)) : (out << "<null>"));
  out << ", " << "periodic="; (__isset.periodic ? (out << to_string(periodic)) : (out << "<null>"));
  out << ", " << "showRank="; (__isset.showRank ? (out << to_string(showRank)) : (out << "<null>"));
  out << ", " << "hideRank="; (__isset.hideRank ? (out << to_string(hideRank)) : (out << "<null>"));
  out << ", " << "unlockRank="; (__isset.unlockRank ? (out << to_string(unlockRank)) : (out << "<null>"));
  out << ", " << "countPerPeriod="; (__isset.countPerPeriod ? (out << to_string(countPerPeriod)) : (out << "<null>"));
  out << ", " << "period="; (__isset.period ? (out << to_string(period)) : (out << "<null>"));
  out << ", " << "unlockedByQuest="; (__isset.unlockedByQuest ? (out << to_string(unlockedByQuest)) : (out << "<null>"));
  out << ", " << "xpReward=" << to_string(xpReward);
  out << ", " << "rewardCurrencyIds="; (__isset.rewardCurrencyIds ? (out << to_string(rewardCurrencyIds)) : (out << "<null>"));
  out << ", " << "rewardCurrencyAmounts="; (__isset.rewardCurrencyAmounts ? (out << to_string(rewardCurrencyAmounts)) : (out << "<null>"));
  out << ", " << "titleText=" << to_string(titleText);
  out << ", " << "descriptionText=" << to_string(descriptionText);
  out << ", " << "buildingId="; (__isset.buildingId ? (out << to_string(buildingId)) : (out << "<null>"));
  out << ", " << "guildQuest="; (__isset.guildQuest ? (out << to_string(guildQuest)) : (out << "<null>"));
  out << ", " << "showGuildRank="; (__isset.showGuildRank ? (out << to_string(showGuildRank)) : (out << "<null>"));
  out << ", " << "hideGuildRank="; (__isset.hideGuildRank ? (out << to_string(hideGuildRank)) : (out << "<null>"));
  out << ", " << "unlockGuildRank="; (__isset.unlockGuildRank ? (out << to_string(unlockGuildRank)) : (out << "<null>"));
  out << ", " << "guildQuestRewardId="; (__isset.guildQuestRewardId ? (out << to_string(guildQuestRewardId)) : (out << "<null>"));
  out << ", " << "displayCurrencyId="; (__isset.displayCurrencyId ? (out << to_string(displayCurrencyId)) : (out << "<null>"));
  out << ", " << "displayCurrencyAmount="; (__isset.displayCurrencyAmount ? (out << to_string(displayCurrencyAmount)) : (out << "<null>"));
  out << ", " << "goals="; (__isset.goals ? (out << to_string(goals)) : (out << "<null>"));
  out << ")";
}


GoalDisplayTemplate::~GoalDisplayTemplate() throw() {
}


void GoalDisplayTemplate::__set_goalType(const GoalType::type val) {
  this->goalType = val;
}

void GoalDisplayTemplate::__set_text(const LocalizedString& val) {
  this->text = val;
}

void GoalDisplayTemplate::__set_textPlural(const LocalizedString& val) {
  this->textPlural = val;
}
std::ostream& operator<<(std::ostream& out, const GoalDisplayTemplate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GoalDisplayTemplate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_goalType = false;
  bool isset_text = false;
  bool isset_textPlural = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast814;
          xfer += iprot->readI32(ecast814);
          this->goalType = (GoalType::type)ecast814;
          isset_goalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->text.read(iprot);
          isset_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->textPlural.read(iprot);
          isset_textPlural = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_goalType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_textPlural)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GoalDisplayTemplate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GoalDisplayTemplate");

  xfer += oprot->writeFieldBegin("goalType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->goalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->text.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("textPlural", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->textPlural.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GoalDisplayTemplate &a, GoalDisplayTemplate &b) {
  using ::std::swap;
  swap(a.goalType, b.goalType);
  swap(a.text, b.text);
  swap(a.textPlural, b.textPlural);
}

GoalDisplayTemplate::GoalDisplayTemplate(const GoalDisplayTemplate& other815) {
  goalType = other815.goalType;
  text = other815.text;
  textPlural = other815.textPlural;
}
GoalDisplayTemplate& GoalDisplayTemplate::operator=(const GoalDisplayTemplate& other816) {
  goalType = other816.goalType;
  text = other816.text;
  textPlural = other816.textPlural;
  return *this;
}
void GoalDisplayTemplate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GoalDisplayTemplate(";
  out << "goalType=" << to_string(goalType);
  out << ", " << "text=" << to_string(text);
  out << ", " << "textPlural=" << to_string(textPlural);
  out << ")";
}


QuestDisplayTemplate::~QuestDisplayTemplate() throw() {
}


void QuestDisplayTemplate::__set_goalType(const GoalType::type val) {
  this->goalType = val;
}

void QuestDisplayTemplate::__set_templateId(const QuestDisplayTemplateID val) {
  this->templateId = val;
}

void QuestDisplayTemplate::__set_titleText(const LocalizedString& val) {
  this->titleText = val;
}
std::ostream& operator<<(std::ostream& out, const QuestDisplayTemplate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QuestDisplayTemplate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_goalType = false;
  bool isset_templateId = false;
  bool isset_titleText = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast817;
          xfer += iprot->readI32(ecast817);
          this->goalType = (GoalType::type)ecast817;
          isset_goalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->templateId);
          isset_templateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->titleText.read(iprot);
          isset_titleText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_goalType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_templateId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_titleText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QuestDisplayTemplate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QuestDisplayTemplate");

  xfer += oprot->writeFieldBegin("goalType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->goalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("templateId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->templateId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("titleText", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->titleText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuestDisplayTemplate &a, QuestDisplayTemplate &b) {
  using ::std::swap;
  swap(a.goalType, b.goalType);
  swap(a.templateId, b.templateId);
  swap(a.titleText, b.titleText);
}

QuestDisplayTemplate::QuestDisplayTemplate(const QuestDisplayTemplate& other818) {
  goalType = other818.goalType;
  templateId = other818.templateId;
  titleText = other818.titleText;
}
QuestDisplayTemplate& QuestDisplayTemplate::operator=(const QuestDisplayTemplate& other819) {
  goalType = other819.goalType;
  templateId = other819.templateId;
  titleText = other819.titleText;
  return *this;
}
void QuestDisplayTemplate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QuestDisplayTemplate(";
  out << "goalType=" << to_string(goalType);
  out << ", " << "templateId=" << to_string(templateId);
  out << ", " << "titleText=" << to_string(titleText);
  out << ")";
}


QuestSettings::~QuestSettings() throw() {
}


void QuestSettings::__set_refreshPeriodSeconds(const int32_t val) {
  this->refreshPeriodSeconds = val;
}

void QuestSettings::__set_maxAllowedHarvests(const int32_t val) {
  this->maxAllowedHarvests = val;
}

void QuestSettings::__set_maxAllowedHarvestTimeSeconds(const int32_t val) {
  this->maxAllowedHarvestTimeSeconds = val;
}

void QuestSettings::__set_generatedQuestsEnabled(const bool val) {
  this->generatedQuestsEnabled = val;
}
std::ostream& operator<<(std::ostream& out, const QuestSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QuestSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_refreshPeriodSeconds = false;
  bool isset_maxAllowedHarvests = false;
  bool isset_maxAllowedHarvestTimeSeconds = false;
  bool isset_generatedQuestsEnabled = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->refreshPeriodSeconds);
          isset_refreshPeriodSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxAllowedHarvests);
          isset_maxAllowedHarvests = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxAllowedHarvestTimeSeconds);
          isset_maxAllowedHarvestTimeSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->generatedQuestsEnabled);
          isset_generatedQuestsEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_refreshPeriodSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxAllowedHarvests)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxAllowedHarvestTimeSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_generatedQuestsEnabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QuestSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QuestSettings");

  xfer += oprot->writeFieldBegin("refreshPeriodSeconds", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->refreshPeriodSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxAllowedHarvests", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->maxAllowedHarvests);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxAllowedHarvestTimeSeconds", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maxAllowedHarvestTimeSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("generatedQuestsEnabled", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->generatedQuestsEnabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuestSettings &a, QuestSettings &b) {
  using ::std::swap;
  swap(a.refreshPeriodSeconds, b.refreshPeriodSeconds);
  swap(a.maxAllowedHarvests, b.maxAllowedHarvests);
  swap(a.maxAllowedHarvestTimeSeconds, b.maxAllowedHarvestTimeSeconds);
  swap(a.generatedQuestsEnabled, b.generatedQuestsEnabled);
}

QuestSettings::QuestSettings(const QuestSettings& other820) {
  refreshPeriodSeconds = other820.refreshPeriodSeconds;
  maxAllowedHarvests = other820.maxAllowedHarvests;
  maxAllowedHarvestTimeSeconds = other820.maxAllowedHarvestTimeSeconds;
  generatedQuestsEnabled = other820.generatedQuestsEnabled;
}
QuestSettings& QuestSettings::operator=(const QuestSettings& other821) {
  refreshPeriodSeconds = other821.refreshPeriodSeconds;
  maxAllowedHarvests = other821.maxAllowedHarvests;
  maxAllowedHarvestTimeSeconds = other821.maxAllowedHarvestTimeSeconds;
  generatedQuestsEnabled = other821.generatedQuestsEnabled;
  return *this;
}
void QuestSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QuestSettings(";
  out << "refreshPeriodSeconds=" << to_string(refreshPeriodSeconds);
  out << ", " << "maxAllowedHarvests=" << to_string(maxAllowedHarvests);
  out << ", " << "maxAllowedHarvestTimeSeconds=" << to_string(maxAllowedHarvestTimeSeconds);
  out << ", " << "generatedQuestsEnabled=" << to_string(generatedQuestsEnabled);
  out << ")";
}


QuestRankSettings::~QuestRankSettings() throw() {
}


void QuestRankSettings::__set_rankId(const RankID val) {
  this->rankId = val;
}

void QuestRankSettings::__set_xpToGenerate(const int32_t val) {
  this->xpToGenerate = val;
}

void QuestRankSettings::__set_numberOfSlots(const int32_t val) {
  this->numberOfSlots = val;
}

void QuestRankSettings::__set_harvestSpecificBusiness(const int32_t val) {
  this->harvestSpecificBusiness = val;
}

void QuestRankSettings::__set_completeLevel(const int32_t val) {
  this->completeLevel = val;
}

void QuestRankSettings::__set_autoPlaySpecificLevel(const int32_t val) {
  this->autoPlaySpecificLevel = val;
}

void QuestRankSettings::__set_socialLikeKingdom(const int32_t val) {
  this->socialLikeKingdom = val;
}

void QuestRankSettings::__set_socialVisitKingdom(const int32_t val) {
  this->socialVisitKingdom = val;
}

void QuestRankSettings::__set_socialPlaceOrderGuildMate(const int32_t val) {
  this->socialPlaceOrderGuildMate = val;
}

void QuestRankSettings::__set_socialCompleteOrder(const int32_t val) {
  this->socialCompleteOrder = val;
}

void QuestRankSettings::__set_matchTiles(const int32_t val) {
  this->matchTiles = val;
}

void QuestRankSettings::__set_placeDeco(const int32_t val) {
  this->placeDeco = val;
}

void QuestRankSettings::__set_equipAnyGearOnAnyBusiness(const int32_t val) {
  this->equipAnyGearOnAnyBusiness = val;
}

void QuestRankSettings::__set_equipSpecificGearOnSpecificBusiness(const int32_t val) {
  this->equipSpecificGearOnSpecificBusiness = val;
}

void QuestRankSettings::__set_harvestMinTimeSeconds(const int32_t val) {
  this->harvestMinTimeSeconds = val;
}

void QuestRankSettings::__set_harvestMaxTimeSeconds(const int32_t val) {
  this->harvestMaxTimeSeconds = val;
}

void QuestRankSettings::__set_placeDecoMin(const int32_t val) {
  this->placeDecoMin = val;
}

void QuestRankSettings::__set_placeDecoMax(const int32_t val) {
  this->placeDecoMax = val;
}

void QuestRankSettings::__set_socialLikeMinProgress(const int32_t val) {
  this->socialLikeMinProgress = val;
}

void QuestRankSettings::__set_socialLikeMaxProgress(const int32_t val) {
  this->socialLikeMaxProgress = val;
}

void QuestRankSettings::__set_socialVisitMinProgress(const int32_t val) {
  this->socialVisitMinProgress = val;
}

void QuestRankSettings::__set_socialVisitMaxProgress(const int32_t val) {
  this->socialVisitMaxProgress = val;
}

void QuestRankSettings::__set_socialPlaceOrderMinProgress(const int32_t val) {
  this->socialPlaceOrderMinProgress = val;
}

void QuestRankSettings::__set_socialPlaceOrderMaxProgress(const int32_t val) {
  this->socialPlaceOrderMaxProgress = val;
}

void QuestRankSettings::__set_socialCompleteOrderMinProgress(const int32_t val) {
  this->socialCompleteOrderMinProgress = val;
}

void QuestRankSettings::__set_socialCompleteOrderMaxProgress(const int32_t val) {
  this->socialCompleteOrderMaxProgress = val;
}

void QuestRankSettings::__set_matchTilesCells(const std::string& val) {
  this->matchTilesCells = val;
}

void QuestRankSettings::__set_matchTilesMinProgress(const int32_t val) {
  this->matchTilesMinProgress = val;
}

void QuestRankSettings::__set_matchTilesMaxProgress(const int32_t val) {
  this->matchTilesMaxProgress = val;
}
std::ostream& operator<<(std::ostream& out, const QuestRankSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QuestRankSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rankId = false;
  bool isset_xpToGenerate = false;
  bool isset_numberOfSlots = false;
  bool isset_harvestSpecificBusiness = false;
  bool isset_completeLevel = false;
  bool isset_autoPlaySpecificLevel = false;
  bool isset_socialLikeKingdom = false;
  bool isset_socialVisitKingdom = false;
  bool isset_socialPlaceOrderGuildMate = false;
  bool isset_socialCompleteOrder = false;
  bool isset_matchTiles = false;
  bool isset_placeDeco = false;
  bool isset_equipAnyGearOnAnyBusiness = false;
  bool isset_equipSpecificGearOnSpecificBusiness = false;
  bool isset_harvestMinTimeSeconds = false;
  bool isset_harvestMaxTimeSeconds = false;
  bool isset_placeDecoMin = false;
  bool isset_placeDecoMax = false;
  bool isset_socialLikeMinProgress = false;
  bool isset_socialLikeMaxProgress = false;
  bool isset_socialVisitMinProgress = false;
  bool isset_socialVisitMaxProgress = false;
  bool isset_socialPlaceOrderMinProgress = false;
  bool isset_socialPlaceOrderMaxProgress = false;
  bool isset_socialCompleteOrderMinProgress = false;
  bool isset_socialCompleteOrderMaxProgress = false;
  bool isset_matchTilesCells = false;
  bool isset_matchTilesMinProgress = false;
  bool isset_matchTilesMaxProgress = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rankId);
          isset_rankId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xpToGenerate);
          isset_xpToGenerate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfSlots);
          isset_numberOfSlots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->harvestSpecificBusiness);
          isset_harvestSpecificBusiness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->completeLevel);
          isset_completeLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->autoPlaySpecificLevel);
          isset_autoPlaySpecificLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialLikeKingdom);
          isset_socialLikeKingdom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialVisitKingdom);
          isset_socialVisitKingdom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialPlaceOrderGuildMate);
          isset_socialPlaceOrderGuildMate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialCompleteOrder);
          isset_socialCompleteOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->matchTiles);
          isset_matchTiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->placeDeco);
          isset_placeDeco = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->equipAnyGearOnAnyBusiness);
          isset_equipAnyGearOnAnyBusiness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->equipSpecificGearOnSpecificBusiness);
          isset_equipSpecificGearOnSpecificBusiness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->harvestMinTimeSeconds);
          isset_harvestMinTimeSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->harvestMaxTimeSeconds);
          isset_harvestMaxTimeSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->placeDecoMin);
          isset_placeDecoMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->placeDecoMax);
          isset_placeDecoMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialLikeMinProgress);
          isset_socialLikeMinProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialLikeMaxProgress);
          isset_socialLikeMaxProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialVisitMinProgress);
          isset_socialVisitMinProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialVisitMaxProgress);
          isset_socialVisitMaxProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialPlaceOrderMinProgress);
          isset_socialPlaceOrderMinProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialPlaceOrderMaxProgress);
          isset_socialPlaceOrderMaxProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialCompleteOrderMinProgress);
          isset_socialCompleteOrderMinProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 91:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialCompleteOrderMaxProgress);
          isset_socialCompleteOrderMaxProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->matchTilesCells);
          isset_matchTilesCells = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->matchTilesMinProgress);
          isset_matchTilesMinProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 111:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->matchTilesMaxProgress);
          isset_matchTilesMaxProgress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rankId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_xpToGenerate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numberOfSlots)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_harvestSpecificBusiness)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_completeLevel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_autoPlaySpecificLevel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialLikeKingdom)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialVisitKingdom)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialPlaceOrderGuildMate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialCompleteOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_matchTiles)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_placeDeco)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_equipAnyGearOnAnyBusiness)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_equipSpecificGearOnSpecificBusiness)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_harvestMinTimeSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_harvestMaxTimeSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_placeDecoMin)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_placeDecoMax)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialLikeMinProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialLikeMaxProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialVisitMinProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialVisitMaxProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialPlaceOrderMinProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialPlaceOrderMaxProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialCompleteOrderMinProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialCompleteOrderMaxProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_matchTilesCells)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_matchTilesMinProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_matchTilesMaxProgress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QuestRankSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QuestRankSettings");

  xfer += oprot->writeFieldBegin("rankId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->rankId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xpToGenerate", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->xpToGenerate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfSlots", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->numberOfSlots);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("harvestSpecificBusiness", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->harvestSpecificBusiness);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("completeLevel", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->completeLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("autoPlaySpecificLevel", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->autoPlaySpecificLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialLikeKingdom", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->socialLikeKingdom);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialVisitKingdom", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->socialVisitKingdom);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialPlaceOrderGuildMate", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->socialPlaceOrderGuildMate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialCompleteOrder", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->socialCompleteOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("matchTiles", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->matchTiles);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("placeDeco", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->placeDeco);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("equipAnyGearOnAnyBusiness", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->equipAnyGearOnAnyBusiness);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("equipSpecificGearOnSpecificBusiness", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->equipSpecificGearOnSpecificBusiness);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("harvestMinTimeSeconds", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->harvestMinTimeSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("harvestMaxTimeSeconds", ::apache::thrift::protocol::T_I32, 41);
  xfer += oprot->writeI32(this->harvestMaxTimeSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("placeDecoMin", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32(this->placeDecoMin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("placeDecoMax", ::apache::thrift::protocol::T_I32, 51);
  xfer += oprot->writeI32(this->placeDecoMax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialLikeMinProgress", ::apache::thrift::protocol::T_I32, 60);
  xfer += oprot->writeI32(this->socialLikeMinProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialLikeMaxProgress", ::apache::thrift::protocol::T_I32, 61);
  xfer += oprot->writeI32(this->socialLikeMaxProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialVisitMinProgress", ::apache::thrift::protocol::T_I32, 70);
  xfer += oprot->writeI32(this->socialVisitMinProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialVisitMaxProgress", ::apache::thrift::protocol::T_I32, 71);
  xfer += oprot->writeI32(this->socialVisitMaxProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialPlaceOrderMinProgress", ::apache::thrift::protocol::T_I32, 80);
  xfer += oprot->writeI32(this->socialPlaceOrderMinProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialPlaceOrderMaxProgress", ::apache::thrift::protocol::T_I32, 81);
  xfer += oprot->writeI32(this->socialPlaceOrderMaxProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialCompleteOrderMinProgress", ::apache::thrift::protocol::T_I32, 90);
  xfer += oprot->writeI32(this->socialCompleteOrderMinProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialCompleteOrderMaxProgress", ::apache::thrift::protocol::T_I32, 91);
  xfer += oprot->writeI32(this->socialCompleteOrderMaxProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("matchTilesCells", ::apache::thrift::protocol::T_STRING, 100);
  xfer += oprot->writeString(this->matchTilesCells);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("matchTilesMinProgress", ::apache::thrift::protocol::T_I32, 110);
  xfer += oprot->writeI32(this->matchTilesMinProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("matchTilesMaxProgress", ::apache::thrift::protocol::T_I32, 111);
  xfer += oprot->writeI32(this->matchTilesMaxProgress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuestRankSettings &a, QuestRankSettings &b) {
  using ::std::swap;
  swap(a.rankId, b.rankId);
  swap(a.xpToGenerate, b.xpToGenerate);
  swap(a.numberOfSlots, b.numberOfSlots);
  swap(a.harvestSpecificBusiness, b.harvestSpecificBusiness);
  swap(a.completeLevel, b.completeLevel);
  swap(a.autoPlaySpecificLevel, b.autoPlaySpecificLevel);
  swap(a.socialLikeKingdom, b.socialLikeKingdom);
  swap(a.socialVisitKingdom, b.socialVisitKingdom);
  swap(a.socialPlaceOrderGuildMate, b.socialPlaceOrderGuildMate);
  swap(a.socialCompleteOrder, b.socialCompleteOrder);
  swap(a.matchTiles, b.matchTiles);
  swap(a.placeDeco, b.placeDeco);
  swap(a.equipAnyGearOnAnyBusiness, b.equipAnyGearOnAnyBusiness);
  swap(a.equipSpecificGearOnSpecificBusiness, b.equipSpecificGearOnSpecificBusiness);
  swap(a.harvestMinTimeSeconds, b.harvestMinTimeSeconds);
  swap(a.harvestMaxTimeSeconds, b.harvestMaxTimeSeconds);
  swap(a.placeDecoMin, b.placeDecoMin);
  swap(a.placeDecoMax, b.placeDecoMax);
  swap(a.socialLikeMinProgress, b.socialLikeMinProgress);
  swap(a.socialLikeMaxProgress, b.socialLikeMaxProgress);
  swap(a.socialVisitMinProgress, b.socialVisitMinProgress);
  swap(a.socialVisitMaxProgress, b.socialVisitMaxProgress);
  swap(a.socialPlaceOrderMinProgress, b.socialPlaceOrderMinProgress);
  swap(a.socialPlaceOrderMaxProgress, b.socialPlaceOrderMaxProgress);
  swap(a.socialCompleteOrderMinProgress, b.socialCompleteOrderMinProgress);
  swap(a.socialCompleteOrderMaxProgress, b.socialCompleteOrderMaxProgress);
  swap(a.matchTilesCells, b.matchTilesCells);
  swap(a.matchTilesMinProgress, b.matchTilesMinProgress);
  swap(a.matchTilesMaxProgress, b.matchTilesMaxProgress);
}

QuestRankSettings::QuestRankSettings(const QuestRankSettings& other822) {
  rankId = other822.rankId;
  xpToGenerate = other822.xpToGenerate;
  numberOfSlots = other822.numberOfSlots;
  harvestSpecificBusiness = other822.harvestSpecificBusiness;
  completeLevel = other822.completeLevel;
  autoPlaySpecificLevel = other822.autoPlaySpecificLevel;
  socialLikeKingdom = other822.socialLikeKingdom;
  socialVisitKingdom = other822.socialVisitKingdom;
  socialPlaceOrderGuildMate = other822.socialPlaceOrderGuildMate;
  socialCompleteOrder = other822.socialCompleteOrder;
  matchTiles = other822.matchTiles;
  placeDeco = other822.placeDeco;
  equipAnyGearOnAnyBusiness = other822.equipAnyGearOnAnyBusiness;
  equipSpecificGearOnSpecificBusiness = other822.equipSpecificGearOnSpecificBusiness;
  harvestMinTimeSeconds = other822.harvestMinTimeSeconds;
  harvestMaxTimeSeconds = other822.harvestMaxTimeSeconds;
  placeDecoMin = other822.placeDecoMin;
  placeDecoMax = other822.placeDecoMax;
  socialLikeMinProgress = other822.socialLikeMinProgress;
  socialLikeMaxProgress = other822.socialLikeMaxProgress;
  socialVisitMinProgress = other822.socialVisitMinProgress;
  socialVisitMaxProgress = other822.socialVisitMaxProgress;
  socialPlaceOrderMinProgress = other822.socialPlaceOrderMinProgress;
  socialPlaceOrderMaxProgress = other822.socialPlaceOrderMaxProgress;
  socialCompleteOrderMinProgress = other822.socialCompleteOrderMinProgress;
  socialCompleteOrderMaxProgress = other822.socialCompleteOrderMaxProgress;
  matchTilesCells = other822.matchTilesCells;
  matchTilesMinProgress = other822.matchTilesMinProgress;
  matchTilesMaxProgress = other822.matchTilesMaxProgress;
}
QuestRankSettings& QuestRankSettings::operator=(const QuestRankSettings& other823) {
  rankId = other823.rankId;
  xpToGenerate = other823.xpToGenerate;
  numberOfSlots = other823.numberOfSlots;
  harvestSpecificBusiness = other823.harvestSpecificBusiness;
  completeLevel = other823.completeLevel;
  autoPlaySpecificLevel = other823.autoPlaySpecificLevel;
  socialLikeKingdom = other823.socialLikeKingdom;
  socialVisitKingdom = other823.socialVisitKingdom;
  socialPlaceOrderGuildMate = other823.socialPlaceOrderGuildMate;
  socialCompleteOrder = other823.socialCompleteOrder;
  matchTiles = other823.matchTiles;
  placeDeco = other823.placeDeco;
  equipAnyGearOnAnyBusiness = other823.equipAnyGearOnAnyBusiness;
  equipSpecificGearOnSpecificBusiness = other823.equipSpecificGearOnSpecificBusiness;
  harvestMinTimeSeconds = other823.harvestMinTimeSeconds;
  harvestMaxTimeSeconds = other823.harvestMaxTimeSeconds;
  placeDecoMin = other823.placeDecoMin;
  placeDecoMax = other823.placeDecoMax;
  socialLikeMinProgress = other823.socialLikeMinProgress;
  socialLikeMaxProgress = other823.socialLikeMaxProgress;
  socialVisitMinProgress = other823.socialVisitMinProgress;
  socialVisitMaxProgress = other823.socialVisitMaxProgress;
  socialPlaceOrderMinProgress = other823.socialPlaceOrderMinProgress;
  socialPlaceOrderMaxProgress = other823.socialPlaceOrderMaxProgress;
  socialCompleteOrderMinProgress = other823.socialCompleteOrderMinProgress;
  socialCompleteOrderMaxProgress = other823.socialCompleteOrderMaxProgress;
  matchTilesCells = other823.matchTilesCells;
  matchTilesMinProgress = other823.matchTilesMinProgress;
  matchTilesMaxProgress = other823.matchTilesMaxProgress;
  return *this;
}
void QuestRankSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QuestRankSettings(";
  out << "rankId=" << to_string(rankId);
  out << ", " << "xpToGenerate=" << to_string(xpToGenerate);
  out << ", " << "numberOfSlots=" << to_string(numberOfSlots);
  out << ", " << "harvestSpecificBusiness=" << to_string(harvestSpecificBusiness);
  out << ", " << "completeLevel=" << to_string(completeLevel);
  out << ", " << "autoPlaySpecificLevel=" << to_string(autoPlaySpecificLevel);
  out << ", " << "socialLikeKingdom=" << to_string(socialLikeKingdom);
  out << ", " << "socialVisitKingdom=" << to_string(socialVisitKingdom);
  out << ", " << "socialPlaceOrderGuildMate=" << to_string(socialPlaceOrderGuildMate);
  out << ", " << "socialCompleteOrder=" << to_string(socialCompleteOrder);
  out << ", " << "matchTiles=" << to_string(matchTiles);
  out << ", " << "placeDeco=" << to_string(placeDeco);
  out << ", " << "equipAnyGearOnAnyBusiness=" << to_string(equipAnyGearOnAnyBusiness);
  out << ", " << "equipSpecificGearOnSpecificBusiness=" << to_string(equipSpecificGearOnSpecificBusiness);
  out << ", " << "harvestMinTimeSeconds=" << to_string(harvestMinTimeSeconds);
  out << ", " << "harvestMaxTimeSeconds=" << to_string(harvestMaxTimeSeconds);
  out << ", " << "placeDecoMin=" << to_string(placeDecoMin);
  out << ", " << "placeDecoMax=" << to_string(placeDecoMax);
  out << ", " << "socialLikeMinProgress=" << to_string(socialLikeMinProgress);
  out << ", " << "socialLikeMaxProgress=" << to_string(socialLikeMaxProgress);
  out << ", " << "socialVisitMinProgress=" << to_string(socialVisitMinProgress);
  out << ", " << "socialVisitMaxProgress=" << to_string(socialVisitMaxProgress);
  out << ", " << "socialPlaceOrderMinProgress=" << to_string(socialPlaceOrderMinProgress);
  out << ", " << "socialPlaceOrderMaxProgress=" << to_string(socialPlaceOrderMaxProgress);
  out << ", " << "socialCompleteOrderMinProgress=" << to_string(socialCompleteOrderMinProgress);
  out << ", " << "socialCompleteOrderMaxProgress=" << to_string(socialCompleteOrderMaxProgress);
  out << ", " << "matchTilesCells=" << to_string(matchTilesCells);
  out << ", " << "matchTilesMinProgress=" << to_string(matchTilesMinProgress);
  out << ", " << "matchTilesMaxProgress=" << to_string(matchTilesMaxProgress);
  out << ")";
}


BuildingTypeLocalization::~BuildingTypeLocalization() throw() {
}


void BuildingTypeLocalization::__set_buildingType(const BuildingType::type val) {
  this->buildingType = val;
}

void BuildingTypeLocalization::__set_buildingTypeNameSingular(const LocalizedString& val) {
  this->buildingTypeNameSingular = val;
}

void BuildingTypeLocalization::__set_buildingTypeNamePlural(const LocalizedString& val) {
  this->buildingTypeNamePlural = val;
}
std::ostream& operator<<(std::ostream& out, const BuildingTypeLocalization& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuildingTypeLocalization::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_buildingType = false;
  bool isset_buildingTypeNameSingular = false;
  bool isset_buildingTypeNamePlural = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast824;
          xfer += iprot->readI32(ecast824);
          this->buildingType = (BuildingType::type)ecast824;
          isset_buildingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->buildingTypeNameSingular.read(iprot);
          isset_buildingTypeNameSingular = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->buildingTypeNamePlural.read(iprot);
          isset_buildingTypeNamePlural = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_buildingType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingTypeNameSingular)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingTypeNamePlural)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BuildingTypeLocalization::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuildingTypeLocalization");

  xfer += oprot->writeFieldBegin("buildingType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->buildingType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingTypeNameSingular", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->buildingTypeNameSingular.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingTypeNamePlural", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->buildingTypeNamePlural.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuildingTypeLocalization &a, BuildingTypeLocalization &b) {
  using ::std::swap;
  swap(a.buildingType, b.buildingType);
  swap(a.buildingTypeNameSingular, b.buildingTypeNameSingular);
  swap(a.buildingTypeNamePlural, b.buildingTypeNamePlural);
}

BuildingTypeLocalization::BuildingTypeLocalization(const BuildingTypeLocalization& other825) {
  buildingType = other825.buildingType;
  buildingTypeNameSingular = other825.buildingTypeNameSingular;
  buildingTypeNamePlural = other825.buildingTypeNamePlural;
}
BuildingTypeLocalization& BuildingTypeLocalization::operator=(const BuildingTypeLocalization& other826) {
  buildingType = other826.buildingType;
  buildingTypeNameSingular = other826.buildingTypeNameSingular;
  buildingTypeNamePlural = other826.buildingTypeNamePlural;
  return *this;
}
void BuildingTypeLocalization::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuildingTypeLocalization(";
  out << "buildingType=" << to_string(buildingType);
  out << ", " << "buildingTypeNameSingular=" << to_string(buildingTypeNameSingular);
  out << ", " << "buildingTypeNamePlural=" << to_string(buildingTypeNamePlural);
  out << ")";
}


ForcedUpgrade::~ForcedUpgrade() throw() {
}


void ForcedUpgrade::__set_clientPlatform(const ClientPlatform::type val) {
  this->clientPlatform = val;
}

void ForcedUpgrade::__set_minClientVersion(const std::string& val) {
  this->minClientVersion = val;
}

void ForcedUpgrade::__set_minClientBuild(const std::string& val) {
  this->minClientBuild = val;
}

void ForcedUpgrade::__set_title(const std::string& val) {
  this->title = val;
}

void ForcedUpgrade::__set_details(const std::string& val) {
  this->details = val;
}

void ForcedUpgrade::__set_buttonText(const std::string& val) {
  this->buttonText = val;
}

void ForcedUpgrade::__set_url(const std::string& val) {
  this->url = val;
}
std::ostream& operator<<(std::ostream& out, const ForcedUpgrade& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ForcedUpgrade::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_clientPlatform = false;
  bool isset_minClientVersion = false;
  bool isset_minClientBuild = false;
  bool isset_title = false;
  bool isset_details = false;
  bool isset_buttonText = false;
  bool isset_url = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast827;
          xfer += iprot->readI32(ecast827);
          this->clientPlatform = (ClientPlatform::type)ecast827;
          isset_clientPlatform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->minClientVersion);
          isset_minClientVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->minClientBuild);
          isset_minClientBuild = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->details);
          isset_details = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buttonText);
          isset_buttonText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_clientPlatform)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minClientVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minClientBuild)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_details)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buttonText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ForcedUpgrade::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ForcedUpgrade");

  xfer += oprot->writeFieldBegin("clientPlatform", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->clientPlatform);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minClientVersion", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->minClientVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minClientBuild", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->minClientBuild);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("details", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->details);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buttonText", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->buttonText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ForcedUpgrade &a, ForcedUpgrade &b) {
  using ::std::swap;
  swap(a.clientPlatform, b.clientPlatform);
  swap(a.minClientVersion, b.minClientVersion);
  swap(a.minClientBuild, b.minClientBuild);
  swap(a.title, b.title);
  swap(a.details, b.details);
  swap(a.buttonText, b.buttonText);
  swap(a.url, b.url);
}

ForcedUpgrade::ForcedUpgrade(const ForcedUpgrade& other828) {
  clientPlatform = other828.clientPlatform;
  minClientVersion = other828.minClientVersion;
  minClientBuild = other828.minClientBuild;
  title = other828.title;
  details = other828.details;
  buttonText = other828.buttonText;
  url = other828.url;
}
ForcedUpgrade& ForcedUpgrade::operator=(const ForcedUpgrade& other829) {
  clientPlatform = other829.clientPlatform;
  minClientVersion = other829.minClientVersion;
  minClientBuild = other829.minClientBuild;
  title = other829.title;
  details = other829.details;
  buttonText = other829.buttonText;
  url = other829.url;
  return *this;
}
void ForcedUpgrade::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ForcedUpgrade(";
  out << "clientPlatform=" << to_string(clientPlatform);
  out << ", " << "minClientVersion=" << to_string(minClientVersion);
  out << ", " << "minClientBuild=" << to_string(minClientBuild);
  out << ", " << "title=" << to_string(title);
  out << ", " << "details=" << to_string(details);
  out << ", " << "buttonText=" << to_string(buttonText);
  out << ", " << "url=" << to_string(url);
  out << ")";
}


ErrorMessage::~ErrorMessage() throw() {
}


void ErrorMessage::__set_errorId(const ErrorId& val) {
  this->errorId = val;
}

void ErrorMessage::__set_details(const std::string& val) {
  this->details = val;
}
std::ostream& operator<<(std::ostream& out, const ErrorMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ErrorMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorId = false;
  bool isset_details = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorId);
          isset_errorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->details);
          isset_details = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_details)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ErrorMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ErrorMessage");

  xfer += oprot->writeFieldBegin("errorId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->errorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("details", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->details);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ErrorMessage &a, ErrorMessage &b) {
  using ::std::swap;
  swap(a.errorId, b.errorId);
  swap(a.details, b.details);
}

ErrorMessage::ErrorMessage(const ErrorMessage& other830) {
  errorId = other830.errorId;
  details = other830.details;
}
ErrorMessage& ErrorMessage::operator=(const ErrorMessage& other831) {
  errorId = other831.errorId;
  details = other831.details;
  return *this;
}
void ErrorMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ErrorMessage(";
  out << "errorId=" << to_string(errorId);
  out << ", " << "details=" << to_string(details);
  out << ")";
}


StrangerSettings::~StrangerSettings() throw() {
}


void StrangerSettings::__set_numberTotal(const int32_t val) {
  this->numberTotal = val;
}

void StrangerSettings::__set_eligibleLastActiveSeconds(const int32_t val) {
  this->eligibleLastActiveSeconds = val;
}

void StrangerSettings::__set_fakePlayerRankHigher(const int32_t val) {
  this->fakePlayerRankHigher = val;
}

void StrangerSettings::__set_fakePlayerRankLower(const int32_t val) {
  this->fakePlayerRankLower = val;
}

void StrangerSettings::__set_maxRankForHighRankStrangerList(const int32_t val) {
  this->maxRankForHighRankStrangerList = val;
__isset.maxRankForHighRankStrangerList = true;
}

void StrangerSettings::__set_fakeRankForHighRankStrangerList(const int32_t val) {
  this->fakeRankForHighRankStrangerList = val;
__isset.fakeRankForHighRankStrangerList = true;
}

void StrangerSettings::__set_enableHighRankStrangerList(const bool val) {
  this->enableHighRankStrangerList = val;
__isset.enableHighRankStrangerList = true;
}

void StrangerSettings::__set_enableLastActiveRankStrangerList(const bool val) {
  this->enableLastActiveRankStrangerList = val;
__isset.enableLastActiveRankStrangerList = true;
}
std::ostream& operator<<(std::ostream& out, const StrangerSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StrangerSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numberTotal = false;
  bool isset_eligibleLastActiveSeconds = false;
  bool isset_fakePlayerRankHigher = false;
  bool isset_fakePlayerRankLower = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberTotal);
          isset_numberTotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eligibleLastActiveSeconds);
          isset_eligibleLastActiveSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fakePlayerRankHigher);
          isset_fakePlayerRankHigher = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fakePlayerRankLower);
          isset_fakePlayerRankLower = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRankForHighRankStrangerList);
          this->__isset.maxRankForHighRankStrangerList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fakeRankForHighRankStrangerList);
          this->__isset.fakeRankForHighRankStrangerList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableHighRankStrangerList);
          this->__isset.enableHighRankStrangerList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableLastActiveRankStrangerList);
          this->__isset.enableLastActiveRankStrangerList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numberTotal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eligibleLastActiveSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fakePlayerRankHigher)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fakePlayerRankLower)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StrangerSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StrangerSettings");

  xfer += oprot->writeFieldBegin("numberTotal", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->numberTotal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eligibleLastActiveSeconds", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->eligibleLastActiveSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fakePlayerRankHigher", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->fakePlayerRankHigher);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fakePlayerRankLower", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->fakePlayerRankLower);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.maxRankForHighRankStrangerList) {
    xfer += oprot->writeFieldBegin("maxRankForHighRankStrangerList", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->maxRankForHighRankStrangerList);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fakeRankForHighRankStrangerList) {
    xfer += oprot->writeFieldBegin("fakeRankForHighRankStrangerList", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->fakeRankForHighRankStrangerList);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableHighRankStrangerList) {
    xfer += oprot->writeFieldBegin("enableHighRankStrangerList", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->enableHighRankStrangerList);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableLastActiveRankStrangerList) {
    xfer += oprot->writeFieldBegin("enableLastActiveRankStrangerList", ::apache::thrift::protocol::T_BOOL, 17);
    xfer += oprot->writeBool(this->enableLastActiveRankStrangerList);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StrangerSettings &a, StrangerSettings &b) {
  using ::std::swap;
  swap(a.numberTotal, b.numberTotal);
  swap(a.eligibleLastActiveSeconds, b.eligibleLastActiveSeconds);
  swap(a.fakePlayerRankHigher, b.fakePlayerRankHigher);
  swap(a.fakePlayerRankLower, b.fakePlayerRankLower);
  swap(a.maxRankForHighRankStrangerList, b.maxRankForHighRankStrangerList);
  swap(a.fakeRankForHighRankStrangerList, b.fakeRankForHighRankStrangerList);
  swap(a.enableHighRankStrangerList, b.enableHighRankStrangerList);
  swap(a.enableLastActiveRankStrangerList, b.enableLastActiveRankStrangerList);
  swap(a.__isset, b.__isset);
}

StrangerSettings::StrangerSettings(const StrangerSettings& other832) {
  numberTotal = other832.numberTotal;
  eligibleLastActiveSeconds = other832.eligibleLastActiveSeconds;
  fakePlayerRankHigher = other832.fakePlayerRankHigher;
  fakePlayerRankLower = other832.fakePlayerRankLower;
  maxRankForHighRankStrangerList = other832.maxRankForHighRankStrangerList;
  fakeRankForHighRankStrangerList = other832.fakeRankForHighRankStrangerList;
  enableHighRankStrangerList = other832.enableHighRankStrangerList;
  enableLastActiveRankStrangerList = other832.enableLastActiveRankStrangerList;
  __isset = other832.__isset;
}
StrangerSettings& StrangerSettings::operator=(const StrangerSettings& other833) {
  numberTotal = other833.numberTotal;
  eligibleLastActiveSeconds = other833.eligibleLastActiveSeconds;
  fakePlayerRankHigher = other833.fakePlayerRankHigher;
  fakePlayerRankLower = other833.fakePlayerRankLower;
  maxRankForHighRankStrangerList = other833.maxRankForHighRankStrangerList;
  fakeRankForHighRankStrangerList = other833.fakeRankForHighRankStrangerList;
  enableHighRankStrangerList = other833.enableHighRankStrangerList;
  enableLastActiveRankStrangerList = other833.enableLastActiveRankStrangerList;
  __isset = other833.__isset;
  return *this;
}
void StrangerSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StrangerSettings(";
  out << "numberTotal=" << to_string(numberTotal);
  out << ", " << "eligibleLastActiveSeconds=" << to_string(eligibleLastActiveSeconds);
  out << ", " << "fakePlayerRankHigher=" << to_string(fakePlayerRankHigher);
  out << ", " << "fakePlayerRankLower=" << to_string(fakePlayerRankLower);
  out << ", " << "maxRankForHighRankStrangerList="; (__isset.maxRankForHighRankStrangerList ? (out << to_string(maxRankForHighRankStrangerList)) : (out << "<null>"));
  out << ", " << "fakeRankForHighRankStrangerList="; (__isset.fakeRankForHighRankStrangerList ? (out << to_string(fakeRankForHighRankStrangerList)) : (out << "<null>"));
  out << ", " << "enableHighRankStrangerList="; (__isset.enableHighRankStrangerList ? (out << to_string(enableHighRankStrangerList)) : (out << "<null>"));
  out << ", " << "enableLastActiveRankStrangerList="; (__isset.enableLastActiveRankStrangerList ? (out << to_string(enableLastActiveRankStrangerList)) : (out << "<null>"));
  out << ")";
}


StrangerMatchSettings::~StrangerMatchSettings() throw() {
}


void StrangerMatchSettings::__set_minRank(const int32_t val) {
  this->minRank = val;
}

void StrangerMatchSettings::__set_maxRank(const int32_t val) {
  this->maxRank = val;
}

void StrangerMatchSettings::__set_playersPerBucket(const int32_t val) {
  this->playersPerBucket = val;
}

void StrangerMatchSettings::__set_bucketsHigher(const int32_t val) {
  this->bucketsHigher = val;
}

void StrangerMatchSettings::__set_bucketsLower(const int32_t val) {
  this->bucketsLower = val;
}
std::ostream& operator<<(std::ostream& out, const StrangerMatchSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StrangerMatchSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_minRank = false;
  bool isset_maxRank = false;
  bool isset_playersPerBucket = false;
  bool isset_bucketsHigher = false;
  bool isset_bucketsLower = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRank);
          isset_minRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRank);
          isset_maxRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playersPerBucket);
          isset_playersPerBucket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bucketsHigher);
          isset_bucketsHigher = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bucketsLower);
          isset_bucketsLower = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_minRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playersPerBucket)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bucketsHigher)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bucketsLower)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StrangerMatchSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StrangerMatchSettings");

  xfer += oprot->writeFieldBegin("minRank", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->minRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRank", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maxRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playersPerBucket", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->playersPerBucket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bucketsHigher", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->bucketsHigher);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bucketsLower", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->bucketsLower);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StrangerMatchSettings &a, StrangerMatchSettings &b) {
  using ::std::swap;
  swap(a.minRank, b.minRank);
  swap(a.maxRank, b.maxRank);
  swap(a.playersPerBucket, b.playersPerBucket);
  swap(a.bucketsHigher, b.bucketsHigher);
  swap(a.bucketsLower, b.bucketsLower);
}

StrangerMatchSettings::StrangerMatchSettings(const StrangerMatchSettings& other834) {
  minRank = other834.minRank;
  maxRank = other834.maxRank;
  playersPerBucket = other834.playersPerBucket;
  bucketsHigher = other834.bucketsHigher;
  bucketsLower = other834.bucketsLower;
}
StrangerMatchSettings& StrangerMatchSettings::operator=(const StrangerMatchSettings& other835) {
  minRank = other835.minRank;
  maxRank = other835.maxRank;
  playersPerBucket = other835.playersPerBucket;
  bucketsHigher = other835.bucketsHigher;
  bucketsLower = other835.bucketsLower;
  return *this;
}
void StrangerMatchSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StrangerMatchSettings(";
  out << "minRank=" << to_string(minRank);
  out << ", " << "maxRank=" << to_string(maxRank);
  out << ", " << "playersPerBucket=" << to_string(playersPerBucket);
  out << ", " << "bucketsHigher=" << to_string(bucketsHigher);
  out << ", " << "bucketsLower=" << to_string(bucketsLower);
  out << ")";
}


PlayerMatchRankSettings::~PlayerMatchRankSettings() throw() {
}


void PlayerMatchRankSettings::__set_currentLowerRank(const int32_t val) {
  this->currentLowerRank = val;
}

void PlayerMatchRankSettings::__set_currentUpperRank(const int32_t val) {
  this->currentUpperRank = val;
}

void PlayerMatchRankSettings::__set_numRanksUnder(const int32_t val) {
  this->numRanksUnder = val;
}

void PlayerMatchRankSettings::__set_numRanksOver(const int32_t val) {
  this->numRanksOver = val;
}
std::ostream& operator<<(std::ostream& out, const PlayerMatchRankSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlayerMatchRankSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currentLowerRank = false;
  bool isset_currentUpperRank = false;
  bool isset_numRanksUnder = false;
  bool isset_numRanksOver = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currentLowerRank);
          isset_currentLowerRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currentUpperRank);
          isset_currentUpperRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numRanksUnder);
          isset_numRanksUnder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numRanksOver);
          isset_numRanksOver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currentLowerRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currentUpperRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numRanksUnder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numRanksOver)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayerMatchRankSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerMatchRankSettings");

  xfer += oprot->writeFieldBegin("currentLowerRank", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->currentLowerRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentUpperRank", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->currentUpperRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numRanksUnder", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->numRanksUnder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numRanksOver", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->numRanksOver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerMatchRankSettings &a, PlayerMatchRankSettings &b) {
  using ::std::swap;
  swap(a.currentLowerRank, b.currentLowerRank);
  swap(a.currentUpperRank, b.currentUpperRank);
  swap(a.numRanksUnder, b.numRanksUnder);
  swap(a.numRanksOver, b.numRanksOver);
}

PlayerMatchRankSettings::PlayerMatchRankSettings(const PlayerMatchRankSettings& other836) {
  currentLowerRank = other836.currentLowerRank;
  currentUpperRank = other836.currentUpperRank;
  numRanksUnder = other836.numRanksUnder;
  numRanksOver = other836.numRanksOver;
}
PlayerMatchRankSettings& PlayerMatchRankSettings::operator=(const PlayerMatchRankSettings& other837) {
  currentLowerRank = other837.currentLowerRank;
  currentUpperRank = other837.currentUpperRank;
  numRanksUnder = other837.numRanksUnder;
  numRanksOver = other837.numRanksOver;
  return *this;
}
void PlayerMatchRankSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerMatchRankSettings(";
  out << "currentLowerRank=" << to_string(currentLowerRank);
  out << ", " << "currentUpperRank=" << to_string(currentUpperRank);
  out << ", " << "numRanksUnder=" << to_string(numRanksUnder);
  out << ", " << "numRanksOver=" << to_string(numRanksOver);
  out << ")";
}


FakeStrangerDisplay::~FakeStrangerDisplay() throw() {
}


void FakeStrangerDisplay::__set_display(const std::string& val) {
  this->display = val;
}
std::ostream& operator<<(std::ostream& out, const FakeStrangerDisplay& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FakeStrangerDisplay::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_display = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->display);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FakeStrangerDisplay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FakeStrangerDisplay");

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->display);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FakeStrangerDisplay &a, FakeStrangerDisplay &b) {
  using ::std::swap;
  swap(a.display, b.display);
}

FakeStrangerDisplay::FakeStrangerDisplay(const FakeStrangerDisplay& other838) {
  display = other838.display;
}
FakeStrangerDisplay& FakeStrangerDisplay::operator=(const FakeStrangerDisplay& other839) {
  display = other839.display;
  return *this;
}
void FakeStrangerDisplay::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FakeStrangerDisplay(";
  out << "display=" << to_string(display);
  out << ")";
}


GiftMessageReward::~GiftMessageReward() throw() {
}


void GiftMessageReward::__set_giftMessageRewardId(const GiftMessageRewardID& val) {
  this->giftMessageRewardId = val;
}

void GiftMessageReward::__set_itemType(const LootItemType::type val) {
  this->itemType = val;
}

void GiftMessageReward::__set_itemId(const CurrencyID& val) {
  this->itemId = val;
}

void GiftMessageReward::__set_itemAmount(const int32_t val) {
  this->itemAmount = val;
}
std::ostream& operator<<(std::ostream& out, const GiftMessageReward& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GiftMessageReward::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_giftMessageRewardId = false;
  bool isset_itemType = false;
  bool isset_itemId = false;
  bool isset_itemAmount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->giftMessageRewardId);
          isset_giftMessageRewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast840;
          xfer += iprot->readI32(ecast840);
          this->itemType = (LootItemType::type)ecast840;
          isset_itemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemId);
          isset_itemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->itemAmount);
          isset_itemAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_giftMessageRewardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GiftMessageReward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GiftMessageReward");

  xfer += oprot->writeFieldBegin("giftMessageRewardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->giftMessageRewardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->itemType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->itemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemAmount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->itemAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GiftMessageReward &a, GiftMessageReward &b) {
  using ::std::swap;
  swap(a.giftMessageRewardId, b.giftMessageRewardId);
  swap(a.itemType, b.itemType);
  swap(a.itemId, b.itemId);
  swap(a.itemAmount, b.itemAmount);
}

GiftMessageReward::GiftMessageReward(const GiftMessageReward& other841) {
  giftMessageRewardId = other841.giftMessageRewardId;
  itemType = other841.itemType;
  itemId = other841.itemId;
  itemAmount = other841.itemAmount;
}
GiftMessageReward& GiftMessageReward::operator=(const GiftMessageReward& other842) {
  giftMessageRewardId = other842.giftMessageRewardId;
  itemType = other842.itemType;
  itemId = other842.itemId;
  itemAmount = other842.itemAmount;
  return *this;
}
void GiftMessageReward::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GiftMessageReward(";
  out << "giftMessageRewardId=" << to_string(giftMessageRewardId);
  out << ", " << "itemType=" << to_string(itemType);
  out << ", " << "itemId=" << to_string(itemId);
  out << ", " << "itemAmount=" << to_string(itemAmount);
  out << ")";
}


KingdomLikeGift::~KingdomLikeGift() throw() {
}


void KingdomLikeGift::__set_kingdomLikeGiftId(const KingdomLikeGiftID& val) {
  this->kingdomLikeGiftId = val;
}

void KingdomLikeGift::__set_giftMessageRewardIds(const std::vector<GiftMessageRewardID> & val) {
  this->giftMessageRewardIds = val;
}

void KingdomLikeGift::__set_giftTitle(const std::string& val) {
  this->giftTitle = val;
}

void KingdomLikeGift::__set_giftBody(const std::string& val) {
  this->giftBody = val;
}
std::ostream& operator<<(std::ostream& out, const KingdomLikeGift& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t KingdomLikeGift::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_kingdomLikeGiftId = false;
  bool isset_giftMessageRewardIds = false;
  bool isset_giftTitle = false;
  bool isset_giftBody = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kingdomLikeGiftId);
          isset_kingdomLikeGiftId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->giftMessageRewardIds.clear();
            uint32_t _size843;
            ::apache::thrift::protocol::TType _etype846;
            xfer += iprot->readListBegin(_etype846, _size843);
            this->giftMessageRewardIds.resize(_size843);
            uint32_t _i847;
            for (_i847 = 0; _i847 < _size843; ++_i847)
            {
              xfer += iprot->readString(this->giftMessageRewardIds[_i847]);
            }
            xfer += iprot->readListEnd();
          }
          isset_giftMessageRewardIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->giftTitle);
          isset_giftTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->giftBody);
          isset_giftBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_kingdomLikeGiftId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_giftMessageRewardIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_giftTitle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_giftBody)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KingdomLikeGift::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KingdomLikeGift");

  xfer += oprot->writeFieldBegin("kingdomLikeGiftId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->kingdomLikeGiftId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("giftMessageRewardIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->giftMessageRewardIds.size()));
    std::vector<GiftMessageRewardID> ::const_iterator _iter848;
    for (_iter848 = this->giftMessageRewardIds.begin(); _iter848 != this->giftMessageRewardIds.end(); ++_iter848)
    {
      xfer += oprot->writeString((*_iter848));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("giftTitle", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->giftTitle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("giftBody", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->giftBody);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KingdomLikeGift &a, KingdomLikeGift &b) {
  using ::std::swap;
  swap(a.kingdomLikeGiftId, b.kingdomLikeGiftId);
  swap(a.giftMessageRewardIds, b.giftMessageRewardIds);
  swap(a.giftTitle, b.giftTitle);
  swap(a.giftBody, b.giftBody);
}

KingdomLikeGift::KingdomLikeGift(const KingdomLikeGift& other849) {
  kingdomLikeGiftId = other849.kingdomLikeGiftId;
  giftMessageRewardIds = other849.giftMessageRewardIds;
  giftTitle = other849.giftTitle;
  giftBody = other849.giftBody;
}
KingdomLikeGift& KingdomLikeGift::operator=(const KingdomLikeGift& other850) {
  kingdomLikeGiftId = other850.kingdomLikeGiftId;
  giftMessageRewardIds = other850.giftMessageRewardIds;
  giftTitle = other850.giftTitle;
  giftBody = other850.giftBody;
  return *this;
}
void KingdomLikeGift::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KingdomLikeGift(";
  out << "kingdomLikeGiftId=" << to_string(kingdomLikeGiftId);
  out << ", " << "giftMessageRewardIds=" << to_string(giftMessageRewardIds);
  out << ", " << "giftTitle=" << to_string(giftTitle);
  out << ", " << "giftBody=" << to_string(giftBody);
  out << ")";
}


PartialKingdomLikeGift::~PartialKingdomLikeGift() throw() {
}


void PartialKingdomLikeGift::__set_partialLikeCount(const int32_t val) {
  this->partialLikeCount = val;
}

void PartialKingdomLikeGift::__set_kingdomLikeGiftId(const KingdomLikeGiftID& val) {
  this->kingdomLikeGiftId = val;
}
std::ostream& operator<<(std::ostream& out, const PartialKingdomLikeGift& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PartialKingdomLikeGift::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partialLikeCount = false;
  bool isset_kingdomLikeGiftId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partialLikeCount);
          isset_partialLikeCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kingdomLikeGiftId);
          isset_kingdomLikeGiftId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partialLikeCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kingdomLikeGiftId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartialKingdomLikeGift::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartialKingdomLikeGift");

  xfer += oprot->writeFieldBegin("partialLikeCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->partialLikeCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kingdomLikeGiftId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->kingdomLikeGiftId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartialKingdomLikeGift &a, PartialKingdomLikeGift &b) {
  using ::std::swap;
  swap(a.partialLikeCount, b.partialLikeCount);
  swap(a.kingdomLikeGiftId, b.kingdomLikeGiftId);
}

PartialKingdomLikeGift::PartialKingdomLikeGift(const PartialKingdomLikeGift& other851) {
  partialLikeCount = other851.partialLikeCount;
  kingdomLikeGiftId = other851.kingdomLikeGiftId;
}
PartialKingdomLikeGift& PartialKingdomLikeGift::operator=(const PartialKingdomLikeGift& other852) {
  partialLikeCount = other852.partialLikeCount;
  kingdomLikeGiftId = other852.kingdomLikeGiftId;
  return *this;
}
void PartialKingdomLikeGift::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartialKingdomLikeGift(";
  out << "partialLikeCount=" << to_string(partialLikeCount);
  out << ", " << "kingdomLikeGiftId=" << to_string(kingdomLikeGiftId);
  out << ")";
}


PushMessage::~PushMessage() throw() {
}


void PushMessage::__set_pushMessageId(const PushMessageID& val) {
  this->pushMessageId = val;
}

void PushMessage::__set_oldMessage(const std::string& val) {
  this->oldMessage = val;
__isset.oldMessage = true;
}

void PushMessage::__set_message(const LocalizedString& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const PushMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PushMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_pushMessageId = false;
  bool isset_message = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pushMessageId);
          isset_pushMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oldMessage);
          this->__isset.oldMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          isset_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_pushMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PushMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PushMessage");

  xfer += oprot->writeFieldBegin("pushMessageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->pushMessageId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.oldMessage) {
    xfer += oprot->writeFieldBegin("oldMessage", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->oldMessage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PushMessage &a, PushMessage &b) {
  using ::std::swap;
  swap(a.pushMessageId, b.pushMessageId);
  swap(a.oldMessage, b.oldMessage);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

PushMessage::PushMessage(const PushMessage& other853) {
  pushMessageId = other853.pushMessageId;
  oldMessage = other853.oldMessage;
  message = other853.message;
  __isset = other853.__isset;
}
PushMessage& PushMessage::operator=(const PushMessage& other854) {
  pushMessageId = other854.pushMessageId;
  oldMessage = other854.oldMessage;
  message = other854.message;
  __isset = other854.__isset;
  return *this;
}
void PushMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PushMessage(";
  out << "pushMessageId=" << to_string(pushMessageId);
  out << ", " << "oldMessage="; (__isset.oldMessage ? (out << to_string(oldMessage)) : (out << "<null>"));
  out << ", " << "message=" << to_string(message);
  out << ")";
}


AdProvider::~AdProvider() throw() {
}


void AdProvider::__set_adPlatform(const AdPlatform::type val) {
  this->adPlatform = val;
}

void AdProvider::__set_adProvider(const AdProviders::type val) {
  this->adProvider = val;
}

void AdProvider::__set_appId(const std::string& val) {
  this->appId = val;
}

void AdProvider::__set_customParameters(const std::vector<std::string> & val) {
  this->customParameters = val;
__isset.customParameters = true;
}

void AdProvider::__set_priority(const int32_t val) {
  this->priority = val;
__isset.priority = true;
}
std::ostream& operator<<(std::ostream& out, const AdProvider& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AdProvider::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_adPlatform = false;
  bool isset_adProvider = false;
  bool isset_appId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast855;
          xfer += iprot->readI32(ecast855);
          this->adPlatform = (AdPlatform::type)ecast855;
          isset_adPlatform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast856;
          xfer += iprot->readI32(ecast856);
          this->adProvider = (AdProviders::type)ecast856;
          isset_adProvider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appId);
          isset_appId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->customParameters.clear();
            uint32_t _size857;
            ::apache::thrift::protocol::TType _etype860;
            xfer += iprot->readListBegin(_etype860, _size857);
            this->customParameters.resize(_size857);
            uint32_t _i861;
            for (_i861 = 0; _i861 < _size857; ++_i861)
            {
              xfer += iprot->readString(this->customParameters[_i861]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.customParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_adPlatform)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_adProvider)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AdProvider::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdProvider");

  xfer += oprot->writeFieldBegin("adPlatform", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->adPlatform);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adProvider", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->adProvider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->appId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.customParameters) {
    xfer += oprot->writeFieldBegin("customParameters", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->customParameters.size()));
      std::vector<std::string> ::const_iterator _iter862;
      for (_iter862 = this->customParameters.begin(); _iter862 != this->customParameters.end(); ++_iter862)
      {
        xfer += oprot->writeString((*_iter862));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdProvider &a, AdProvider &b) {
  using ::std::swap;
  swap(a.adPlatform, b.adPlatform);
  swap(a.adProvider, b.adProvider);
  swap(a.appId, b.appId);
  swap(a.customParameters, b.customParameters);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

AdProvider::AdProvider(const AdProvider& other863) {
  adPlatform = other863.adPlatform;
  adProvider = other863.adProvider;
  appId = other863.appId;
  customParameters = other863.customParameters;
  priority = other863.priority;
  __isset = other863.__isset;
}
AdProvider& AdProvider::operator=(const AdProvider& other864) {
  adPlatform = other864.adPlatform;
  adProvider = other864.adProvider;
  appId = other864.appId;
  customParameters = other864.customParameters;
  priority = other864.priority;
  __isset = other864.__isset;
  return *this;
}
void AdProvider::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdProvider(";
  out << "adPlatform=" << to_string(adPlatform);
  out << ", " << "adProvider=" << to_string(adProvider);
  out << ", " << "appId=" << to_string(appId);
  out << ", " << "customParameters="; (__isset.customParameters ? (out << to_string(customParameters)) : (out << "<null>"));
  out << ", " << "priority="; (__isset.priority ? (out << to_string(priority)) : (out << "<null>"));
  out << ")";
}


RushCostByRemainingTime::~RushCostByRemainingTime() throw() {
}


void RushCostByRemainingTime::__set_minRemainingTimeInSecs(const int32_t val) {
  this->minRemainingTimeInSecs = val;
__isset.minRemainingTimeInSecs = true;
}

void RushCostByRemainingTime::__set_maxRemainingTimeInSecs(const int32_t val) {
  this->maxRemainingTimeInSecs = val;
__isset.maxRemainingTimeInSecs = true;
}

void RushCostByRemainingTime::__set_gemCost(const int32_t val) {
  this->gemCost = val;
__isset.gemCost = true;
}
std::ostream& operator<<(std::ostream& out, const RushCostByRemainingTime& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RushCostByRemainingTime::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRemainingTimeInSecs);
          this->__isset.minRemainingTimeInSecs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRemainingTimeInSecs);
          this->__isset.maxRemainingTimeInSecs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gemCost);
          this->__isset.gemCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RushCostByRemainingTime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RushCostByRemainingTime");

  if (this->__isset.minRemainingTimeInSecs) {
    xfer += oprot->writeFieldBegin("minRemainingTimeInSecs", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->minRemainingTimeInSecs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxRemainingTimeInSecs) {
    xfer += oprot->writeFieldBegin("maxRemainingTimeInSecs", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->maxRemainingTimeInSecs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gemCost) {
    xfer += oprot->writeFieldBegin("gemCost", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->gemCost);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RushCostByRemainingTime &a, RushCostByRemainingTime &b) {
  using ::std::swap;
  swap(a.minRemainingTimeInSecs, b.minRemainingTimeInSecs);
  swap(a.maxRemainingTimeInSecs, b.maxRemainingTimeInSecs);
  swap(a.gemCost, b.gemCost);
  swap(a.__isset, b.__isset);
}

RushCostByRemainingTime::RushCostByRemainingTime(const RushCostByRemainingTime& other865) {
  minRemainingTimeInSecs = other865.minRemainingTimeInSecs;
  maxRemainingTimeInSecs = other865.maxRemainingTimeInSecs;
  gemCost = other865.gemCost;
  __isset = other865.__isset;
}
RushCostByRemainingTime& RushCostByRemainingTime::operator=(const RushCostByRemainingTime& other866) {
  minRemainingTimeInSecs = other866.minRemainingTimeInSecs;
  maxRemainingTimeInSecs = other866.maxRemainingTimeInSecs;
  gemCost = other866.gemCost;
  __isset = other866.__isset;
  return *this;
}
void RushCostByRemainingTime::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RushCostByRemainingTime(";
  out << "minRemainingTimeInSecs="; (__isset.minRemainingTimeInSecs ? (out << to_string(minRemainingTimeInSecs)) : (out << "<null>"));
  out << ", " << "maxRemainingTimeInSecs="; (__isset.maxRemainingTimeInSecs ? (out << to_string(maxRemainingTimeInSecs)) : (out << "<null>"));
  out << ", " << "gemCost="; (__isset.gemCost ? (out << to_string(gemCost)) : (out << "<null>"));
  out << ")";
}


RewardMessage::~RewardMessage() throw() {
}


void RewardMessage::__set_rewardMessageId(const RewardMessageID& val) {
  this->rewardMessageId = val;
}

void RewardMessage::__set_localizedTitle(const std::string& val) {
  this->localizedTitle = val;
__isset.localizedTitle = true;
}

void RewardMessage::__set_localizedBody(const std::string& val) {
  this->localizedBody = val;
__isset.localizedBody = true;
}

void RewardMessage::__set_title(const LocalizedString& val) {
  this->title = val;
}

void RewardMessage::__set_body(const LocalizedString& val) {
  this->body = val;
}

void RewardMessage::__set_priority(const int32_t val) {
  this->priority = val;
}

void RewardMessage::__set_templateId(const TemplateID& val) {
  this->templateId = val;
}
std::ostream& operator<<(std::ostream& out, const RewardMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RewardMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rewardMessageId = false;
  bool isset_title = false;
  bool isset_body = false;
  bool isset_priority = false;
  bool isset_templateId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardMessageId);
          isset_rewardMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localizedTitle);
          this->__isset.localizedTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localizedBody);
          this->__isset.localizedBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->title.read(iprot);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body.read(iprot);
          isset_body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->templateId);
          isset_templateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rewardMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_body)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_templateId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RewardMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RewardMessage");

  xfer += oprot->writeFieldBegin("rewardMessageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->rewardMessageId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.localizedTitle) {
    xfer += oprot->writeFieldBegin("localizedTitle", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->localizedTitle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localizedBody) {
    xfer += oprot->writeFieldBegin("localizedBody", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->localizedBody);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->title.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->body.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("templateId", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->templateId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RewardMessage &a, RewardMessage &b) {
  using ::std::swap;
  swap(a.rewardMessageId, b.rewardMessageId);
  swap(a.localizedTitle, b.localizedTitle);
  swap(a.localizedBody, b.localizedBody);
  swap(a.title, b.title);
  swap(a.body, b.body);
  swap(a.priority, b.priority);
  swap(a.templateId, b.templateId);
  swap(a.__isset, b.__isset);
}

RewardMessage::RewardMessage(const RewardMessage& other867) {
  rewardMessageId = other867.rewardMessageId;
  localizedTitle = other867.localizedTitle;
  localizedBody = other867.localizedBody;
  title = other867.title;
  body = other867.body;
  priority = other867.priority;
  templateId = other867.templateId;
  __isset = other867.__isset;
}
RewardMessage& RewardMessage::operator=(const RewardMessage& other868) {
  rewardMessageId = other868.rewardMessageId;
  localizedTitle = other868.localizedTitle;
  localizedBody = other868.localizedBody;
  title = other868.title;
  body = other868.body;
  priority = other868.priority;
  templateId = other868.templateId;
  __isset = other868.__isset;
  return *this;
}
void RewardMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RewardMessage(";
  out << "rewardMessageId=" << to_string(rewardMessageId);
  out << ", " << "localizedTitle="; (__isset.localizedTitle ? (out << to_string(localizedTitle)) : (out << "<null>"));
  out << ", " << "localizedBody="; (__isset.localizedBody ? (out << to_string(localizedBody)) : (out << "<null>"));
  out << ", " << "title=" << to_string(title);
  out << ", " << "body=" << to_string(body);
  out << ", " << "priority=" << to_string(priority);
  out << ", " << "templateId=" << to_string(templateId);
  out << ")";
}


Event::~Event() throw() {
}


void Event::__set_eventId(const EventID& val) {
  this->eventId = val;
}

void Event::__set_previewStartTime(const DateTimeUTC& val) {
  this->previewStartTime = val;
}

void Event::__set_mainStartTime(const DateTimeUTC& val) {
  this->mainStartTime = val;
}

void Event::__set_mainEndTime(const DateTimeUTC& val) {
  this->mainEndTime = val;
}

void Event::__set_recapEndTime(const DateTimeUTC& val) {
  this->recapEndTime = val;
}

void Event::__set_repeatSeconds(const int32_t val) {
  this->repeatSeconds = val;
}

void Event::__set_parentEventId(const EventID& val) {
  this->parentEventId = val;
}
std::ostream& operator<<(std::ostream& out, const Event& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Event::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;
  bool isset_previewStartTime = false;
  bool isset_mainStartTime = false;
  bool isset_mainEndTime = false;
  bool isset_recapEndTime = false;
  bool isset_repeatSeconds = false;
  bool isset_parentEventId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->previewStartTime.read(iprot);
          isset_previewStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mainStartTime.read(iprot);
          isset_mainStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mainEndTime.read(iprot);
          isset_mainEndTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recapEndTime.read(iprot);
          isset_recapEndTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->repeatSeconds);
          isset_repeatSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parentEventId);
          isset_parentEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_previewStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mainStartTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mainEndTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recapEndTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_repeatSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parentEventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Event::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Event");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("previewStartTime", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->previewStartTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mainStartTime", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->mainStartTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mainEndTime", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->mainEndTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recapEndTime", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->recapEndTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repeatSeconds", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->repeatSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentEventId", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->parentEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Event &a, Event &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.previewStartTime, b.previewStartTime);
  swap(a.mainStartTime, b.mainStartTime);
  swap(a.mainEndTime, b.mainEndTime);
  swap(a.recapEndTime, b.recapEndTime);
  swap(a.repeatSeconds, b.repeatSeconds);
  swap(a.parentEventId, b.parentEventId);
}

Event::Event(const Event& other869) {
  eventId = other869.eventId;
  previewStartTime = other869.previewStartTime;
  mainStartTime = other869.mainStartTime;
  mainEndTime = other869.mainEndTime;
  recapEndTime = other869.recapEndTime;
  repeatSeconds = other869.repeatSeconds;
  parentEventId = other869.parentEventId;
}
Event& Event::operator=(const Event& other870) {
  eventId = other870.eventId;
  previewStartTime = other870.previewStartTime;
  mainStartTime = other870.mainStartTime;
  mainEndTime = other870.mainEndTime;
  recapEndTime = other870.recapEndTime;
  repeatSeconds = other870.repeatSeconds;
  parentEventId = other870.parentEventId;
  return *this;
}
void Event::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Event(";
  out << "eventId=" << to_string(eventId);
  out << ", " << "previewStartTime=" << to_string(previewStartTime);
  out << ", " << "mainStartTime=" << to_string(mainStartTime);
  out << ", " << "mainEndTime=" << to_string(mainEndTime);
  out << ", " << "recapEndTime=" << to_string(recapEndTime);
  out << ", " << "repeatSeconds=" << to_string(repeatSeconds);
  out << ", " << "parentEventId=" << to_string(parentEventId);
  out << ")";
}


CellInfo::~CellInfo() throw() {
}


void CellInfo::__set_CellInfoMapId(const CellInfoMapID& val) {
  this->CellInfoMapId = val;
}

void CellInfo::__set_cellTypeId(const CellTypeID& val) {
  this->cellTypeId = val;
}

void CellInfo::__set_cellImagePath(const std::string& val) {
  this->cellImagePath = val;
}

void CellInfo::__set_specialAnimationPath(const std::string& val) {
  this->specialAnimationPath = val;
__isset.specialAnimationPath = true;
}
std::ostream& operator<<(std::ostream& out, const CellInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CellInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_CellInfoMapId = false;
  bool isset_cellTypeId = false;
  bool isset_cellImagePath = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->CellInfoMapId);
          isset_CellInfoMapId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellTypeId);
          isset_cellTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellImagePath);
          isset_cellImagePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->specialAnimationPath);
          this->__isset.specialAnimationPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_CellInfoMapId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cellTypeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cellImagePath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CellInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CellInfo");

  xfer += oprot->writeFieldBegin("CellInfoMapId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->CellInfoMapId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cellTypeId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->cellTypeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cellImagePath", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->cellImagePath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.specialAnimationPath) {
    xfer += oprot->writeFieldBegin("specialAnimationPath", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->specialAnimationPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CellInfo &a, CellInfo &b) {
  using ::std::swap;
  swap(a.CellInfoMapId, b.CellInfoMapId);
  swap(a.cellTypeId, b.cellTypeId);
  swap(a.cellImagePath, b.cellImagePath);
  swap(a.specialAnimationPath, b.specialAnimationPath);
  swap(a.__isset, b.__isset);
}

CellInfo::CellInfo(const CellInfo& other871) {
  CellInfoMapId = other871.CellInfoMapId;
  cellTypeId = other871.cellTypeId;
  cellImagePath = other871.cellImagePath;
  specialAnimationPath = other871.specialAnimationPath;
  __isset = other871.__isset;
}
CellInfo& CellInfo::operator=(const CellInfo& other872) {
  CellInfoMapId = other872.CellInfoMapId;
  cellTypeId = other872.cellTypeId;
  cellImagePath = other872.cellImagePath;
  specialAnimationPath = other872.specialAnimationPath;
  __isset = other872.__isset;
  return *this;
}
void CellInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CellInfo(";
  out << "CellInfoMapId=" << to_string(CellInfoMapId);
  out << ", " << "cellTypeId=" << to_string(cellTypeId);
  out << ", " << "cellImagePath=" << to_string(cellImagePath);
  out << ", " << "specialAnimationPath="; (__isset.specialAnimationPath ? (out << to_string(specialAnimationPath)) : (out << "<null>"));
  out << ")";
}


MatchThreeCellDefinition::~MatchThreeCellDefinition() throw() {
}


void MatchThreeCellDefinition::__set_match3ThemeId(const Match3ThemeId& val) {
  this->match3ThemeId = val;
}

void MatchThreeCellDefinition::__set_cellTypeId(const CellTypeID& val) {
  this->cellTypeId = val;
}

void MatchThreeCellDefinition::__set_displayName(const LocalizedString& val) {
  this->displayName = val;
}

void MatchThreeCellDefinition::__set_cellImagePath(const AssetPath& val) {
  this->cellImagePath = val;
__isset.cellImagePath = true;
}

void MatchThreeCellDefinition::__set_affinityId(const AffinityID::type val) {
  this->affinityId = val;
__isset.affinityId = true;
}

void MatchThreeCellDefinition::__set_specialtyId(const SpecialtyID::type val) {
  this->specialtyId = val;
__isset.specialtyId = true;
}

void MatchThreeCellDefinition::__set_blastJsonFilename(const std::string& val) {
  this->blastJsonFilename = val;
__isset.blastJsonFilename = true;
}

void MatchThreeCellDefinition::__set_blastAtlasFilename(const std::string& val) {
  this->blastAtlasFilename = val;
__isset.blastAtlasFilename = true;
}

void MatchThreeCellDefinition::__set_blastAnimationName(const std::string& val) {
  this->blastAnimationName = val;
__isset.blastAnimationName = true;
}
std::ostream& operator<<(std::ostream& out, const MatchThreeCellDefinition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MatchThreeCellDefinition::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match3ThemeId = false;
  bool isset_cellTypeId = false;
  bool isset_displayName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->match3ThemeId);
          isset_match3ThemeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellTypeId);
          isset_cellTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->displayName.read(iprot);
          isset_displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellImagePath);
          this->__isset.cellImagePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast873;
          xfer += iprot->readI32(ecast873);
          this->affinityId = (AffinityID::type)ecast873;
          this->__isset.affinityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast874;
          xfer += iprot->readI32(ecast874);
          this->specialtyId = (SpecialtyID::type)ecast874;
          this->__isset.specialtyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blastJsonFilename);
          this->__isset.blastJsonFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blastAtlasFilename);
          this->__isset.blastAtlasFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blastAnimationName);
          this->__isset.blastAnimationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match3ThemeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cellTypeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MatchThreeCellDefinition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MatchThreeCellDefinition");

  xfer += oprot->writeFieldBegin("match3ThemeId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->match3ThemeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cellTypeId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->cellTypeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->displayName.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.cellImagePath) {
    xfer += oprot->writeFieldBegin("cellImagePath", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->cellImagePath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.affinityId) {
    xfer += oprot->writeFieldBegin("affinityId", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32((int32_t)this->affinityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.specialtyId) {
    xfer += oprot->writeFieldBegin("specialtyId", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32((int32_t)this->specialtyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blastJsonFilename) {
    xfer += oprot->writeFieldBegin("blastJsonFilename", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->blastJsonFilename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blastAtlasFilename) {
    xfer += oprot->writeFieldBegin("blastAtlasFilename", ::apache::thrift::protocol::T_STRING, 51);
    xfer += oprot->writeString(this->blastAtlasFilename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blastAnimationName) {
    xfer += oprot->writeFieldBegin("blastAnimationName", ::apache::thrift::protocol::T_STRING, 52);
    xfer += oprot->writeString(this->blastAnimationName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchThreeCellDefinition &a, MatchThreeCellDefinition &b) {
  using ::std::swap;
  swap(a.match3ThemeId, b.match3ThemeId);
  swap(a.cellTypeId, b.cellTypeId);
  swap(a.displayName, b.displayName);
  swap(a.cellImagePath, b.cellImagePath);
  swap(a.affinityId, b.affinityId);
  swap(a.specialtyId, b.specialtyId);
  swap(a.blastJsonFilename, b.blastJsonFilename);
  swap(a.blastAtlasFilename, b.blastAtlasFilename);
  swap(a.blastAnimationName, b.blastAnimationName);
  swap(a.__isset, b.__isset);
}

MatchThreeCellDefinition::MatchThreeCellDefinition(const MatchThreeCellDefinition& other875) {
  match3ThemeId = other875.match3ThemeId;
  cellTypeId = other875.cellTypeId;
  displayName = other875.displayName;
  cellImagePath = other875.cellImagePath;
  affinityId = other875.affinityId;
  specialtyId = other875.specialtyId;
  blastJsonFilename = other875.blastJsonFilename;
  blastAtlasFilename = other875.blastAtlasFilename;
  blastAnimationName = other875.blastAnimationName;
  __isset = other875.__isset;
}
MatchThreeCellDefinition& MatchThreeCellDefinition::operator=(const MatchThreeCellDefinition& other876) {
  match3ThemeId = other876.match3ThemeId;
  cellTypeId = other876.cellTypeId;
  displayName = other876.displayName;
  cellImagePath = other876.cellImagePath;
  affinityId = other876.affinityId;
  specialtyId = other876.specialtyId;
  blastJsonFilename = other876.blastJsonFilename;
  blastAtlasFilename = other876.blastAtlasFilename;
  blastAnimationName = other876.blastAnimationName;
  __isset = other876.__isset;
  return *this;
}
void MatchThreeCellDefinition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MatchThreeCellDefinition(";
  out << "match3ThemeId=" << to_string(match3ThemeId);
  out << ", " << "cellTypeId=" << to_string(cellTypeId);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "cellImagePath="; (__isset.cellImagePath ? (out << to_string(cellImagePath)) : (out << "<null>"));
  out << ", " << "affinityId="; (__isset.affinityId ? (out << to_string(affinityId)) : (out << "<null>"));
  out << ", " << "specialtyId="; (__isset.specialtyId ? (out << to_string(specialtyId)) : (out << "<null>"));
  out << ", " << "blastJsonFilename="; (__isset.blastJsonFilename ? (out << to_string(blastJsonFilename)) : (out << "<null>"));
  out << ", " << "blastAtlasFilename="; (__isset.blastAtlasFilename ? (out << to_string(blastAtlasFilename)) : (out << "<null>"));
  out << ", " << "blastAnimationName="; (__isset.blastAnimationName ? (out << to_string(blastAnimationName)) : (out << "<null>"));
  out << ")";
}


MatchThreeBlasterDefinition::~MatchThreeBlasterDefinition() throw() {
}


void MatchThreeBlasterDefinition::__set_match3ThemeId(const Match3ThemeId& val) {
  this->match3ThemeId = val;
}

void MatchThreeBlasterDefinition::__set_blasterTypeId(const BlasterTypeID& val) {
  this->blasterTypeId = val;
__isset.blasterTypeId = true;
}

void MatchThreeBlasterDefinition::__set_displayName(const LocalizedString& val) {
  this->displayName = val;
__isset.displayName = true;
}

void MatchThreeBlasterDefinition::__set_cellMatchCategory(const std::string& val) {
  this->cellMatchCategory = val;
__isset.cellMatchCategory = true;
}

void MatchThreeBlasterDefinition::__set_blastJsonFilename(const std::string& val) {
  this->blastJsonFilename = val;
__isset.blastJsonFilename = true;
}

void MatchThreeBlasterDefinition::__set_blastAtlasFilename(const std::string& val) {
  this->blastAtlasFilename = val;
__isset.blastAtlasFilename = true;
}

void MatchThreeBlasterDefinition::__set_blastAnimationName(const std::string& val) {
  this->blastAnimationName = val;
__isset.blastAnimationName = true;
}
std::ostream& operator<<(std::ostream& out, const MatchThreeBlasterDefinition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MatchThreeBlasterDefinition::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match3ThemeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->match3ThemeId);
          isset_match3ThemeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blasterTypeId);
          this->__isset.blasterTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->displayName.read(iprot);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellMatchCategory);
          this->__isset.cellMatchCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blastJsonFilename);
          this->__isset.blastJsonFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blastAtlasFilename);
          this->__isset.blastAtlasFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blastAnimationName);
          this->__isset.blastAnimationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match3ThemeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MatchThreeBlasterDefinition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MatchThreeBlasterDefinition");

  xfer += oprot->writeFieldBegin("match3ThemeId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->match3ThemeId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.blasterTypeId) {
    xfer += oprot->writeFieldBegin("blasterTypeId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->blasterTypeId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.displayName) {
    xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->displayName.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cellMatchCategory) {
    xfer += oprot->writeFieldBegin("cellMatchCategory", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->cellMatchCategory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blastJsonFilename) {
    xfer += oprot->writeFieldBegin("blastJsonFilename", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->blastJsonFilename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blastAtlasFilename) {
    xfer += oprot->writeFieldBegin("blastAtlasFilename", ::apache::thrift::protocol::T_STRING, 51);
    xfer += oprot->writeString(this->blastAtlasFilename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blastAnimationName) {
    xfer += oprot->writeFieldBegin("blastAnimationName", ::apache::thrift::protocol::T_STRING, 52);
    xfer += oprot->writeString(this->blastAnimationName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchThreeBlasterDefinition &a, MatchThreeBlasterDefinition &b) {
  using ::std::swap;
  swap(a.match3ThemeId, b.match3ThemeId);
  swap(a.blasterTypeId, b.blasterTypeId);
  swap(a.displayName, b.displayName);
  swap(a.cellMatchCategory, b.cellMatchCategory);
  swap(a.blastJsonFilename, b.blastJsonFilename);
  swap(a.blastAtlasFilename, b.blastAtlasFilename);
  swap(a.blastAnimationName, b.blastAnimationName);
  swap(a.__isset, b.__isset);
}

MatchThreeBlasterDefinition::MatchThreeBlasterDefinition(const MatchThreeBlasterDefinition& other877) {
  match3ThemeId = other877.match3ThemeId;
  blasterTypeId = other877.blasterTypeId;
  displayName = other877.displayName;
  cellMatchCategory = other877.cellMatchCategory;
  blastJsonFilename = other877.blastJsonFilename;
  blastAtlasFilename = other877.blastAtlasFilename;
  blastAnimationName = other877.blastAnimationName;
  __isset = other877.__isset;
}
MatchThreeBlasterDefinition& MatchThreeBlasterDefinition::operator=(const MatchThreeBlasterDefinition& other878) {
  match3ThemeId = other878.match3ThemeId;
  blasterTypeId = other878.blasterTypeId;
  displayName = other878.displayName;
  cellMatchCategory = other878.cellMatchCategory;
  blastJsonFilename = other878.blastJsonFilename;
  blastAtlasFilename = other878.blastAtlasFilename;
  blastAnimationName = other878.blastAnimationName;
  __isset = other878.__isset;
  return *this;
}
void MatchThreeBlasterDefinition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MatchThreeBlasterDefinition(";
  out << "match3ThemeId=" << to_string(match3ThemeId);
  out << ", " << "blasterTypeId="; (__isset.blasterTypeId ? (out << to_string(blasterTypeId)) : (out << "<null>"));
  out << ", " << "displayName="; (__isset.displayName ? (out << to_string(displayName)) : (out << "<null>"));
  out << ", " << "cellMatchCategory="; (__isset.cellMatchCategory ? (out << to_string(cellMatchCategory)) : (out << "<null>"));
  out << ", " << "blastJsonFilename="; (__isset.blastJsonFilename ? (out << to_string(blastJsonFilename)) : (out << "<null>"));
  out << ", " << "blastAtlasFilename="; (__isset.blastAtlasFilename ? (out << to_string(blastAtlasFilename)) : (out << "<null>"));
  out << ", " << "blastAnimationName="; (__isset.blastAnimationName ? (out << to_string(blastAnimationName)) : (out << "<null>"));
  out << ")";
}


CastleActivity::~CastleActivity() throw() {
}


void CastleActivity::__set_activityId(const CastleActivityID& val) {
  this->activityId = val;
}

void CastleActivity::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void CastleActivity::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void CastleActivity::__set_keyCurrencyId(const CurrencyID& val) {
  this->keyCurrencyId = val;
}

void CastleActivity::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void CastleActivity::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
}

void CastleActivity::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void CastleActivity::__set_localizedDisplay(const std::string& val) {
  this->localizedDisplay = val;
__isset.localizedDisplay = true;
}

void CastleActivity::__set_display(const LocalizedString& val) {
  this->display = val;
}

void CastleActivity::__set_bundleIds(const std::vector<BundleID> & val) {
  this->bundleIds = val;
}

void CastleActivity::__set_eventIslandId(const EventIslandID& val) {
  this->eventIslandId = val;
}

void CastleActivity::__set_eventPointCurrencyId(const CurrencyID& val) {
  this->eventPointCurrencyId = val;
}

void CastleActivity::__set_eventHowToPlayId(const EventHowToPlayID& val) {
  this->eventHowToPlayId = val;
__isset.eventHowToPlayId = true;
}

void CastleActivity::__set_eventMainMenuId(const EventMainMenuID& val) {
  this->eventMainMenuId = val;
__isset.eventMainMenuId = true;
}

void CastleActivity::__set_keyCost1(const int32_t val) {
  this->keyCost1 = val;
}

void CastleActivity::__set_keyCost2(const int32_t val) {
  this->keyCost2 = val;
}

void CastleActivity::__set_keyCost3(const int32_t val) {
  this->keyCost3 = val;
}

void CastleActivity::__set_eventPointMultiplier1(const int32_t val) {
  this->eventPointMultiplier1 = val;
}

void CastleActivity::__set_eventPointMultiplier2(const int32_t val) {
  this->eventPointMultiplier2 = val;
}

void CastleActivity::__set_eventPointMultiplier3(const int32_t val) {
  this->eventPointMultiplier3 = val;
}

void CastleActivity::__set_eventBusinessBuildingId(const BuildingID& val) {
  this->eventBusinessBuildingId = val;
}

void CastleActivity::__set_villainId(const VillainID& val) {
  this->villainId = val;
__isset.villainId = true;
}

void CastleActivity::__set_eventGachaOfferId(const GachaOfferID& val) {
  this->eventGachaOfferId = val;
__isset.eventGachaOfferId = true;
}

void CastleActivity::__set_ticketCurrencyId(const CurrencyID& val) {
  this->ticketCurrencyId = val;
}

void CastleActivity::__set_eventTicketGachaOfferId(const GachaOfferID& val) {
  this->eventTicketGachaOfferId = val;
__isset.eventTicketGachaOfferId = true;
}

void CastleActivity::__set_soloLeaderboardId(const LeaderboardID& val) {
  this->soloLeaderboardId = val;
}

void CastleActivity::__set_globalLeaderboardId(const LeaderboardID& val) {
  this->globalLeaderboardId = val;
}

void CastleActivity::__set_guildLeaderboardId(const GuildLeaderboardID& val) {
  this->guildLeaderboardId = val;
__isset.guildLeaderboardId = true;
}

void CastleActivity::__set_endEventSequenceTriggerOnPopupMessageId(const PopupMessageID& val) {
  this->endEventSequenceTriggerOnPopupMessageId = val;
__isset.endEventSequenceTriggerOnPopupMessageId = true;
}

void CastleActivity::__set_levelPerFloor(const int32_t val) {
  this->levelPerFloor = val;
__isset.levelPerFloor = true;
}

void CastleActivity::__set_maxUnlockedFloor(const int32_t val) {
  this->maxUnlockedFloor = val;
__isset.maxUnlockedFloor = true;
}

void CastleActivity::__set_cellInfoMapId(const CellInfoMapID& val) {
  this->cellInfoMapId = val;
__isset.cellInfoMapId = true;
}

void CastleActivity::__set_upsellCurrencyId(const CurrencyID& val) {
  this->upsellCurrencyId = val;
__isset.upsellCurrencyId = true;
}

void CastleActivity::__set_upsellCurrencyOpenGachaOfferId(const GachaOfferID& val) {
  this->upsellCurrencyOpenGachaOfferId = val;
__isset.upsellCurrencyOpenGachaOfferId = true;
}

void CastleActivity::__set_upsellCurrencyNotEnoughText(const LocalizedString& val) {
  this->upsellCurrencyNotEnoughText = val;
__isset.upsellCurrencyNotEnoughText = true;
}

void CastleActivity::__set_autoPlayKeyCost(const int32_t val) {
  this->autoPlayKeyCost = val;
__isset.autoPlayKeyCost = true;
}

void CastleActivity::__set_autoPlayEventPointMultiplier(const int32_t val) {
  this->autoPlayEventPointMultiplier = val;
__isset.autoPlayEventPointMultiplier = true;
}

void CastleActivity::__set_keyCostPerLevelId(const KeyCostPerLevelID& val) {
  this->keyCostPerLevelId = val;
__isset.keyCostPerLevelId = true;
}

void CastleActivity::__set_fountainBuildingId(const BuildingID& val) {
  this->fountainBuildingId = val;
}

void CastleActivity::__set_fountainNotificationText(const LocalizedString& val) {
  this->fountainNotificationText = val;
}

void CastleActivity::__set_businessCountEventPointMultiplier(const int32_t val) {
  this->businessCountEventPointMultiplier = val;
__isset.businessCountEventPointMultiplier = true;
}

void CastleActivity::__set_upsellKeyPopupMessageId(const PopupMessageID& val) {
  this->upsellKeyPopupMessageId = val;
}

void CastleActivity::__set_eventStoreId(const StoreID& val) {
  this->eventStoreId = val;
__isset.eventStoreId = true;
}

void CastleActivity::__set_eventStampStateChangeMultiplier(const int32_t val) {
  this->eventStampStateChangeMultiplier = val;
__isset.eventStampStateChangeMultiplier = true;
}

void CastleActivity::__set_disableAutoPlay(const bool val) {
  this->disableAutoPlay = val;
__isset.disableAutoPlay = true;
}

void CastleActivity::__set_hideEventPointsOnLevelDots(const bool val) {
  this->hideEventPointsOnLevelDots = val;
__isset.hideEventPointsOnLevelDots = true;
}

void CastleActivity::__set_eventMainMenuWidgets(const std::vector<EventMenuWidgetID> & val) {
  this->eventMainMenuWidgets = val;
__isset.eventMainMenuWidgets = true;
}

void CastleActivity::__set_eventMainMenuWidgetPrefix(const std::string& val) {
  this->eventMainMenuWidgetPrefix = val;
__isset.eventMainMenuWidgetPrefix = true;
}

void CastleActivity::__set_expansionId(const ExpansionID& val) {
  this->expansionId = val;
__isset.expansionId = true;
}
std::ostream& operator<<(std::ostream& out, const CastleActivity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CastleActivity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_activityId = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_keyCurrencyId = false;
  bool isset_showRank = false;
  bool isset_unlockRank = false;
  bool isset_hideRank = false;
  bool isset_display = false;
  bool isset_bundleIds = false;
  bool isset_eventIslandId = false;
  bool isset_eventPointCurrencyId = false;
  bool isset_keyCost1 = false;
  bool isset_keyCost2 = false;
  bool isset_keyCost3 = false;
  bool isset_eventPointMultiplier1 = false;
  bool isset_eventPointMultiplier2 = false;
  bool isset_eventPointMultiplier3 = false;
  bool isset_eventBusinessBuildingId = false;
  bool isset_ticketCurrencyId = false;
  bool isset_soloLeaderboardId = false;
  bool isset_globalLeaderboardId = false;
  bool isset_fountainBuildingId = false;
  bool isset_fountainNotificationText = false;
  bool isset_upsellKeyPopupMessageId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->activityId);
          isset_activityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size879;
            ::apache::thrift::protocol::TType _etype882;
            xfer += iprot->readListBegin(_etype882, _size879);
            this->eventIds.resize(_size879);
            uint32_t _i883;
            for (_i883 = 0; _i883 < _size879; ++_i883)
            {
              xfer += iprot->readString(this->eventIds[_i883]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast884;
          xfer += iprot->readI32(ecast884);
          this->eventPhases = (EventPhases::type)ecast884;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyCurrencyId);
          isset_keyCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          isset_unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localizedDisplay);
          this->__isset.localizedDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bundleIds.clear();
            uint32_t _size885;
            ::apache::thrift::protocol::TType _etype888;
            xfer += iprot->readListBegin(_etype888, _size885);
            this->bundleIds.resize(_size885);
            uint32_t _i889;
            for (_i889 = 0; _i889 < _size885; ++_i889)
            {
              xfer += iprot->readString(this->bundleIds[_i889]);
            }
            xfer += iprot->readListEnd();
          }
          isset_bundleIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventIslandId);
          isset_eventIslandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventPointCurrencyId);
          isset_eventPointCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventHowToPlayId);
          this->__isset.eventHowToPlayId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventMainMenuId);
          this->__isset.eventMainMenuId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyCost1);
          isset_keyCost1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyCost2);
          isset_keyCost2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyCost3);
          isset_keyCost3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventPointMultiplier1);
          isset_eventPointMultiplier1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventPointMultiplier2);
          isset_eventPointMultiplier2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventPointMultiplier3);
          isset_eventPointMultiplier3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventBusinessBuildingId);
          isset_eventBusinessBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->villainId);
          this->__isset.villainId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventGachaOfferId);
          this->__isset.eventGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticketCurrencyId);
          isset_ticketCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventTicketGachaOfferId);
          this->__isset.eventTicketGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->soloLeaderboardId);
          isset_soloLeaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->globalLeaderboardId);
          isset_globalLeaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guildLeaderboardId);
          this->__isset.guildLeaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endEventSequenceTriggerOnPopupMessageId);
          this->__isset.endEventSequenceTriggerOnPopupMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->levelPerFloor);
          this->__isset.levelPerFloor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxUnlockedFloor);
          this->__isset.maxUnlockedFloor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellInfoMapId);
          this->__isset.cellInfoMapId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsellCurrencyId);
          this->__isset.upsellCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 91:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsellCurrencyOpenGachaOfferId);
          this->__isset.upsellCurrencyOpenGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 92:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->upsellCurrencyNotEnoughText.read(iprot);
          this->__isset.upsellCurrencyNotEnoughText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 93:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->autoPlayKeyCost);
          this->__isset.autoPlayKeyCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 94:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->autoPlayEventPointMultiplier);
          this->__isset.autoPlayEventPointMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyCostPerLevelId);
          this->__isset.keyCostPerLevelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 96:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fountainBuildingId);
          isset_fountainBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fountainNotificationText.read(iprot);
          isset_fountainNotificationText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->businessCountEventPointMultiplier);
          this->__isset.businessCountEventPointMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsellKeyPopupMessageId);
          isset_upsellKeyPopupMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventStoreId);
          this->__isset.eventStoreId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventStampStateChangeMultiplier);
          this->__isset.eventStampStateChangeMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disableAutoPlay);
          this->__isset.disableAutoPlay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 201:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideEventPointsOnLevelDots);
          this->__isset.hideEventPointsOnLevelDots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 210:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventMainMenuWidgets.clear();
            uint32_t _size890;
            ::apache::thrift::protocol::TType _etype893;
            xfer += iprot->readListBegin(_etype893, _size890);
            this->eventMainMenuWidgets.resize(_size890);
            uint32_t _i894;
            for (_i894 = 0; _i894 < _size890; ++_i894)
            {
              xfer += iprot->readString(this->eventMainMenuWidgets[_i894]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventMainMenuWidgets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 211:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventMainMenuWidgetPrefix);
          this->__isset.eventMainMenuWidgetPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 220:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expansionId);
          this->__isset.expansionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_activityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bundleIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIslandId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPointCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyCost1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyCost2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyCost3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPointMultiplier1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPointMultiplier2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPointMultiplier3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventBusinessBuildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ticketCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_soloLeaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_globalLeaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fountainBuildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fountainNotificationText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_upsellKeyPopupMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CastleActivity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CastleActivity");

  xfer += oprot->writeFieldBegin("activityId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->activityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter895;
    for (_iter895 = this->eventIds.begin(); _iter895 != this->eventIds.end(); ++_iter895)
    {
      xfer += oprot->writeString((*_iter895));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyCurrencyId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->keyCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->unlockRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.localizedDisplay) {
    xfer += oprot->writeFieldBegin("localizedDisplay", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->localizedDisplay);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bundleIds", ::apache::thrift::protocol::T_LIST, 30);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->bundleIds.size()));
    std::vector<BundleID> ::const_iterator _iter896;
    for (_iter896 = this->bundleIds.begin(); _iter896 != this->bundleIds.end(); ++_iter896)
    {
      xfer += oprot->writeString((*_iter896));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIslandId", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->eventIslandId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPointCurrencyId", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->eventPointCurrencyId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventHowToPlayId) {
    xfer += oprot->writeFieldBegin("eventHowToPlayId", ::apache::thrift::protocol::T_STRING, 33);
    xfer += oprot->writeString(this->eventHowToPlayId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventMainMenuId) {
    xfer += oprot->writeFieldBegin("eventMainMenuId", ::apache::thrift::protocol::T_STRING, 34);
    xfer += oprot->writeString(this->eventMainMenuId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("keyCost1", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->keyCost1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyCost2", ::apache::thrift::protocol::T_I32, 36);
  xfer += oprot->writeI32(this->keyCost2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyCost3", ::apache::thrift::protocol::T_I32, 37);
  xfer += oprot->writeI32(this->keyCost3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPointMultiplier1", ::apache::thrift::protocol::T_I32, 38);
  xfer += oprot->writeI32(this->eventPointMultiplier1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPointMultiplier2", ::apache::thrift::protocol::T_I32, 39);
  xfer += oprot->writeI32(this->eventPointMultiplier2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPointMultiplier3", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->eventPointMultiplier3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventBusinessBuildingId", ::apache::thrift::protocol::T_STRING, 41);
  xfer += oprot->writeString(this->eventBusinessBuildingId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.villainId) {
    xfer += oprot->writeFieldBegin("villainId", ::apache::thrift::protocol::T_STRING, 42);
    xfer += oprot->writeString(this->villainId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventGachaOfferId) {
    xfer += oprot->writeFieldBegin("eventGachaOfferId", ::apache::thrift::protocol::T_STRING, 43);
    xfer += oprot->writeString(this->eventGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("ticketCurrencyId", ::apache::thrift::protocol::T_STRING, 61);
  xfer += oprot->writeString(this->ticketCurrencyId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventTicketGachaOfferId) {
    xfer += oprot->writeFieldBegin("eventTicketGachaOfferId", ::apache::thrift::protocol::T_STRING, 62);
    xfer += oprot->writeString(this->eventTicketGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("soloLeaderboardId", ::apache::thrift::protocol::T_STRING, 70);
  xfer += oprot->writeString(this->soloLeaderboardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("globalLeaderboardId", ::apache::thrift::protocol::T_STRING, 71);
  xfer += oprot->writeString(this->globalLeaderboardId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.guildLeaderboardId) {
    xfer += oprot->writeFieldBegin("guildLeaderboardId", ::apache::thrift::protocol::T_STRING, 72);
    xfer += oprot->writeString(this->guildLeaderboardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.endEventSequenceTriggerOnPopupMessageId) {
    xfer += oprot->writeFieldBegin("endEventSequenceTriggerOnPopupMessageId", ::apache::thrift::protocol::T_STRING, 80);
    xfer += oprot->writeString(this->endEventSequenceTriggerOnPopupMessageId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelPerFloor) {
    xfer += oprot->writeFieldBegin("levelPerFloor", ::apache::thrift::protocol::T_I32, 81);
    xfer += oprot->writeI32(this->levelPerFloor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxUnlockedFloor) {
    xfer += oprot->writeFieldBegin("maxUnlockedFloor", ::apache::thrift::protocol::T_I32, 82);
    xfer += oprot->writeI32(this->maxUnlockedFloor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cellInfoMapId) {
    xfer += oprot->writeFieldBegin("cellInfoMapId", ::apache::thrift::protocol::T_STRING, 85);
    xfer += oprot->writeString(this->cellInfoMapId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsellCurrencyId) {
    xfer += oprot->writeFieldBegin("upsellCurrencyId", ::apache::thrift::protocol::T_STRING, 90);
    xfer += oprot->writeString(this->upsellCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsellCurrencyOpenGachaOfferId) {
    xfer += oprot->writeFieldBegin("upsellCurrencyOpenGachaOfferId", ::apache::thrift::protocol::T_STRING, 91);
    xfer += oprot->writeString(this->upsellCurrencyOpenGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsellCurrencyNotEnoughText) {
    xfer += oprot->writeFieldBegin("upsellCurrencyNotEnoughText", ::apache::thrift::protocol::T_STRUCT, 92);
    xfer += this->upsellCurrencyNotEnoughText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.autoPlayKeyCost) {
    xfer += oprot->writeFieldBegin("autoPlayKeyCost", ::apache::thrift::protocol::T_I32, 93);
    xfer += oprot->writeI32(this->autoPlayKeyCost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.autoPlayEventPointMultiplier) {
    xfer += oprot->writeFieldBegin("autoPlayEventPointMultiplier", ::apache::thrift::protocol::T_I32, 94);
    xfer += oprot->writeI32(this->autoPlayEventPointMultiplier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keyCostPerLevelId) {
    xfer += oprot->writeFieldBegin("keyCostPerLevelId", ::apache::thrift::protocol::T_STRING, 95);
    xfer += oprot->writeString(this->keyCostPerLevelId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("fountainBuildingId", ::apache::thrift::protocol::T_STRING, 96);
  xfer += oprot->writeString(this->fountainBuildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fountainNotificationText", ::apache::thrift::protocol::T_STRUCT, 97);
  xfer += this->fountainNotificationText.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.businessCountEventPointMultiplier) {
    xfer += oprot->writeFieldBegin("businessCountEventPointMultiplier", ::apache::thrift::protocol::T_I32, 99);
    xfer += oprot->writeI32(this->businessCountEventPointMultiplier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("upsellKeyPopupMessageId", ::apache::thrift::protocol::T_STRING, 100);
  xfer += oprot->writeString(this->upsellKeyPopupMessageId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventStoreId) {
    xfer += oprot->writeFieldBegin("eventStoreId", ::apache::thrift::protocol::T_STRING, 101);
    xfer += oprot->writeString(this->eventStoreId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventStampStateChangeMultiplier) {
    xfer += oprot->writeFieldBegin("eventStampStateChangeMultiplier", ::apache::thrift::protocol::T_I32, 110);
    xfer += oprot->writeI32(this->eventStampStateChangeMultiplier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disableAutoPlay) {
    xfer += oprot->writeFieldBegin("disableAutoPlay", ::apache::thrift::protocol::T_BOOL, 200);
    xfer += oprot->writeBool(this->disableAutoPlay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideEventPointsOnLevelDots) {
    xfer += oprot->writeFieldBegin("hideEventPointsOnLevelDots", ::apache::thrift::protocol::T_BOOL, 201);
    xfer += oprot->writeBool(this->hideEventPointsOnLevelDots);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventMainMenuWidgets) {
    xfer += oprot->writeFieldBegin("eventMainMenuWidgets", ::apache::thrift::protocol::T_LIST, 210);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventMainMenuWidgets.size()));
      std::vector<EventMenuWidgetID> ::const_iterator _iter897;
      for (_iter897 = this->eventMainMenuWidgets.begin(); _iter897 != this->eventMainMenuWidgets.end(); ++_iter897)
      {
        xfer += oprot->writeString((*_iter897));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventMainMenuWidgetPrefix) {
    xfer += oprot->writeFieldBegin("eventMainMenuWidgetPrefix", ::apache::thrift::protocol::T_STRING, 211);
    xfer += oprot->writeString(this->eventMainMenuWidgetPrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expansionId) {
    xfer += oprot->writeFieldBegin("expansionId", ::apache::thrift::protocol::T_STRING, 220);
    xfer += oprot->writeString(this->expansionId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CastleActivity &a, CastleActivity &b) {
  using ::std::swap;
  swap(a.activityId, b.activityId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.keyCurrencyId, b.keyCurrencyId);
  swap(a.showRank, b.showRank);
  swap(a.unlockRank, b.unlockRank);
  swap(a.hideRank, b.hideRank);
  swap(a.localizedDisplay, b.localizedDisplay);
  swap(a.display, b.display);
  swap(a.bundleIds, b.bundleIds);
  swap(a.eventIslandId, b.eventIslandId);
  swap(a.eventPointCurrencyId, b.eventPointCurrencyId);
  swap(a.eventHowToPlayId, b.eventHowToPlayId);
  swap(a.eventMainMenuId, b.eventMainMenuId);
  swap(a.keyCost1, b.keyCost1);
  swap(a.keyCost2, b.keyCost2);
  swap(a.keyCost3, b.keyCost3);
  swap(a.eventPointMultiplier1, b.eventPointMultiplier1);
  swap(a.eventPointMultiplier2, b.eventPointMultiplier2);
  swap(a.eventPointMultiplier3, b.eventPointMultiplier3);
  swap(a.eventBusinessBuildingId, b.eventBusinessBuildingId);
  swap(a.villainId, b.villainId);
  swap(a.eventGachaOfferId, b.eventGachaOfferId);
  swap(a.ticketCurrencyId, b.ticketCurrencyId);
  swap(a.eventTicketGachaOfferId, b.eventTicketGachaOfferId);
  swap(a.soloLeaderboardId, b.soloLeaderboardId);
  swap(a.globalLeaderboardId, b.globalLeaderboardId);
  swap(a.guildLeaderboardId, b.guildLeaderboardId);
  swap(a.endEventSequenceTriggerOnPopupMessageId, b.endEventSequenceTriggerOnPopupMessageId);
  swap(a.levelPerFloor, b.levelPerFloor);
  swap(a.maxUnlockedFloor, b.maxUnlockedFloor);
  swap(a.cellInfoMapId, b.cellInfoMapId);
  swap(a.upsellCurrencyId, b.upsellCurrencyId);
  swap(a.upsellCurrencyOpenGachaOfferId, b.upsellCurrencyOpenGachaOfferId);
  swap(a.upsellCurrencyNotEnoughText, b.upsellCurrencyNotEnoughText);
  swap(a.autoPlayKeyCost, b.autoPlayKeyCost);
  swap(a.autoPlayEventPointMultiplier, b.autoPlayEventPointMultiplier);
  swap(a.keyCostPerLevelId, b.keyCostPerLevelId);
  swap(a.fountainBuildingId, b.fountainBuildingId);
  swap(a.fountainNotificationText, b.fountainNotificationText);
  swap(a.businessCountEventPointMultiplier, b.businessCountEventPointMultiplier);
  swap(a.upsellKeyPopupMessageId, b.upsellKeyPopupMessageId);
  swap(a.eventStoreId, b.eventStoreId);
  swap(a.eventStampStateChangeMultiplier, b.eventStampStateChangeMultiplier);
  swap(a.disableAutoPlay, b.disableAutoPlay);
  swap(a.hideEventPointsOnLevelDots, b.hideEventPointsOnLevelDots);
  swap(a.eventMainMenuWidgets, b.eventMainMenuWidgets);
  swap(a.eventMainMenuWidgetPrefix, b.eventMainMenuWidgetPrefix);
  swap(a.expansionId, b.expansionId);
  swap(a.__isset, b.__isset);
}

CastleActivity::CastleActivity(const CastleActivity& other898) {
  activityId = other898.activityId;
  eventIds = other898.eventIds;
  eventPhases = other898.eventPhases;
  keyCurrencyId = other898.keyCurrencyId;
  showRank = other898.showRank;
  unlockRank = other898.unlockRank;
  hideRank = other898.hideRank;
  localizedDisplay = other898.localizedDisplay;
  display = other898.display;
  bundleIds = other898.bundleIds;
  eventIslandId = other898.eventIslandId;
  eventPointCurrencyId = other898.eventPointCurrencyId;
  eventHowToPlayId = other898.eventHowToPlayId;
  eventMainMenuId = other898.eventMainMenuId;
  keyCost1 = other898.keyCost1;
  keyCost2 = other898.keyCost2;
  keyCost3 = other898.keyCost3;
  eventPointMultiplier1 = other898.eventPointMultiplier1;
  eventPointMultiplier2 = other898.eventPointMultiplier2;
  eventPointMultiplier3 = other898.eventPointMultiplier3;
  eventBusinessBuildingId = other898.eventBusinessBuildingId;
  villainId = other898.villainId;
  eventGachaOfferId = other898.eventGachaOfferId;
  ticketCurrencyId = other898.ticketCurrencyId;
  eventTicketGachaOfferId = other898.eventTicketGachaOfferId;
  soloLeaderboardId = other898.soloLeaderboardId;
  globalLeaderboardId = other898.globalLeaderboardId;
  guildLeaderboardId = other898.guildLeaderboardId;
  endEventSequenceTriggerOnPopupMessageId = other898.endEventSequenceTriggerOnPopupMessageId;
  levelPerFloor = other898.levelPerFloor;
  maxUnlockedFloor = other898.maxUnlockedFloor;
  cellInfoMapId = other898.cellInfoMapId;
  upsellCurrencyId = other898.upsellCurrencyId;
  upsellCurrencyOpenGachaOfferId = other898.upsellCurrencyOpenGachaOfferId;
  upsellCurrencyNotEnoughText = other898.upsellCurrencyNotEnoughText;
  autoPlayKeyCost = other898.autoPlayKeyCost;
  autoPlayEventPointMultiplier = other898.autoPlayEventPointMultiplier;
  keyCostPerLevelId = other898.keyCostPerLevelId;
  fountainBuildingId = other898.fountainBuildingId;
  fountainNotificationText = other898.fountainNotificationText;
  businessCountEventPointMultiplier = other898.businessCountEventPointMultiplier;
  upsellKeyPopupMessageId = other898.upsellKeyPopupMessageId;
  eventStoreId = other898.eventStoreId;
  eventStampStateChangeMultiplier = other898.eventStampStateChangeMultiplier;
  disableAutoPlay = other898.disableAutoPlay;
  hideEventPointsOnLevelDots = other898.hideEventPointsOnLevelDots;
  eventMainMenuWidgets = other898.eventMainMenuWidgets;
  eventMainMenuWidgetPrefix = other898.eventMainMenuWidgetPrefix;
  expansionId = other898.expansionId;
  __isset = other898.__isset;
}
CastleActivity& CastleActivity::operator=(const CastleActivity& other899) {
  activityId = other899.activityId;
  eventIds = other899.eventIds;
  eventPhases = other899.eventPhases;
  keyCurrencyId = other899.keyCurrencyId;
  showRank = other899.showRank;
  unlockRank = other899.unlockRank;
  hideRank = other899.hideRank;
  localizedDisplay = other899.localizedDisplay;
  display = other899.display;
  bundleIds = other899.bundleIds;
  eventIslandId = other899.eventIslandId;
  eventPointCurrencyId = other899.eventPointCurrencyId;
  eventHowToPlayId = other899.eventHowToPlayId;
  eventMainMenuId = other899.eventMainMenuId;
  keyCost1 = other899.keyCost1;
  keyCost2 = other899.keyCost2;
  keyCost3 = other899.keyCost3;
  eventPointMultiplier1 = other899.eventPointMultiplier1;
  eventPointMultiplier2 = other899.eventPointMultiplier2;
  eventPointMultiplier3 = other899.eventPointMultiplier3;
  eventBusinessBuildingId = other899.eventBusinessBuildingId;
  villainId = other899.villainId;
  eventGachaOfferId = other899.eventGachaOfferId;
  ticketCurrencyId = other899.ticketCurrencyId;
  eventTicketGachaOfferId = other899.eventTicketGachaOfferId;
  soloLeaderboardId = other899.soloLeaderboardId;
  globalLeaderboardId = other899.globalLeaderboardId;
  guildLeaderboardId = other899.guildLeaderboardId;
  endEventSequenceTriggerOnPopupMessageId = other899.endEventSequenceTriggerOnPopupMessageId;
  levelPerFloor = other899.levelPerFloor;
  maxUnlockedFloor = other899.maxUnlockedFloor;
  cellInfoMapId = other899.cellInfoMapId;
  upsellCurrencyId = other899.upsellCurrencyId;
  upsellCurrencyOpenGachaOfferId = other899.upsellCurrencyOpenGachaOfferId;
  upsellCurrencyNotEnoughText = other899.upsellCurrencyNotEnoughText;
  autoPlayKeyCost = other899.autoPlayKeyCost;
  autoPlayEventPointMultiplier = other899.autoPlayEventPointMultiplier;
  keyCostPerLevelId = other899.keyCostPerLevelId;
  fountainBuildingId = other899.fountainBuildingId;
  fountainNotificationText = other899.fountainNotificationText;
  businessCountEventPointMultiplier = other899.businessCountEventPointMultiplier;
  upsellKeyPopupMessageId = other899.upsellKeyPopupMessageId;
  eventStoreId = other899.eventStoreId;
  eventStampStateChangeMultiplier = other899.eventStampStateChangeMultiplier;
  disableAutoPlay = other899.disableAutoPlay;
  hideEventPointsOnLevelDots = other899.hideEventPointsOnLevelDots;
  eventMainMenuWidgets = other899.eventMainMenuWidgets;
  eventMainMenuWidgetPrefix = other899.eventMainMenuWidgetPrefix;
  expansionId = other899.expansionId;
  __isset = other899.__isset;
  return *this;
}
void CastleActivity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CastleActivity(";
  out << "activityId=" << to_string(activityId);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "keyCurrencyId=" << to_string(keyCurrencyId);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "unlockRank=" << to_string(unlockRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "localizedDisplay="; (__isset.localizedDisplay ? (out << to_string(localizedDisplay)) : (out << "<null>"));
  out << ", " << "display=" << to_string(display);
  out << ", " << "bundleIds=" << to_string(bundleIds);
  out << ", " << "eventIslandId=" << to_string(eventIslandId);
  out << ", " << "eventPointCurrencyId=" << to_string(eventPointCurrencyId);
  out << ", " << "eventHowToPlayId="; (__isset.eventHowToPlayId ? (out << to_string(eventHowToPlayId)) : (out << "<null>"));
  out << ", " << "eventMainMenuId="; (__isset.eventMainMenuId ? (out << to_string(eventMainMenuId)) : (out << "<null>"));
  out << ", " << "keyCost1=" << to_string(keyCost1);
  out << ", " << "keyCost2=" << to_string(keyCost2);
  out << ", " << "keyCost3=" << to_string(keyCost3);
  out << ", " << "eventPointMultiplier1=" << to_string(eventPointMultiplier1);
  out << ", " << "eventPointMultiplier2=" << to_string(eventPointMultiplier2);
  out << ", " << "eventPointMultiplier3=" << to_string(eventPointMultiplier3);
  out << ", " << "eventBusinessBuildingId=" << to_string(eventBusinessBuildingId);
  out << ", " << "villainId="; (__isset.villainId ? (out << to_string(villainId)) : (out << "<null>"));
  out << ", " << "eventGachaOfferId="; (__isset.eventGachaOfferId ? (out << to_string(eventGachaOfferId)) : (out << "<null>"));
  out << ", " << "ticketCurrencyId=" << to_string(ticketCurrencyId);
  out << ", " << "eventTicketGachaOfferId="; (__isset.eventTicketGachaOfferId ? (out << to_string(eventTicketGachaOfferId)) : (out << "<null>"));
  out << ", " << "soloLeaderboardId=" << to_string(soloLeaderboardId);
  out << ", " << "globalLeaderboardId=" << to_string(globalLeaderboardId);
  out << ", " << "guildLeaderboardId="; (__isset.guildLeaderboardId ? (out << to_string(guildLeaderboardId)) : (out << "<null>"));
  out << ", " << "endEventSequenceTriggerOnPopupMessageId="; (__isset.endEventSequenceTriggerOnPopupMessageId ? (out << to_string(endEventSequenceTriggerOnPopupMessageId)) : (out << "<null>"));
  out << ", " << "levelPerFloor="; (__isset.levelPerFloor ? (out << to_string(levelPerFloor)) : (out << "<null>"));
  out << ", " << "maxUnlockedFloor="; (__isset.maxUnlockedFloor ? (out << to_string(maxUnlockedFloor)) : (out << "<null>"));
  out << ", " << "cellInfoMapId="; (__isset.cellInfoMapId ? (out << to_string(cellInfoMapId)) : (out << "<null>"));
  out << ", " << "upsellCurrencyId="; (__isset.upsellCurrencyId ? (out << to_string(upsellCurrencyId)) : (out << "<null>"));
  out << ", " << "upsellCurrencyOpenGachaOfferId="; (__isset.upsellCurrencyOpenGachaOfferId ? (out << to_string(upsellCurrencyOpenGachaOfferId)) : (out << "<null>"));
  out << ", " << "upsellCurrencyNotEnoughText="; (__isset.upsellCurrencyNotEnoughText ? (out << to_string(upsellCurrencyNotEnoughText)) : (out << "<null>"));
  out << ", " << "autoPlayKeyCost="; (__isset.autoPlayKeyCost ? (out << to_string(autoPlayKeyCost)) : (out << "<null>"));
  out << ", " << "autoPlayEventPointMultiplier="; (__isset.autoPlayEventPointMultiplier ? (out << to_string(autoPlayEventPointMultiplier)) : (out << "<null>"));
  out << ", " << "keyCostPerLevelId="; (__isset.keyCostPerLevelId ? (out << to_string(keyCostPerLevelId)) : (out << "<null>"));
  out << ", " << "fountainBuildingId=" << to_string(fountainBuildingId);
  out << ", " << "fountainNotificationText=" << to_string(fountainNotificationText);
  out << ", " << "businessCountEventPointMultiplier="; (__isset.businessCountEventPointMultiplier ? (out << to_string(businessCountEventPointMultiplier)) : (out << "<null>"));
  out << ", " << "upsellKeyPopupMessageId=" << to_string(upsellKeyPopupMessageId);
  out << ", " << "eventStoreId="; (__isset.eventStoreId ? (out << to_string(eventStoreId)) : (out << "<null>"));
  out << ", " << "eventStampStateChangeMultiplier="; (__isset.eventStampStateChangeMultiplier ? (out << to_string(eventStampStateChangeMultiplier)) : (out << "<null>"));
  out << ", " << "disableAutoPlay="; (__isset.disableAutoPlay ? (out << to_string(disableAutoPlay)) : (out << "<null>"));
  out << ", " << "hideEventPointsOnLevelDots="; (__isset.hideEventPointsOnLevelDots ? (out << to_string(hideEventPointsOnLevelDots)) : (out << "<null>"));
  out << ", " << "eventMainMenuWidgets="; (__isset.eventMainMenuWidgets ? (out << to_string(eventMainMenuWidgets)) : (out << "<null>"));
  out << ", " << "eventMainMenuWidgetPrefix="; (__isset.eventMainMenuWidgetPrefix ? (out << to_string(eventMainMenuWidgetPrefix)) : (out << "<null>"));
  out << ", " << "expansionId="; (__isset.expansionId ? (out << to_string(expansionId)) : (out << "<null>"));
  out << ")";
}


RaidBossActivity::~RaidBossActivity() throw() {
}


void RaidBossActivity::__set_activityId(const CastleActivityID& val) {
  this->activityId = val;
}

void RaidBossActivity::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void RaidBossActivity::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void RaidBossActivity::__set_keyCurrencyId(const CurrencyID& val) {
  this->keyCurrencyId = val;
}

void RaidBossActivity::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void RaidBossActivity::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
}

void RaidBossActivity::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void RaidBossActivity::__set_display(const LocalizedString& val) {
  this->display = val;
}

void RaidBossActivity::__set_bundleIds(const std::vector<BundleID> & val) {
  this->bundleIds = val;
__isset.bundleIds = true;
}

void RaidBossActivity::__set_eventIslandId(const EventIslandID& val) {
  this->eventIslandId = val;
__isset.eventIslandId = true;
}

void RaidBossActivity::__set_eventPointCurrencyId(const CurrencyID& val) {
  this->eventPointCurrencyId = val;
__isset.eventPointCurrencyId = true;
}

void RaidBossActivity::__set_eventHowToPlayId(const EventHowToPlayID& val) {
  this->eventHowToPlayId = val;
__isset.eventHowToPlayId = true;
}

void RaidBossActivity::__set_eventMainMenuId(const EventMainMenuID& val) {
  this->eventMainMenuId = val;
__isset.eventMainMenuId = true;
}

void RaidBossActivity::__set_eventBusinessBuildingId(const BuildingID& val) {
  this->eventBusinessBuildingId = val;
__isset.eventBusinessBuildingId = true;
}

void RaidBossActivity::__set_eventGachaOfferId(const GachaOfferID& val) {
  this->eventGachaOfferId = val;
__isset.eventGachaOfferId = true;
}

void RaidBossActivity::__set_affinityBonus(const std::vector<int32_t> & val) {
  this->affinityBonus = val;
__isset.affinityBonus = true;
}

void RaidBossActivity::__set_specialtyBonus(const std::vector<int32_t> & val) {
  this->specialtyBonus = val;
__isset.specialtyBonus = true;
}

void RaidBossActivity::__set_ticketCurrencyId(const CurrencyID& val) {
  this->ticketCurrencyId = val;
__isset.ticketCurrencyId = true;
}

void RaidBossActivity::__set_eventTicketGachaOfferId(const GachaOfferID& val) {
  this->eventTicketGachaOfferId = val;
__isset.eventTicketGachaOfferId = true;
}

void RaidBossActivity::__set_soloLeaderboardId(const LeaderboardID& val) {
  this->soloLeaderboardId = val;
__isset.soloLeaderboardId = true;
}

void RaidBossActivity::__set_globalLeaderboardId(const LeaderboardID& val) {
  this->globalLeaderboardId = val;
__isset.globalLeaderboardId = true;
}

void RaidBossActivity::__set_guildLeaderboardId(const GuildLeaderboardID& val) {
  this->guildLeaderboardId = val;
__isset.guildLeaderboardId = true;
}

void RaidBossActivity::__set_cellInfoMapId(const CellInfoMapID& val) {
  this->cellInfoMapId = val;
__isset.cellInfoMapId = true;
}

void RaidBossActivity::__set_upsellCurrencyId(const CurrencyID& val) {
  this->upsellCurrencyId = val;
__isset.upsellCurrencyId = true;
}

void RaidBossActivity::__set_upsellCurrencyOpenGachaOfferId(const GachaOfferID& val) {
  this->upsellCurrencyOpenGachaOfferId = val;
__isset.upsellCurrencyOpenGachaOfferId = true;
}

void RaidBossActivity::__set_upsellCurrencyNotEnoughText(const LocalizedString& val) {
  this->upsellCurrencyNotEnoughText = val;
__isset.upsellCurrencyNotEnoughText = true;
}

void RaidBossActivity::__set_keyCostPerLevelId(const KeyCostPerLevelID& val) {
  this->keyCostPerLevelId = val;
__isset.keyCostPerLevelId = true;
}

void RaidBossActivity::__set_fountainBuildingId(const BuildingID& val) {
  this->fountainBuildingId = val;
__isset.fountainBuildingId = true;
}

void RaidBossActivity::__set_fountainNotificationText(const LocalizedString& val) {
  this->fountainNotificationText = val;
__isset.fountainNotificationText = true;
}

void RaidBossActivity::__set_upsellKeyPopupMessageId(const PopupMessageID& val) {
  this->upsellKeyPopupMessageId = val;
__isset.upsellKeyPopupMessageId = true;
}

void RaidBossActivity::__set_eventStoreId(const StoreID& val) {
  this->eventStoreId = val;
__isset.eventStoreId = true;
}

void RaidBossActivity::__set_eventStampStateChangeMultiplier(const int32_t val) {
  this->eventStampStateChangeMultiplier = val;
__isset.eventStampStateChangeMultiplier = true;
}

void RaidBossActivity::__set_eventMainMenuWidgetPrefix(const std::string& val) {
  this->eventMainMenuWidgetPrefix = val;
__isset.eventMainMenuWidgetPrefix = true;
}

void RaidBossActivity::__set_expansionId(const ExpansionID& val) {
  this->expansionId = val;
__isset.expansionId = true;
}
std::ostream& operator<<(std::ostream& out, const RaidBossActivity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RaidBossActivity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_activityId = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_keyCurrencyId = false;
  bool isset_showRank = false;
  bool isset_unlockRank = false;
  bool isset_hideRank = false;
  bool isset_display = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->activityId);
          isset_activityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size900;
            ::apache::thrift::protocol::TType _etype903;
            xfer += iprot->readListBegin(_etype903, _size900);
            this->eventIds.resize(_size900);
            uint32_t _i904;
            for (_i904 = 0; _i904 < _size900; ++_i904)
            {
              xfer += iprot->readString(this->eventIds[_i904]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast905;
          xfer += iprot->readI32(ecast905);
          this->eventPhases = (EventPhases::type)ecast905;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyCurrencyId);
          isset_keyCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          isset_unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bundleIds.clear();
            uint32_t _size906;
            ::apache::thrift::protocol::TType _etype909;
            xfer += iprot->readListBegin(_etype909, _size906);
            this->bundleIds.resize(_size906);
            uint32_t _i910;
            for (_i910 = 0; _i910 < _size906; ++_i910)
            {
              xfer += iprot->readString(this->bundleIds[_i910]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bundleIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventIslandId);
          this->__isset.eventIslandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventPointCurrencyId);
          this->__isset.eventPointCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventHowToPlayId);
          this->__isset.eventHowToPlayId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventMainMenuId);
          this->__isset.eventMainMenuId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventBusinessBuildingId);
          this->__isset.eventBusinessBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventGachaOfferId);
          this->__isset.eventGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->affinityBonus.clear();
            uint32_t _size911;
            ::apache::thrift::protocol::TType _etype914;
            xfer += iprot->readListBegin(_etype914, _size911);
            this->affinityBonus.resize(_size911);
            uint32_t _i915;
            for (_i915 = 0; _i915 < _size911; ++_i915)
            {
              xfer += iprot->readI32(this->affinityBonus[_i915]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.affinityBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->specialtyBonus.clear();
            uint32_t _size916;
            ::apache::thrift::protocol::TType _etype919;
            xfer += iprot->readListBegin(_etype919, _size916);
            this->specialtyBonus.resize(_size916);
            uint32_t _i920;
            for (_i920 = 0; _i920 < _size916; ++_i920)
            {
              xfer += iprot->readI32(this->specialtyBonus[_i920]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.specialtyBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticketCurrencyId);
          this->__isset.ticketCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventTicketGachaOfferId);
          this->__isset.eventTicketGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->soloLeaderboardId);
          this->__isset.soloLeaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->globalLeaderboardId);
          this->__isset.globalLeaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guildLeaderboardId);
          this->__isset.guildLeaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellInfoMapId);
          this->__isset.cellInfoMapId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsellCurrencyId);
          this->__isset.upsellCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 91:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsellCurrencyOpenGachaOfferId);
          this->__isset.upsellCurrencyOpenGachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 92:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->upsellCurrencyNotEnoughText.read(iprot);
          this->__isset.upsellCurrencyNotEnoughText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyCostPerLevelId);
          this->__isset.keyCostPerLevelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 96:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fountainBuildingId);
          this->__isset.fountainBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fountainNotificationText.read(iprot);
          this->__isset.fountainNotificationText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsellKeyPopupMessageId);
          this->__isset.upsellKeyPopupMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventStoreId);
          this->__isset.eventStoreId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventStampStateChangeMultiplier);
          this->__isset.eventStampStateChangeMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 211:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventMainMenuWidgetPrefix);
          this->__isset.eventMainMenuWidgetPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 220:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expansionId);
          this->__isset.expansionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_activityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RaidBossActivity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RaidBossActivity");

  xfer += oprot->writeFieldBegin("activityId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->activityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter921;
    for (_iter921 = this->eventIds.begin(); _iter921 != this->eventIds.end(); ++_iter921)
    {
      xfer += oprot->writeString((*_iter921));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyCurrencyId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->keyCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->unlockRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bundleIds) {
    xfer += oprot->writeFieldBegin("bundleIds", ::apache::thrift::protocol::T_LIST, 30);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->bundleIds.size()));
      std::vector<BundleID> ::const_iterator _iter922;
      for (_iter922 = this->bundleIds.begin(); _iter922 != this->bundleIds.end(); ++_iter922)
      {
        xfer += oprot->writeString((*_iter922));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventIslandId) {
    xfer += oprot->writeFieldBegin("eventIslandId", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->eventIslandId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPointCurrencyId) {
    xfer += oprot->writeFieldBegin("eventPointCurrencyId", ::apache::thrift::protocol::T_STRING, 32);
    xfer += oprot->writeString(this->eventPointCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventHowToPlayId) {
    xfer += oprot->writeFieldBegin("eventHowToPlayId", ::apache::thrift::protocol::T_STRING, 33);
    xfer += oprot->writeString(this->eventHowToPlayId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventMainMenuId) {
    xfer += oprot->writeFieldBegin("eventMainMenuId", ::apache::thrift::protocol::T_STRING, 34);
    xfer += oprot->writeString(this->eventMainMenuId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventBusinessBuildingId) {
    xfer += oprot->writeFieldBegin("eventBusinessBuildingId", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->eventBusinessBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventGachaOfferId) {
    xfer += oprot->writeFieldBegin("eventGachaOfferId", ::apache::thrift::protocol::T_STRING, 43);
    xfer += oprot->writeString(this->eventGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.affinityBonus) {
    xfer += oprot->writeFieldBegin("affinityBonus", ::apache::thrift::protocol::T_LIST, 50);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->affinityBonus.size()));
      std::vector<int32_t> ::const_iterator _iter923;
      for (_iter923 = this->affinityBonus.begin(); _iter923 != this->affinityBonus.end(); ++_iter923)
      {
        xfer += oprot->writeI32((*_iter923));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.specialtyBonus) {
    xfer += oprot->writeFieldBegin("specialtyBonus", ::apache::thrift::protocol::T_LIST, 51);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->specialtyBonus.size()));
      std::vector<int32_t> ::const_iterator _iter924;
      for (_iter924 = this->specialtyBonus.begin(); _iter924 != this->specialtyBonus.end(); ++_iter924)
      {
        xfer += oprot->writeI32((*_iter924));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ticketCurrencyId) {
    xfer += oprot->writeFieldBegin("ticketCurrencyId", ::apache::thrift::protocol::T_STRING, 61);
    xfer += oprot->writeString(this->ticketCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventTicketGachaOfferId) {
    xfer += oprot->writeFieldBegin("eventTicketGachaOfferId", ::apache::thrift::protocol::T_STRING, 62);
    xfer += oprot->writeString(this->eventTicketGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.soloLeaderboardId) {
    xfer += oprot->writeFieldBegin("soloLeaderboardId", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->soloLeaderboardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.globalLeaderboardId) {
    xfer += oprot->writeFieldBegin("globalLeaderboardId", ::apache::thrift::protocol::T_STRING, 71);
    xfer += oprot->writeString(this->globalLeaderboardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildLeaderboardId) {
    xfer += oprot->writeFieldBegin("guildLeaderboardId", ::apache::thrift::protocol::T_STRING, 72);
    xfer += oprot->writeString(this->guildLeaderboardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cellInfoMapId) {
    xfer += oprot->writeFieldBegin("cellInfoMapId", ::apache::thrift::protocol::T_STRING, 85);
    xfer += oprot->writeString(this->cellInfoMapId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsellCurrencyId) {
    xfer += oprot->writeFieldBegin("upsellCurrencyId", ::apache::thrift::protocol::T_STRING, 90);
    xfer += oprot->writeString(this->upsellCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsellCurrencyOpenGachaOfferId) {
    xfer += oprot->writeFieldBegin("upsellCurrencyOpenGachaOfferId", ::apache::thrift::protocol::T_STRING, 91);
    xfer += oprot->writeString(this->upsellCurrencyOpenGachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsellCurrencyNotEnoughText) {
    xfer += oprot->writeFieldBegin("upsellCurrencyNotEnoughText", ::apache::thrift::protocol::T_STRUCT, 92);
    xfer += this->upsellCurrencyNotEnoughText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keyCostPerLevelId) {
    xfer += oprot->writeFieldBegin("keyCostPerLevelId", ::apache::thrift::protocol::T_STRING, 95);
    xfer += oprot->writeString(this->keyCostPerLevelId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fountainBuildingId) {
    xfer += oprot->writeFieldBegin("fountainBuildingId", ::apache::thrift::protocol::T_STRING, 96);
    xfer += oprot->writeString(this->fountainBuildingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fountainNotificationText) {
    xfer += oprot->writeFieldBegin("fountainNotificationText", ::apache::thrift::protocol::T_STRUCT, 97);
    xfer += this->fountainNotificationText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsellKeyPopupMessageId) {
    xfer += oprot->writeFieldBegin("upsellKeyPopupMessageId", ::apache::thrift::protocol::T_STRING, 100);
    xfer += oprot->writeString(this->upsellKeyPopupMessageId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventStoreId) {
    xfer += oprot->writeFieldBegin("eventStoreId", ::apache::thrift::protocol::T_STRING, 101);
    xfer += oprot->writeString(this->eventStoreId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventStampStateChangeMultiplier) {
    xfer += oprot->writeFieldBegin("eventStampStateChangeMultiplier", ::apache::thrift::protocol::T_I32, 110);
    xfer += oprot->writeI32(this->eventStampStateChangeMultiplier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventMainMenuWidgetPrefix) {
    xfer += oprot->writeFieldBegin("eventMainMenuWidgetPrefix", ::apache::thrift::protocol::T_STRING, 211);
    xfer += oprot->writeString(this->eventMainMenuWidgetPrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expansionId) {
    xfer += oprot->writeFieldBegin("expansionId", ::apache::thrift::protocol::T_STRING, 220);
    xfer += oprot->writeString(this->expansionId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RaidBossActivity &a, RaidBossActivity &b) {
  using ::std::swap;
  swap(a.activityId, b.activityId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.keyCurrencyId, b.keyCurrencyId);
  swap(a.showRank, b.showRank);
  swap(a.unlockRank, b.unlockRank);
  swap(a.hideRank, b.hideRank);
  swap(a.display, b.display);
  swap(a.bundleIds, b.bundleIds);
  swap(a.eventIslandId, b.eventIslandId);
  swap(a.eventPointCurrencyId, b.eventPointCurrencyId);
  swap(a.eventHowToPlayId, b.eventHowToPlayId);
  swap(a.eventMainMenuId, b.eventMainMenuId);
  swap(a.eventBusinessBuildingId, b.eventBusinessBuildingId);
  swap(a.eventGachaOfferId, b.eventGachaOfferId);
  swap(a.affinityBonus, b.affinityBonus);
  swap(a.specialtyBonus, b.specialtyBonus);
  swap(a.ticketCurrencyId, b.ticketCurrencyId);
  swap(a.eventTicketGachaOfferId, b.eventTicketGachaOfferId);
  swap(a.soloLeaderboardId, b.soloLeaderboardId);
  swap(a.globalLeaderboardId, b.globalLeaderboardId);
  swap(a.guildLeaderboardId, b.guildLeaderboardId);
  swap(a.cellInfoMapId, b.cellInfoMapId);
  swap(a.upsellCurrencyId, b.upsellCurrencyId);
  swap(a.upsellCurrencyOpenGachaOfferId, b.upsellCurrencyOpenGachaOfferId);
  swap(a.upsellCurrencyNotEnoughText, b.upsellCurrencyNotEnoughText);
  swap(a.keyCostPerLevelId, b.keyCostPerLevelId);
  swap(a.fountainBuildingId, b.fountainBuildingId);
  swap(a.fountainNotificationText, b.fountainNotificationText);
  swap(a.upsellKeyPopupMessageId, b.upsellKeyPopupMessageId);
  swap(a.eventStoreId, b.eventStoreId);
  swap(a.eventStampStateChangeMultiplier, b.eventStampStateChangeMultiplier);
  swap(a.eventMainMenuWidgetPrefix, b.eventMainMenuWidgetPrefix);
  swap(a.expansionId, b.expansionId);
  swap(a.__isset, b.__isset);
}

RaidBossActivity::RaidBossActivity(const RaidBossActivity& other925) {
  activityId = other925.activityId;
  eventIds = other925.eventIds;
  eventPhases = other925.eventPhases;
  keyCurrencyId = other925.keyCurrencyId;
  showRank = other925.showRank;
  unlockRank = other925.unlockRank;
  hideRank = other925.hideRank;
  display = other925.display;
  bundleIds = other925.bundleIds;
  eventIslandId = other925.eventIslandId;
  eventPointCurrencyId = other925.eventPointCurrencyId;
  eventHowToPlayId = other925.eventHowToPlayId;
  eventMainMenuId = other925.eventMainMenuId;
  eventBusinessBuildingId = other925.eventBusinessBuildingId;
  eventGachaOfferId = other925.eventGachaOfferId;
  affinityBonus = other925.affinityBonus;
  specialtyBonus = other925.specialtyBonus;
  ticketCurrencyId = other925.ticketCurrencyId;
  eventTicketGachaOfferId = other925.eventTicketGachaOfferId;
  soloLeaderboardId = other925.soloLeaderboardId;
  globalLeaderboardId = other925.globalLeaderboardId;
  guildLeaderboardId = other925.guildLeaderboardId;
  cellInfoMapId = other925.cellInfoMapId;
  upsellCurrencyId = other925.upsellCurrencyId;
  upsellCurrencyOpenGachaOfferId = other925.upsellCurrencyOpenGachaOfferId;
  upsellCurrencyNotEnoughText = other925.upsellCurrencyNotEnoughText;
  keyCostPerLevelId = other925.keyCostPerLevelId;
  fountainBuildingId = other925.fountainBuildingId;
  fountainNotificationText = other925.fountainNotificationText;
  upsellKeyPopupMessageId = other925.upsellKeyPopupMessageId;
  eventStoreId = other925.eventStoreId;
  eventStampStateChangeMultiplier = other925.eventStampStateChangeMultiplier;
  eventMainMenuWidgetPrefix = other925.eventMainMenuWidgetPrefix;
  expansionId = other925.expansionId;
  __isset = other925.__isset;
}
RaidBossActivity& RaidBossActivity::operator=(const RaidBossActivity& other926) {
  activityId = other926.activityId;
  eventIds = other926.eventIds;
  eventPhases = other926.eventPhases;
  keyCurrencyId = other926.keyCurrencyId;
  showRank = other926.showRank;
  unlockRank = other926.unlockRank;
  hideRank = other926.hideRank;
  display = other926.display;
  bundleIds = other926.bundleIds;
  eventIslandId = other926.eventIslandId;
  eventPointCurrencyId = other926.eventPointCurrencyId;
  eventHowToPlayId = other926.eventHowToPlayId;
  eventMainMenuId = other926.eventMainMenuId;
  eventBusinessBuildingId = other926.eventBusinessBuildingId;
  eventGachaOfferId = other926.eventGachaOfferId;
  affinityBonus = other926.affinityBonus;
  specialtyBonus = other926.specialtyBonus;
  ticketCurrencyId = other926.ticketCurrencyId;
  eventTicketGachaOfferId = other926.eventTicketGachaOfferId;
  soloLeaderboardId = other926.soloLeaderboardId;
  globalLeaderboardId = other926.globalLeaderboardId;
  guildLeaderboardId = other926.guildLeaderboardId;
  cellInfoMapId = other926.cellInfoMapId;
  upsellCurrencyId = other926.upsellCurrencyId;
  upsellCurrencyOpenGachaOfferId = other926.upsellCurrencyOpenGachaOfferId;
  upsellCurrencyNotEnoughText = other926.upsellCurrencyNotEnoughText;
  keyCostPerLevelId = other926.keyCostPerLevelId;
  fountainBuildingId = other926.fountainBuildingId;
  fountainNotificationText = other926.fountainNotificationText;
  upsellKeyPopupMessageId = other926.upsellKeyPopupMessageId;
  eventStoreId = other926.eventStoreId;
  eventStampStateChangeMultiplier = other926.eventStampStateChangeMultiplier;
  eventMainMenuWidgetPrefix = other926.eventMainMenuWidgetPrefix;
  expansionId = other926.expansionId;
  __isset = other926.__isset;
  return *this;
}
void RaidBossActivity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RaidBossActivity(";
  out << "activityId=" << to_string(activityId);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "keyCurrencyId=" << to_string(keyCurrencyId);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "unlockRank=" << to_string(unlockRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "display=" << to_string(display);
  out << ", " << "bundleIds="; (__isset.bundleIds ? (out << to_string(bundleIds)) : (out << "<null>"));
  out << ", " << "eventIslandId="; (__isset.eventIslandId ? (out << to_string(eventIslandId)) : (out << "<null>"));
  out << ", " << "eventPointCurrencyId="; (__isset.eventPointCurrencyId ? (out << to_string(eventPointCurrencyId)) : (out << "<null>"));
  out << ", " << "eventHowToPlayId="; (__isset.eventHowToPlayId ? (out << to_string(eventHowToPlayId)) : (out << "<null>"));
  out << ", " << "eventMainMenuId="; (__isset.eventMainMenuId ? (out << to_string(eventMainMenuId)) : (out << "<null>"));
  out << ", " << "eventBusinessBuildingId="; (__isset.eventBusinessBuildingId ? (out << to_string(eventBusinessBuildingId)) : (out << "<null>"));
  out << ", " << "eventGachaOfferId="; (__isset.eventGachaOfferId ? (out << to_string(eventGachaOfferId)) : (out << "<null>"));
  out << ", " << "affinityBonus="; (__isset.affinityBonus ? (out << to_string(affinityBonus)) : (out << "<null>"));
  out << ", " << "specialtyBonus="; (__isset.specialtyBonus ? (out << to_string(specialtyBonus)) : (out << "<null>"));
  out << ", " << "ticketCurrencyId="; (__isset.ticketCurrencyId ? (out << to_string(ticketCurrencyId)) : (out << "<null>"));
  out << ", " << "eventTicketGachaOfferId="; (__isset.eventTicketGachaOfferId ? (out << to_string(eventTicketGachaOfferId)) : (out << "<null>"));
  out << ", " << "soloLeaderboardId="; (__isset.soloLeaderboardId ? (out << to_string(soloLeaderboardId)) : (out << "<null>"));
  out << ", " << "globalLeaderboardId="; (__isset.globalLeaderboardId ? (out << to_string(globalLeaderboardId)) : (out << "<null>"));
  out << ", " << "guildLeaderboardId="; (__isset.guildLeaderboardId ? (out << to_string(guildLeaderboardId)) : (out << "<null>"));
  out << ", " << "cellInfoMapId="; (__isset.cellInfoMapId ? (out << to_string(cellInfoMapId)) : (out << "<null>"));
  out << ", " << "upsellCurrencyId="; (__isset.upsellCurrencyId ? (out << to_string(upsellCurrencyId)) : (out << "<null>"));
  out << ", " << "upsellCurrencyOpenGachaOfferId="; (__isset.upsellCurrencyOpenGachaOfferId ? (out << to_string(upsellCurrencyOpenGachaOfferId)) : (out << "<null>"));
  out << ", " << "upsellCurrencyNotEnoughText="; (__isset.upsellCurrencyNotEnoughText ? (out << to_string(upsellCurrencyNotEnoughText)) : (out << "<null>"));
  out << ", " << "keyCostPerLevelId="; (__isset.keyCostPerLevelId ? (out << to_string(keyCostPerLevelId)) : (out << "<null>"));
  out << ", " << "fountainBuildingId="; (__isset.fountainBuildingId ? (out << to_string(fountainBuildingId)) : (out << "<null>"));
  out << ", " << "fountainNotificationText="; (__isset.fountainNotificationText ? (out << to_string(fountainNotificationText)) : (out << "<null>"));
  out << ", " << "upsellKeyPopupMessageId="; (__isset.upsellKeyPopupMessageId ? (out << to_string(upsellKeyPopupMessageId)) : (out << "<null>"));
  out << ", " << "eventStoreId="; (__isset.eventStoreId ? (out << to_string(eventStoreId)) : (out << "<null>"));
  out << ", " << "eventStampStateChangeMultiplier="; (__isset.eventStampStateChangeMultiplier ? (out << to_string(eventStampStateChangeMultiplier)) : (out << "<null>"));
  out << ", " << "eventMainMenuWidgetPrefix="; (__isset.eventMainMenuWidgetPrefix ? (out << to_string(eventMainMenuWidgetPrefix)) : (out << "<null>"));
  out << ", " << "expansionId="; (__isset.expansionId ? (out << to_string(expansionId)) : (out << "<null>"));
  out << ")";
}


KeyCostPerLevel::~KeyCostPerLevel() throw() {
}


void KeyCostPerLevel::__set_keyCostPerLevelId(const KeyCostPerLevelID& val) {
  this->keyCostPerLevelId = val;
}

void KeyCostPerLevel::__set_levelId(const LevelID& val) {
  this->levelId = val;
}

void KeyCostPerLevel::__set_keyCost1(const int32_t val) {
  this->keyCost1 = val;
}

void KeyCostPerLevel::__set_keyCost2(const int32_t val) {
  this->keyCost2 = val;
}

void KeyCostPerLevel::__set_keyCost3(const int32_t val) {
  this->keyCost3 = val;
}

void KeyCostPerLevel::__set_eventPointMultiplier1(const int32_t val) {
  this->eventPointMultiplier1 = val;
}

void KeyCostPerLevel::__set_eventPointMultiplier2(const int32_t val) {
  this->eventPointMultiplier2 = val;
}

void KeyCostPerLevel::__set_eventPointMultiplier3(const int32_t val) {
  this->eventPointMultiplier3 = val;
}

void KeyCostPerLevel::__set_autoPlayKeyCost(const int32_t val) {
  this->autoPlayKeyCost = val;
}

void KeyCostPerLevel::__set_autoPlayEventPointMultiplier(const int32_t val) {
  this->autoPlayEventPointMultiplier = val;
}

void KeyCostPerLevel::__set_autoPlayTicketCost(const int32_t val) {
  this->autoPlayTicketCost = val;
}

void KeyCostPerLevel::__set_costCurrencyId1(const CurrencyID& val) {
  this->costCurrencyId1 = val;
__isset.costCurrencyId1 = true;
}

void KeyCostPerLevel::__set_costCurrencyId2(const CurrencyID& val) {
  this->costCurrencyId2 = val;
__isset.costCurrencyId2 = true;
}

void KeyCostPerLevel::__set_costCurrencyId3(const CurrencyID& val) {
  this->costCurrencyId3 = val;
__isset.costCurrencyId3 = true;
}
std::ostream& operator<<(std::ostream& out, const KeyCostPerLevel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t KeyCostPerLevel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_keyCostPerLevelId = false;
  bool isset_levelId = false;
  bool isset_keyCost1 = false;
  bool isset_keyCost2 = false;
  bool isset_keyCost3 = false;
  bool isset_eventPointMultiplier1 = false;
  bool isset_eventPointMultiplier2 = false;
  bool isset_eventPointMultiplier3 = false;
  bool isset_autoPlayKeyCost = false;
  bool isset_autoPlayEventPointMultiplier = false;
  bool isset_autoPlayTicketCost = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyCostPerLevelId);
          isset_keyCostPerLevelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelId);
          isset_levelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyCost1);
          isset_keyCost1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyCost2);
          isset_keyCost2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyCost3);
          isset_keyCost3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventPointMultiplier1);
          isset_eventPointMultiplier1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventPointMultiplier2);
          isset_eventPointMultiplier2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventPointMultiplier3);
          isset_eventPointMultiplier3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->autoPlayKeyCost);
          isset_autoPlayKeyCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->autoPlayEventPointMultiplier);
          isset_autoPlayEventPointMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->autoPlayTicketCost);
          isset_autoPlayTicketCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->costCurrencyId1);
          this->__isset.costCurrencyId1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->costCurrencyId2);
          this->__isset.costCurrencyId2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->costCurrencyId3);
          this->__isset.costCurrencyId3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_keyCostPerLevelId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyCost1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyCost2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyCost3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPointMultiplier1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPointMultiplier2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPointMultiplier3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_autoPlayKeyCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_autoPlayEventPointMultiplier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_autoPlayTicketCost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeyCostPerLevel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KeyCostPerLevel");

  xfer += oprot->writeFieldBegin("keyCostPerLevelId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->keyCostPerLevelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->levelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyCost1", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->keyCost1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyCost2", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->keyCost2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyCost3", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->keyCost3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPointMultiplier1", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->eventPointMultiplier1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPointMultiplier2", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->eventPointMultiplier2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPointMultiplier3", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->eventPointMultiplier3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("autoPlayKeyCost", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->autoPlayKeyCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("autoPlayEventPointMultiplier", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->autoPlayEventPointMultiplier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("autoPlayTicketCost", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->autoPlayTicketCost);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.costCurrencyId1) {
    xfer += oprot->writeFieldBegin("costCurrencyId1", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->costCurrencyId1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.costCurrencyId2) {
    xfer += oprot->writeFieldBegin("costCurrencyId2", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->costCurrencyId2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.costCurrencyId3) {
    xfer += oprot->writeFieldBegin("costCurrencyId3", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->costCurrencyId3);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KeyCostPerLevel &a, KeyCostPerLevel &b) {
  using ::std::swap;
  swap(a.keyCostPerLevelId, b.keyCostPerLevelId);
  swap(a.levelId, b.levelId);
  swap(a.keyCost1, b.keyCost1);
  swap(a.keyCost2, b.keyCost2);
  swap(a.keyCost3, b.keyCost3);
  swap(a.eventPointMultiplier1, b.eventPointMultiplier1);
  swap(a.eventPointMultiplier2, b.eventPointMultiplier2);
  swap(a.eventPointMultiplier3, b.eventPointMultiplier3);
  swap(a.autoPlayKeyCost, b.autoPlayKeyCost);
  swap(a.autoPlayEventPointMultiplier, b.autoPlayEventPointMultiplier);
  swap(a.autoPlayTicketCost, b.autoPlayTicketCost);
  swap(a.costCurrencyId1, b.costCurrencyId1);
  swap(a.costCurrencyId2, b.costCurrencyId2);
  swap(a.costCurrencyId3, b.costCurrencyId3);
  swap(a.__isset, b.__isset);
}

KeyCostPerLevel::KeyCostPerLevel(const KeyCostPerLevel& other927) {
  keyCostPerLevelId = other927.keyCostPerLevelId;
  levelId = other927.levelId;
  keyCost1 = other927.keyCost1;
  keyCost2 = other927.keyCost2;
  keyCost3 = other927.keyCost3;
  eventPointMultiplier1 = other927.eventPointMultiplier1;
  eventPointMultiplier2 = other927.eventPointMultiplier2;
  eventPointMultiplier3 = other927.eventPointMultiplier3;
  autoPlayKeyCost = other927.autoPlayKeyCost;
  autoPlayEventPointMultiplier = other927.autoPlayEventPointMultiplier;
  autoPlayTicketCost = other927.autoPlayTicketCost;
  costCurrencyId1 = other927.costCurrencyId1;
  costCurrencyId2 = other927.costCurrencyId2;
  costCurrencyId3 = other927.costCurrencyId3;
  __isset = other927.__isset;
}
KeyCostPerLevel& KeyCostPerLevel::operator=(const KeyCostPerLevel& other928) {
  keyCostPerLevelId = other928.keyCostPerLevelId;
  levelId = other928.levelId;
  keyCost1 = other928.keyCost1;
  keyCost2 = other928.keyCost2;
  keyCost3 = other928.keyCost3;
  eventPointMultiplier1 = other928.eventPointMultiplier1;
  eventPointMultiplier2 = other928.eventPointMultiplier2;
  eventPointMultiplier3 = other928.eventPointMultiplier3;
  autoPlayKeyCost = other928.autoPlayKeyCost;
  autoPlayEventPointMultiplier = other928.autoPlayEventPointMultiplier;
  autoPlayTicketCost = other928.autoPlayTicketCost;
  costCurrencyId1 = other928.costCurrencyId1;
  costCurrencyId2 = other928.costCurrencyId2;
  costCurrencyId3 = other928.costCurrencyId3;
  __isset = other928.__isset;
  return *this;
}
void KeyCostPerLevel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KeyCostPerLevel(";
  out << "keyCostPerLevelId=" << to_string(keyCostPerLevelId);
  out << ", " << "levelId=" << to_string(levelId);
  out << ", " << "keyCost1=" << to_string(keyCost1);
  out << ", " << "keyCost2=" << to_string(keyCost2);
  out << ", " << "keyCost3=" << to_string(keyCost3);
  out << ", " << "eventPointMultiplier1=" << to_string(eventPointMultiplier1);
  out << ", " << "eventPointMultiplier2=" << to_string(eventPointMultiplier2);
  out << ", " << "eventPointMultiplier3=" << to_string(eventPointMultiplier3);
  out << ", " << "autoPlayKeyCost=" << to_string(autoPlayKeyCost);
  out << ", " << "autoPlayEventPointMultiplier=" << to_string(autoPlayEventPointMultiplier);
  out << ", " << "autoPlayTicketCost=" << to_string(autoPlayTicketCost);
  out << ", " << "costCurrencyId1="; (__isset.costCurrencyId1 ? (out << to_string(costCurrencyId1)) : (out << "<null>"));
  out << ", " << "costCurrencyId2="; (__isset.costCurrencyId2 ? (out << to_string(costCurrencyId2)) : (out << "<null>"));
  out << ", " << "costCurrencyId3="; (__isset.costCurrencyId3 ? (out << to_string(costCurrencyId3)) : (out << "<null>"));
  out << ")";
}


EventIsland::~EventIsland() throw() {
}


void EventIsland::__set_eventIslandId(const EventIslandID& val) {
  this->eventIslandId = val;
}

void EventIsland::__set_filename(const std::string& val) {
  this->filename = val;
}

void EventIsland::__set_x(const int32_t val) {
  this->x = val;
}

void EventIsland::__set_y(const int32_t val) {
  this->y = val;
}

void EventIsland::__set_sizeX(const int32_t val) {
  this->sizeX = val;
}

void EventIsland::__set_sizeY(const int32_t val) {
  this->sizeY = val;
}

void EventIsland::__set_realHeight(const int32_t val) {
  this->realHeight = val;
}
std::ostream& operator<<(std::ostream& out, const EventIsland& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EventIsland::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventIslandId = false;
  bool isset_filename = false;
  bool isset_x = false;
  bool isset_y = false;
  bool isset_sizeX = false;
  bool isset_sizeY = false;
  bool isset_realHeight = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventIslandId);
          isset_eventIslandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          isset_filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          isset_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          isset_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sizeX);
          isset_sizeX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sizeY);
          isset_sizeY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->realHeight);
          isset_realHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventIslandId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_filename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sizeX)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sizeY)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_realHeight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventIsland::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EventIsland");

  xfer += oprot->writeFieldBegin("eventIslandId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eventIslandId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->filename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sizeX", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->sizeX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sizeY", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->sizeY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("realHeight", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->realHeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventIsland &a, EventIsland &b) {
  using ::std::swap;
  swap(a.eventIslandId, b.eventIslandId);
  swap(a.filename, b.filename);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.sizeX, b.sizeX);
  swap(a.sizeY, b.sizeY);
  swap(a.realHeight, b.realHeight);
}

EventIsland::EventIsland(const EventIsland& other929) {
  eventIslandId = other929.eventIslandId;
  filename = other929.filename;
  x = other929.x;
  y = other929.y;
  sizeX = other929.sizeX;
  sizeY = other929.sizeY;
  realHeight = other929.realHeight;
}
EventIsland& EventIsland::operator=(const EventIsland& other930) {
  eventIslandId = other930.eventIslandId;
  filename = other930.filename;
  x = other930.x;
  y = other930.y;
  sizeX = other930.sizeX;
  sizeY = other930.sizeY;
  realHeight = other930.realHeight;
  return *this;
}
void EventIsland::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EventIsland(";
  out << "eventIslandId=" << to_string(eventIslandId);
  out << ", " << "filename=" << to_string(filename);
  out << ", " << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "sizeX=" << to_string(sizeX);
  out << ", " << "sizeY=" << to_string(sizeY);
  out << ", " << "realHeight=" << to_string(realHeight);
  out << ")";
}


EventHowToPlay::~EventHowToPlay() throw() {
}


void EventHowToPlay::__set_eventHowToPlayId(const EventHowToPlayID& val) {
  this->eventHowToPlayId = val;
}

void EventHowToPlay::__set_backgroundImage(const AssetPath& val) {
  this->backgroundImage = val;
}

void EventHowToPlay::__set_templateFile(const std::string& val) {
  this->templateFile = val;
}

void EventHowToPlay::__set_titleBackgroundImage(const AssetPath& val) {
  this->titleBackgroundImage = val;
}

void EventHowToPlay::__set_step1(const std::string& val) {
  this->step1 = val;
}

void EventHowToPlay::__set_step1Icon(const AssetPath& val) {
  this->step1Icon = val;
}

void EventHowToPlay::__set_step2(const std::string& val) {
  this->step2 = val;
}

void EventHowToPlay::__set_step2Icon(const AssetPath& val) {
  this->step2Icon = val;
}

void EventHowToPlay::__set_step3(const std::string& val) {
  this->step3 = val;
}

void EventHowToPlay::__set_step3Icon(const AssetPath& val) {
  this->step3Icon = val;
}

void EventHowToPlay::__set_stepBackgroundImage(const AssetPath& val) {
  this->stepBackgroundImage = val;
}

void EventHowToPlay::__set_stepBurstImage(const AssetPath& val) {
  this->stepBurstImage = val;
}

void EventHowToPlay::__set_businessBannerBackgroundBg9(const AssetPath& val) {
  this->businessBannerBackgroundBg9 = val;
}

void EventHowToPlay::__set_businessBannerText(const std::string& val) {
  this->businessBannerText = val;
}

void EventHowToPlay::__set_hintText(const std::string& val) {
  this->hintText = val;
}

void EventHowToPlay::__set_step1Ftue(const std::string& val) {
  this->step1Ftue = val;
__isset.step1Ftue = true;
}

void EventHowToPlay::__set_step2Ftue(const std::string& val) {
  this->step2Ftue = val;
__isset.step2Ftue = true;
}

void EventHowToPlay::__set_step3Ftue(const std::string& val) {
  this->step3Ftue = val;
__isset.step3Ftue = true;
}

void EventHowToPlay::__set_titleIcon(const AssetPath& val) {
  this->titleIcon = val;
__isset.titleIcon = true;
}
std::ostream& operator<<(std::ostream& out, const EventHowToPlay& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EventHowToPlay::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventHowToPlayId = false;
  bool isset_backgroundImage = false;
  bool isset_templateFile = false;
  bool isset_titleBackgroundImage = false;
  bool isset_step1 = false;
  bool isset_step1Icon = false;
  bool isset_step2 = false;
  bool isset_step2Icon = false;
  bool isset_step3 = false;
  bool isset_step3Icon = false;
  bool isset_stepBackgroundImage = false;
  bool isset_stepBurstImage = false;
  bool isset_businessBannerBackgroundBg9 = false;
  bool isset_businessBannerText = false;
  bool isset_hintText = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventHowToPlayId);
          isset_eventHowToPlayId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backgroundImage);
          isset_backgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->templateFile);
          isset_templateFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->titleBackgroundImage);
          isset_titleBackgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step1);
          isset_step1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step1Icon);
          isset_step1Icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step2);
          isset_step2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step2Icon);
          isset_step2Icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step3);
          isset_step3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step3Icon);
          isset_step3Icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stepBackgroundImage);
          isset_stepBackgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stepBurstImage);
          isset_stepBurstImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessBannerBackgroundBg9);
          isset_businessBannerBackgroundBg9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessBannerText);
          isset_businessBannerText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hintText);
          isset_hintText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step1Ftue);
          this->__isset.step1Ftue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step2Ftue);
          this->__isset.step2Ftue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->step3Ftue);
          this->__isset.step3Ftue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->titleIcon);
          this->__isset.titleIcon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventHowToPlayId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_backgroundImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_templateFile)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_titleBackgroundImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step1Icon)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step2Icon)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_step3Icon)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stepBackgroundImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stepBurstImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_businessBannerBackgroundBg9)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_businessBannerText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hintText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventHowToPlay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EventHowToPlay");

  xfer += oprot->writeFieldBegin("eventHowToPlayId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eventHowToPlayId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("backgroundImage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->backgroundImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("templateFile", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->templateFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("titleBackgroundImage", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->titleBackgroundImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step1", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->step1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step1Icon", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->step1Icon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step2", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->step2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step2Icon", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->step2Icon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step3", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->step3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("step3Icon", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->step3Icon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stepBackgroundImage", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->stepBackgroundImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stepBurstImage", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->stepBurstImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessBannerBackgroundBg9", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->businessBannerBackgroundBg9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessBannerText", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->businessBannerText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hintText", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->hintText);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.step1Ftue) {
    xfer += oprot->writeFieldBegin("step1Ftue", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->step1Ftue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.step2Ftue) {
    xfer += oprot->writeFieldBegin("step2Ftue", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->step2Ftue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.step3Ftue) {
    xfer += oprot->writeFieldBegin("step3Ftue", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->step3Ftue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.titleIcon) {
    xfer += oprot->writeFieldBegin("titleIcon", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->titleIcon);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventHowToPlay &a, EventHowToPlay &b) {
  using ::std::swap;
  swap(a.eventHowToPlayId, b.eventHowToPlayId);
  swap(a.backgroundImage, b.backgroundImage);
  swap(a.templateFile, b.templateFile);
  swap(a.titleBackgroundImage, b.titleBackgroundImage);
  swap(a.step1, b.step1);
  swap(a.step1Icon, b.step1Icon);
  swap(a.step2, b.step2);
  swap(a.step2Icon, b.step2Icon);
  swap(a.step3, b.step3);
  swap(a.step3Icon, b.step3Icon);
  swap(a.stepBackgroundImage, b.stepBackgroundImage);
  swap(a.stepBurstImage, b.stepBurstImage);
  swap(a.businessBannerBackgroundBg9, b.businessBannerBackgroundBg9);
  swap(a.businessBannerText, b.businessBannerText);
  swap(a.hintText, b.hintText);
  swap(a.step1Ftue, b.step1Ftue);
  swap(a.step2Ftue, b.step2Ftue);
  swap(a.step3Ftue, b.step3Ftue);
  swap(a.titleIcon, b.titleIcon);
  swap(a.__isset, b.__isset);
}

EventHowToPlay::EventHowToPlay(const EventHowToPlay& other931) {
  eventHowToPlayId = other931.eventHowToPlayId;
  backgroundImage = other931.backgroundImage;
  templateFile = other931.templateFile;
  titleBackgroundImage = other931.titleBackgroundImage;
  step1 = other931.step1;
  step1Icon = other931.step1Icon;
  step2 = other931.step2;
  step2Icon = other931.step2Icon;
  step3 = other931.step3;
  step3Icon = other931.step3Icon;
  stepBackgroundImage = other931.stepBackgroundImage;
  stepBurstImage = other931.stepBurstImage;
  businessBannerBackgroundBg9 = other931.businessBannerBackgroundBg9;
  businessBannerText = other931.businessBannerText;
  hintText = other931.hintText;
  step1Ftue = other931.step1Ftue;
  step2Ftue = other931.step2Ftue;
  step3Ftue = other931.step3Ftue;
  titleIcon = other931.titleIcon;
  __isset = other931.__isset;
}
EventHowToPlay& EventHowToPlay::operator=(const EventHowToPlay& other932) {
  eventHowToPlayId = other932.eventHowToPlayId;
  backgroundImage = other932.backgroundImage;
  templateFile = other932.templateFile;
  titleBackgroundImage = other932.titleBackgroundImage;
  step1 = other932.step1;
  step1Icon = other932.step1Icon;
  step2 = other932.step2;
  step2Icon = other932.step2Icon;
  step3 = other932.step3;
  step3Icon = other932.step3Icon;
  stepBackgroundImage = other932.stepBackgroundImage;
  stepBurstImage = other932.stepBurstImage;
  businessBannerBackgroundBg9 = other932.businessBannerBackgroundBg9;
  businessBannerText = other932.businessBannerText;
  hintText = other932.hintText;
  step1Ftue = other932.step1Ftue;
  step2Ftue = other932.step2Ftue;
  step3Ftue = other932.step3Ftue;
  titleIcon = other932.titleIcon;
  __isset = other932.__isset;
  return *this;
}
void EventHowToPlay::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EventHowToPlay(";
  out << "eventHowToPlayId=" << to_string(eventHowToPlayId);
  out << ", " << "backgroundImage=" << to_string(backgroundImage);
  out << ", " << "templateFile=" << to_string(templateFile);
  out << ", " << "titleBackgroundImage=" << to_string(titleBackgroundImage);
  out << ", " << "step1=" << to_string(step1);
  out << ", " << "step1Icon=" << to_string(step1Icon);
  out << ", " << "step2=" << to_string(step2);
  out << ", " << "step2Icon=" << to_string(step2Icon);
  out << ", " << "step3=" << to_string(step3);
  out << ", " << "step3Icon=" << to_string(step3Icon);
  out << ", " << "stepBackgroundImage=" << to_string(stepBackgroundImage);
  out << ", " << "stepBurstImage=" << to_string(stepBurstImage);
  out << ", " << "businessBannerBackgroundBg9=" << to_string(businessBannerBackgroundBg9);
  out << ", " << "businessBannerText=" << to_string(businessBannerText);
  out << ", " << "hintText=" << to_string(hintText);
  out << ", " << "step1Ftue="; (__isset.step1Ftue ? (out << to_string(step1Ftue)) : (out << "<null>"));
  out << ", " << "step2Ftue="; (__isset.step2Ftue ? (out << to_string(step2Ftue)) : (out << "<null>"));
  out << ", " << "step3Ftue="; (__isset.step3Ftue ? (out << to_string(step3Ftue)) : (out << "<null>"));
  out << ", " << "titleIcon="; (__isset.titleIcon ? (out << to_string(titleIcon)) : (out << "<null>"));
  out << ")";
}


EventMainMenu::~EventMainMenu() throw() {
}


void EventMainMenu::__set_eventMainMenuId(const EventMainMenuID& val) {
  this->eventMainMenuId = val;
}

void EventMainMenu::__set_floorBackgroundImage(const AssetPath& val) {
  this->floorBackgroundImage = val;
}

void EventMainMenu::__set_topImagePortrait(const AssetPath& val) {
  this->topImagePortrait = val;
}

void EventMainMenu::__set_bottomImagePortrait(const AssetPath& val) {
  this->bottomImagePortrait = val;
}

void EventMainMenu::__set_topImageLandscape(const AssetPath& val) {
  this->topImageLandscape = val;
}

void EventMainMenu::__set_bottomImageLandscape(const AssetPath& val) {
  this->bottomImageLandscape = val;
}

void EventMainMenu::__set_timerScale9Image(const AssetPath& val) {
  this->timerScale9Image = val;
}

void EventMainMenu::__set_hint(const LocalizedString& val) {
  this->hint = val;
}

void EventMainMenu::__set_getBusinessText1(const LocalizedString& val) {
  this->getBusinessText1 = val;
}

void EventMainMenu::__set_getBusinessText2(const LocalizedString& val) {
  this->getBusinessText2 = val;
}

void EventMainMenu::__set_rankLockBackgroundImage(const AssetPath& val) {
  this->rankLockBackgroundImage = val;
}

void EventMainMenu::__set_previewText1(const LocalizedString& val) {
  this->previewText1 = val;
}

void EventMainMenu::__set_previewText2(const LocalizedString& val) {
  this->previewText2 = val;
}

void EventMainMenu::__set_previewImage(const AssetPath& val) {
  this->previewImage = val;
}

void EventMainMenu::__set_recapText(const LocalizedString& val) {
  this->recapText = val;
}

void EventMainMenu::__set_recapTextNotParticipated(const LocalizedString& val) {
  this->recapTextNotParticipated = val;
__isset.recapTextNotParticipated = true;
}

void EventMainMenu::__set_rewardButtonImage(const AssetPath& val) {
  this->rewardButtonImage = val;
}

void EventMainMenu::__set_floorRewardBg(const AssetPath& val) {
  this->floorRewardBg = val;
}

void EventMainMenu::__set_floorRewardChestClosed(const AssetPath& val) {
  this->floorRewardChestClosed = val;
}

void EventMainMenu::__set_floorRewardChestOpen(const AssetPath& val) {
  this->floorRewardChestOpen = val;
}

void EventMainMenu::__set_bottomNavBuildingImage(const AssetPath& val) {
  this->bottomNavBuildingImage = val;
__isset.bottomNavBuildingImage = true;
}

void EventMainMenu::__set_bottomNavLeaderboardImage(const AssetPath& val) {
  this->bottomNavLeaderboardImage = val;
__isset.bottomNavLeaderboardImage = true;
}

void EventMainMenu::__set_hidePreviewPhaseGetNowButton(const bool val) {
  this->hidePreviewPhaseGetNowButton = val;
__isset.hidePreviewPhaseGetNowButton = true;
}

void EventMainMenu::__set_rankLockAndPreviewBackground(const AssetPath& val) {
  this->rankLockAndPreviewBackground = val;
__isset.rankLockAndPreviewBackground = true;
}

void EventMainMenu::__set_rankLockAndPreviewBackgroundLandscape(const AssetPath& val) {
  this->rankLockAndPreviewBackgroundLandscape = val;
__isset.rankLockAndPreviewBackgroundLandscape = true;
}

void EventMainMenu::__set_rankLockAndPreviewTimerBackground(const AssetPath& val) {
  this->rankLockAndPreviewTimerBackground = val;
__isset.rankLockAndPreviewTimerBackground = true;
}

void EventMainMenu::__set_rankLockAndPreviewTimerBackgroundLandscape(const AssetPath& val) {
  this->rankLockAndPreviewTimerBackgroundLandscape = val;
__isset.rankLockAndPreviewTimerBackgroundLandscape = true;
}

void EventMainMenu::__set_previewOverlay(const AssetPath& val) {
  this->previewOverlay = val;
__isset.previewOverlay = true;
}

void EventMainMenu::__set_previewOverlayLandscape(const AssetPath& val) {
  this->previewOverlayLandscape = val;
__isset.previewOverlayLandscape = true;
}

void EventMainMenu::__set_rankLockOverlay(const AssetPath& val) {
  this->rankLockOverlay = val;
__isset.rankLockOverlay = true;
}

void EventMainMenu::__set_rankLockOverlayLandscape(const AssetPath& val) {
  this->rankLockOverlayLandscape = val;
__isset.rankLockOverlayLandscape = true;
}

void EventMainMenu::__set_recapRibbonImage(const AssetPath& val) {
  this->recapRibbonImage = val;
__isset.recapRibbonImage = true;
}

void EventMainMenu::__set_recapTrophyTableImage(const AssetPath& val) {
  this->recapTrophyTableImage = val;
__isset.recapTrophyTableImage = true;
}
std::ostream& operator<<(std::ostream& out, const EventMainMenu& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EventMainMenu::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventMainMenuId = false;
  bool isset_floorBackgroundImage = false;
  bool isset_topImagePortrait = false;
  bool isset_bottomImagePortrait = false;
  bool isset_topImageLandscape = false;
  bool isset_bottomImageLandscape = false;
  bool isset_timerScale9Image = false;
  bool isset_hint = false;
  bool isset_getBusinessText1 = false;
  bool isset_getBusinessText2 = false;
  bool isset_rankLockBackgroundImage = false;
  bool isset_previewText1 = false;
  bool isset_previewText2 = false;
  bool isset_previewImage = false;
  bool isset_recapText = false;
  bool isset_rewardButtonImage = false;
  bool isset_floorRewardBg = false;
  bool isset_floorRewardChestClosed = false;
  bool isset_floorRewardChestOpen = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventMainMenuId);
          isset_eventMainMenuId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->floorBackgroundImage);
          isset_floorBackgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topImagePortrait);
          isset_topImagePortrait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bottomImagePortrait);
          isset_bottomImagePortrait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topImageLandscape);
          isset_topImageLandscape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bottomImageLandscape);
          isset_bottomImageLandscape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timerScale9Image);
          isset_timerScale9Image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->hint.read(iprot);
          isset_hint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->getBusinessText1.read(iprot);
          isset_getBusinessText1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->getBusinessText2.read(iprot);
          isset_getBusinessText2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rankLockBackgroundImage);
          isset_rankLockBackgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->previewText1.read(iprot);
          isset_previewText1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->previewText2.read(iprot);
          isset_previewText2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->previewImage);
          isset_previewImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recapText.read(iprot);
          isset_recapText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recapTextNotParticipated.read(iprot);
          this->__isset.recapTextNotParticipated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardButtonImage);
          isset_rewardButtonImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->floorRewardBg);
          isset_floorRewardBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->floorRewardChestClosed);
          isset_floorRewardChestClosed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->floorRewardChestOpen);
          isset_floorRewardChestOpen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bottomNavBuildingImage);
          this->__isset.bottomNavBuildingImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bottomNavLeaderboardImage);
          this->__isset.bottomNavLeaderboardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hidePreviewPhaseGetNowButton);
          this->__isset.hidePreviewPhaseGetNowButton = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rankLockAndPreviewBackground);
          this->__isset.rankLockAndPreviewBackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rankLockAndPreviewBackgroundLandscape);
          this->__isset.rankLockAndPreviewBackgroundLandscape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rankLockAndPreviewTimerBackground);
          this->__isset.rankLockAndPreviewTimerBackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rankLockAndPreviewTimerBackgroundLandscape);
          this->__isset.rankLockAndPreviewTimerBackgroundLandscape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->previewOverlay);
          this->__isset.previewOverlay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->previewOverlayLandscape);
          this->__isset.previewOverlayLandscape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rankLockOverlay);
          this->__isset.rankLockOverlay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rankLockOverlayLandscape);
          this->__isset.rankLockOverlayLandscape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recapRibbonImage);
          this->__isset.recapRibbonImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recapTrophyTableImage);
          this->__isset.recapTrophyTableImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventMainMenuId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_floorBackgroundImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topImagePortrait)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bottomImagePortrait)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topImageLandscape)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bottomImageLandscape)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timerScale9Image)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hint)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_getBusinessText1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_getBusinessText2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rankLockBackgroundImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_previewText1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_previewText2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_previewImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recapText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardButtonImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_floorRewardBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_floorRewardChestClosed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_floorRewardChestOpen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventMainMenu::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EventMainMenu");

  xfer += oprot->writeFieldBegin("eventMainMenuId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eventMainMenuId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floorBackgroundImage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->floorBackgroundImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topImagePortrait", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->topImagePortrait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bottomImagePortrait", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->bottomImagePortrait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topImageLandscape", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->topImageLandscape);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bottomImageLandscape", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->bottomImageLandscape);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timerScale9Image", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->timerScale9Image);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hint", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->hint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("getBusinessText1", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->getBusinessText1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("getBusinessText2", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->getBusinessText2.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rankLockBackgroundImage", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->rankLockBackgroundImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("previewText1", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->previewText1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("previewText2", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->previewText2.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("previewImage", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->previewImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recapText", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->recapText.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.recapTextNotParticipated) {
    xfer += oprot->writeFieldBegin("recapTextNotParticipated", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->recapTextNotParticipated.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("rewardButtonImage", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->rewardButtonImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floorRewardBg", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->floorRewardBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floorRewardChestClosed", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->floorRewardChestClosed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floorRewardChestOpen", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->floorRewardChestOpen);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bottomNavBuildingImage) {
    xfer += oprot->writeFieldBegin("bottomNavBuildingImage", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->bottomNavBuildingImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bottomNavLeaderboardImage) {
    xfer += oprot->writeFieldBegin("bottomNavLeaderboardImage", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->bottomNavLeaderboardImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hidePreviewPhaseGetNowButton) {
    xfer += oprot->writeFieldBegin("hidePreviewPhaseGetNowButton", ::apache::thrift::protocol::T_BOOL, 40);
    xfer += oprot->writeBool(this->hidePreviewPhaseGetNowButton);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankLockAndPreviewBackground) {
    xfer += oprot->writeFieldBegin("rankLockAndPreviewBackground", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->rankLockAndPreviewBackground);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankLockAndPreviewBackgroundLandscape) {
    xfer += oprot->writeFieldBegin("rankLockAndPreviewBackgroundLandscape", ::apache::thrift::protocol::T_STRING, 51);
    xfer += oprot->writeString(this->rankLockAndPreviewBackgroundLandscape);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankLockAndPreviewTimerBackground) {
    xfer += oprot->writeFieldBegin("rankLockAndPreviewTimerBackground", ::apache::thrift::protocol::T_STRING, 52);
    xfer += oprot->writeString(this->rankLockAndPreviewTimerBackground);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankLockAndPreviewTimerBackgroundLandscape) {
    xfer += oprot->writeFieldBegin("rankLockAndPreviewTimerBackgroundLandscape", ::apache::thrift::protocol::T_STRING, 53);
    xfer += oprot->writeString(this->rankLockAndPreviewTimerBackgroundLandscape);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.previewOverlay) {
    xfer += oprot->writeFieldBegin("previewOverlay", ::apache::thrift::protocol::T_STRING, 54);
    xfer += oprot->writeString(this->previewOverlay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.previewOverlayLandscape) {
    xfer += oprot->writeFieldBegin("previewOverlayLandscape", ::apache::thrift::protocol::T_STRING, 55);
    xfer += oprot->writeString(this->previewOverlayLandscape);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankLockOverlay) {
    xfer += oprot->writeFieldBegin("rankLockOverlay", ::apache::thrift::protocol::T_STRING, 56);
    xfer += oprot->writeString(this->rankLockOverlay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rankLockOverlayLandscape) {
    xfer += oprot->writeFieldBegin("rankLockOverlayLandscape", ::apache::thrift::protocol::T_STRING, 57);
    xfer += oprot->writeString(this->rankLockOverlayLandscape);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recapRibbonImage) {
    xfer += oprot->writeFieldBegin("recapRibbonImage", ::apache::thrift::protocol::T_STRING, 58);
    xfer += oprot->writeString(this->recapRibbonImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recapTrophyTableImage) {
    xfer += oprot->writeFieldBegin("recapTrophyTableImage", ::apache::thrift::protocol::T_STRING, 59);
    xfer += oprot->writeString(this->recapTrophyTableImage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventMainMenu &a, EventMainMenu &b) {
  using ::std::swap;
  swap(a.eventMainMenuId, b.eventMainMenuId);
  swap(a.floorBackgroundImage, b.floorBackgroundImage);
  swap(a.topImagePortrait, b.topImagePortrait);
  swap(a.bottomImagePortrait, b.bottomImagePortrait);
  swap(a.topImageLandscape, b.topImageLandscape);
  swap(a.bottomImageLandscape, b.bottomImageLandscape);
  swap(a.timerScale9Image, b.timerScale9Image);
  swap(a.hint, b.hint);
  swap(a.getBusinessText1, b.getBusinessText1);
  swap(a.getBusinessText2, b.getBusinessText2);
  swap(a.rankLockBackgroundImage, b.rankLockBackgroundImage);
  swap(a.previewText1, b.previewText1);
  swap(a.previewText2, b.previewText2);
  swap(a.previewImage, b.previewImage);
  swap(a.recapText, b.recapText);
  swap(a.recapTextNotParticipated, b.recapTextNotParticipated);
  swap(a.rewardButtonImage, b.rewardButtonImage);
  swap(a.floorRewardBg, b.floorRewardBg);
  swap(a.floorRewardChestClosed, b.floorRewardChestClosed);
  swap(a.floorRewardChestOpen, b.floorRewardChestOpen);
  swap(a.bottomNavBuildingImage, b.bottomNavBuildingImage);
  swap(a.bottomNavLeaderboardImage, b.bottomNavLeaderboardImage);
  swap(a.hidePreviewPhaseGetNowButton, b.hidePreviewPhaseGetNowButton);
  swap(a.rankLockAndPreviewBackground, b.rankLockAndPreviewBackground);
  swap(a.rankLockAndPreviewBackgroundLandscape, b.rankLockAndPreviewBackgroundLandscape);
  swap(a.rankLockAndPreviewTimerBackground, b.rankLockAndPreviewTimerBackground);
  swap(a.rankLockAndPreviewTimerBackgroundLandscape, b.rankLockAndPreviewTimerBackgroundLandscape);
  swap(a.previewOverlay, b.previewOverlay);
  swap(a.previewOverlayLandscape, b.previewOverlayLandscape);
  swap(a.rankLockOverlay, b.rankLockOverlay);
  swap(a.rankLockOverlayLandscape, b.rankLockOverlayLandscape);
  swap(a.recapRibbonImage, b.recapRibbonImage);
  swap(a.recapTrophyTableImage, b.recapTrophyTableImage);
  swap(a.__isset, b.__isset);
}

EventMainMenu::EventMainMenu(const EventMainMenu& other933) {
  eventMainMenuId = other933.eventMainMenuId;
  floorBackgroundImage = other933.floorBackgroundImage;
  topImagePortrait = other933.topImagePortrait;
  bottomImagePortrait = other933.bottomImagePortrait;
  topImageLandscape = other933.topImageLandscape;
  bottomImageLandscape = other933.bottomImageLandscape;
  timerScale9Image = other933.timerScale9Image;
  hint = other933.hint;
  getBusinessText1 = other933.getBusinessText1;
  getBusinessText2 = other933.getBusinessText2;
  rankLockBackgroundImage = other933.rankLockBackgroundImage;
  previewText1 = other933.previewText1;
  previewText2 = other933.previewText2;
  previewImage = other933.previewImage;
  recapText = other933.recapText;
  recapTextNotParticipated = other933.recapTextNotParticipated;
  rewardButtonImage = other933.rewardButtonImage;
  floorRewardBg = other933.floorRewardBg;
  floorRewardChestClosed = other933.floorRewardChestClosed;
  floorRewardChestOpen = other933.floorRewardChestOpen;
  bottomNavBuildingImage = other933.bottomNavBuildingImage;
  bottomNavLeaderboardImage = other933.bottomNavLeaderboardImage;
  hidePreviewPhaseGetNowButton = other933.hidePreviewPhaseGetNowButton;
  rankLockAndPreviewBackground = other933.rankLockAndPreviewBackground;
  rankLockAndPreviewBackgroundLandscape = other933.rankLockAndPreviewBackgroundLandscape;
  rankLockAndPreviewTimerBackground = other933.rankLockAndPreviewTimerBackground;
  rankLockAndPreviewTimerBackgroundLandscape = other933.rankLockAndPreviewTimerBackgroundLandscape;
  previewOverlay = other933.previewOverlay;
  previewOverlayLandscape = other933.previewOverlayLandscape;
  rankLockOverlay = other933.rankLockOverlay;
  rankLockOverlayLandscape = other933.rankLockOverlayLandscape;
  recapRibbonImage = other933.recapRibbonImage;
  recapTrophyTableImage = other933.recapTrophyTableImage;
  __isset = other933.__isset;
}
EventMainMenu& EventMainMenu::operator=(const EventMainMenu& other934) {
  eventMainMenuId = other934.eventMainMenuId;
  floorBackgroundImage = other934.floorBackgroundImage;
  topImagePortrait = other934.topImagePortrait;
  bottomImagePortrait = other934.bottomImagePortrait;
  topImageLandscape = other934.topImageLandscape;
  bottomImageLandscape = other934.bottomImageLandscape;
  timerScale9Image = other934.timerScale9Image;
  hint = other934.hint;
  getBusinessText1 = other934.getBusinessText1;
  getBusinessText2 = other934.getBusinessText2;
  rankLockBackgroundImage = other934.rankLockBackgroundImage;
  previewText1 = other934.previewText1;
  previewText2 = other934.previewText2;
  previewImage = other934.previewImage;
  recapText = other934.recapText;
  recapTextNotParticipated = other934.recapTextNotParticipated;
  rewardButtonImage = other934.rewardButtonImage;
  floorRewardBg = other934.floorRewardBg;
  floorRewardChestClosed = other934.floorRewardChestClosed;
  floorRewardChestOpen = other934.floorRewardChestOpen;
  bottomNavBuildingImage = other934.bottomNavBuildingImage;
  bottomNavLeaderboardImage = other934.bottomNavLeaderboardImage;
  hidePreviewPhaseGetNowButton = other934.hidePreviewPhaseGetNowButton;
  rankLockAndPreviewBackground = other934.rankLockAndPreviewBackground;
  rankLockAndPreviewBackgroundLandscape = other934.rankLockAndPreviewBackgroundLandscape;
  rankLockAndPreviewTimerBackground = other934.rankLockAndPreviewTimerBackground;
  rankLockAndPreviewTimerBackgroundLandscape = other934.rankLockAndPreviewTimerBackgroundLandscape;
  previewOverlay = other934.previewOverlay;
  previewOverlayLandscape = other934.previewOverlayLandscape;
  rankLockOverlay = other934.rankLockOverlay;
  rankLockOverlayLandscape = other934.rankLockOverlayLandscape;
  recapRibbonImage = other934.recapRibbonImage;
  recapTrophyTableImage = other934.recapTrophyTableImage;
  __isset = other934.__isset;
  return *this;
}
void EventMainMenu::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EventMainMenu(";
  out << "eventMainMenuId=" << to_string(eventMainMenuId);
  out << ", " << "floorBackgroundImage=" << to_string(floorBackgroundImage);
  out << ", " << "topImagePortrait=" << to_string(topImagePortrait);
  out << ", " << "bottomImagePortrait=" << to_string(bottomImagePortrait);
  out << ", " << "topImageLandscape=" << to_string(topImageLandscape);
  out << ", " << "bottomImageLandscape=" << to_string(bottomImageLandscape);
  out << ", " << "timerScale9Image=" << to_string(timerScale9Image);
  out << ", " << "hint=" << to_string(hint);
  out << ", " << "getBusinessText1=" << to_string(getBusinessText1);
  out << ", " << "getBusinessText2=" << to_string(getBusinessText2);
  out << ", " << "rankLockBackgroundImage=" << to_string(rankLockBackgroundImage);
  out << ", " << "previewText1=" << to_string(previewText1);
  out << ", " << "previewText2=" << to_string(previewText2);
  out << ", " << "previewImage=" << to_string(previewImage);
  out << ", " << "recapText=" << to_string(recapText);
  out << ", " << "recapTextNotParticipated="; (__isset.recapTextNotParticipated ? (out << to_string(recapTextNotParticipated)) : (out << "<null>"));
  out << ", " << "rewardButtonImage=" << to_string(rewardButtonImage);
  out << ", " << "floorRewardBg=" << to_string(floorRewardBg);
  out << ", " << "floorRewardChestClosed=" << to_string(floorRewardChestClosed);
  out << ", " << "floorRewardChestOpen=" << to_string(floorRewardChestOpen);
  out << ", " << "bottomNavBuildingImage="; (__isset.bottomNavBuildingImage ? (out << to_string(bottomNavBuildingImage)) : (out << "<null>"));
  out << ", " << "bottomNavLeaderboardImage="; (__isset.bottomNavLeaderboardImage ? (out << to_string(bottomNavLeaderboardImage)) : (out << "<null>"));
  out << ", " << "hidePreviewPhaseGetNowButton="; (__isset.hidePreviewPhaseGetNowButton ? (out << to_string(hidePreviewPhaseGetNowButton)) : (out << "<null>"));
  out << ", " << "rankLockAndPreviewBackground="; (__isset.rankLockAndPreviewBackground ? (out << to_string(rankLockAndPreviewBackground)) : (out << "<null>"));
  out << ", " << "rankLockAndPreviewBackgroundLandscape="; (__isset.rankLockAndPreviewBackgroundLandscape ? (out << to_string(rankLockAndPreviewBackgroundLandscape)) : (out << "<null>"));
  out << ", " << "rankLockAndPreviewTimerBackground="; (__isset.rankLockAndPreviewTimerBackground ? (out << to_string(rankLockAndPreviewTimerBackground)) : (out << "<null>"));
  out << ", " << "rankLockAndPreviewTimerBackgroundLandscape="; (__isset.rankLockAndPreviewTimerBackgroundLandscape ? (out << to_string(rankLockAndPreviewTimerBackgroundLandscape)) : (out << "<null>"));
  out << ", " << "previewOverlay="; (__isset.previewOverlay ? (out << to_string(previewOverlay)) : (out << "<null>"));
  out << ", " << "previewOverlayLandscape="; (__isset.previewOverlayLandscape ? (out << to_string(previewOverlayLandscape)) : (out << "<null>"));
  out << ", " << "rankLockOverlay="; (__isset.rankLockOverlay ? (out << to_string(rankLockOverlay)) : (out << "<null>"));
  out << ", " << "rankLockOverlayLandscape="; (__isset.rankLockOverlayLandscape ? (out << to_string(rankLockOverlayLandscape)) : (out << "<null>"));
  out << ", " << "recapRibbonImage="; (__isset.recapRibbonImage ? (out << to_string(recapRibbonImage)) : (out << "<null>"));
  out << ", " << "recapTrophyTableImage="; (__isset.recapTrophyTableImage ? (out << to_string(recapTrophyTableImage)) : (out << "<null>"));
  out << ")";
}


LeaderboardSettings::~LeaderboardSettings() throw() {
}


void LeaderboardSettings::__set_leaderboardGracePeriodSeconds(const int32_t val) {
  this->leaderboardGracePeriodSeconds = val;
}

void LeaderboardSettings::__set_leaderboardPageSize(const int32_t val) {
  this->leaderboardPageSize = val;
}

void LeaderboardSettings::__set_leaderboardOverlap(const int32_t val) {
  this->leaderboardOverlap = val;
}
std::ostream& operator<<(std::ostream& out, const LeaderboardSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaderboardSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardGracePeriodSeconds = false;
  bool isset_leaderboardPageSize = false;
  bool isset_leaderboardOverlap = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leaderboardGracePeriodSeconds);
          isset_leaderboardGracePeriodSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leaderboardPageSize);
          isset_leaderboardPageSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leaderboardOverlap);
          isset_leaderboardOverlap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardGracePeriodSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardPageSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardOverlap)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LeaderboardSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaderboardSettings");

  xfer += oprot->writeFieldBegin("leaderboardGracePeriodSeconds", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->leaderboardGracePeriodSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardPageSize", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->leaderboardPageSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardOverlap", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->leaderboardOverlap);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaderboardSettings &a, LeaderboardSettings &b) {
  using ::std::swap;
  swap(a.leaderboardGracePeriodSeconds, b.leaderboardGracePeriodSeconds);
  swap(a.leaderboardPageSize, b.leaderboardPageSize);
  swap(a.leaderboardOverlap, b.leaderboardOverlap);
}

LeaderboardSettings::LeaderboardSettings(const LeaderboardSettings& other935) {
  leaderboardGracePeriodSeconds = other935.leaderboardGracePeriodSeconds;
  leaderboardPageSize = other935.leaderboardPageSize;
  leaderboardOverlap = other935.leaderboardOverlap;
}
LeaderboardSettings& LeaderboardSettings::operator=(const LeaderboardSettings& other936) {
  leaderboardGracePeriodSeconds = other936.leaderboardGracePeriodSeconds;
  leaderboardPageSize = other936.leaderboardPageSize;
  leaderboardOverlap = other936.leaderboardOverlap;
  return *this;
}
void LeaderboardSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaderboardSettings(";
  out << "leaderboardGracePeriodSeconds=" << to_string(leaderboardGracePeriodSeconds);
  out << ", " << "leaderboardPageSize=" << to_string(leaderboardPageSize);
  out << ", " << "leaderboardOverlap=" << to_string(leaderboardOverlap);
  out << ")";
}


GuildLeaderboardSettings::~GuildLeaderboardSettings() throw() {
}


void GuildLeaderboardSettings::__set_leaderboardGracePeriodSeconds(const int32_t val) {
  this->leaderboardGracePeriodSeconds = val;
}

void GuildLeaderboardSettings::__set_leaderboardPageSize(const int32_t val) {
  this->leaderboardPageSize = val;
}

void GuildLeaderboardSettings::__set_leaderboardOverlap(const int32_t val) {
  this->leaderboardOverlap = val;
}
std::ostream& operator<<(std::ostream& out, const GuildLeaderboardSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildLeaderboardSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardGracePeriodSeconds = false;
  bool isset_leaderboardPageSize = false;
  bool isset_leaderboardOverlap = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leaderboardGracePeriodSeconds);
          isset_leaderboardGracePeriodSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leaderboardPageSize);
          isset_leaderboardPageSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leaderboardOverlap);
          isset_leaderboardOverlap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardGracePeriodSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardPageSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardOverlap)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildLeaderboardSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildLeaderboardSettings");

  xfer += oprot->writeFieldBegin("leaderboardGracePeriodSeconds", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->leaderboardGracePeriodSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardPageSize", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->leaderboardPageSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardOverlap", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->leaderboardOverlap);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildLeaderboardSettings &a, GuildLeaderboardSettings &b) {
  using ::std::swap;
  swap(a.leaderboardGracePeriodSeconds, b.leaderboardGracePeriodSeconds);
  swap(a.leaderboardPageSize, b.leaderboardPageSize);
  swap(a.leaderboardOverlap, b.leaderboardOverlap);
}

GuildLeaderboardSettings::GuildLeaderboardSettings(const GuildLeaderboardSettings& other937) {
  leaderboardGracePeriodSeconds = other937.leaderboardGracePeriodSeconds;
  leaderboardPageSize = other937.leaderboardPageSize;
  leaderboardOverlap = other937.leaderboardOverlap;
}
GuildLeaderboardSettings& GuildLeaderboardSettings::operator=(const GuildLeaderboardSettings& other938) {
  leaderboardGracePeriodSeconds = other938.leaderboardGracePeriodSeconds;
  leaderboardPageSize = other938.leaderboardPageSize;
  leaderboardOverlap = other938.leaderboardOverlap;
  return *this;
}
void GuildLeaderboardSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildLeaderboardSettings(";
  out << "leaderboardGracePeriodSeconds=" << to_string(leaderboardGracePeriodSeconds);
  out << ", " << "leaderboardPageSize=" << to_string(leaderboardPageSize);
  out << ", " << "leaderboardOverlap=" << to_string(leaderboardOverlap);
  out << ")";
}


LeaderboardReward::~LeaderboardReward() throw() {
}


void LeaderboardReward::__set_leaderboardId(const LeaderboardID& val) {
  this->leaderboardId = val;
}

void LeaderboardReward::__set_leaderboardLeagueId(const LeaderboardLeagueID& val) {
  this->leaderboardLeagueId = val;
}

void LeaderboardReward::__set_leaderboardRibbonId(const LeaderboardRibbonID& val) {
  this->leaderboardRibbonId = val;
}

void LeaderboardReward::__set_rewardType(const LootItemType::type val) {
  this->rewardType = val;
}

void LeaderboardReward::__set_rewardId(const std::string& val) {
  this->rewardId = val;
}

void LeaderboardReward::__set_rewardAmount(const int32_t val) {
  this->rewardAmount = val;
}
std::ostream& operator<<(std::ostream& out, const LeaderboardReward& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaderboardReward::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardId = false;
  bool isset_leaderboardLeagueId = false;
  bool isset_leaderboardRibbonId = false;
  bool isset_rewardType = false;
  bool isset_rewardId = false;
  bool isset_rewardAmount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardId);
          isset_leaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardLeagueId);
          isset_leaderboardLeagueId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardRibbonId);
          isset_leaderboardRibbonId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast939;
          xfer += iprot->readI32(ecast939);
          this->rewardType = (LootItemType::type)ecast939;
          isset_rewardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardId);
          isset_rewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rewardAmount);
          isset_rewardAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardLeagueId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardRibbonId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LeaderboardReward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaderboardReward");

  xfer += oprot->writeFieldBegin("leaderboardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->leaderboardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardLeagueId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->leaderboardLeagueId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardRibbonId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->leaderboardRibbonId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardType", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32((int32_t)this->rewardType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardId", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->rewardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardAmount", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->rewardAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaderboardReward &a, LeaderboardReward &b) {
  using ::std::swap;
  swap(a.leaderboardId, b.leaderboardId);
  swap(a.leaderboardLeagueId, b.leaderboardLeagueId);
  swap(a.leaderboardRibbonId, b.leaderboardRibbonId);
  swap(a.rewardType, b.rewardType);
  swap(a.rewardId, b.rewardId);
  swap(a.rewardAmount, b.rewardAmount);
}

LeaderboardReward::LeaderboardReward(const LeaderboardReward& other940) {
  leaderboardId = other940.leaderboardId;
  leaderboardLeagueId = other940.leaderboardLeagueId;
  leaderboardRibbonId = other940.leaderboardRibbonId;
  rewardType = other940.rewardType;
  rewardId = other940.rewardId;
  rewardAmount = other940.rewardAmount;
}
LeaderboardReward& LeaderboardReward::operator=(const LeaderboardReward& other941) {
  leaderboardId = other941.leaderboardId;
  leaderboardLeagueId = other941.leaderboardLeagueId;
  leaderboardRibbonId = other941.leaderboardRibbonId;
  rewardType = other941.rewardType;
  rewardId = other941.rewardId;
  rewardAmount = other941.rewardAmount;
  return *this;
}
void LeaderboardReward::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaderboardReward(";
  out << "leaderboardId=" << to_string(leaderboardId);
  out << ", " << "leaderboardLeagueId=" << to_string(leaderboardLeagueId);
  out << ", " << "leaderboardRibbonId=" << to_string(leaderboardRibbonId);
  out << ", " << "rewardType=" << to_string(rewardType);
  out << ", " << "rewardId=" << to_string(rewardId);
  out << ", " << "rewardAmount=" << to_string(rewardAmount);
  out << ")";
}


LeaderboardRibbon::~LeaderboardRibbon() throw() {
}


void LeaderboardRibbon::__set_leaderboardId(const LeaderboardID& val) {
  this->leaderboardId = val;
}

void LeaderboardRibbon::__set_leaderboardLeagueId(const LeaderboardLeagueID& val) {
  this->leaderboardLeagueId = val;
}

void LeaderboardRibbon::__set_leaderboardRibbonId(const LeaderboardRibbonID& val) {
  this->leaderboardRibbonId = val;
}

void LeaderboardRibbon::__set_localizedDisplay(const std::string& val) {
  this->localizedDisplay = val;
__isset.localizedDisplay = true;
}

void LeaderboardRibbon::__set_display(const LocalizedString& val) {
  this->display = val;
}

void LeaderboardRibbon::__set_positionStart(const int32_t val) {
  this->positionStart = val;
}

void LeaderboardRibbon::__set_positionEnd(const int32_t val) {
  this->positionEnd = val;
}

void LeaderboardRibbon::__set_trophyAssetId(const AssetID& val) {
  this->trophyAssetId = val;
}

void LeaderboardRibbon::__set_bannerAssetId(const AssetID& val) {
  this->bannerAssetId = val;
}

void LeaderboardRibbon::__set_rewardChestAsset(const std::string& val) {
  this->rewardChestAsset = val;
}

void LeaderboardRibbon::__set_rewards(const std::vector<LeaderboardReward> & val) {
  this->rewards = val;
__isset.rewards = true;
}

void LeaderboardRibbon::__set_eventIslandTier(const int32_t val) {
  this->eventIslandTier = val;
__isset.eventIslandTier = true;
}
std::ostream& operator<<(std::ostream& out, const LeaderboardRibbon& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaderboardRibbon::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardId = false;
  bool isset_leaderboardLeagueId = false;
  bool isset_leaderboardRibbonId = false;
  bool isset_display = false;
  bool isset_positionStart = false;
  bool isset_positionEnd = false;
  bool isset_trophyAssetId = false;
  bool isset_bannerAssetId = false;
  bool isset_rewardChestAsset = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardId);
          isset_leaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardLeagueId);
          isset_leaderboardLeagueId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardRibbonId);
          isset_leaderboardRibbonId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localizedDisplay);
          this->__isset.localizedDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->positionStart);
          isset_positionStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->positionEnd);
          isset_positionEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trophyAssetId);
          isset_trophyAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bannerAssetId);
          isset_bannerAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardChestAsset);
          isset_rewardChestAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rewards.clear();
            uint32_t _size942;
            ::apache::thrift::protocol::TType _etype945;
            xfer += iprot->readListBegin(_etype945, _size942);
            this->rewards.resize(_size942);
            uint32_t _i946;
            for (_i946 = 0; _i946 < _size942; ++_i946)
            {
              xfer += this->rewards[_i946].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventIslandTier);
          this->__isset.eventIslandTier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardLeagueId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardRibbonId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_positionStart)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_positionEnd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_trophyAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bannerAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardChestAsset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LeaderboardRibbon::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaderboardRibbon");

  xfer += oprot->writeFieldBegin("leaderboardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->leaderboardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardLeagueId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->leaderboardLeagueId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardRibbonId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->leaderboardRibbonId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.localizedDisplay) {
    xfer += oprot->writeFieldBegin("localizedDisplay", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->localizedDisplay);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("positionStart", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->positionStart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("positionEnd", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->positionEnd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trophyAssetId", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->trophyAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bannerAssetId", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->bannerAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardChestAsset", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->rewardChestAsset);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rewards) {
    xfer += oprot->writeFieldBegin("rewards", ::apache::thrift::protocol::T_LIST, 20);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rewards.size()));
      std::vector<LeaderboardReward> ::const_iterator _iter947;
      for (_iter947 = this->rewards.begin(); _iter947 != this->rewards.end(); ++_iter947)
      {
        xfer += (*_iter947).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventIslandTier) {
    xfer += oprot->writeFieldBegin("eventIslandTier", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32(this->eventIslandTier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaderboardRibbon &a, LeaderboardRibbon &b) {
  using ::std::swap;
  swap(a.leaderboardId, b.leaderboardId);
  swap(a.leaderboardLeagueId, b.leaderboardLeagueId);
  swap(a.leaderboardRibbonId, b.leaderboardRibbonId);
  swap(a.localizedDisplay, b.localizedDisplay);
  swap(a.display, b.display);
  swap(a.positionStart, b.positionStart);
  swap(a.positionEnd, b.positionEnd);
  swap(a.trophyAssetId, b.trophyAssetId);
  swap(a.bannerAssetId, b.bannerAssetId);
  swap(a.rewardChestAsset, b.rewardChestAsset);
  swap(a.rewards, b.rewards);
  swap(a.eventIslandTier, b.eventIslandTier);
  swap(a.__isset, b.__isset);
}

LeaderboardRibbon::LeaderboardRibbon(const LeaderboardRibbon& other948) {
  leaderboardId = other948.leaderboardId;
  leaderboardLeagueId = other948.leaderboardLeagueId;
  leaderboardRibbonId = other948.leaderboardRibbonId;
  localizedDisplay = other948.localizedDisplay;
  display = other948.display;
  positionStart = other948.positionStart;
  positionEnd = other948.positionEnd;
  trophyAssetId = other948.trophyAssetId;
  bannerAssetId = other948.bannerAssetId;
  rewardChestAsset = other948.rewardChestAsset;
  rewards = other948.rewards;
  eventIslandTier = other948.eventIslandTier;
  __isset = other948.__isset;
}
LeaderboardRibbon& LeaderboardRibbon::operator=(const LeaderboardRibbon& other949) {
  leaderboardId = other949.leaderboardId;
  leaderboardLeagueId = other949.leaderboardLeagueId;
  leaderboardRibbonId = other949.leaderboardRibbonId;
  localizedDisplay = other949.localizedDisplay;
  display = other949.display;
  positionStart = other949.positionStart;
  positionEnd = other949.positionEnd;
  trophyAssetId = other949.trophyAssetId;
  bannerAssetId = other949.bannerAssetId;
  rewardChestAsset = other949.rewardChestAsset;
  rewards = other949.rewards;
  eventIslandTier = other949.eventIslandTier;
  __isset = other949.__isset;
  return *this;
}
void LeaderboardRibbon::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaderboardRibbon(";
  out << "leaderboardId=" << to_string(leaderboardId);
  out << ", " << "leaderboardLeagueId=" << to_string(leaderboardLeagueId);
  out << ", " << "leaderboardRibbonId=" << to_string(leaderboardRibbonId);
  out << ", " << "localizedDisplay="; (__isset.localizedDisplay ? (out << to_string(localizedDisplay)) : (out << "<null>"));
  out << ", " << "display=" << to_string(display);
  out << ", " << "positionStart=" << to_string(positionStart);
  out << ", " << "positionEnd=" << to_string(positionEnd);
  out << ", " << "trophyAssetId=" << to_string(trophyAssetId);
  out << ", " << "bannerAssetId=" << to_string(bannerAssetId);
  out << ", " << "rewardChestAsset=" << to_string(rewardChestAsset);
  out << ", " << "rewards="; (__isset.rewards ? (out << to_string(rewards)) : (out << "<null>"));
  out << ", " << "eventIslandTier="; (__isset.eventIslandTier ? (out << to_string(eventIslandTier)) : (out << "<null>"));
  out << ")";
}


LeaderboardLeague::~LeaderboardLeague() throw() {
}


void LeaderboardLeague::__set_leaderboardId(const LeaderboardID& val) {
  this->leaderboardId = val;
}

void LeaderboardLeague::__set_leaderboardLeagueId(const LeaderboardLeagueID& val) {
  this->leaderboardLeagueId = val;
}

void LeaderboardLeague::__set_ribbons(const std::map<LeaderboardRibbonID, LeaderboardRibbon> & val) {
  this->ribbons = val;
__isset.ribbons = true;
}

void LeaderboardLeague::__set_display(const LocalizedString& val) {
  this->display = val;
}

void LeaderboardLeague::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void LeaderboardLeague::__set_minPlayersPerDivision(const int32_t val) {
  this->minPlayersPerDivision = val;
}

void LeaderboardLeague::__set_maxPlayersPerDivision(const int32_t val) {
  this->maxPlayersPerDivision = val;
}

void LeaderboardLeague::__set_initialDivisions(const int32_t val) {
  this->initialDivisions = val;
}

void LeaderboardLeague::__set_incrementalDivisions(const int32_t val) {
  this->incrementalDivisions = val;
}

void LeaderboardLeague::__set_daysLeftOverpack(const int32_t val) {
  this->daysLeftOverpack = val;
}

void LeaderboardLeague::__set_minPlacementCurrency(const int32_t val) {
  this->minPlacementCurrency = val;
}

void LeaderboardLeague::__set_maxPlacementCurrency(const int32_t val) {
  this->maxPlacementCurrency = val;
}

void LeaderboardLeague::__set_promoteCount(const int32_t val) {
  this->promoteCount = val;
}

void LeaderboardLeague::__set_demoteCount(const int32_t val) {
  this->demoteCount = val;
}

void LeaderboardLeague::__set_promoteCurrencyCredit(const int32_t val) {
  this->promoteCurrencyCredit = val;
}

void LeaderboardLeague::__set_demoteCurrencyDeduction(const int32_t val) {
  this->demoteCurrencyDeduction = val;
}

void LeaderboardLeague::__set_promoteCounts(const std::vector<int32_t> & val) {
  this->promoteCounts = val;
}

void LeaderboardLeague::__set_demoteCounts(const std::vector<int32_t> & val) {
  this->demoteCounts = val;
}

void LeaderboardLeague::__set_promoteCurrencyCredits(const std::vector<int32_t> & val) {
  this->promoteCurrencyCredits = val;
}

void LeaderboardLeague::__set_demoteCurrencyDeductions(const std::vector<int32_t> & val) {
  this->demoteCurrencyDeductions = val;
}

void LeaderboardLeague::__set_leagueBackground(const AssetPath& val) {
  this->leagueBackground = val;
__isset.leagueBackground = true;
}

void LeaderboardLeague::__set_leagueRibbon(const AssetPath& val) {
  this->leagueRibbon = val;
__isset.leagueRibbon = true;
}
std::ostream& operator<<(std::ostream& out, const LeaderboardLeague& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaderboardLeague::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardId = false;
  bool isset_leaderboardLeagueId = false;
  bool isset_display = false;
  bool isset_displayOrder = false;
  bool isset_minPlayersPerDivision = false;
  bool isset_maxPlayersPerDivision = false;
  bool isset_initialDivisions = false;
  bool isset_incrementalDivisions = false;
  bool isset_daysLeftOverpack = false;
  bool isset_minPlacementCurrency = false;
  bool isset_maxPlacementCurrency = false;
  bool isset_promoteCount = false;
  bool isset_demoteCount = false;
  bool isset_promoteCurrencyCredit = false;
  bool isset_demoteCurrencyDeduction = false;
  bool isset_promoteCounts = false;
  bool isset_demoteCounts = false;
  bool isset_promoteCurrencyCredits = false;
  bool isset_demoteCurrencyDeductions = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardId);
          isset_leaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardLeagueId);
          isset_leaderboardLeagueId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->ribbons.clear();
            uint32_t _size950;
            ::apache::thrift::protocol::TType _ktype951;
            ::apache::thrift::protocol::TType _vtype952;
            xfer += iprot->readMapBegin(_ktype951, _vtype952, _size950);
            uint32_t _i954;
            for (_i954 = 0; _i954 < _size950; ++_i954)
            {
              LeaderboardRibbonID _key955;
              xfer += iprot->readString(_key955);
              LeaderboardRibbon& _val956 = this->ribbons[_key955];
              xfer += _val956.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.ribbons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minPlayersPerDivision);
          isset_minPlayersPerDivision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxPlayersPerDivision);
          isset_maxPlayersPerDivision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialDivisions);
          isset_initialDivisions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->incrementalDivisions);
          isset_incrementalDivisions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->daysLeftOverpack);
          isset_daysLeftOverpack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minPlacementCurrency);
          isset_minPlacementCurrency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxPlacementCurrency);
          isset_maxPlacementCurrency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->promoteCount);
          isset_promoteCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->demoteCount);
          isset_demoteCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->promoteCurrencyCredit);
          isset_promoteCurrencyCredit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->demoteCurrencyDeduction);
          isset_demoteCurrencyDeduction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->promoteCounts.clear();
            uint32_t _size957;
            ::apache::thrift::protocol::TType _etype960;
            xfer += iprot->readListBegin(_etype960, _size957);
            this->promoteCounts.resize(_size957);
            uint32_t _i961;
            for (_i961 = 0; _i961 < _size957; ++_i961)
            {
              xfer += iprot->readI32(this->promoteCounts[_i961]);
            }
            xfer += iprot->readListEnd();
          }
          isset_promoteCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demoteCounts.clear();
            uint32_t _size962;
            ::apache::thrift::protocol::TType _etype965;
            xfer += iprot->readListBegin(_etype965, _size962);
            this->demoteCounts.resize(_size962);
            uint32_t _i966;
            for (_i966 = 0; _i966 < _size962; ++_i966)
            {
              xfer += iprot->readI32(this->demoteCounts[_i966]);
            }
            xfer += iprot->readListEnd();
          }
          isset_demoteCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->promoteCurrencyCredits.clear();
            uint32_t _size967;
            ::apache::thrift::protocol::TType _etype970;
            xfer += iprot->readListBegin(_etype970, _size967);
            this->promoteCurrencyCredits.resize(_size967);
            uint32_t _i971;
            for (_i971 = 0; _i971 < _size967; ++_i971)
            {
              xfer += iprot->readI32(this->promoteCurrencyCredits[_i971]);
            }
            xfer += iprot->readListEnd();
          }
          isset_promoteCurrencyCredits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demoteCurrencyDeductions.clear();
            uint32_t _size972;
            ::apache::thrift::protocol::TType _etype975;
            xfer += iprot->readListBegin(_etype975, _size972);
            this->demoteCurrencyDeductions.resize(_size972);
            uint32_t _i976;
            for (_i976 = 0; _i976 < _size972; ++_i976)
            {
              xfer += iprot->readI32(this->demoteCurrencyDeductions[_i976]);
            }
            xfer += iprot->readListEnd();
          }
          isset_demoteCurrencyDeductions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leagueBackground);
          this->__isset.leagueBackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leagueRibbon);
          this->__isset.leagueRibbon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardLeagueId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minPlayersPerDivision)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxPlayersPerDivision)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialDivisions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_incrementalDivisions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_daysLeftOverpack)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minPlacementCurrency)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxPlacementCurrency)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_promoteCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_demoteCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_promoteCurrencyCredit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_demoteCurrencyDeduction)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_promoteCounts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_demoteCounts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_promoteCurrencyCredits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_demoteCurrencyDeductions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LeaderboardLeague::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaderboardLeague");

  xfer += oprot->writeFieldBegin("leaderboardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->leaderboardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardLeagueId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->leaderboardLeagueId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minPlayersPerDivision", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->minPlayersPerDivision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxPlayersPerDivision", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->maxPlayersPerDivision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialDivisions", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->initialDivisions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("incrementalDivisions", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->incrementalDivisions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("daysLeftOverpack", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->daysLeftOverpack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minPlacementCurrency", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->minPlacementCurrency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxPlacementCurrency", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->maxPlacementCurrency);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ribbons) {
    xfer += oprot->writeFieldBegin("ribbons", ::apache::thrift::protocol::T_MAP, 30);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ribbons.size()));
      std::map<LeaderboardRibbonID, LeaderboardRibbon> ::const_iterator _iter977;
      for (_iter977 = this->ribbons.begin(); _iter977 != this->ribbons.end(); ++_iter977)
      {
        xfer += oprot->writeString(_iter977->first);
        xfer += _iter977->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("promoteCount", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->promoteCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demoteCount", ::apache::thrift::protocol::T_I32, 36);
  xfer += oprot->writeI32(this->demoteCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("promoteCurrencyCredit", ::apache::thrift::protocol::T_I32, 37);
  xfer += oprot->writeI32(this->promoteCurrencyCredit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demoteCurrencyDeduction", ::apache::thrift::protocol::T_I32, 38);
  xfer += oprot->writeI32(this->demoteCurrencyDeduction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("promoteCounts", ::apache::thrift::protocol::T_LIST, 39);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->promoteCounts.size()));
    std::vector<int32_t> ::const_iterator _iter978;
    for (_iter978 = this->promoteCounts.begin(); _iter978 != this->promoteCounts.end(); ++_iter978)
    {
      xfer += oprot->writeI32((*_iter978));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demoteCounts", ::apache::thrift::protocol::T_LIST, 40);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->demoteCounts.size()));
    std::vector<int32_t> ::const_iterator _iter979;
    for (_iter979 = this->demoteCounts.begin(); _iter979 != this->demoteCounts.end(); ++_iter979)
    {
      xfer += oprot->writeI32((*_iter979));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("promoteCurrencyCredits", ::apache::thrift::protocol::T_LIST, 41);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->promoteCurrencyCredits.size()));
    std::vector<int32_t> ::const_iterator _iter980;
    for (_iter980 = this->promoteCurrencyCredits.begin(); _iter980 != this->promoteCurrencyCredits.end(); ++_iter980)
    {
      xfer += oprot->writeI32((*_iter980));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demoteCurrencyDeductions", ::apache::thrift::protocol::T_LIST, 42);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->demoteCurrencyDeductions.size()));
    std::vector<int32_t> ::const_iterator _iter981;
    for (_iter981 = this->demoteCurrencyDeductions.begin(); _iter981 != this->demoteCurrencyDeductions.end(); ++_iter981)
    {
      xfer += oprot->writeI32((*_iter981));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.leagueBackground) {
    xfer += oprot->writeFieldBegin("leagueBackground", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->leagueBackground);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leagueRibbon) {
    xfer += oprot->writeFieldBegin("leagueRibbon", ::apache::thrift::protocol::T_STRING, 51);
    xfer += oprot->writeString(this->leagueRibbon);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaderboardLeague &a, LeaderboardLeague &b) {
  using ::std::swap;
  swap(a.leaderboardId, b.leaderboardId);
  swap(a.leaderboardLeagueId, b.leaderboardLeagueId);
  swap(a.ribbons, b.ribbons);
  swap(a.display, b.display);
  swap(a.displayOrder, b.displayOrder);
  swap(a.minPlayersPerDivision, b.minPlayersPerDivision);
  swap(a.maxPlayersPerDivision, b.maxPlayersPerDivision);
  swap(a.initialDivisions, b.initialDivisions);
  swap(a.incrementalDivisions, b.incrementalDivisions);
  swap(a.daysLeftOverpack, b.daysLeftOverpack);
  swap(a.minPlacementCurrency, b.minPlacementCurrency);
  swap(a.maxPlacementCurrency, b.maxPlacementCurrency);
  swap(a.promoteCount, b.promoteCount);
  swap(a.demoteCount, b.demoteCount);
  swap(a.promoteCurrencyCredit, b.promoteCurrencyCredit);
  swap(a.demoteCurrencyDeduction, b.demoteCurrencyDeduction);
  swap(a.promoteCounts, b.promoteCounts);
  swap(a.demoteCounts, b.demoteCounts);
  swap(a.promoteCurrencyCredits, b.promoteCurrencyCredits);
  swap(a.demoteCurrencyDeductions, b.demoteCurrencyDeductions);
  swap(a.leagueBackground, b.leagueBackground);
  swap(a.leagueRibbon, b.leagueRibbon);
  swap(a.__isset, b.__isset);
}

LeaderboardLeague::LeaderboardLeague(const LeaderboardLeague& other982) {
  leaderboardId = other982.leaderboardId;
  leaderboardLeagueId = other982.leaderboardLeagueId;
  ribbons = other982.ribbons;
  display = other982.display;
  displayOrder = other982.displayOrder;
  minPlayersPerDivision = other982.minPlayersPerDivision;
  maxPlayersPerDivision = other982.maxPlayersPerDivision;
  initialDivisions = other982.initialDivisions;
  incrementalDivisions = other982.incrementalDivisions;
  daysLeftOverpack = other982.daysLeftOverpack;
  minPlacementCurrency = other982.minPlacementCurrency;
  maxPlacementCurrency = other982.maxPlacementCurrency;
  promoteCount = other982.promoteCount;
  demoteCount = other982.demoteCount;
  promoteCurrencyCredit = other982.promoteCurrencyCredit;
  demoteCurrencyDeduction = other982.demoteCurrencyDeduction;
  promoteCounts = other982.promoteCounts;
  demoteCounts = other982.demoteCounts;
  promoteCurrencyCredits = other982.promoteCurrencyCredits;
  demoteCurrencyDeductions = other982.demoteCurrencyDeductions;
  leagueBackground = other982.leagueBackground;
  leagueRibbon = other982.leagueRibbon;
  __isset = other982.__isset;
}
LeaderboardLeague& LeaderboardLeague::operator=(const LeaderboardLeague& other983) {
  leaderboardId = other983.leaderboardId;
  leaderboardLeagueId = other983.leaderboardLeagueId;
  ribbons = other983.ribbons;
  display = other983.display;
  displayOrder = other983.displayOrder;
  minPlayersPerDivision = other983.minPlayersPerDivision;
  maxPlayersPerDivision = other983.maxPlayersPerDivision;
  initialDivisions = other983.initialDivisions;
  incrementalDivisions = other983.incrementalDivisions;
  daysLeftOverpack = other983.daysLeftOverpack;
  minPlacementCurrency = other983.minPlacementCurrency;
  maxPlacementCurrency = other983.maxPlacementCurrency;
  promoteCount = other983.promoteCount;
  demoteCount = other983.demoteCount;
  promoteCurrencyCredit = other983.promoteCurrencyCredit;
  demoteCurrencyDeduction = other983.demoteCurrencyDeduction;
  promoteCounts = other983.promoteCounts;
  demoteCounts = other983.demoteCounts;
  promoteCurrencyCredits = other983.promoteCurrencyCredits;
  demoteCurrencyDeductions = other983.demoteCurrencyDeductions;
  leagueBackground = other983.leagueBackground;
  leagueRibbon = other983.leagueRibbon;
  __isset = other983.__isset;
  return *this;
}
void LeaderboardLeague::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaderboardLeague(";
  out << "leaderboardId=" << to_string(leaderboardId);
  out << ", " << "leaderboardLeagueId=" << to_string(leaderboardLeagueId);
  out << ", " << "ribbons="; (__isset.ribbons ? (out << to_string(ribbons)) : (out << "<null>"));
  out << ", " << "display=" << to_string(display);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "minPlayersPerDivision=" << to_string(minPlayersPerDivision);
  out << ", " << "maxPlayersPerDivision=" << to_string(maxPlayersPerDivision);
  out << ", " << "initialDivisions=" << to_string(initialDivisions);
  out << ", " << "incrementalDivisions=" << to_string(incrementalDivisions);
  out << ", " << "daysLeftOverpack=" << to_string(daysLeftOverpack);
  out << ", " << "minPlacementCurrency=" << to_string(minPlacementCurrency);
  out << ", " << "maxPlacementCurrency=" << to_string(maxPlacementCurrency);
  out << ", " << "promoteCount=" << to_string(promoteCount);
  out << ", " << "demoteCount=" << to_string(demoteCount);
  out << ", " << "promoteCurrencyCredit=" << to_string(promoteCurrencyCredit);
  out << ", " << "demoteCurrencyDeduction=" << to_string(demoteCurrencyDeduction);
  out << ", " << "promoteCounts=" << to_string(promoteCounts);
  out << ", " << "demoteCounts=" << to_string(demoteCounts);
  out << ", " << "promoteCurrencyCredits=" << to_string(promoteCurrencyCredits);
  out << ", " << "demoteCurrencyDeductions=" << to_string(demoteCurrencyDeductions);
  out << ", " << "leagueBackground="; (__isset.leagueBackground ? (out << to_string(leagueBackground)) : (out << "<null>"));
  out << ", " << "leagueRibbon="; (__isset.leagueRibbon ? (out << to_string(leagueRibbon)) : (out << "<null>"));
  out << ")";
}


Leaderboard::~Leaderboard() throw() {
}


void Leaderboard::__set_leaderboardId(const LeaderboardID& val) {
  this->leaderboardId = val;
}

void Leaderboard::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void Leaderboard::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void Leaderboard::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void Leaderboard::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
}

void Leaderboard::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void Leaderboard::__set_pointCurrencyId(const CurrencyID& val) {
  this->pointCurrencyId = val;
}

void Leaderboard::__set_placementCurrencyId(const CurrencyID& val) {
  this->placementCurrencyId = val;
}

void Leaderboard::__set_display(const LocalizedString& val) {
  this->display = val;
}

void Leaderboard::__set_rewardDisplay(const LocalizedString& val) {
  this->rewardDisplay = val;
__isset.rewardDisplay = true;
}

void Leaderboard::__set_topLeagueId(const LeaderboardLeagueID& val) {
  this->topLeagueId = val;
}

void Leaderboard::__set_topLeaderboardId(const LeaderboardID& val) {
  this->topLeaderboardId = val;
__isset.topLeaderboardId = true;
}

void Leaderboard::__set_topLeagueText(const LocalizedString& val) {
  this->topLeagueText = val;
}

void Leaderboard::__set_middleLeagueText(const LocalizedString& val) {
  this->middleLeagueText = val;
}

void Leaderboard::__set_bottomLeagueText(const LocalizedString& val) {
  this->bottomLeagueText = val;
}

void Leaderboard::__set_noLeagueText(const LocalizedString& val) {
  this->noLeagueText = val;
}

void Leaderboard::__set_previewText(const LocalizedString& val) {
  this->previewText = val;
}

void Leaderboard::__set_recapText(const LocalizedString& val) {
  this->recapText = val;
}

void Leaderboard::__set_joinText(const LocalizedString& val) {
  this->joinText = val;
}

void Leaderboard::__set_rewardMessageId(const RewardMessageID& val) {
  this->rewardMessageId = val;
}

void Leaderboard::__set_leagues(const std::map<LeaderboardLeagueID, LeaderboardLeague> & val) {
  this->leagues = val;
__isset.leagues = true;
}

void Leaderboard::__set_leaderboardTemplateId(const LeaderboardTemplateID& val) {
  this->leaderboardTemplateId = val;
}

void Leaderboard::__set_tabIcon(const AssetPath& val) {
  this->tabIcon = val;
}

void Leaderboard::__set_topRewardBannerBg(const AssetPath& val) {
  this->topRewardBannerBg = val;
}
std::ostream& operator<<(std::ostream& out, const Leaderboard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Leaderboard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardId = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_showRank = false;
  bool isset_unlockRank = false;
  bool isset_hideRank = false;
  bool isset_pointCurrencyId = false;
  bool isset_placementCurrencyId = false;
  bool isset_display = false;
  bool isset_topLeagueId = false;
  bool isset_topLeagueText = false;
  bool isset_middleLeagueText = false;
  bool isset_bottomLeagueText = false;
  bool isset_noLeagueText = false;
  bool isset_previewText = false;
  bool isset_recapText = false;
  bool isset_joinText = false;
  bool isset_rewardMessageId = false;
  bool isset_leaderboardTemplateId = false;
  bool isset_tabIcon = false;
  bool isset_topRewardBannerBg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardId);
          isset_leaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size984;
            ::apache::thrift::protocol::TType _etype987;
            xfer += iprot->readListBegin(_etype987, _size984);
            this->eventIds.resize(_size984);
            uint32_t _i988;
            for (_i988 = 0; _i988 < _size984; ++_i988)
            {
              xfer += iprot->readString(this->eventIds[_i988]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast989;
          xfer += iprot->readI32(ecast989);
          this->eventPhases = (EventPhases::type)ecast989;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          isset_unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pointCurrencyId);
          isset_pointCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->placementCurrencyId);
          isset_placementCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rewardDisplay.read(iprot);
          this->__isset.rewardDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topLeagueId);
          isset_topLeagueId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topLeaderboardId);
          this->__isset.topLeaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->topLeagueText.read(iprot);
          isset_topLeagueText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->middleLeagueText.read(iprot);
          isset_middleLeagueText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bottomLeagueText.read(iprot);
          isset_bottomLeagueText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->noLeagueText.read(iprot);
          isset_noLeagueText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->previewText.read(iprot);
          isset_previewText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recapText.read(iprot);
          isset_recapText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->joinText.read(iprot);
          isset_joinText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardMessageId);
          isset_rewardMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->leagues.clear();
            uint32_t _size990;
            ::apache::thrift::protocol::TType _ktype991;
            ::apache::thrift::protocol::TType _vtype992;
            xfer += iprot->readMapBegin(_ktype991, _vtype992, _size990);
            uint32_t _i994;
            for (_i994 = 0; _i994 < _size990; ++_i994)
            {
              LeaderboardLeagueID _key995;
              xfer += iprot->readString(_key995);
              LeaderboardLeague& _val996 = this->leagues[_key995];
              xfer += _val996.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.leagues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardTemplateId);
          isset_leaderboardTemplateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabIcon);
          isset_tabIcon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topRewardBannerBg);
          isset_topRewardBannerBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pointCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_placementCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topLeagueId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topLeagueText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_middleLeagueText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bottomLeagueText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noLeagueText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_previewText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recapText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_joinText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardTemplateId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tabIcon)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topRewardBannerBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Leaderboard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Leaderboard");

  xfer += oprot->writeFieldBegin("leaderboardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->leaderboardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter997;
    for (_iter997 = this->eventIds.begin(); _iter997 != this->eventIds.end(); ++_iter997)
    {
      xfer += oprot->writeString((*_iter997));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->unlockRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointCurrencyId", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->pointCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("placementCurrencyId", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->placementCurrencyId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.leagues) {
    xfer += oprot->writeFieldBegin("leagues", ::apache::thrift::protocol::T_MAP, 21);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->leagues.size()));
      std::map<LeaderboardLeagueID, LeaderboardLeague> ::const_iterator _iter998;
      for (_iter998 = this->leagues.begin(); _iter998 != this->leagues.end(); ++_iter998)
      {
        xfer += oprot->writeString(_iter998->first);
        xfer += _iter998->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("topLeagueId", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->topLeagueId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.topLeaderboardId) {
    xfer += oprot->writeFieldBegin("topLeaderboardId", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->topLeaderboardId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 29);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rewardDisplay) {
    xfer += oprot->writeFieldBegin("rewardDisplay", ::apache::thrift::protocol::T_STRUCT, 30);
    xfer += this->rewardDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("topLeagueText", ::apache::thrift::protocol::T_STRUCT, 40);
  xfer += this->topLeagueText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("middleLeagueText", ::apache::thrift::protocol::T_STRUCT, 41);
  xfer += this->middleLeagueText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bottomLeagueText", ::apache::thrift::protocol::T_STRUCT, 42);
  xfer += this->bottomLeagueText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noLeagueText", ::apache::thrift::protocol::T_STRUCT, 43);
  xfer += this->noLeagueText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("previewText", ::apache::thrift::protocol::T_STRUCT, 44);
  xfer += this->previewText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recapText", ::apache::thrift::protocol::T_STRUCT, 45);
  xfer += this->recapText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("joinText", ::apache::thrift::protocol::T_STRUCT, 46);
  xfer += this->joinText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardMessageId", ::apache::thrift::protocol::T_STRING, 50);
  xfer += oprot->writeString(this->rewardMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardTemplateId", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->leaderboardTemplateId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tabIcon", ::apache::thrift::protocol::T_STRING, 61);
  xfer += oprot->writeString(this->tabIcon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topRewardBannerBg", ::apache::thrift::protocol::T_STRING, 70);
  xfer += oprot->writeString(this->topRewardBannerBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Leaderboard &a, Leaderboard &b) {
  using ::std::swap;
  swap(a.leaderboardId, b.leaderboardId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.showRank, b.showRank);
  swap(a.unlockRank, b.unlockRank);
  swap(a.hideRank, b.hideRank);
  swap(a.pointCurrencyId, b.pointCurrencyId);
  swap(a.placementCurrencyId, b.placementCurrencyId);
  swap(a.display, b.display);
  swap(a.rewardDisplay, b.rewardDisplay);
  swap(a.topLeagueId, b.topLeagueId);
  swap(a.topLeaderboardId, b.topLeaderboardId);
  swap(a.topLeagueText, b.topLeagueText);
  swap(a.middleLeagueText, b.middleLeagueText);
  swap(a.bottomLeagueText, b.bottomLeagueText);
  swap(a.noLeagueText, b.noLeagueText);
  swap(a.previewText, b.previewText);
  swap(a.recapText, b.recapText);
  swap(a.joinText, b.joinText);
  swap(a.rewardMessageId, b.rewardMessageId);
  swap(a.leagues, b.leagues);
  swap(a.leaderboardTemplateId, b.leaderboardTemplateId);
  swap(a.tabIcon, b.tabIcon);
  swap(a.topRewardBannerBg, b.topRewardBannerBg);
  swap(a.__isset, b.__isset);
}

Leaderboard::Leaderboard(const Leaderboard& other999) {
  leaderboardId = other999.leaderboardId;
  eventIds = other999.eventIds;
  eventPhases = other999.eventPhases;
  showRank = other999.showRank;
  unlockRank = other999.unlockRank;
  hideRank = other999.hideRank;
  pointCurrencyId = other999.pointCurrencyId;
  placementCurrencyId = other999.placementCurrencyId;
  display = other999.display;
  rewardDisplay = other999.rewardDisplay;
  topLeagueId = other999.topLeagueId;
  topLeaderboardId = other999.topLeaderboardId;
  topLeagueText = other999.topLeagueText;
  middleLeagueText = other999.middleLeagueText;
  bottomLeagueText = other999.bottomLeagueText;
  noLeagueText = other999.noLeagueText;
  previewText = other999.previewText;
  recapText = other999.recapText;
  joinText = other999.joinText;
  rewardMessageId = other999.rewardMessageId;
  leagues = other999.leagues;
  leaderboardTemplateId = other999.leaderboardTemplateId;
  tabIcon = other999.tabIcon;
  topRewardBannerBg = other999.topRewardBannerBg;
  __isset = other999.__isset;
}
Leaderboard& Leaderboard::operator=(const Leaderboard& other1000) {
  leaderboardId = other1000.leaderboardId;
  eventIds = other1000.eventIds;
  eventPhases = other1000.eventPhases;
  showRank = other1000.showRank;
  unlockRank = other1000.unlockRank;
  hideRank = other1000.hideRank;
  pointCurrencyId = other1000.pointCurrencyId;
  placementCurrencyId = other1000.placementCurrencyId;
  display = other1000.display;
  rewardDisplay = other1000.rewardDisplay;
  topLeagueId = other1000.topLeagueId;
  topLeaderboardId = other1000.topLeaderboardId;
  topLeagueText = other1000.topLeagueText;
  middleLeagueText = other1000.middleLeagueText;
  bottomLeagueText = other1000.bottomLeagueText;
  noLeagueText = other1000.noLeagueText;
  previewText = other1000.previewText;
  recapText = other1000.recapText;
  joinText = other1000.joinText;
  rewardMessageId = other1000.rewardMessageId;
  leagues = other1000.leagues;
  leaderboardTemplateId = other1000.leaderboardTemplateId;
  tabIcon = other1000.tabIcon;
  topRewardBannerBg = other1000.topRewardBannerBg;
  __isset = other1000.__isset;
  return *this;
}
void Leaderboard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Leaderboard(";
  out << "leaderboardId=" << to_string(leaderboardId);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "unlockRank=" << to_string(unlockRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "pointCurrencyId=" << to_string(pointCurrencyId);
  out << ", " << "placementCurrencyId=" << to_string(placementCurrencyId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "rewardDisplay="; (__isset.rewardDisplay ? (out << to_string(rewardDisplay)) : (out << "<null>"));
  out << ", " << "topLeagueId=" << to_string(topLeagueId);
  out << ", " << "topLeaderboardId="; (__isset.topLeaderboardId ? (out << to_string(topLeaderboardId)) : (out << "<null>"));
  out << ", " << "topLeagueText=" << to_string(topLeagueText);
  out << ", " << "middleLeagueText=" << to_string(middleLeagueText);
  out << ", " << "bottomLeagueText=" << to_string(bottomLeagueText);
  out << ", " << "noLeagueText=" << to_string(noLeagueText);
  out << ", " << "previewText=" << to_string(previewText);
  out << ", " << "recapText=" << to_string(recapText);
  out << ", " << "joinText=" << to_string(joinText);
  out << ", " << "rewardMessageId=" << to_string(rewardMessageId);
  out << ", " << "leagues="; (__isset.leagues ? (out << to_string(leagues)) : (out << "<null>"));
  out << ", " << "leaderboardTemplateId=" << to_string(leaderboardTemplateId);
  out << ", " << "tabIcon=" << to_string(tabIcon);
  out << ", " << "topRewardBannerBg=" << to_string(topRewardBannerBg);
  out << ")";
}


LeaderboardPlacement::~LeaderboardPlacement() throw() {
}


void LeaderboardPlacement::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void LeaderboardPlacement::__set_minRank(const int32_t val) {
  this->minRank = val;
}

void LeaderboardPlacement::__set_maxRank(const int32_t val) {
  this->maxRank = val;
}

void LeaderboardPlacement::__set_value(const int32_t val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const LeaderboardPlacement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaderboardPlacement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currencyId = false;
  bool isset_minRank = false;
  bool isset_maxRank = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRank);
          isset_minRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRank);
          isset_maxRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LeaderboardPlacement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaderboardPlacement");

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minRank", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->minRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRank", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maxRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaderboardPlacement &a, LeaderboardPlacement &b) {
  using ::std::swap;
  swap(a.currencyId, b.currencyId);
  swap(a.minRank, b.minRank);
  swap(a.maxRank, b.maxRank);
  swap(a.value, b.value);
}

LeaderboardPlacement::LeaderboardPlacement(const LeaderboardPlacement& other1001) {
  currencyId = other1001.currencyId;
  minRank = other1001.minRank;
  maxRank = other1001.maxRank;
  value = other1001.value;
}
LeaderboardPlacement& LeaderboardPlacement::operator=(const LeaderboardPlacement& other1002) {
  currencyId = other1002.currencyId;
  minRank = other1002.minRank;
  maxRank = other1002.maxRank;
  value = other1002.value;
  return *this;
}
void LeaderboardPlacement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaderboardPlacement(";
  out << "currencyId=" << to_string(currencyId);
  out << ", " << "minRank=" << to_string(minRank);
  out << ", " << "maxRank=" << to_string(maxRank);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


EventMenuWidget::~EventMenuWidget() throw() {
}


void EventMenuWidget::__set_eventMenuWidgetId(const EventMenuWidgetID& val) {
  this->eventMenuWidgetId = val;
}

void EventMenuWidget::__set_text(const LocalizedString& val) {
  this->text = val;
__isset.text = true;
}

void EventMenuWidget::__set_widgetType(const EventMenuWidgetType::type val) {
  this->widgetType = val;
}

void EventMenuWidget::__set_messageAction(const MessageButtonAction::type val) {
  this->messageAction = val;
__isset.messageAction = true;
}

void EventMenuWidget::__set_messageActionParameter(const std::vector<std::string> & val) {
  this->messageActionParameter = val;
__isset.messageActionParameter = true;
}

void EventMenuWidget::__set_portraitPosition(const std::string& val) {
  this->portraitPosition = val;
}

void EventMenuWidget::__set_landscapePosition(const std::string& val) {
  this->landscapePosition = val;
__isset.landscapePosition = true;
}

void EventMenuWidget::__set_anchorPoint(const std::string& val) {
  this->anchorPoint = val;
__isset.anchorPoint = true;
}

void EventMenuWidget::__set_tabletPortraitPosition(const std::string& val) {
  this->tabletPortraitPosition = val;
__isset.tabletPortraitPosition = true;
}

void EventMenuWidget::__set_tabletLandscapePosition(const std::string& val) {
  this->tabletLandscapePosition = val;
__isset.tabletLandscapePosition = true;
}

void EventMenuWidget::__set_tabletAnchorPoint(const std::string& val) {
  this->tabletAnchorPoint = val;
__isset.tabletAnchorPoint = true;
}

void EventMenuWidget::__set_zOrder(const int32_t val) {
  this->zOrder = val;
__isset.zOrder = true;
}

void EventMenuWidget::__set_parameters(const std::vector<std::string> & val) {
  this->parameters = val;
__isset.parameters = true;
}

void EventMenuWidget::__set_widgetName(const std::string& val) {
  this->widgetName = val;
__isset.widgetName = true;
}

void EventMenuWidget::__set_widgetParent(const std::string& val) {
  this->widgetParent = val;
__isset.widgetParent = true;
}

void EventMenuWidget::__set_portraitSizes(const std::string& val) {
  this->portraitSizes = val;
__isset.portraitSizes = true;
}

void EventMenuWidget::__set_landscapeSizes(const std::string& val) {
  this->landscapeSizes = val;
__isset.landscapeSizes = true;
}

void EventMenuWidget::__set_tabletPortraitSizes(const std::string& val) {
  this->tabletPortraitSizes = val;
__isset.tabletPortraitSizes = true;
}

void EventMenuWidget::__set_tabletLandscapeSizes(const std::string& val) {
  this->tabletLandscapeSizes = val;
__isset.tabletLandscapeSizes = true;
}
std::ostream& operator<<(std::ostream& out, const EventMenuWidget& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EventMenuWidget::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventMenuWidgetId = false;
  bool isset_widgetType = false;
  bool isset_portraitPosition = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventMenuWidgetId);
          isset_eventMenuWidgetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->text.read(iprot);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1003;
          xfer += iprot->readI32(ecast1003);
          this->widgetType = (EventMenuWidgetType::type)ecast1003;
          isset_widgetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1004;
          xfer += iprot->readI32(ecast1004);
          this->messageAction = (MessageButtonAction::type)ecast1004;
          this->__isset.messageAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageActionParameter.clear();
            uint32_t _size1005;
            ::apache::thrift::protocol::TType _etype1008;
            xfer += iprot->readListBegin(_etype1008, _size1005);
            this->messageActionParameter.resize(_size1005);
            uint32_t _i1009;
            for (_i1009 = 0; _i1009 < _size1005; ++_i1009)
            {
              xfer += iprot->readString(this->messageActionParameter[_i1009]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageActionParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->portraitPosition);
          isset_portraitPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->landscapePosition);
          this->__isset.landscapePosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->anchorPoint);
          this->__isset.anchorPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabletPortraitPosition);
          this->__isset.tabletPortraitPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabletLandscapePosition);
          this->__isset.tabletLandscapePosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabletAnchorPoint);
          this->__isset.tabletAnchorPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zOrder);
          this->__isset.zOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parameters.clear();
            uint32_t _size1010;
            ::apache::thrift::protocol::TType _etype1013;
            xfer += iprot->readListBegin(_etype1013, _size1010);
            this->parameters.resize(_size1010);
            uint32_t _i1014;
            for (_i1014 = 0; _i1014 < _size1010; ++_i1014)
            {
              xfer += iprot->readString(this->parameters[_i1014]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->widgetName);
          this->__isset.widgetName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->widgetParent);
          this->__isset.widgetParent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->portraitSizes);
          this->__isset.portraitSizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->landscapeSizes);
          this->__isset.landscapeSizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabletPortraitSizes);
          this->__isset.tabletPortraitSizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabletLandscapeSizes);
          this->__isset.tabletLandscapeSizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventMenuWidgetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_widgetType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_portraitPosition)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventMenuWidget::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EventMenuWidget");

  xfer += oprot->writeFieldBegin("eventMenuWidgetId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eventMenuWidgetId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.text) {
    xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->text.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("widgetType", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32((int32_t)this->widgetType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageAction) {
    xfer += oprot->writeFieldBegin("messageAction", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32((int32_t)this->messageAction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageActionParameter) {
    xfer += oprot->writeFieldBegin("messageActionParameter", ::apache::thrift::protocol::T_LIST, 21);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageActionParameter.size()));
      std::vector<std::string> ::const_iterator _iter1015;
      for (_iter1015 = this->messageActionParameter.begin(); _iter1015 != this->messageActionParameter.end(); ++_iter1015)
      {
        xfer += oprot->writeString((*_iter1015));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("portraitPosition", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->portraitPosition);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.landscapePosition) {
    xfer += oprot->writeFieldBegin("landscapePosition", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->landscapePosition);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.anchorPoint) {
    xfer += oprot->writeFieldBegin("anchorPoint", ::apache::thrift::protocol::T_STRING, 32);
    xfer += oprot->writeString(this->anchorPoint);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tabletPortraitPosition) {
    xfer += oprot->writeFieldBegin("tabletPortraitPosition", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->tabletPortraitPosition);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tabletLandscapePosition) {
    xfer += oprot->writeFieldBegin("tabletLandscapePosition", ::apache::thrift::protocol::T_STRING, 41);
    xfer += oprot->writeString(this->tabletLandscapePosition);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tabletAnchorPoint) {
    xfer += oprot->writeFieldBegin("tabletAnchorPoint", ::apache::thrift::protocol::T_STRING, 42);
    xfer += oprot->writeString(this->tabletAnchorPoint);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.zOrder) {
    xfer += oprot->writeFieldBegin("zOrder", ::apache::thrift::protocol::T_I32, 50);
    xfer += oprot->writeI32(this->zOrder);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parameters) {
    xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_LIST, 60);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
      std::vector<std::string> ::const_iterator _iter1016;
      for (_iter1016 = this->parameters.begin(); _iter1016 != this->parameters.end(); ++_iter1016)
      {
        xfer += oprot->writeString((*_iter1016));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.widgetName) {
    xfer += oprot->writeFieldBegin("widgetName", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->widgetName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.widgetParent) {
    xfer += oprot->writeFieldBegin("widgetParent", ::apache::thrift::protocol::T_STRING, 71);
    xfer += oprot->writeString(this->widgetParent);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.portraitSizes) {
    xfer += oprot->writeFieldBegin("portraitSizes", ::apache::thrift::protocol::T_STRING, 80);
    xfer += oprot->writeString(this->portraitSizes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.landscapeSizes) {
    xfer += oprot->writeFieldBegin("landscapeSizes", ::apache::thrift::protocol::T_STRING, 81);
    xfer += oprot->writeString(this->landscapeSizes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tabletPortraitSizes) {
    xfer += oprot->writeFieldBegin("tabletPortraitSizes", ::apache::thrift::protocol::T_STRING, 82);
    xfer += oprot->writeString(this->tabletPortraitSizes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tabletLandscapeSizes) {
    xfer += oprot->writeFieldBegin("tabletLandscapeSizes", ::apache::thrift::protocol::T_STRING, 83);
    xfer += oprot->writeString(this->tabletLandscapeSizes);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventMenuWidget &a, EventMenuWidget &b) {
  using ::std::swap;
  swap(a.eventMenuWidgetId, b.eventMenuWidgetId);
  swap(a.text, b.text);
  swap(a.widgetType, b.widgetType);
  swap(a.messageAction, b.messageAction);
  swap(a.messageActionParameter, b.messageActionParameter);
  swap(a.portraitPosition, b.portraitPosition);
  swap(a.landscapePosition, b.landscapePosition);
  swap(a.anchorPoint, b.anchorPoint);
  swap(a.tabletPortraitPosition, b.tabletPortraitPosition);
  swap(a.tabletLandscapePosition, b.tabletLandscapePosition);
  swap(a.tabletAnchorPoint, b.tabletAnchorPoint);
  swap(a.zOrder, b.zOrder);
  swap(a.parameters, b.parameters);
  swap(a.widgetName, b.widgetName);
  swap(a.widgetParent, b.widgetParent);
  swap(a.portraitSizes, b.portraitSizes);
  swap(a.landscapeSizes, b.landscapeSizes);
  swap(a.tabletPortraitSizes, b.tabletPortraitSizes);
  swap(a.tabletLandscapeSizes, b.tabletLandscapeSizes);
  swap(a.__isset, b.__isset);
}

EventMenuWidget::EventMenuWidget(const EventMenuWidget& other1017) {
  eventMenuWidgetId = other1017.eventMenuWidgetId;
  text = other1017.text;
  widgetType = other1017.widgetType;
  messageAction = other1017.messageAction;
  messageActionParameter = other1017.messageActionParameter;
  portraitPosition = other1017.portraitPosition;
  landscapePosition = other1017.landscapePosition;
  anchorPoint = other1017.anchorPoint;
  tabletPortraitPosition = other1017.tabletPortraitPosition;
  tabletLandscapePosition = other1017.tabletLandscapePosition;
  tabletAnchorPoint = other1017.tabletAnchorPoint;
  zOrder = other1017.zOrder;
  parameters = other1017.parameters;
  widgetName = other1017.widgetName;
  widgetParent = other1017.widgetParent;
  portraitSizes = other1017.portraitSizes;
  landscapeSizes = other1017.landscapeSizes;
  tabletPortraitSizes = other1017.tabletPortraitSizes;
  tabletLandscapeSizes = other1017.tabletLandscapeSizes;
  __isset = other1017.__isset;
}
EventMenuWidget& EventMenuWidget::operator=(const EventMenuWidget& other1018) {
  eventMenuWidgetId = other1018.eventMenuWidgetId;
  text = other1018.text;
  widgetType = other1018.widgetType;
  messageAction = other1018.messageAction;
  messageActionParameter = other1018.messageActionParameter;
  portraitPosition = other1018.portraitPosition;
  landscapePosition = other1018.landscapePosition;
  anchorPoint = other1018.anchorPoint;
  tabletPortraitPosition = other1018.tabletPortraitPosition;
  tabletLandscapePosition = other1018.tabletLandscapePosition;
  tabletAnchorPoint = other1018.tabletAnchorPoint;
  zOrder = other1018.zOrder;
  parameters = other1018.parameters;
  widgetName = other1018.widgetName;
  widgetParent = other1018.widgetParent;
  portraitSizes = other1018.portraitSizes;
  landscapeSizes = other1018.landscapeSizes;
  tabletPortraitSizes = other1018.tabletPortraitSizes;
  tabletLandscapeSizes = other1018.tabletLandscapeSizes;
  __isset = other1018.__isset;
  return *this;
}
void EventMenuWidget::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EventMenuWidget(";
  out << "eventMenuWidgetId=" << to_string(eventMenuWidgetId);
  out << ", " << "text="; (__isset.text ? (out << to_string(text)) : (out << "<null>"));
  out << ", " << "widgetType=" << to_string(widgetType);
  out << ", " << "messageAction="; (__isset.messageAction ? (out << to_string(messageAction)) : (out << "<null>"));
  out << ", " << "messageActionParameter="; (__isset.messageActionParameter ? (out << to_string(messageActionParameter)) : (out << "<null>"));
  out << ", " << "portraitPosition=" << to_string(portraitPosition);
  out << ", " << "landscapePosition="; (__isset.landscapePosition ? (out << to_string(landscapePosition)) : (out << "<null>"));
  out << ", " << "anchorPoint="; (__isset.anchorPoint ? (out << to_string(anchorPoint)) : (out << "<null>"));
  out << ", " << "tabletPortraitPosition="; (__isset.tabletPortraitPosition ? (out << to_string(tabletPortraitPosition)) : (out << "<null>"));
  out << ", " << "tabletLandscapePosition="; (__isset.tabletLandscapePosition ? (out << to_string(tabletLandscapePosition)) : (out << "<null>"));
  out << ", " << "tabletAnchorPoint="; (__isset.tabletAnchorPoint ? (out << to_string(tabletAnchorPoint)) : (out << "<null>"));
  out << ", " << "zOrder="; (__isset.zOrder ? (out << to_string(zOrder)) : (out << "<null>"));
  out << ", " << "parameters="; (__isset.parameters ? (out << to_string(parameters)) : (out << "<null>"));
  out << ", " << "widgetName="; (__isset.widgetName ? (out << to_string(widgetName)) : (out << "<null>"));
  out << ", " << "widgetParent="; (__isset.widgetParent ? (out << to_string(widgetParent)) : (out << "<null>"));
  out << ", " << "portraitSizes="; (__isset.portraitSizes ? (out << to_string(portraitSizes)) : (out << "<null>"));
  out << ", " << "landscapeSizes="; (__isset.landscapeSizes ? (out << to_string(landscapeSizes)) : (out << "<null>"));
  out << ", " << "tabletPortraitSizes="; (__isset.tabletPortraitSizes ? (out << to_string(tabletPortraitSizes)) : (out << "<null>"));
  out << ", " << "tabletLandscapeSizes="; (__isset.tabletLandscapeSizes ? (out << to_string(tabletLandscapeSizes)) : (out << "<null>"));
  out << ")";
}


LeaderboardTemplate::~LeaderboardTemplate() throw() {
}


void LeaderboardTemplate::__set_leaderboardTemplateId(const LeaderboardTemplateID& val) {
  this->leaderboardTemplateId = val;
}

void LeaderboardTemplate::__set_luaFile(const std::string& val) {
  this->luaFile = val;
}

void LeaderboardTemplate::__set_backgroundColor(const ColorID& val) {
  this->backgroundColor = val;
}

void LeaderboardTemplate::__set_topBannerBg(const AssetPath& val) {
  this->topBannerBg = val;
}

void LeaderboardTemplate::__set_rewardsTemplateFile(const std::string& val) {
  this->rewardsTemplateFile = val;
}

void LeaderboardTemplate::__set_rewardsBg(const AssetPath& val) {
  this->rewardsBg = val;
}

void LeaderboardTemplate::__set_rewardsItemBg(const AssetPath& val) {
  this->rewardsItemBg = val;
}

void LeaderboardTemplate::__set_backButton(const AssetPath& val) {
  this->backButton = val;
}

void LeaderboardTemplate::__set_leaderboardYouBg(const AssetPath& val) {
  this->leaderboardYouBg = val;
}

void LeaderboardTemplate::__set_leaderboardYouTopBg(const AssetPath& val) {
  this->leaderboardYouTopBg = val;
}

void LeaderboardTemplate::__set_tabBg(const AssetPath& val) {
  this->tabBg = val;
}

void LeaderboardTemplate::__set_tabSelectedImage(const AssetPath& val) {
  this->tabSelectedImage = val;
}

void LeaderboardTemplate::__set_middleTabSelectedImage(const AssetPath& val) {
  this->middleTabSelectedImage = val;
}
std::ostream& operator<<(std::ostream& out, const LeaderboardTemplate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaderboardTemplate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardTemplateId = false;
  bool isset_luaFile = false;
  bool isset_backgroundColor = false;
  bool isset_topBannerBg = false;
  bool isset_rewardsTemplateFile = false;
  bool isset_rewardsBg = false;
  bool isset_rewardsItemBg = false;
  bool isset_backButton = false;
  bool isset_leaderboardYouBg = false;
  bool isset_leaderboardYouTopBg = false;
  bool isset_tabBg = false;
  bool isset_tabSelectedImage = false;
  bool isset_middleTabSelectedImage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardTemplateId);
          isset_leaderboardTemplateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->luaFile);
          isset_luaFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backgroundColor);
          isset_backgroundColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topBannerBg);
          isset_topBannerBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardsTemplateFile);
          isset_rewardsTemplateFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardsBg);
          isset_rewardsBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardsItemBg);
          isset_rewardsItemBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backButton);
          isset_backButton = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardYouBg);
          isset_leaderboardYouBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardYouTopBg);
          isset_leaderboardYouTopBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabBg);
          isset_tabBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabSelectedImage);
          isset_tabSelectedImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->middleTabSelectedImage);
          isset_middleTabSelectedImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardTemplateId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_luaFile)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_backgroundColor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topBannerBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardsTemplateFile)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardsBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardsItemBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_backButton)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardYouBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardYouTopBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tabBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tabSelectedImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_middleTabSelectedImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LeaderboardTemplate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaderboardTemplate");

  xfer += oprot->writeFieldBegin("leaderboardTemplateId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->leaderboardTemplateId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("luaFile", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->luaFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("backgroundColor", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->backgroundColor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topBannerBg", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->topBannerBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardsTemplateFile", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->rewardsTemplateFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardsBg", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->rewardsBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardsItemBg", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->rewardsItemBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("backButton", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->backButton);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardYouBg", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->leaderboardYouBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardYouTopBg", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->leaderboardYouTopBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tabBg", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->tabBg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tabSelectedImage", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->tabSelectedImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("middleTabSelectedImage", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->middleTabSelectedImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaderboardTemplate &a, LeaderboardTemplate &b) {
  using ::std::swap;
  swap(a.leaderboardTemplateId, b.leaderboardTemplateId);
  swap(a.luaFile, b.luaFile);
  swap(a.backgroundColor, b.backgroundColor);
  swap(a.topBannerBg, b.topBannerBg);
  swap(a.rewardsTemplateFile, b.rewardsTemplateFile);
  swap(a.rewardsBg, b.rewardsBg);
  swap(a.rewardsItemBg, b.rewardsItemBg);
  swap(a.backButton, b.backButton);
  swap(a.leaderboardYouBg, b.leaderboardYouBg);
  swap(a.leaderboardYouTopBg, b.leaderboardYouTopBg);
  swap(a.tabBg, b.tabBg);
  swap(a.tabSelectedImage, b.tabSelectedImage);
  swap(a.middleTabSelectedImage, b.middleTabSelectedImage);
}

LeaderboardTemplate::LeaderboardTemplate(const LeaderboardTemplate& other1019) {
  leaderboardTemplateId = other1019.leaderboardTemplateId;
  luaFile = other1019.luaFile;
  backgroundColor = other1019.backgroundColor;
  topBannerBg = other1019.topBannerBg;
  rewardsTemplateFile = other1019.rewardsTemplateFile;
  rewardsBg = other1019.rewardsBg;
  rewardsItemBg = other1019.rewardsItemBg;
  backButton = other1019.backButton;
  leaderboardYouBg = other1019.leaderboardYouBg;
  leaderboardYouTopBg = other1019.leaderboardYouTopBg;
  tabBg = other1019.tabBg;
  tabSelectedImage = other1019.tabSelectedImage;
  middleTabSelectedImage = other1019.middleTabSelectedImage;
}
LeaderboardTemplate& LeaderboardTemplate::operator=(const LeaderboardTemplate& other1020) {
  leaderboardTemplateId = other1020.leaderboardTemplateId;
  luaFile = other1020.luaFile;
  backgroundColor = other1020.backgroundColor;
  topBannerBg = other1020.topBannerBg;
  rewardsTemplateFile = other1020.rewardsTemplateFile;
  rewardsBg = other1020.rewardsBg;
  rewardsItemBg = other1020.rewardsItemBg;
  backButton = other1020.backButton;
  leaderboardYouBg = other1020.leaderboardYouBg;
  leaderboardYouTopBg = other1020.leaderboardYouTopBg;
  tabBg = other1020.tabBg;
  tabSelectedImage = other1020.tabSelectedImage;
  middleTabSelectedImage = other1020.middleTabSelectedImage;
  return *this;
}
void LeaderboardTemplate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaderboardTemplate(";
  out << "leaderboardTemplateId=" << to_string(leaderboardTemplateId);
  out << ", " << "luaFile=" << to_string(luaFile);
  out << ", " << "backgroundColor=" << to_string(backgroundColor);
  out << ", " << "topBannerBg=" << to_string(topBannerBg);
  out << ", " << "rewardsTemplateFile=" << to_string(rewardsTemplateFile);
  out << ", " << "rewardsBg=" << to_string(rewardsBg);
  out << ", " << "rewardsItemBg=" << to_string(rewardsItemBg);
  out << ", " << "backButton=" << to_string(backButton);
  out << ", " << "leaderboardYouBg=" << to_string(leaderboardYouBg);
  out << ", " << "leaderboardYouTopBg=" << to_string(leaderboardYouTopBg);
  out << ", " << "tabBg=" << to_string(tabBg);
  out << ", " << "tabSelectedImage=" << to_string(tabSelectedImage);
  out << ", " << "middleTabSelectedImage=" << to_string(middleTabSelectedImage);
  out << ")";
}


RarityEvoLevelKeyDropRate::~RarityEvoLevelKeyDropRate() throw() {
}


void RarityEvoLevelKeyDropRate::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void RarityEvoLevelKeyDropRate::__set_buildingRarity(const RarityID val) {
  this->buildingRarity = val;
}

void RarityEvoLevelKeyDropRate::__set_buildingEvoLevel(const int32_t val) {
  this->buildingEvoLevel = val;
}

void RarityEvoLevelKeyDropRate::__set_formulaId(const EventKeyDropRateFormulaID& val) {
  this->formulaId = val;
__isset.formulaId = true;
}

void RarityEvoLevelKeyDropRate::__set_baseDropRate(const double val) {
  this->baseDropRate = val;
}

void RarityEvoLevelKeyDropRate::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void RarityEvoLevelKeyDropRate::__set_currencyAmount(const int32_t val) {
  this->currencyAmount = val;
}

void RarityEvoLevelKeyDropRate::__set_socialDropRateIncrease(const double val) {
  this->socialDropRateIncrease = val;
}

void RarityEvoLevelKeyDropRate::__set_socialCurrencyAmount(const int32_t val) {
  this->socialCurrencyAmount = val;
}
std::ostream& operator<<(std::ostream& out, const RarityEvoLevelKeyDropRate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RarityEvoLevelKeyDropRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventIds = false;
  bool isset_buildingRarity = false;
  bool isset_buildingEvoLevel = false;
  bool isset_baseDropRate = false;
  bool isset_currencyId = false;
  bool isset_currencyAmount = false;
  bool isset_socialDropRateIncrease = false;
  bool isset_socialCurrencyAmount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size1021;
            ::apache::thrift::protocol::TType _etype1024;
            xfer += iprot->readListBegin(_etype1024, _size1021);
            this->eventIds.resize(_size1021);
            uint32_t _i1025;
            for (_i1025 = 0; _i1025 < _size1021; ++_i1025)
            {
              xfer += iprot->readString(this->eventIds[_i1025]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buildingRarity);
          isset_buildingRarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buildingEvoLevel);
          isset_buildingEvoLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->formulaId);
          this->__isset.formulaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->baseDropRate);
          isset_baseDropRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currencyAmount);
          isset_currencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->socialDropRateIncrease);
          isset_socialDropRateIncrease = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialCurrencyAmount);
          isset_socialCurrencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingRarity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingEvoLevel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_baseDropRate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialDropRateIncrease)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialCurrencyAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RarityEvoLevelKeyDropRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RarityEvoLevelKeyDropRate");

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter1026;
    for (_iter1026 = this->eventIds.begin(); _iter1026 != this->eventIds.end(); ++_iter1026)
    {
      xfer += oprot->writeString((*_iter1026));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingRarity", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->buildingRarity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingEvoLevel", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->buildingEvoLevel);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.formulaId) {
    xfer += oprot->writeFieldBegin("formulaId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->formulaId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("baseDropRate", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->baseDropRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyAmount", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->currencyAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialDropRateIncrease", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->socialDropRateIncrease);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socialCurrencyAmount", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->socialCurrencyAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RarityEvoLevelKeyDropRate &a, RarityEvoLevelKeyDropRate &b) {
  using ::std::swap;
  swap(a.eventIds, b.eventIds);
  swap(a.buildingRarity, b.buildingRarity);
  swap(a.buildingEvoLevel, b.buildingEvoLevel);
  swap(a.formulaId, b.formulaId);
  swap(a.baseDropRate, b.baseDropRate);
  swap(a.currencyId, b.currencyId);
  swap(a.currencyAmount, b.currencyAmount);
  swap(a.socialDropRateIncrease, b.socialDropRateIncrease);
  swap(a.socialCurrencyAmount, b.socialCurrencyAmount);
  swap(a.__isset, b.__isset);
}

RarityEvoLevelKeyDropRate::RarityEvoLevelKeyDropRate(const RarityEvoLevelKeyDropRate& other1027) {
  eventIds = other1027.eventIds;
  buildingRarity = other1027.buildingRarity;
  buildingEvoLevel = other1027.buildingEvoLevel;
  formulaId = other1027.formulaId;
  baseDropRate = other1027.baseDropRate;
  currencyId = other1027.currencyId;
  currencyAmount = other1027.currencyAmount;
  socialDropRateIncrease = other1027.socialDropRateIncrease;
  socialCurrencyAmount = other1027.socialCurrencyAmount;
  __isset = other1027.__isset;
}
RarityEvoLevelKeyDropRate& RarityEvoLevelKeyDropRate::operator=(const RarityEvoLevelKeyDropRate& other1028) {
  eventIds = other1028.eventIds;
  buildingRarity = other1028.buildingRarity;
  buildingEvoLevel = other1028.buildingEvoLevel;
  formulaId = other1028.formulaId;
  baseDropRate = other1028.baseDropRate;
  currencyId = other1028.currencyId;
  currencyAmount = other1028.currencyAmount;
  socialDropRateIncrease = other1028.socialDropRateIncrease;
  socialCurrencyAmount = other1028.socialCurrencyAmount;
  __isset = other1028.__isset;
  return *this;
}
void RarityEvoLevelKeyDropRate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RarityEvoLevelKeyDropRate(";
  out << "eventIds=" << to_string(eventIds);
  out << ", " << "buildingRarity=" << to_string(buildingRarity);
  out << ", " << "buildingEvoLevel=" << to_string(buildingEvoLevel);
  out << ", " << "formulaId="; (__isset.formulaId ? (out << to_string(formulaId)) : (out << "<null>"));
  out << ", " << "baseDropRate=" << to_string(baseDropRate);
  out << ", " << "currencyId=" << to_string(currencyId);
  out << ", " << "currencyAmount=" << to_string(currencyAmount);
  out << ", " << "socialDropRateIncrease=" << to_string(socialDropRateIncrease);
  out << ", " << "socialCurrencyAmount=" << to_string(socialCurrencyAmount);
  out << ")";
}


KeyDropRateByOrderTime::~KeyDropRateByOrderTime() throw() {
}


void KeyDropRateByOrderTime::__set_formulaId(const EventKeyDropRateFormulaID& val) {
  this->formulaId = val;
}

void KeyDropRateByOrderTime::__set_minOrderTimeInSecs(const int32_t val) {
  this->minOrderTimeInSecs = val;
}

void KeyDropRateByOrderTime::__set_maxOrderTimeInSecs(const int32_t val) {
  this->maxOrderTimeInSecs = val;
}

void KeyDropRateByOrderTime::__set_dropRate(const double val) {
  this->dropRate = val;
}
std::ostream& operator<<(std::ostream& out, const KeyDropRateByOrderTime& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t KeyDropRateByOrderTime::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_formulaId = false;
  bool isset_minOrderTimeInSecs = false;
  bool isset_maxOrderTimeInSecs = false;
  bool isset_dropRate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->formulaId);
          isset_formulaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minOrderTimeInSecs);
          isset_minOrderTimeInSecs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxOrderTimeInSecs);
          isset_maxOrderTimeInSecs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dropRate);
          isset_dropRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_formulaId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minOrderTimeInSecs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxOrderTimeInSecs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dropRate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeyDropRateByOrderTime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KeyDropRateByOrderTime");

  xfer += oprot->writeFieldBegin("formulaId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->formulaId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minOrderTimeInSecs", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->minOrderTimeInSecs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxOrderTimeInSecs", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->maxOrderTimeInSecs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dropRate", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->dropRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KeyDropRateByOrderTime &a, KeyDropRateByOrderTime &b) {
  using ::std::swap;
  swap(a.formulaId, b.formulaId);
  swap(a.minOrderTimeInSecs, b.minOrderTimeInSecs);
  swap(a.maxOrderTimeInSecs, b.maxOrderTimeInSecs);
  swap(a.dropRate, b.dropRate);
}

KeyDropRateByOrderTime::KeyDropRateByOrderTime(const KeyDropRateByOrderTime& other1029) {
  formulaId = other1029.formulaId;
  minOrderTimeInSecs = other1029.minOrderTimeInSecs;
  maxOrderTimeInSecs = other1029.maxOrderTimeInSecs;
  dropRate = other1029.dropRate;
}
KeyDropRateByOrderTime& KeyDropRateByOrderTime::operator=(const KeyDropRateByOrderTime& other1030) {
  formulaId = other1030.formulaId;
  minOrderTimeInSecs = other1030.minOrderTimeInSecs;
  maxOrderTimeInSecs = other1030.maxOrderTimeInSecs;
  dropRate = other1030.dropRate;
  return *this;
}
void KeyDropRateByOrderTime::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KeyDropRateByOrderTime(";
  out << "formulaId=" << to_string(formulaId);
  out << ", " << "minOrderTimeInSecs=" << to_string(minOrderTimeInSecs);
  out << ", " << "maxOrderTimeInSecs=" << to_string(maxOrderTimeInSecs);
  out << ", " << "dropRate=" << to_string(dropRate);
  out << ")";
}


EventBusinessKeyDropRate::~EventBusinessKeyDropRate() throw() {
}


void EventBusinessKeyDropRate::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
}

void EventBusinessKeyDropRate::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void EventBusinessKeyDropRate::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
__isset.currencyId = true;
}

void EventBusinessKeyDropRate::__set_currencyAmount(const int32_t val) {
  this->currencyAmount = val;
__isset.currencyAmount = true;
}

void EventBusinessKeyDropRate::__set_dropRateIncrease(const double val) {
  this->dropRateIncrease = val;
__isset.dropRateIncrease = true;
}

void EventBusinessKeyDropRate::__set_socialCurrencyAmount(const int32_t val) {
  this->socialCurrencyAmount = val;
}

void EventBusinessKeyDropRate::__set_socialCurrencyId(const std::string& val) {
  this->socialCurrencyId = val;
__isset.socialCurrencyId = true;
}

void EventBusinessKeyDropRate::__set_currencyIds(const std::vector<CurrencyID> & val) {
  this->currencyIds = val;
__isset.currencyIds = true;
}

void EventBusinessKeyDropRate::__set_currencyAmounts(const std::vector<int32_t> & val) {
  this->currencyAmounts = val;
__isset.currencyAmounts = true;
}
std::ostream& operator<<(std::ostream& out, const EventBusinessKeyDropRate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EventBusinessKeyDropRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_buildingId = false;
  bool isset_eventIds = false;
  bool isset_socialCurrencyAmount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          isset_buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size1031;
            ::apache::thrift::protocol::TType _etype1034;
            xfer += iprot->readListBegin(_etype1034, _size1031);
            this->eventIds.resize(_size1031);
            uint32_t _i1035;
            for (_i1035 = 0; _i1035 < _size1031; ++_i1035)
            {
              xfer += iprot->readString(this->eventIds[_i1035]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          this->__isset.currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currencyAmount);
          this->__isset.currencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dropRateIncrease);
          this->__isset.dropRateIncrease = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socialCurrencyAmount);
          isset_socialCurrencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->socialCurrencyId);
          this->__isset.socialCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->currencyIds.clear();
            uint32_t _size1036;
            ::apache::thrift::protocol::TType _etype1039;
            xfer += iprot->readListBegin(_etype1039, _size1036);
            this->currencyIds.resize(_size1036);
            uint32_t _i1040;
            for (_i1040 = 0; _i1040 < _size1036; ++_i1040)
            {
              xfer += iprot->readString(this->currencyIds[_i1040]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.currencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->currencyAmounts.clear();
            uint32_t _size1041;
            ::apache::thrift::protocol::TType _etype1044;
            xfer += iprot->readListBegin(_etype1044, _size1041);
            this->currencyAmounts.resize(_size1041);
            uint32_t _i1045;
            for (_i1045 = 0; _i1045 < _size1041; ++_i1045)
            {
              xfer += iprot->readI32(this->currencyAmounts[_i1045]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.currencyAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_buildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_socialCurrencyAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventBusinessKeyDropRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EventBusinessKeyDropRate");

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter1046;
    for (_iter1046 = this->eventIds.begin(); _iter1046 != this->eventIds.end(); ++_iter1046)
    {
      xfer += oprot->writeString((*_iter1046));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.currencyId) {
    xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->currencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyAmount) {
    xfer += oprot->writeFieldBegin("currencyAmount", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->currencyAmount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dropRateIncrease) {
    xfer += oprot->writeFieldBegin("dropRateIncrease", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->dropRateIncrease);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("socialCurrencyAmount", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->socialCurrencyAmount);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.socialCurrencyId) {
    xfer += oprot->writeFieldBegin("socialCurrencyId", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->socialCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyIds) {
    xfer += oprot->writeFieldBegin("currencyIds", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->currencyIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter1047;
      for (_iter1047 = this->currencyIds.begin(); _iter1047 != this->currencyIds.end(); ++_iter1047)
      {
        xfer += oprot->writeString((*_iter1047));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyAmounts) {
    xfer += oprot->writeFieldBegin("currencyAmounts", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->currencyAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter1048;
      for (_iter1048 = this->currencyAmounts.begin(); _iter1048 != this->currencyAmounts.end(); ++_iter1048)
      {
        xfer += oprot->writeI32((*_iter1048));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventBusinessKeyDropRate &a, EventBusinessKeyDropRate &b) {
  using ::std::swap;
  swap(a.buildingId, b.buildingId);
  swap(a.eventIds, b.eventIds);
  swap(a.currencyId, b.currencyId);
  swap(a.currencyAmount, b.currencyAmount);
  swap(a.dropRateIncrease, b.dropRateIncrease);
  swap(a.socialCurrencyAmount, b.socialCurrencyAmount);
  swap(a.socialCurrencyId, b.socialCurrencyId);
  swap(a.currencyIds, b.currencyIds);
  swap(a.currencyAmounts, b.currencyAmounts);
  swap(a.__isset, b.__isset);
}

EventBusinessKeyDropRate::EventBusinessKeyDropRate(const EventBusinessKeyDropRate& other1049) {
  buildingId = other1049.buildingId;
  eventIds = other1049.eventIds;
  currencyId = other1049.currencyId;
  currencyAmount = other1049.currencyAmount;
  dropRateIncrease = other1049.dropRateIncrease;
  socialCurrencyAmount = other1049.socialCurrencyAmount;
  socialCurrencyId = other1049.socialCurrencyId;
  currencyIds = other1049.currencyIds;
  currencyAmounts = other1049.currencyAmounts;
  __isset = other1049.__isset;
}
EventBusinessKeyDropRate& EventBusinessKeyDropRate::operator=(const EventBusinessKeyDropRate& other1050) {
  buildingId = other1050.buildingId;
  eventIds = other1050.eventIds;
  currencyId = other1050.currencyId;
  currencyAmount = other1050.currencyAmount;
  dropRateIncrease = other1050.dropRateIncrease;
  socialCurrencyAmount = other1050.socialCurrencyAmount;
  socialCurrencyId = other1050.socialCurrencyId;
  currencyIds = other1050.currencyIds;
  currencyAmounts = other1050.currencyAmounts;
  __isset = other1050.__isset;
  return *this;
}
void EventBusinessKeyDropRate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EventBusinessKeyDropRate(";
  out << "buildingId=" << to_string(buildingId);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "currencyId="; (__isset.currencyId ? (out << to_string(currencyId)) : (out << "<null>"));
  out << ", " << "currencyAmount="; (__isset.currencyAmount ? (out << to_string(currencyAmount)) : (out << "<null>"));
  out << ", " << "dropRateIncrease="; (__isset.dropRateIncrease ? (out << to_string(dropRateIncrease)) : (out << "<null>"));
  out << ", " << "socialCurrencyAmount=" << to_string(socialCurrencyAmount);
  out << ", " << "socialCurrencyId="; (__isset.socialCurrencyId ? (out << to_string(socialCurrencyId)) : (out << "<null>"));
  out << ", " << "currencyIds="; (__isset.currencyIds ? (out << to_string(currencyIds)) : (out << "<null>"));
  out << ", " << "currencyAmounts="; (__isset.currencyAmounts ? (out << to_string(currencyAmounts)) : (out << "<null>"));
  out << ")";
}


BuildingMultiplier::~BuildingMultiplier() throw() {
}


void BuildingMultiplier::__set_buildingId(const BuildingID& val) {
  this->buildingId = val;
}

void BuildingMultiplier::__set_eventPointMultiplier(const double val) {
  this->eventPointMultiplier = val;
}

void BuildingMultiplier::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void BuildingMultiplier::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}
std::ostream& operator<<(std::ostream& out, const BuildingMultiplier& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuildingMultiplier::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_buildingId = false;
  bool isset_eventPointMultiplier = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          isset_buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->eventPointMultiplier);
          isset_eventPointMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size1051;
            ::apache::thrift::protocol::TType _etype1054;
            xfer += iprot->readListBegin(_etype1054, _size1051);
            this->eventIds.resize(_size1051);
            uint32_t _i1055;
            for (_i1055 = 0; _i1055 < _size1051; ++_i1055)
            {
              xfer += iprot->readString(this->eventIds[_i1055]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1056;
          xfer += iprot->readI32(ecast1056);
          this->eventPhases = (EventPhases::type)ecast1056;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_buildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPointMultiplier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BuildingMultiplier::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuildingMultiplier");

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPointMultiplier", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->eventPointMultiplier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter1057;
    for (_iter1057 = this->eventIds.begin(); _iter1057 != this->eventIds.end(); ++_iter1057)
    {
      xfer += oprot->writeString((*_iter1057));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuildingMultiplier &a, BuildingMultiplier &b) {
  using ::std::swap;
  swap(a.buildingId, b.buildingId);
  swap(a.eventPointMultiplier, b.eventPointMultiplier);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
}

BuildingMultiplier::BuildingMultiplier(const BuildingMultiplier& other1058) {
  buildingId = other1058.buildingId;
  eventPointMultiplier = other1058.eventPointMultiplier;
  eventIds = other1058.eventIds;
  eventPhases = other1058.eventPhases;
}
BuildingMultiplier& BuildingMultiplier::operator=(const BuildingMultiplier& other1059) {
  buildingId = other1059.buildingId;
  eventPointMultiplier = other1059.eventPointMultiplier;
  eventIds = other1059.eventIds;
  eventPhases = other1059.eventPhases;
  return *this;
}
void BuildingMultiplier::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuildingMultiplier(";
  out << "buildingId=" << to_string(buildingId);
  out << ", " << "eventPointMultiplier=" << to_string(eventPointMultiplier);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ")";
}


TutorialState::~TutorialState() throw() {
}


void TutorialState::__set_tutorialId(const TutorialID& val) {
  this->tutorialId = val;
}
std::ostream& operator<<(std::ostream& out, const TutorialState& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TutorialState::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tutorialId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tutorialId);
          isset_tutorialId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tutorialId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TutorialState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TutorialState");

  xfer += oprot->writeFieldBegin("tutorialId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tutorialId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TutorialState &a, TutorialState &b) {
  using ::std::swap;
  swap(a.tutorialId, b.tutorialId);
}

TutorialState::TutorialState(const TutorialState& other1060) {
  tutorialId = other1060.tutorialId;
}
TutorialState& TutorialState::operator=(const TutorialState& other1061) {
  tutorialId = other1061.tutorialId;
  return *this;
}
void TutorialState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TutorialState(";
  out << "tutorialId=" << to_string(tutorialId);
  out << ")";
}


AdminGiftMessage::~AdminGiftMessage() throw() {
}


void AdminGiftMessage::__set_adminGiftMessageId(const AdminGiftMessageID& val) {
  this->adminGiftMessageId = val;
}

void AdminGiftMessage::__set_title(const LocalizedString& val) {
  this->title = val;
}

void AdminGiftMessage::__set_body(const LocalizedString& val) {
  this->body = val;
}

void AdminGiftMessage::__set_priority(const int32_t val) {
  this->priority = val;
}

void AdminGiftMessage::__set_openable(const bool val) {
  this->openable = val;
}

void AdminGiftMessage::__set_claimOnClaimAll(const bool val) {
  this->claimOnClaimAll = val;
}

void AdminGiftMessage::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void AdminGiftMessage::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void AdminGiftMessage::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void AdminGiftMessage::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void AdminGiftMessage::__set_disabled(const bool val) {
  this->disabled = val;
}

void AdminGiftMessage::__set_giftMessageRewardIds(const std::vector<GiftMessageRewardID> & val) {
  this->giftMessageRewardIds = val;
}

void AdminGiftMessage::__set_openBody(const LocalizedString& val) {
  this->openBody = val;
__isset.openBody = true;
}

void AdminGiftMessage::__set_templateId(const TemplateID& val) {
  this->templateId = val;
__isset.templateId = true;
}
std::ostream& operator<<(std::ostream& out, const AdminGiftMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AdminGiftMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_adminGiftMessageId = false;
  bool isset_title = false;
  bool isset_body = false;
  bool isset_priority = false;
  bool isset_openable = false;
  bool isset_claimOnClaimAll = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_showRank = false;
  bool isset_hideRank = false;
  bool isset_disabled = false;
  bool isset_giftMessageRewardIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->adminGiftMessageId);
          isset_adminGiftMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->title.read(iprot);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body.read(iprot);
          isset_body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->openable);
          isset_openable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->claimOnClaimAll);
          isset_claimOnClaimAll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size1062;
            ::apache::thrift::protocol::TType _etype1065;
            xfer += iprot->readListBegin(_etype1065, _size1062);
            this->eventIds.resize(_size1062);
            uint32_t _i1066;
            for (_i1066 = 0; _i1066 < _size1062; ++_i1066)
            {
              xfer += iprot->readString(this->eventIds[_i1066]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1067;
          xfer += iprot->readI32(ecast1067);
          this->eventPhases = (EventPhases::type)ecast1067;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disabled);
          isset_disabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->giftMessageRewardIds.clear();
            uint32_t _size1068;
            ::apache::thrift::protocol::TType _etype1071;
            xfer += iprot->readListBegin(_etype1071, _size1068);
            this->giftMessageRewardIds.resize(_size1068);
            uint32_t _i1072;
            for (_i1072 = 0; _i1072 < _size1068; ++_i1072)
            {
              xfer += iprot->readString(this->giftMessageRewardIds[_i1072]);
            }
            xfer += iprot->readListEnd();
          }
          isset_giftMessageRewardIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->openBody.read(iprot);
          this->__isset.openBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->templateId);
          this->__isset.templateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_adminGiftMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_body)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_openable)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_claimOnClaimAll)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_disabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_giftMessageRewardIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AdminGiftMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdminGiftMessage");

  xfer += oprot->writeFieldBegin("adminGiftMessageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->adminGiftMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->title.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->body.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("openable", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->openable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("claimOnClaimAll", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->claimOnClaimAll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter1073;
    for (_iter1073 = this->eventIds.begin(); _iter1073 != this->eventIds.end(); ++_iter1073)
    {
      xfer += oprot->writeString((*_iter1073));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("disabled", ::apache::thrift::protocol::T_BOOL, 19);
  xfer += oprot->writeBool(this->disabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("giftMessageRewardIds", ::apache::thrift::protocol::T_LIST, 22);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->giftMessageRewardIds.size()));
    std::vector<GiftMessageRewardID> ::const_iterator _iter1074;
    for (_iter1074 = this->giftMessageRewardIds.begin(); _iter1074 != this->giftMessageRewardIds.end(); ++_iter1074)
    {
      xfer += oprot->writeString((*_iter1074));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.openBody) {
    xfer += oprot->writeFieldBegin("openBody", ::apache::thrift::protocol::T_STRUCT, 30);
    xfer += this->openBody.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.templateId) {
    xfer += oprot->writeFieldBegin("templateId", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->templateId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdminGiftMessage &a, AdminGiftMessage &b) {
  using ::std::swap;
  swap(a.adminGiftMessageId, b.adminGiftMessageId);
  swap(a.title, b.title);
  swap(a.body, b.body);
  swap(a.priority, b.priority);
  swap(a.openable, b.openable);
  swap(a.claimOnClaimAll, b.claimOnClaimAll);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.showRank, b.showRank);
  swap(a.hideRank, b.hideRank);
  swap(a.disabled, b.disabled);
  swap(a.giftMessageRewardIds, b.giftMessageRewardIds);
  swap(a.openBody, b.openBody);
  swap(a.templateId, b.templateId);
  swap(a.__isset, b.__isset);
}

AdminGiftMessage::AdminGiftMessage(const AdminGiftMessage& other1075) {
  adminGiftMessageId = other1075.adminGiftMessageId;
  title = other1075.title;
  body = other1075.body;
  priority = other1075.priority;
  openable = other1075.openable;
  claimOnClaimAll = other1075.claimOnClaimAll;
  eventIds = other1075.eventIds;
  eventPhases = other1075.eventPhases;
  showRank = other1075.showRank;
  hideRank = other1075.hideRank;
  disabled = other1075.disabled;
  giftMessageRewardIds = other1075.giftMessageRewardIds;
  openBody = other1075.openBody;
  templateId = other1075.templateId;
  __isset = other1075.__isset;
}
AdminGiftMessage& AdminGiftMessage::operator=(const AdminGiftMessage& other1076) {
  adminGiftMessageId = other1076.adminGiftMessageId;
  title = other1076.title;
  body = other1076.body;
  priority = other1076.priority;
  openable = other1076.openable;
  claimOnClaimAll = other1076.claimOnClaimAll;
  eventIds = other1076.eventIds;
  eventPhases = other1076.eventPhases;
  showRank = other1076.showRank;
  hideRank = other1076.hideRank;
  disabled = other1076.disabled;
  giftMessageRewardIds = other1076.giftMessageRewardIds;
  openBody = other1076.openBody;
  templateId = other1076.templateId;
  __isset = other1076.__isset;
  return *this;
}
void AdminGiftMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdminGiftMessage(";
  out << "adminGiftMessageId=" << to_string(adminGiftMessageId);
  out << ", " << "title=" << to_string(title);
  out << ", " << "body=" << to_string(body);
  out << ", " << "priority=" << to_string(priority);
  out << ", " << "openable=" << to_string(openable);
  out << ", " << "claimOnClaimAll=" << to_string(claimOnClaimAll);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "disabled=" << to_string(disabled);
  out << ", " << "giftMessageRewardIds=" << to_string(giftMessageRewardIds);
  out << ", " << "openBody="; (__isset.openBody ? (out << to_string(openBody)) : (out << "<null>"));
  out << ", " << "templateId="; (__isset.templateId ? (out << to_string(templateId)) : (out << "<null>"));
  out << ")";
}


PopupMessage::~PopupMessage() throw() {
}


void PopupMessage::__set_popupMessageId(const PopupMessageID& val) {
  this->popupMessageId = val;
}

void PopupMessage::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void PopupMessage::__set_templateId(const TemplateID& val) {
  this->templateId = val;
__isset.templateId = true;
}

void PopupMessage::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void PopupMessage::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void PopupMessage::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void PopupMessage::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void PopupMessage::__set_instant(const bool val) {
  this->instant = val;
}

void PopupMessage::__set_repeatSeconds(const int32_t val) {
  this->repeatSeconds = val;
}

void PopupMessage::__set_maxShown(const int32_t val) {
  this->maxShown = val;
}

void PopupMessage::__set_disabled(const bool val) {
  this->disabled = val;
}

void PopupMessage::__set_offerType(const AvailableOfferType::type val) {
  this->offerType = val;
}

void PopupMessage::__set_offerId(const std::string& val) {
  this->offerId = val;
}

void PopupMessage::__set_offerSingleStep(const bool val) {
  this->offerSingleStep = val;
}

void PopupMessage::__set_lastIAPMinutes(const int32_t val) {
  this->lastIAPMinutes = val;
__isset.lastIAPMinutes = true;
}

void PopupMessage::__set_title(const LocalizedString& val) {
  this->title = val;
}

void PopupMessage::__set_body(const LocalizedString& val) {
  this->body = val;
}

void PopupMessage::__set_body2(const LocalizedString& val) {
  this->body2 = val;
__isset.body2 = true;
}

void PopupMessage::__set_title2(const LocalizedString& val) {
  this->title2 = val;
__isset.title2 = true;
}

void PopupMessage::__set_leftRibbon(const LocalizedString& val) {
  this->leftRibbon = val;
__isset.leftRibbon = true;
}

void PopupMessage::__set_rightRibbon(const LocalizedString& val) {
  this->rightRibbon = val;
__isset.rightRibbon = true;
}

void PopupMessage::__set_bottomLeft(const LocalizedString& val) {
  this->bottomLeft = val;
__isset.bottomLeft = true;
}

void PopupMessage::__set_bottomRight(const LocalizedString& val) {
  this->bottomRight = val;
__isset.bottomRight = true;
}

void PopupMessage::__set_leftUnderRibbon(const LocalizedString& val) {
  this->leftUnderRibbon = val;
__isset.leftUnderRibbon = true;
}

void PopupMessage::__set_rightUnderRibbon(const LocalizedString& val) {
  this->rightUnderRibbon = val;
__isset.rightUnderRibbon = true;
}

void PopupMessage::__set_requireOneOfCurrencyIds(const std::vector<CurrencyID> & val) {
  this->requireOneOfCurrencyIds = val;
__isset.requireOneOfCurrencyIds = true;
}

void PopupMessage::__set_requireOneOfCurrencyAmounts(const std::vector<int32_t> & val) {
  this->requireOneOfCurrencyAmounts = val;
__isset.requireOneOfCurrencyAmounts = true;
}

void PopupMessage::__set_markAsReadOnClosing(const bool val) {
  this->markAsReadOnClosing = val;
__isset.markAsReadOnClosing = true;
}

void PopupMessage::__set_triggerButtonActionOnTappingCloseButton(const bool val) {
  this->triggerButtonActionOnTappingCloseButton = val;
__isset.triggerButtonActionOnTappingCloseButton = true;
}

void PopupMessage::__set_triggerButtonActionOnTappingOutside(const bool val) {
  this->triggerButtonActionOnTappingOutside = val;
__isset.triggerButtonActionOnTappingOutside = true;
}
std::ostream& operator<<(std::ostream& out, const PopupMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PopupMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_popupMessageId = false;
  bool isset_displayOrder = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_showRank = false;
  bool isset_hideRank = false;
  bool isset_instant = false;
  bool isset_repeatSeconds = false;
  bool isset_maxShown = false;
  bool isset_disabled = false;
  bool isset_offerType = false;
  bool isset_offerId = false;
  bool isset_offerSingleStep = false;
  bool isset_title = false;
  bool isset_body = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->popupMessageId);
          isset_popupMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->templateId);
          this->__isset.templateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size1077;
            ::apache::thrift::protocol::TType _etype1080;
            xfer += iprot->readListBegin(_etype1080, _size1077);
            this->eventIds.resize(_size1077);
            uint32_t _i1081;
            for (_i1081 = 0; _i1081 < _size1077; ++_i1081)
            {
              xfer += iprot->readString(this->eventIds[_i1081]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1082;
          xfer += iprot->readI32(ecast1082);
          this->eventPhases = (EventPhases::type)ecast1082;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->instant);
          isset_instant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->repeatSeconds);
          isset_repeatSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxShown);
          isset_maxShown = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disabled);
          isset_disabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1083;
          xfer += iprot->readI32(ecast1083);
          this->offerType = (AvailableOfferType::type)ecast1083;
          isset_offerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->offerId);
          isset_offerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->offerSingleStep);
          isset_offerSingleStep = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastIAPMinutes);
          this->__isset.lastIAPMinutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->title.read(iprot);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body.read(iprot);
          isset_body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body2.read(iprot);
          this->__isset.body2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->title2.read(iprot);
          this->__isset.title2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->leftRibbon.read(iprot);
          this->__isset.leftRibbon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rightRibbon.read(iprot);
          this->__isset.rightRibbon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bottomLeft.read(iprot);
          this->__isset.bottomLeft = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bottomRight.read(iprot);
          this->__isset.bottomRight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->leftUnderRibbon.read(iprot);
          this->__isset.leftUnderRibbon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rightUnderRibbon.read(iprot);
          this->__isset.rightUnderRibbon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->requireOneOfCurrencyIds.clear();
            uint32_t _size1084;
            ::apache::thrift::protocol::TType _etype1087;
            xfer += iprot->readListBegin(_etype1087, _size1084);
            this->requireOneOfCurrencyIds.resize(_size1084);
            uint32_t _i1088;
            for (_i1088 = 0; _i1088 < _size1084; ++_i1088)
            {
              xfer += iprot->readString(this->requireOneOfCurrencyIds[_i1088]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.requireOneOfCurrencyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->requireOneOfCurrencyAmounts.clear();
            uint32_t _size1089;
            ::apache::thrift::protocol::TType _etype1092;
            xfer += iprot->readListBegin(_etype1092, _size1089);
            this->requireOneOfCurrencyAmounts.resize(_size1089);
            uint32_t _i1093;
            for (_i1093 = 0; _i1093 < _size1089; ++_i1093)
            {
              xfer += iprot->readI32(this->requireOneOfCurrencyAmounts[_i1093]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.requireOneOfCurrencyAmounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->markAsReadOnClosing);
          this->__isset.markAsReadOnClosing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->triggerButtonActionOnTappingCloseButton);
          this->__isset.triggerButtonActionOnTappingCloseButton = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->triggerButtonActionOnTappingOutside);
          this->__isset.triggerButtonActionOnTappingOutside = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_popupMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_instant)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_repeatSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxShown)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_disabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offerType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offerSingleStep)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_body)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PopupMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PopupMessage");

  xfer += oprot->writeFieldBegin("popupMessageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->popupMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.templateId) {
    xfer += oprot->writeFieldBegin("templateId", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->templateId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 21);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter1094;
    for (_iter1094 = this->eventIds.begin(); _iter1094 != this->eventIds.end(); ++_iter1094)
    {
      xfer += oprot->writeString((*_iter1094));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("instant", ::apache::thrift::protocol::T_BOOL, 26);
  xfer += oprot->writeBool(this->instant);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repeatSeconds", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->repeatSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxShown", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32(this->maxShown);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("disabled", ::apache::thrift::protocol::T_BOOL, 40);
  xfer += oprot->writeBool(this->disabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offerType", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32((int32_t)this->offerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offerId", ::apache::thrift::protocol::T_STRING, 51);
  xfer += oprot->writeString(this->offerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offerSingleStep", ::apache::thrift::protocol::T_BOOL, 52);
  xfer += oprot->writeBool(this->offerSingleStep);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.lastIAPMinutes) {
    xfer += oprot->writeFieldBegin("lastIAPMinutes", ::apache::thrift::protocol::T_I32, 53);
    xfer += oprot->writeI32(this->lastIAPMinutes);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRUCT, 60);
  xfer += this->title.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 61);
  xfer += this->body.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.body2) {
    xfer += oprot->writeFieldBegin("body2", ::apache::thrift::protocol::T_STRUCT, 70);
    xfer += this->body2.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.title2) {
    xfer += oprot->writeFieldBegin("title2", ::apache::thrift::protocol::T_STRUCT, 71);
    xfer += this->title2.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requireOneOfCurrencyIds) {
    xfer += oprot->writeFieldBegin("requireOneOfCurrencyIds", ::apache::thrift::protocol::T_LIST, 72);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->requireOneOfCurrencyIds.size()));
      std::vector<CurrencyID> ::const_iterator _iter1095;
      for (_iter1095 = this->requireOneOfCurrencyIds.begin(); _iter1095 != this->requireOneOfCurrencyIds.end(); ++_iter1095)
      {
        xfer += oprot->writeString((*_iter1095));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requireOneOfCurrencyAmounts) {
    xfer += oprot->writeFieldBegin("requireOneOfCurrencyAmounts", ::apache::thrift::protocol::T_LIST, 73);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->requireOneOfCurrencyAmounts.size()));
      std::vector<int32_t> ::const_iterator _iter1096;
      for (_iter1096 = this->requireOneOfCurrencyAmounts.begin(); _iter1096 != this->requireOneOfCurrencyAmounts.end(); ++_iter1096)
      {
        xfer += oprot->writeI32((*_iter1096));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.markAsReadOnClosing) {
    xfer += oprot->writeFieldBegin("markAsReadOnClosing", ::apache::thrift::protocol::T_BOOL, 74);
    xfer += oprot->writeBool(this->markAsReadOnClosing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggerButtonActionOnTappingCloseButton) {
    xfer += oprot->writeFieldBegin("triggerButtonActionOnTappingCloseButton", ::apache::thrift::protocol::T_BOOL, 75);
    xfer += oprot->writeBool(this->triggerButtonActionOnTappingCloseButton);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggerButtonActionOnTappingOutside) {
    xfer += oprot->writeFieldBegin("triggerButtonActionOnTappingOutside", ::apache::thrift::protocol::T_BOOL, 76);
    xfer += oprot->writeBool(this->triggerButtonActionOnTappingOutside);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leftRibbon) {
    xfer += oprot->writeFieldBegin("leftRibbon", ::apache::thrift::protocol::T_STRUCT, 80);
    xfer += this->leftRibbon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rightRibbon) {
    xfer += oprot->writeFieldBegin("rightRibbon", ::apache::thrift::protocol::T_STRUCT, 81);
    xfer += this->rightRibbon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bottomLeft) {
    xfer += oprot->writeFieldBegin("bottomLeft", ::apache::thrift::protocol::T_STRUCT, 82);
    xfer += this->bottomLeft.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bottomRight) {
    xfer += oprot->writeFieldBegin("bottomRight", ::apache::thrift::protocol::T_STRUCT, 83);
    xfer += this->bottomRight.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leftUnderRibbon) {
    xfer += oprot->writeFieldBegin("leftUnderRibbon", ::apache::thrift::protocol::T_STRUCT, 84);
    xfer += this->leftUnderRibbon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rightUnderRibbon) {
    xfer += oprot->writeFieldBegin("rightUnderRibbon", ::apache::thrift::protocol::T_STRUCT, 85);
    xfer += this->rightUnderRibbon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PopupMessage &a, PopupMessage &b) {
  using ::std::swap;
  swap(a.popupMessageId, b.popupMessageId);
  swap(a.displayOrder, b.displayOrder);
  swap(a.templateId, b.templateId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.showRank, b.showRank);
  swap(a.hideRank, b.hideRank);
  swap(a.instant, b.instant);
  swap(a.repeatSeconds, b.repeatSeconds);
  swap(a.maxShown, b.maxShown);
  swap(a.disabled, b.disabled);
  swap(a.offerType, b.offerType);
  swap(a.offerId, b.offerId);
  swap(a.offerSingleStep, b.offerSingleStep);
  swap(a.lastIAPMinutes, b.lastIAPMinutes);
  swap(a.title, b.title);
  swap(a.body, b.body);
  swap(a.body2, b.body2);
  swap(a.title2, b.title2);
  swap(a.leftRibbon, b.leftRibbon);
  swap(a.rightRibbon, b.rightRibbon);
  swap(a.bottomLeft, b.bottomLeft);
  swap(a.bottomRight, b.bottomRight);
  swap(a.leftUnderRibbon, b.leftUnderRibbon);
  swap(a.rightUnderRibbon, b.rightUnderRibbon);
  swap(a.requireOneOfCurrencyIds, b.requireOneOfCurrencyIds);
  swap(a.requireOneOfCurrencyAmounts, b.requireOneOfCurrencyAmounts);
  swap(a.markAsReadOnClosing, b.markAsReadOnClosing);
  swap(a.triggerButtonActionOnTappingCloseButton, b.triggerButtonActionOnTappingCloseButton);
  swap(a.triggerButtonActionOnTappingOutside, b.triggerButtonActionOnTappingOutside);
  swap(a.__isset, b.__isset);
}

PopupMessage::PopupMessage(const PopupMessage& other1097) {
  popupMessageId = other1097.popupMessageId;
  displayOrder = other1097.displayOrder;
  templateId = other1097.templateId;
  eventIds = other1097.eventIds;
  eventPhases = other1097.eventPhases;
  showRank = other1097.showRank;
  hideRank = other1097.hideRank;
  instant = other1097.instant;
  repeatSeconds = other1097.repeatSeconds;
  maxShown = other1097.maxShown;
  disabled = other1097.disabled;
  offerType = other1097.offerType;
  offerId = other1097.offerId;
  offerSingleStep = other1097.offerSingleStep;
  lastIAPMinutes = other1097.lastIAPMinutes;
  title = other1097.title;
  body = other1097.body;
  body2 = other1097.body2;
  title2 = other1097.title2;
  leftRibbon = other1097.leftRibbon;
  rightRibbon = other1097.rightRibbon;
  bottomLeft = other1097.bottomLeft;
  bottomRight = other1097.bottomRight;
  leftUnderRibbon = other1097.leftUnderRibbon;
  rightUnderRibbon = other1097.rightUnderRibbon;
  requireOneOfCurrencyIds = other1097.requireOneOfCurrencyIds;
  requireOneOfCurrencyAmounts = other1097.requireOneOfCurrencyAmounts;
  markAsReadOnClosing = other1097.markAsReadOnClosing;
  triggerButtonActionOnTappingCloseButton = other1097.triggerButtonActionOnTappingCloseButton;
  triggerButtonActionOnTappingOutside = other1097.triggerButtonActionOnTappingOutside;
  __isset = other1097.__isset;
}
PopupMessage& PopupMessage::operator=(const PopupMessage& other1098) {
  popupMessageId = other1098.popupMessageId;
  displayOrder = other1098.displayOrder;
  templateId = other1098.templateId;
  eventIds = other1098.eventIds;
  eventPhases = other1098.eventPhases;
  showRank = other1098.showRank;
  hideRank = other1098.hideRank;
  instant = other1098.instant;
  repeatSeconds = other1098.repeatSeconds;
  maxShown = other1098.maxShown;
  disabled = other1098.disabled;
  offerType = other1098.offerType;
  offerId = other1098.offerId;
  offerSingleStep = other1098.offerSingleStep;
  lastIAPMinutes = other1098.lastIAPMinutes;
  title = other1098.title;
  body = other1098.body;
  body2 = other1098.body2;
  title2 = other1098.title2;
  leftRibbon = other1098.leftRibbon;
  rightRibbon = other1098.rightRibbon;
  bottomLeft = other1098.bottomLeft;
  bottomRight = other1098.bottomRight;
  leftUnderRibbon = other1098.leftUnderRibbon;
  rightUnderRibbon = other1098.rightUnderRibbon;
  requireOneOfCurrencyIds = other1098.requireOneOfCurrencyIds;
  requireOneOfCurrencyAmounts = other1098.requireOneOfCurrencyAmounts;
  markAsReadOnClosing = other1098.markAsReadOnClosing;
  triggerButtonActionOnTappingCloseButton = other1098.triggerButtonActionOnTappingCloseButton;
  triggerButtonActionOnTappingOutside = other1098.triggerButtonActionOnTappingOutside;
  __isset = other1098.__isset;
  return *this;
}
void PopupMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PopupMessage(";
  out << "popupMessageId=" << to_string(popupMessageId);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "templateId="; (__isset.templateId ? (out << to_string(templateId)) : (out << "<null>"));
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "instant=" << to_string(instant);
  out << ", " << "repeatSeconds=" << to_string(repeatSeconds);
  out << ", " << "maxShown=" << to_string(maxShown);
  out << ", " << "disabled=" << to_string(disabled);
  out << ", " << "offerType=" << to_string(offerType);
  out << ", " << "offerId=" << to_string(offerId);
  out << ", " << "offerSingleStep=" << to_string(offerSingleStep);
  out << ", " << "lastIAPMinutes="; (__isset.lastIAPMinutes ? (out << to_string(lastIAPMinutes)) : (out << "<null>"));
  out << ", " << "title=" << to_string(title);
  out << ", " << "body=" << to_string(body);
  out << ", " << "body2="; (__isset.body2 ? (out << to_string(body2)) : (out << "<null>"));
  out << ", " << "title2="; (__isset.title2 ? (out << to_string(title2)) : (out << "<null>"));
  out << ", " << "leftRibbon="; (__isset.leftRibbon ? (out << to_string(leftRibbon)) : (out << "<null>"));
  out << ", " << "rightRibbon="; (__isset.rightRibbon ? (out << to_string(rightRibbon)) : (out << "<null>"));
  out << ", " << "bottomLeft="; (__isset.bottomLeft ? (out << to_string(bottomLeft)) : (out << "<null>"));
  out << ", " << "bottomRight="; (__isset.bottomRight ? (out << to_string(bottomRight)) : (out << "<null>"));
  out << ", " << "leftUnderRibbon="; (__isset.leftUnderRibbon ? (out << to_string(leftUnderRibbon)) : (out << "<null>"));
  out << ", " << "rightUnderRibbon="; (__isset.rightUnderRibbon ? (out << to_string(rightUnderRibbon)) : (out << "<null>"));
  out << ", " << "requireOneOfCurrencyIds="; (__isset.requireOneOfCurrencyIds ? (out << to_string(requireOneOfCurrencyIds)) : (out << "<null>"));
  out << ", " << "requireOneOfCurrencyAmounts="; (__isset.requireOneOfCurrencyAmounts ? (out << to_string(requireOneOfCurrencyAmounts)) : (out << "<null>"));
  out << ", " << "markAsReadOnClosing="; (__isset.markAsReadOnClosing ? (out << to_string(markAsReadOnClosing)) : (out << "<null>"));
  out << ", " << "triggerButtonActionOnTappingCloseButton="; (__isset.triggerButtonActionOnTappingCloseButton ? (out << to_string(triggerButtonActionOnTappingCloseButton)) : (out << "<null>"));
  out << ", " << "triggerButtonActionOnTappingOutside="; (__isset.triggerButtonActionOnTappingOutside ? (out << to_string(triggerButtonActionOnTappingOutside)) : (out << "<null>"));
  out << ")";
}


PopupMessageSettings::~PopupMessageSettings() throw() {
}


void PopupMessageSettings::__set_globalQueueMax(const int32_t val) {
  this->globalQueueMax = val;
}

void PopupMessageSettings::__set_globalQueueCooldownSeconds(const int32_t val) {
  this->globalQueueCooldownSeconds = val;
}
std::ostream& operator<<(std::ostream& out, const PopupMessageSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PopupMessageSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_globalQueueMax = false;
  bool isset_globalQueueCooldownSeconds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->globalQueueMax);
          isset_globalQueueMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->globalQueueCooldownSeconds);
          isset_globalQueueCooldownSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_globalQueueMax)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_globalQueueCooldownSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PopupMessageSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PopupMessageSettings");

  xfer += oprot->writeFieldBegin("globalQueueMax", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->globalQueueMax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("globalQueueCooldownSeconds", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->globalQueueCooldownSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PopupMessageSettings &a, PopupMessageSettings &b) {
  using ::std::swap;
  swap(a.globalQueueMax, b.globalQueueMax);
  swap(a.globalQueueCooldownSeconds, b.globalQueueCooldownSeconds);
}

PopupMessageSettings::PopupMessageSettings(const PopupMessageSettings& other1099) {
  globalQueueMax = other1099.globalQueueMax;
  globalQueueCooldownSeconds = other1099.globalQueueCooldownSeconds;
}
PopupMessageSettings& PopupMessageSettings::operator=(const PopupMessageSettings& other1100) {
  globalQueueMax = other1100.globalQueueMax;
  globalQueueCooldownSeconds = other1100.globalQueueCooldownSeconds;
  return *this;
}
void PopupMessageSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PopupMessageSettings(";
  out << "globalQueueMax=" << to_string(globalQueueMax);
  out << ", " << "globalQueueCooldownSeconds=" << to_string(globalQueueCooldownSeconds);
  out << ")";
}


EventSettings::~EventSettings() throw() {
}


void EventSettings::__set_defaultEventIslandId(const EventIslandID& val) {
  this->defaultEventIslandId = val;
}
std::ostream& operator<<(std::ostream& out, const EventSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EventSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_defaultEventIslandId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultEventIslandId);
          isset_defaultEventIslandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_defaultEventIslandId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EventSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EventSettings");

  xfer += oprot->writeFieldBegin("defaultEventIslandId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->defaultEventIslandId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventSettings &a, EventSettings &b) {
  using ::std::swap;
  swap(a.defaultEventIslandId, b.defaultEventIslandId);
}

EventSettings::EventSettings(const EventSettings& other1101) {
  defaultEventIslandId = other1101.defaultEventIslandId;
}
EventSettings& EventSettings::operator=(const EventSettings& other1102) {
  defaultEventIslandId = other1102.defaultEventIslandId;
  return *this;
}
void EventSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EventSettings(";
  out << "defaultEventIslandId=" << to_string(defaultEventIslandId);
  out << ")";
}


PlayerDisplaySuggest::~PlayerDisplaySuggest() throw() {
}


void PlayerDisplaySuggest::__set_display(const std::string& val) {
  this->display = val;
}
std::ostream& operator<<(std::ostream& out, const PlayerDisplaySuggest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlayerDisplaySuggest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_display = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->display);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PlayerDisplaySuggest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerDisplaySuggest");

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->display);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerDisplaySuggest &a, PlayerDisplaySuggest &b) {
  using ::std::swap;
  swap(a.display, b.display);
}

PlayerDisplaySuggest::PlayerDisplaySuggest(const PlayerDisplaySuggest& other1103) {
  display = other1103.display;
}
PlayerDisplaySuggest& PlayerDisplaySuggest::operator=(const PlayerDisplaySuggest& other1104) {
  display = other1104.display;
  return *this;
}
void PlayerDisplaySuggest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerDisplaySuggest(";
  out << "display=" << to_string(display);
  out << ")";
}


GuildNameSuggest::~GuildNameSuggest() throw() {
}


void GuildNameSuggest::__set_display(const std::string& val) {
  this->display = val;
}
std::ostream& operator<<(std::ostream& out, const GuildNameSuggest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildNameSuggest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_display = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->display);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildNameSuggest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildNameSuggest");

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->display);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildNameSuggest &a, GuildNameSuggest &b) {
  using ::std::swap;
  swap(a.display, b.display);
}

GuildNameSuggest::GuildNameSuggest(const GuildNameSuggest& other1105) {
  display = other1105.display;
}
GuildNameSuggest& GuildNameSuggest::operator=(const GuildNameSuggest& other1106) {
  display = other1106.display;
  return *this;
}
void GuildNameSuggest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildNameSuggest(";
  out << "display=" << to_string(display);
  out << ")";
}


GuildLeaderboardReward::~GuildLeaderboardReward() throw() {
}


void GuildLeaderboardReward::__set_leaderboardId(const GuildLeaderboardID& val) {
  this->leaderboardId = val;
}

void GuildLeaderboardReward::__set_leaderboardRibbonId(const GuildLeaderboardRibbonID& val) {
  this->leaderboardRibbonId = val;
}

void GuildLeaderboardReward::__set_recipient(const GuildLeaderboardRewardRecipient::type val) {
  this->recipient = val;
}

void GuildLeaderboardReward::__set_rewardType(const LootItemType::type val) {
  this->rewardType = val;
}

void GuildLeaderboardReward::__set_rewardId(const std::string& val) {
  this->rewardId = val;
}

void GuildLeaderboardReward::__set_rewardAmount(const int32_t val) {
  this->rewardAmount = val;
}
std::ostream& operator<<(std::ostream& out, const GuildLeaderboardReward& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildLeaderboardReward::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardId = false;
  bool isset_leaderboardRibbonId = false;
  bool isset_recipient = false;
  bool isset_rewardType = false;
  bool isset_rewardId = false;
  bool isset_rewardAmount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardId);
          isset_leaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardRibbonId);
          isset_leaderboardRibbonId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1107;
          xfer += iprot->readI32(ecast1107);
          this->recipient = (GuildLeaderboardRewardRecipient::type)ecast1107;
          isset_recipient = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1108;
          xfer += iprot->readI32(ecast1108);
          this->rewardType = (LootItemType::type)ecast1108;
          isset_rewardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardId);
          isset_rewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rewardAmount);
          isset_rewardAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardRibbonId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recipient)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildLeaderboardReward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildLeaderboardReward");

  xfer += oprot->writeFieldBegin("leaderboardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->leaderboardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardRibbonId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->leaderboardRibbonId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recipient", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->recipient);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardType", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32((int32_t)this->rewardType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardId", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->rewardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardAmount", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->rewardAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildLeaderboardReward &a, GuildLeaderboardReward &b) {
  using ::std::swap;
  swap(a.leaderboardId, b.leaderboardId);
  swap(a.leaderboardRibbonId, b.leaderboardRibbonId);
  swap(a.recipient, b.recipient);
  swap(a.rewardType, b.rewardType);
  swap(a.rewardId, b.rewardId);
  swap(a.rewardAmount, b.rewardAmount);
}

GuildLeaderboardReward::GuildLeaderboardReward(const GuildLeaderboardReward& other1109) {
  leaderboardId = other1109.leaderboardId;
  leaderboardRibbonId = other1109.leaderboardRibbonId;
  recipient = other1109.recipient;
  rewardType = other1109.rewardType;
  rewardId = other1109.rewardId;
  rewardAmount = other1109.rewardAmount;
}
GuildLeaderboardReward& GuildLeaderboardReward::operator=(const GuildLeaderboardReward& other1110) {
  leaderboardId = other1110.leaderboardId;
  leaderboardRibbonId = other1110.leaderboardRibbonId;
  recipient = other1110.recipient;
  rewardType = other1110.rewardType;
  rewardId = other1110.rewardId;
  rewardAmount = other1110.rewardAmount;
  return *this;
}
void GuildLeaderboardReward::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildLeaderboardReward(";
  out << "leaderboardId=" << to_string(leaderboardId);
  out << ", " << "leaderboardRibbonId=" << to_string(leaderboardRibbonId);
  out << ", " << "recipient=" << to_string(recipient);
  out << ", " << "rewardType=" << to_string(rewardType);
  out << ", " << "rewardId=" << to_string(rewardId);
  out << ", " << "rewardAmount=" << to_string(rewardAmount);
  out << ")";
}


GuildLeaderboardRibbon::~GuildLeaderboardRibbon() throw() {
}


void GuildLeaderboardRibbon::__set_leaderboardId(const LeaderboardID& val) {
  this->leaderboardId = val;
}

void GuildLeaderboardRibbon::__set_leaderboardRibbonId(const LeaderboardRibbonID& val) {
  this->leaderboardRibbonId = val;
}

void GuildLeaderboardRibbon::__set_display(const LocalizedString& val) {
  this->display = val;
}

void GuildLeaderboardRibbon::__set_positionStart(const int32_t val) {
  this->positionStart = val;
}

void GuildLeaderboardRibbon::__set_positionEnd(const int32_t val) {
  this->positionEnd = val;
}

void GuildLeaderboardRibbon::__set_trophyAssetId(const AssetID& val) {
  this->trophyAssetId = val;
}

void GuildLeaderboardRibbon::__set_bannerAssetId(const AssetID& val) {
  this->bannerAssetId = val;
}

void GuildLeaderboardRibbon::__set_rewardChestAsset(const std::string& val) {
  this->rewardChestAsset = val;
}

void GuildLeaderboardRibbon::__set_memberRewards(const std::vector<GuildLeaderboardReward> & val) {
  this->memberRewards = val;
__isset.memberRewards = true;
}

void GuildLeaderboardRibbon::__set_leaderRewards(const std::vector<GuildLeaderboardReward> & val) {
  this->leaderRewards = val;
__isset.leaderRewards = true;
}
std::ostream& operator<<(std::ostream& out, const GuildLeaderboardRibbon& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildLeaderboardRibbon::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardId = false;
  bool isset_leaderboardRibbonId = false;
  bool isset_display = false;
  bool isset_positionStart = false;
  bool isset_positionEnd = false;
  bool isset_trophyAssetId = false;
  bool isset_bannerAssetId = false;
  bool isset_rewardChestAsset = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardId);
          isset_leaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardRibbonId);
          isset_leaderboardRibbonId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->positionStart);
          isset_positionStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->positionEnd);
          isset_positionEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trophyAssetId);
          isset_trophyAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bannerAssetId);
          isset_bannerAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardChestAsset);
          isset_rewardChestAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->memberRewards.clear();
            uint32_t _size1111;
            ::apache::thrift::protocol::TType _etype1114;
            xfer += iprot->readListBegin(_etype1114, _size1111);
            this->memberRewards.resize(_size1111);
            uint32_t _i1115;
            for (_i1115 = 0; _i1115 < _size1111; ++_i1115)
            {
              xfer += this->memberRewards[_i1115].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.memberRewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->leaderRewards.clear();
            uint32_t _size1116;
            ::apache::thrift::protocol::TType _etype1119;
            xfer += iprot->readListBegin(_etype1119, _size1116);
            this->leaderRewards.resize(_size1116);
            uint32_t _i1120;
            for (_i1120 = 0; _i1120 < _size1116; ++_i1120)
            {
              xfer += this->leaderRewards[_i1120].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.leaderRewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardRibbonId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_positionStart)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_positionEnd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_trophyAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bannerAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardChestAsset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildLeaderboardRibbon::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildLeaderboardRibbon");

  xfer += oprot->writeFieldBegin("leaderboardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->leaderboardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardRibbonId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->leaderboardRibbonId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("positionStart", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->positionStart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("positionEnd", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->positionEnd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trophyAssetId", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->trophyAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bannerAssetId", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->bannerAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardChestAsset", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->rewardChestAsset);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.memberRewards) {
    xfer += oprot->writeFieldBegin("memberRewards", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->memberRewards.size()));
      std::vector<GuildLeaderboardReward> ::const_iterator _iter1121;
      for (_iter1121 = this->memberRewards.begin(); _iter1121 != this->memberRewards.end(); ++_iter1121)
      {
        xfer += (*_iter1121).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leaderRewards) {
    xfer += oprot->writeFieldBegin("leaderRewards", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->leaderRewards.size()));
      std::vector<GuildLeaderboardReward> ::const_iterator _iter1122;
      for (_iter1122 = this->leaderRewards.begin(); _iter1122 != this->leaderRewards.end(); ++_iter1122)
      {
        xfer += (*_iter1122).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildLeaderboardRibbon &a, GuildLeaderboardRibbon &b) {
  using ::std::swap;
  swap(a.leaderboardId, b.leaderboardId);
  swap(a.leaderboardRibbonId, b.leaderboardRibbonId);
  swap(a.display, b.display);
  swap(a.positionStart, b.positionStart);
  swap(a.positionEnd, b.positionEnd);
  swap(a.trophyAssetId, b.trophyAssetId);
  swap(a.bannerAssetId, b.bannerAssetId);
  swap(a.rewardChestAsset, b.rewardChestAsset);
  swap(a.memberRewards, b.memberRewards);
  swap(a.leaderRewards, b.leaderRewards);
  swap(a.__isset, b.__isset);
}

GuildLeaderboardRibbon::GuildLeaderboardRibbon(const GuildLeaderboardRibbon& other1123) {
  leaderboardId = other1123.leaderboardId;
  leaderboardRibbonId = other1123.leaderboardRibbonId;
  display = other1123.display;
  positionStart = other1123.positionStart;
  positionEnd = other1123.positionEnd;
  trophyAssetId = other1123.trophyAssetId;
  bannerAssetId = other1123.bannerAssetId;
  rewardChestAsset = other1123.rewardChestAsset;
  memberRewards = other1123.memberRewards;
  leaderRewards = other1123.leaderRewards;
  __isset = other1123.__isset;
}
GuildLeaderboardRibbon& GuildLeaderboardRibbon::operator=(const GuildLeaderboardRibbon& other1124) {
  leaderboardId = other1124.leaderboardId;
  leaderboardRibbonId = other1124.leaderboardRibbonId;
  display = other1124.display;
  positionStart = other1124.positionStart;
  positionEnd = other1124.positionEnd;
  trophyAssetId = other1124.trophyAssetId;
  bannerAssetId = other1124.bannerAssetId;
  rewardChestAsset = other1124.rewardChestAsset;
  memberRewards = other1124.memberRewards;
  leaderRewards = other1124.leaderRewards;
  __isset = other1124.__isset;
  return *this;
}
void GuildLeaderboardRibbon::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildLeaderboardRibbon(";
  out << "leaderboardId=" << to_string(leaderboardId);
  out << ", " << "leaderboardRibbonId=" << to_string(leaderboardRibbonId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "positionStart=" << to_string(positionStart);
  out << ", " << "positionEnd=" << to_string(positionEnd);
  out << ", " << "trophyAssetId=" << to_string(trophyAssetId);
  out << ", " << "bannerAssetId=" << to_string(bannerAssetId);
  out << ", " << "rewardChestAsset=" << to_string(rewardChestAsset);
  out << ", " << "memberRewards="; (__isset.memberRewards ? (out << to_string(memberRewards)) : (out << "<null>"));
  out << ", " << "leaderRewards="; (__isset.leaderRewards ? (out << to_string(leaderRewards)) : (out << "<null>"));
  out << ")";
}


GuildLeaderboard::~GuildLeaderboard() throw() {
}


void GuildLeaderboard::__set_leaderboardId(const GuildLeaderboardID& val) {
  this->leaderboardId = val;
}

void GuildLeaderboard::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void GuildLeaderboard::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
}

void GuildLeaderboard::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void GuildLeaderboard::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
}

void GuildLeaderboard::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}

void GuildLeaderboard::__set_pointCurrencyId(const CurrencyID& val) {
  this->pointCurrencyId = val;
}

void GuildLeaderboard::__set_display(const LocalizedString& val) {
  this->display = val;
}

void GuildLeaderboard::__set_rewardDisplay(const LocalizedString& val) {
  this->rewardDisplay = val;
__isset.rewardDisplay = true;
}

void GuildLeaderboard::__set_previewText(const LocalizedString& val) {
  this->previewText = val;
}

void GuildLeaderboard::__set_recapText(const LocalizedString& val) {
  this->recapText = val;
}

void GuildLeaderboard::__set_joinText(const LocalizedString& val) {
  this->joinText = val;
}

void GuildLeaderboard::__set_ribbons(const std::map<GuildLeaderboardRibbonID, GuildLeaderboardRibbon> & val) {
  this->ribbons = val;
__isset.ribbons = true;
}

void GuildLeaderboard::__set_rewardMessageId(const RewardMessageID& val) {
  this->rewardMessageId = val;
}

void GuildLeaderboard::__set_leaderRewardMessageId(const RewardMessageID& val) {
  this->leaderRewardMessageId = val;
}

void GuildLeaderboard::__set_leaderboardTemplateId(const LeaderboardTemplateID& val) {
  this->leaderboardTemplateId = val;
}

void GuildLeaderboard::__set_tabIcon(const AssetPath& val) {
  this->tabIcon = val;
}

void GuildLeaderboard::__set_topRewardBannerBg(const AssetPath& val) {
  this->topRewardBannerBg = val;
}

void GuildLeaderboard::__set_myTeamMemberDisplay(const LocalizedString& val) {
  this->myTeamMemberDisplay = val;
__isset.myTeamMemberDisplay = true;
}

void GuildLeaderboard::__set_myTeamMemberTabIcon(const AssetPath& val) {
  this->myTeamMemberTabIcon = val;
__isset.myTeamMemberTabIcon = true;
}
std::ostream& operator<<(std::ostream& out, const GuildLeaderboard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildLeaderboard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_leaderboardId = false;
  bool isset_eventIds = false;
  bool isset_eventPhases = false;
  bool isset_showRank = false;
  bool isset_unlockRank = false;
  bool isset_hideRank = false;
  bool isset_pointCurrencyId = false;
  bool isset_display = false;
  bool isset_previewText = false;
  bool isset_recapText = false;
  bool isset_joinText = false;
  bool isset_rewardMessageId = false;
  bool isset_leaderRewardMessageId = false;
  bool isset_leaderboardTemplateId = false;
  bool isset_tabIcon = false;
  bool isset_topRewardBannerBg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardId);
          isset_leaderboardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size1125;
            ::apache::thrift::protocol::TType _etype1128;
            xfer += iprot->readListBegin(_etype1128, _size1125);
            this->eventIds.resize(_size1125);
            uint32_t _i1129;
            for (_i1129 = 0; _i1129 < _size1125; ++_i1129)
            {
              xfer += iprot->readString(this->eventIds[_i1129]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1130;
          xfer += iprot->readI32(ecast1130);
          this->eventPhases = (EventPhases::type)ecast1130;
          isset_eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          isset_unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pointCurrencyId);
          isset_pointCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rewardDisplay.read(iprot);
          this->__isset.rewardDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->previewText.read(iprot);
          isset_previewText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recapText.read(iprot);
          isset_recapText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->joinText.read(iprot);
          isset_joinText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->ribbons.clear();
            uint32_t _size1131;
            ::apache::thrift::protocol::TType _ktype1132;
            ::apache::thrift::protocol::TType _vtype1133;
            xfer += iprot->readMapBegin(_ktype1132, _vtype1133, _size1131);
            uint32_t _i1135;
            for (_i1135 = 0; _i1135 < _size1131; ++_i1135)
            {
              GuildLeaderboardRibbonID _key1136;
              xfer += iprot->readString(_key1136);
              GuildLeaderboardRibbon& _val1137 = this->ribbons[_key1136];
              xfer += _val1137.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.ribbons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardMessageId);
          isset_rewardMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderRewardMessageId);
          isset_leaderRewardMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderboardTemplateId);
          isset_leaderboardTemplateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabIcon);
          isset_tabIcon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topRewardBannerBg);
          isset_topRewardBannerBg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myTeamMemberDisplay.read(iprot);
          this->__isset.myTeamMemberDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->myTeamMemberTabIcon);
          this->__isset.myTeamMemberTabIcon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_leaderboardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventPhases)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pointCurrencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_previewText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recapText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_joinText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderRewardMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardTemplateId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tabIcon)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topRewardBannerBg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildLeaderboard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildLeaderboard");

  xfer += oprot->writeFieldBegin("leaderboardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->leaderboardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter1138;
    for (_iter1138 = this->eventIds.begin(); _iter1138 != this->eventIds.end(); ++_iter1138)
    {
      xfer += oprot->writeString((*_iter1138));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->eventPhases);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->unlockRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointCurrencyId", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->pointCurrencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 29);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rewardDisplay) {
    xfer += oprot->writeFieldBegin("rewardDisplay", ::apache::thrift::protocol::T_STRUCT, 30);
    xfer += this->rewardDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("previewText", ::apache::thrift::protocol::T_STRUCT, 44);
  xfer += this->previewText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recapText", ::apache::thrift::protocol::T_STRUCT, 45);
  xfer += this->recapText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("joinText", ::apache::thrift::protocol::T_STRUCT, 46);
  xfer += this->joinText.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ribbons) {
    xfer += oprot->writeFieldBegin("ribbons", ::apache::thrift::protocol::T_MAP, 50);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ribbons.size()));
      std::map<GuildLeaderboardRibbonID, GuildLeaderboardRibbon> ::const_iterator _iter1139;
      for (_iter1139 = this->ribbons.begin(); _iter1139 != this->ribbons.end(); ++_iter1139)
      {
        xfer += oprot->writeString(_iter1139->first);
        xfer += _iter1139->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("rewardMessageId", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->rewardMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderRewardMessageId", ::apache::thrift::protocol::T_STRING, 61);
  xfer += oprot->writeString(this->leaderRewardMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardTemplateId", ::apache::thrift::protocol::T_STRING, 70);
  xfer += oprot->writeString(this->leaderboardTemplateId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tabIcon", ::apache::thrift::protocol::T_STRING, 71);
  xfer += oprot->writeString(this->tabIcon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topRewardBannerBg", ::apache::thrift::protocol::T_STRING, 72);
  xfer += oprot->writeString(this->topRewardBannerBg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.myTeamMemberDisplay) {
    xfer += oprot->writeFieldBegin("myTeamMemberDisplay", ::apache::thrift::protocol::T_STRUCT, 80);
    xfer += this->myTeamMemberDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.myTeamMemberTabIcon) {
    xfer += oprot->writeFieldBegin("myTeamMemberTabIcon", ::apache::thrift::protocol::T_STRING, 81);
    xfer += oprot->writeString(this->myTeamMemberTabIcon);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildLeaderboard &a, GuildLeaderboard &b) {
  using ::std::swap;
  swap(a.leaderboardId, b.leaderboardId);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.showRank, b.showRank);
  swap(a.unlockRank, b.unlockRank);
  swap(a.hideRank, b.hideRank);
  swap(a.pointCurrencyId, b.pointCurrencyId);
  swap(a.display, b.display);
  swap(a.rewardDisplay, b.rewardDisplay);
  swap(a.previewText, b.previewText);
  swap(a.recapText, b.recapText);
  swap(a.joinText, b.joinText);
  swap(a.ribbons, b.ribbons);
  swap(a.rewardMessageId, b.rewardMessageId);
  swap(a.leaderRewardMessageId, b.leaderRewardMessageId);
  swap(a.leaderboardTemplateId, b.leaderboardTemplateId);
  swap(a.tabIcon, b.tabIcon);
  swap(a.topRewardBannerBg, b.topRewardBannerBg);
  swap(a.myTeamMemberDisplay, b.myTeamMemberDisplay);
  swap(a.myTeamMemberTabIcon, b.myTeamMemberTabIcon);
  swap(a.__isset, b.__isset);
}

GuildLeaderboard::GuildLeaderboard(const GuildLeaderboard& other1140) {
  leaderboardId = other1140.leaderboardId;
  eventIds = other1140.eventIds;
  eventPhases = other1140.eventPhases;
  showRank = other1140.showRank;
  unlockRank = other1140.unlockRank;
  hideRank = other1140.hideRank;
  pointCurrencyId = other1140.pointCurrencyId;
  display = other1140.display;
  rewardDisplay = other1140.rewardDisplay;
  previewText = other1140.previewText;
  recapText = other1140.recapText;
  joinText = other1140.joinText;
  ribbons = other1140.ribbons;
  rewardMessageId = other1140.rewardMessageId;
  leaderRewardMessageId = other1140.leaderRewardMessageId;
  leaderboardTemplateId = other1140.leaderboardTemplateId;
  tabIcon = other1140.tabIcon;
  topRewardBannerBg = other1140.topRewardBannerBg;
  myTeamMemberDisplay = other1140.myTeamMemberDisplay;
  myTeamMemberTabIcon = other1140.myTeamMemberTabIcon;
  __isset = other1140.__isset;
}
GuildLeaderboard& GuildLeaderboard::operator=(const GuildLeaderboard& other1141) {
  leaderboardId = other1141.leaderboardId;
  eventIds = other1141.eventIds;
  eventPhases = other1141.eventPhases;
  showRank = other1141.showRank;
  unlockRank = other1141.unlockRank;
  hideRank = other1141.hideRank;
  pointCurrencyId = other1141.pointCurrencyId;
  display = other1141.display;
  rewardDisplay = other1141.rewardDisplay;
  previewText = other1141.previewText;
  recapText = other1141.recapText;
  joinText = other1141.joinText;
  ribbons = other1141.ribbons;
  rewardMessageId = other1141.rewardMessageId;
  leaderRewardMessageId = other1141.leaderRewardMessageId;
  leaderboardTemplateId = other1141.leaderboardTemplateId;
  tabIcon = other1141.tabIcon;
  topRewardBannerBg = other1141.topRewardBannerBg;
  myTeamMemberDisplay = other1141.myTeamMemberDisplay;
  myTeamMemberTabIcon = other1141.myTeamMemberTabIcon;
  __isset = other1141.__isset;
  return *this;
}
void GuildLeaderboard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildLeaderboard(";
  out << "leaderboardId=" << to_string(leaderboardId);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "eventPhases=" << to_string(eventPhases);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "unlockRank=" << to_string(unlockRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ", " << "pointCurrencyId=" << to_string(pointCurrencyId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "rewardDisplay="; (__isset.rewardDisplay ? (out << to_string(rewardDisplay)) : (out << "<null>"));
  out << ", " << "previewText=" << to_string(previewText);
  out << ", " << "recapText=" << to_string(recapText);
  out << ", " << "joinText=" << to_string(joinText);
  out << ", " << "ribbons="; (__isset.ribbons ? (out << to_string(ribbons)) : (out << "<null>"));
  out << ", " << "rewardMessageId=" << to_string(rewardMessageId);
  out << ", " << "leaderRewardMessageId=" << to_string(leaderRewardMessageId);
  out << ", " << "leaderboardTemplateId=" << to_string(leaderboardTemplateId);
  out << ", " << "tabIcon=" << to_string(tabIcon);
  out << ", " << "topRewardBannerBg=" << to_string(topRewardBannerBg);
  out << ", " << "myTeamMemberDisplay="; (__isset.myTeamMemberDisplay ? (out << to_string(myTeamMemberDisplay)) : (out << "<null>"));
  out << ", " << "myTeamMemberTabIcon="; (__isset.myTeamMemberTabIcon ? (out << to_string(myTeamMemberTabIcon)) : (out << "<null>"));
  out << ")";
}


GuildMemberTypeDisplay::~GuildMemberTypeDisplay() throw() {
}


void GuildMemberTypeDisplay::__set_guildMemberType(const GuildMemberType::type val) {
  this->guildMemberType = val;
}

void GuildMemberTypeDisplay::__set_display(const LocalizedString& val) {
  this->display = val;
}

void GuildMemberTypeDisplay::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void GuildMemberTypeDisplay::__set_displaySingular(const LocalizedString& val) {
  this->displaySingular = val;
__isset.displaySingular = true;
}

void GuildMemberTypeDisplay::__set_iconImagePath(const std::string& val) {
  this->iconImagePath = val;
}

void GuildMemberTypeDisplay::__set_promoteFormat(const LocalizedString& val) {
  this->promoteFormat = val;
__isset.promoteFormat = true;
}

void GuildMemberTypeDisplay::__set_demoteFormat(const LocalizedString& val) {
  this->demoteFormat = val;
__isset.demoteFormat = true;
}

void GuildMemberTypeDisplay::__set_kickMemberFormat(const LocalizedString& val) {
  this->kickMemberFormat = val;
__isset.kickMemberFormat = true;
}

void GuildMemberTypeDisplay::__set_makeLeaderFormat(const LocalizedString& val) {
  this->makeLeaderFormat = val;
__isset.makeLeaderFormat = true;
}
std::ostream& operator<<(std::ostream& out, const GuildMemberTypeDisplay& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildMemberTypeDisplay::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guildMemberType = false;
  bool isset_display = false;
  bool isset_displayOrder = false;
  bool isset_iconImagePath = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1142;
          xfer += iprot->readI32(ecast1142);
          this->guildMemberType = (GuildMemberType::type)ecast1142;
          isset_guildMemberType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->displaySingular.read(iprot);
          this->__isset.displaySingular = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconImagePath);
          isset_iconImagePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->promoteFormat.read(iprot);
          this->__isset.promoteFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->demoteFormat.read(iprot);
          this->__isset.demoteFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->kickMemberFormat.read(iprot);
          this->__isset.kickMemberFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->makeLeaderFormat.read(iprot);
          this->__isset.makeLeaderFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guildMemberType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_iconImagePath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildMemberTypeDisplay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildMemberTypeDisplay");

  xfer += oprot->writeFieldBegin("guildMemberType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->guildMemberType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.displaySingular) {
    xfer += oprot->writeFieldBegin("displaySingular", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->displaySingular.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("iconImagePath", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->iconImagePath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.promoteFormat) {
    xfer += oprot->writeFieldBegin("promoteFormat", ::apache::thrift::protocol::T_STRUCT, 50);
    xfer += this->promoteFormat.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.demoteFormat) {
    xfer += oprot->writeFieldBegin("demoteFormat", ::apache::thrift::protocol::T_STRUCT, 51);
    xfer += this->demoteFormat.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kickMemberFormat) {
    xfer += oprot->writeFieldBegin("kickMemberFormat", ::apache::thrift::protocol::T_STRUCT, 52);
    xfer += this->kickMemberFormat.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.makeLeaderFormat) {
    xfer += oprot->writeFieldBegin("makeLeaderFormat", ::apache::thrift::protocol::T_STRUCT, 53);
    xfer += this->makeLeaderFormat.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildMemberTypeDisplay &a, GuildMemberTypeDisplay &b) {
  using ::std::swap;
  swap(a.guildMemberType, b.guildMemberType);
  swap(a.display, b.display);
  swap(a.displayOrder, b.displayOrder);
  swap(a.displaySingular, b.displaySingular);
  swap(a.iconImagePath, b.iconImagePath);
  swap(a.promoteFormat, b.promoteFormat);
  swap(a.demoteFormat, b.demoteFormat);
  swap(a.kickMemberFormat, b.kickMemberFormat);
  swap(a.makeLeaderFormat, b.makeLeaderFormat);
  swap(a.__isset, b.__isset);
}

GuildMemberTypeDisplay::GuildMemberTypeDisplay(const GuildMemberTypeDisplay& other1143) {
  guildMemberType = other1143.guildMemberType;
  display = other1143.display;
  displayOrder = other1143.displayOrder;
  displaySingular = other1143.displaySingular;
  iconImagePath = other1143.iconImagePath;
  promoteFormat = other1143.promoteFormat;
  demoteFormat = other1143.demoteFormat;
  kickMemberFormat = other1143.kickMemberFormat;
  makeLeaderFormat = other1143.makeLeaderFormat;
  __isset = other1143.__isset;
}
GuildMemberTypeDisplay& GuildMemberTypeDisplay::operator=(const GuildMemberTypeDisplay& other1144) {
  guildMemberType = other1144.guildMemberType;
  display = other1144.display;
  displayOrder = other1144.displayOrder;
  displaySingular = other1144.displaySingular;
  iconImagePath = other1144.iconImagePath;
  promoteFormat = other1144.promoteFormat;
  demoteFormat = other1144.demoteFormat;
  kickMemberFormat = other1144.kickMemberFormat;
  makeLeaderFormat = other1144.makeLeaderFormat;
  __isset = other1144.__isset;
  return *this;
}
void GuildMemberTypeDisplay::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildMemberTypeDisplay(";
  out << "guildMemberType=" << to_string(guildMemberType);
  out << ", " << "display=" << to_string(display);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "displaySingular="; (__isset.displaySingular ? (out << to_string(displaySingular)) : (out << "<null>"));
  out << ", " << "iconImagePath=" << to_string(iconImagePath);
  out << ", " << "promoteFormat="; (__isset.promoteFormat ? (out << to_string(promoteFormat)) : (out << "<null>"));
  out << ", " << "demoteFormat="; (__isset.demoteFormat ? (out << to_string(demoteFormat)) : (out << "<null>"));
  out << ", " << "kickMemberFormat="; (__isset.kickMemberFormat ? (out << to_string(kickMemberFormat)) : (out << "<null>"));
  out << ", " << "makeLeaderFormat="; (__isset.makeLeaderFormat ? (out << to_string(makeLeaderFormat)) : (out << "<null>"));
  out << ")";
}


GuildJoinTypeDisplay::~GuildJoinTypeDisplay() throw() {
}


void GuildJoinTypeDisplay::__set_guildJoinType(const GuildJoinType::type val) {
  this->guildJoinType = val;
}

void GuildJoinTypeDisplay::__set_display(const LocalizedString& val) {
  this->display = val;
}

void GuildJoinTypeDisplay::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void GuildJoinTypeDisplay::__set_displayA(const LocalizedString& val) {
  this->displayA = val;
__isset.displayA = true;
}

void GuildJoinTypeDisplay::__set_displayB(const LocalizedString& val) {
  this->displayB = val;
__isset.displayB = true;
}
std::ostream& operator<<(std::ostream& out, const GuildJoinTypeDisplay& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildJoinTypeDisplay::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guildJoinType = false;
  bool isset_display = false;
  bool isset_displayOrder = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1145;
          xfer += iprot->readI32(ecast1145);
          this->guildJoinType = (GuildJoinType::type)ecast1145;
          isset_guildJoinType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->displayA.read(iprot);
          this->__isset.displayA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->displayB.read(iprot);
          this->__isset.displayB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guildJoinType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildJoinTypeDisplay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildJoinTypeDisplay");

  xfer += oprot->writeFieldBegin("guildJoinType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->guildJoinType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.displayA) {
    xfer += oprot->writeFieldBegin("displayA", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->displayA.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.displayB) {
    xfer += oprot->writeFieldBegin("displayB", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->displayB.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildJoinTypeDisplay &a, GuildJoinTypeDisplay &b) {
  using ::std::swap;
  swap(a.guildJoinType, b.guildJoinType);
  swap(a.display, b.display);
  swap(a.displayOrder, b.displayOrder);
  swap(a.displayA, b.displayA);
  swap(a.displayB, b.displayB);
  swap(a.__isset, b.__isset);
}

GuildJoinTypeDisplay::GuildJoinTypeDisplay(const GuildJoinTypeDisplay& other1146) {
  guildJoinType = other1146.guildJoinType;
  display = other1146.display;
  displayOrder = other1146.displayOrder;
  displayA = other1146.displayA;
  displayB = other1146.displayB;
  __isset = other1146.__isset;
}
GuildJoinTypeDisplay& GuildJoinTypeDisplay::operator=(const GuildJoinTypeDisplay& other1147) {
  guildJoinType = other1147.guildJoinType;
  display = other1147.display;
  displayOrder = other1147.displayOrder;
  displayA = other1147.displayA;
  displayB = other1147.displayB;
  __isset = other1147.__isset;
  return *this;
}
void GuildJoinTypeDisplay::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildJoinTypeDisplay(";
  out << "guildJoinType=" << to_string(guildJoinType);
  out << ", " << "display=" << to_string(display);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "displayA="; (__isset.displayA ? (out << to_string(displayA)) : (out << "<null>"));
  out << ", " << "displayB="; (__isset.displayB ? (out << to_string(displayB)) : (out << "<null>"));
  out << ")";
}


GuildSettings::~GuildSettings() throw() {
}


void GuildSettings::__set_maxMemberCount(const int32_t val) {
  this->maxMemberCount = val;
}

void GuildSettings::__set_maxChatHistory(const int32_t val) {
  this->maxChatHistory = val;
}

void GuildSettings::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
}

void GuildSettings::__set_createRank(const int32_t val) {
  this->createRank = val;
}

void GuildSettings::__set_guildLeaderType(const GuildMemberType::type val) {
  this->guildLeaderType = val;
}

void GuildSettings::__set_guildCoLeaderType(const GuildMemberType::type val) {
  this->guildCoLeaderType = val;
}

void GuildSettings::__set_maxInvitations(const int32_t val) {
  this->maxInvitations = val;
}

void GuildSettings::__set_maxDisplayLength(const int32_t val) {
  this->maxDisplayLength = val;
}

void GuildSettings::__set_maxDisplayTagLength(const int32_t val) {
  this->maxDisplayTagLength = val;
}

void GuildSettings::__set_maxDescriptionLength(const int32_t val) {
  this->maxDescriptionLength = val;
}

void GuildSettings::__set_minDisplayLength(const int32_t val) {
  this->minDisplayLength = val;
}

void GuildSettings::__set_minDisplayTagLength(const int32_t val) {
  this->minDisplayTagLength = val;
}

void GuildSettings::__set_minDescriptionLength(const int32_t val) {
  this->minDescriptionLength = val;
}

void GuildSettings::__set_onlineStatusActivityMinutes(const int32_t val) {
  this->onlineStatusActivityMinutes = val;
}

void GuildSettings::__set_maxChatDisplayHistory(const int32_t val) {
  this->maxChatDisplayHistory = val;
}

void GuildSettings::__set_chatAllowedCharacters(const std::string& val) {
  this->chatAllowedCharacters = val;
}

void GuildSettings::__set_unknownLocationId(const LocationID& val) {
  this->unknownLocationId = val;
}

void GuildSettings::__set_anyLocationId(const LocationID& val) {
  this->anyLocationId = val;
}

void GuildSettings::__set_noEmblemId(const GuildEmblemID& val) {
  this->noEmblemId = val;
}

void GuildSettings::__set_defaultFrameAssetId(const AssetID& val) {
  this->defaultFrameAssetId = val;
}

void GuildSettings::__set_noGuildDefaultFrameAssetId(const AssetID& val) {
  this->noGuildDefaultFrameAssetId = val;
}

void GuildSettings::__set_suggestTargetGuildCount(const int32_t val) {
  this->suggestTargetGuildCount = val;
}

void GuildSettings::__set_suggestBucketsPerLocation(const int32_t val) {
  this->suggestBucketsPerLocation = val;
}

void GuildSettings::__set_suggestOverfetchMultiplier(const double val) {
  this->suggestOverfetchMultiplier = val;
}

void GuildSettings::__set_suggestDeadGuildInactivityMinutes(const int32_t val) {
  this->suggestDeadGuildInactivityMinutes = val;
}

void GuildSettings::__set_suggestAutoJoinRatio(const double val) {
  this->suggestAutoJoinRatio = val;
}

void GuildSettings::__set_promotionTokenCurrencyID(const CurrencyID& val) {
  this->promotionTokenCurrencyID = val;
}

void GuildSettings::__set_demotionTokenCurrencyID(const CurrencyID& val) {
  this->demotionTokenCurrencyID = val;
}

void GuildSettings::__set_leaderTokenCurrencyID(const CurrencyID& val) {
  this->leaderTokenCurrencyID = val;
}

void GuildSettings::__set_canSendGuildInvites(const std::vector<GuildMemberType::type> & val) {
  this->canSendGuildInvites = val;
}

void GuildSettings::__set_joinInvitationDefault(const LocalizedString& val) {
  this->joinInvitationDefault = val;
}

void GuildSettings::__set_joinApplicationDefault(const LocalizedString& val) {
  this->joinApplicationDefault = val;
}

void GuildSettings::__set_applicantAcceptedMessageTitle(const LocalizedString& val) {
  this->applicantAcceptedMessageTitle = val;
}

void GuildSettings::__set_applicantRejectedMessageTitle(const LocalizedString& val) {
  this->applicantRejectedMessageTitle = val;
}

void GuildSettings::__set_cannotSendGuildInvitesText(const LocalizedString& val) {
  this->cannotSendGuildInvitesText = val;
}

void GuildSettings::__set_cannotJoinFullGuildText(const LocalizedString& val) {
  this->cannotJoinFullGuildText = val;
__isset.cannotJoinFullGuildText = true;
}

void GuildSettings::__set_guildDisplayAndTagTakenText(const LocalizedString& val) {
  this->guildDisplayAndTagTakenText = val;
__isset.guildDisplayAndTagTakenText = true;
}

void GuildSettings::__set_guildNameTakenText(const LocalizedString& val) {
  this->guildNameTakenText = val;
__isset.guildNameTakenText = true;
}

void GuildSettings::__set_guildTagTakenText(const LocalizedString& val) {
  this->guildTagTakenText = val;
__isset.guildTagTakenText = true;
}

void GuildSettings::__set_guildDeletedText(const LocalizedString& val) {
  this->guildDeletedText = val;
__isset.guildDeletedText = true;
}

void GuildSettings::__set_guildErrorText(const LocalizedString& val) {
  this->guildErrorText = val;
__isset.guildErrorText = true;
}

void GuildSettings::__set_askForItemsSecondsTTL(const int32_t val) {
  this->askForItemsSecondsTTL = val;
__isset.askForItemsSecondsTTL = true;
}

void GuildSettings::__set_guildHallBuildingId(const BuildingID& val) {
  this->guildHallBuildingId = val;
}
std::ostream& operator<<(std::ostream& out, const GuildSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_maxMemberCount = false;
  bool isset_maxChatHistory = false;
  bool isset_unlockRank = false;
  bool isset_createRank = false;
  bool isset_guildLeaderType = false;
  bool isset_guildCoLeaderType = false;
  bool isset_maxInvitations = false;
  bool isset_maxDisplayLength = false;
  bool isset_maxDisplayTagLength = false;
  bool isset_maxDescriptionLength = false;
  bool isset_minDisplayLength = false;
  bool isset_minDisplayTagLength = false;
  bool isset_minDescriptionLength = false;
  bool isset_onlineStatusActivityMinutes = false;
  bool isset_maxChatDisplayHistory = false;
  bool isset_chatAllowedCharacters = false;
  bool isset_unknownLocationId = false;
  bool isset_anyLocationId = false;
  bool isset_noEmblemId = false;
  bool isset_defaultFrameAssetId = false;
  bool isset_noGuildDefaultFrameAssetId = false;
  bool isset_suggestTargetGuildCount = false;
  bool isset_suggestBucketsPerLocation = false;
  bool isset_suggestOverfetchMultiplier = false;
  bool isset_suggestDeadGuildInactivityMinutes = false;
  bool isset_suggestAutoJoinRatio = false;
  bool isset_promotionTokenCurrencyID = false;
  bool isset_demotionTokenCurrencyID = false;
  bool isset_leaderTokenCurrencyID = false;
  bool isset_canSendGuildInvites = false;
  bool isset_joinInvitationDefault = false;
  bool isset_joinApplicationDefault = false;
  bool isset_applicantAcceptedMessageTitle = false;
  bool isset_applicantRejectedMessageTitle = false;
  bool isset_cannotSendGuildInvitesText = false;
  bool isset_guildHallBuildingId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxMemberCount);
          isset_maxMemberCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxChatHistory);
          isset_maxChatHistory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          isset_unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createRank);
          isset_createRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1148;
          xfer += iprot->readI32(ecast1148);
          this->guildLeaderType = (GuildMemberType::type)ecast1148;
          isset_guildLeaderType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1149;
          xfer += iprot->readI32(ecast1149);
          this->guildCoLeaderType = (GuildMemberType::type)ecast1149;
          isset_guildCoLeaderType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxInvitations);
          isset_maxInvitations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxDisplayLength);
          isset_maxDisplayLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxDisplayTagLength);
          isset_maxDisplayTagLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxDescriptionLength);
          isset_maxDescriptionLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minDisplayLength);
          isset_minDisplayLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minDisplayTagLength);
          isset_minDisplayTagLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minDescriptionLength);
          isset_minDescriptionLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->onlineStatusActivityMinutes);
          isset_onlineStatusActivityMinutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxChatDisplayHistory);
          isset_maxChatDisplayHistory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatAllowedCharacters);
          isset_chatAllowedCharacters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unknownLocationId);
          isset_unknownLocationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->anyLocationId);
          isset_anyLocationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noEmblemId);
          isset_noEmblemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultFrameAssetId);
          isset_defaultFrameAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noGuildDefaultFrameAssetId);
          isset_noGuildDefaultFrameAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->suggestTargetGuildCount);
          isset_suggestTargetGuildCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->suggestBucketsPerLocation);
          isset_suggestBucketsPerLocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->suggestOverfetchMultiplier);
          isset_suggestOverfetchMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->suggestDeadGuildInactivityMinutes);
          isset_suggestDeadGuildInactivityMinutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->suggestAutoJoinRatio);
          isset_suggestAutoJoinRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->promotionTokenCurrencyID);
          isset_promotionTokenCurrencyID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->demotionTokenCurrencyID);
          isset_demotionTokenCurrencyID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderTokenCurrencyID);
          isset_leaderTokenCurrencyID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->canSendGuildInvites.clear();
            uint32_t _size1150;
            ::apache::thrift::protocol::TType _etype1153;
            xfer += iprot->readListBegin(_etype1153, _size1150);
            this->canSendGuildInvites.resize(_size1150);
            uint32_t _i1154;
            for (_i1154 = 0; _i1154 < _size1150; ++_i1154)
            {
              int32_t ecast1155;
              xfer += iprot->readI32(ecast1155);
              this->canSendGuildInvites[_i1154] = (GuildMemberType::type)ecast1155;
            }
            xfer += iprot->readListEnd();
          }
          isset_canSendGuildInvites = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->joinInvitationDefault.read(iprot);
          isset_joinInvitationDefault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 91:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->joinApplicationDefault.read(iprot);
          isset_joinApplicationDefault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 92:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicantAcceptedMessageTitle.read(iprot);
          isset_applicantAcceptedMessageTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 93:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicantRejectedMessageTitle.read(iprot);
          isset_applicantRejectedMessageTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 94:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cannotSendGuildInvitesText.read(iprot);
          isset_cannotSendGuildInvitesText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cannotJoinFullGuildText.read(iprot);
          this->__isset.cannotJoinFullGuildText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 96:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->guildDisplayAndTagTakenText.read(iprot);
          this->__isset.guildDisplayAndTagTakenText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->guildNameTakenText.read(iprot);
          this->__isset.guildNameTakenText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 98:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->guildTagTakenText.read(iprot);
          this->__isset.guildTagTakenText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->guildDeletedText.read(iprot);
          this->__isset.guildDeletedText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->guildErrorText.read(iprot);
          this->__isset.guildErrorText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->askForItemsSecondsTTL);
          this->__isset.askForItemsSecondsTTL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 210:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guildHallBuildingId);
          isset_guildHallBuildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_maxMemberCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxChatHistory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_createRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildLeaderType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildCoLeaderType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxInvitations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxDisplayLength)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxDisplayTagLength)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxDescriptionLength)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minDisplayLength)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minDisplayTagLength)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minDescriptionLength)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_onlineStatusActivityMinutes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxChatDisplayHistory)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_chatAllowedCharacters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unknownLocationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_anyLocationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noEmblemId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_defaultFrameAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_noGuildDefaultFrameAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_suggestTargetGuildCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_suggestBucketsPerLocation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_suggestOverfetchMultiplier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_suggestDeadGuildInactivityMinutes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_suggestAutoJoinRatio)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_promotionTokenCurrencyID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_demotionTokenCurrencyID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderTokenCurrencyID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_canSendGuildInvites)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_joinInvitationDefault)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_joinApplicationDefault)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicantAcceptedMessageTitle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicantRejectedMessageTitle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cannotSendGuildInvitesText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildHallBuildingId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildSettings");

  xfer += oprot->writeFieldBegin("maxMemberCount", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->maxMemberCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxChatHistory", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maxChatHistory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->unlockRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createRank", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->createRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildLeaderType", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32((int32_t)this->guildLeaderType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildCoLeaderType", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32((int32_t)this->guildCoLeaderType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxInvitations", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->maxInvitations);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxDisplayLength", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->maxDisplayLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxDisplayTagLength", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->maxDisplayTagLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxDescriptionLength", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->maxDescriptionLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minDisplayLength", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->minDisplayLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minDisplayTagLength", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->minDisplayTagLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minDescriptionLength", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->minDescriptionLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onlineStatusActivityMinutes", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->onlineStatusActivityMinutes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxChatDisplayHistory", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32(this->maxChatDisplayHistory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatAllowedCharacters", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->chatAllowedCharacters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unknownLocationId", ::apache::thrift::protocol::T_STRING, 40);
  xfer += oprot->writeString(this->unknownLocationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("anyLocationId", ::apache::thrift::protocol::T_STRING, 41);
  xfer += oprot->writeString(this->anyLocationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noEmblemId", ::apache::thrift::protocol::T_STRING, 42);
  xfer += oprot->writeString(this->noEmblemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defaultFrameAssetId", ::apache::thrift::protocol::T_STRING, 43);
  xfer += oprot->writeString(this->defaultFrameAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noGuildDefaultFrameAssetId", ::apache::thrift::protocol::T_STRING, 44);
  xfer += oprot->writeString(this->noGuildDefaultFrameAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("suggestTargetGuildCount", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32(this->suggestTargetGuildCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("suggestBucketsPerLocation", ::apache::thrift::protocol::T_I32, 51);
  xfer += oprot->writeI32(this->suggestBucketsPerLocation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("suggestOverfetchMultiplier", ::apache::thrift::protocol::T_DOUBLE, 52);
  xfer += oprot->writeDouble(this->suggestOverfetchMultiplier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("suggestDeadGuildInactivityMinutes", ::apache::thrift::protocol::T_I32, 53);
  xfer += oprot->writeI32(this->suggestDeadGuildInactivityMinutes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("suggestAutoJoinRatio", ::apache::thrift::protocol::T_DOUBLE, 54);
  xfer += oprot->writeDouble(this->suggestAutoJoinRatio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("promotionTokenCurrencyID", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->promotionTokenCurrencyID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demotionTokenCurrencyID", ::apache::thrift::protocol::T_STRING, 61);
  xfer += oprot->writeString(this->demotionTokenCurrencyID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderTokenCurrencyID", ::apache::thrift::protocol::T_STRING, 62);
  xfer += oprot->writeString(this->leaderTokenCurrencyID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canSendGuildInvites", ::apache::thrift::protocol::T_LIST, 63);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->canSendGuildInvites.size()));
    std::vector<GuildMemberType::type> ::const_iterator _iter1156;
    for (_iter1156 = this->canSendGuildInvites.begin(); _iter1156 != this->canSendGuildInvites.end(); ++_iter1156)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1156));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("joinInvitationDefault", ::apache::thrift::protocol::T_STRUCT, 90);
  xfer += this->joinInvitationDefault.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("joinApplicationDefault", ::apache::thrift::protocol::T_STRUCT, 91);
  xfer += this->joinApplicationDefault.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicantAcceptedMessageTitle", ::apache::thrift::protocol::T_STRUCT, 92);
  xfer += this->applicantAcceptedMessageTitle.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicantRejectedMessageTitle", ::apache::thrift::protocol::T_STRUCT, 93);
  xfer += this->applicantRejectedMessageTitle.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cannotSendGuildInvitesText", ::apache::thrift::protocol::T_STRUCT, 94);
  xfer += this->cannotSendGuildInvitesText.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.cannotJoinFullGuildText) {
    xfer += oprot->writeFieldBegin("cannotJoinFullGuildText", ::apache::thrift::protocol::T_STRUCT, 95);
    xfer += this->cannotJoinFullGuildText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildDisplayAndTagTakenText) {
    xfer += oprot->writeFieldBegin("guildDisplayAndTagTakenText", ::apache::thrift::protocol::T_STRUCT, 96);
    xfer += this->guildDisplayAndTagTakenText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildNameTakenText) {
    xfer += oprot->writeFieldBegin("guildNameTakenText", ::apache::thrift::protocol::T_STRUCT, 97);
    xfer += this->guildNameTakenText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildTagTakenText) {
    xfer += oprot->writeFieldBegin("guildTagTakenText", ::apache::thrift::protocol::T_STRUCT, 98);
    xfer += this->guildTagTakenText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildDeletedText) {
    xfer += oprot->writeFieldBegin("guildDeletedText", ::apache::thrift::protocol::T_STRUCT, 99);
    xfer += this->guildDeletedText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildErrorText) {
    xfer += oprot->writeFieldBegin("guildErrorText", ::apache::thrift::protocol::T_STRUCT, 100);
    xfer += this->guildErrorText.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.askForItemsSecondsTTL) {
    xfer += oprot->writeFieldBegin("askForItemsSecondsTTL", ::apache::thrift::protocol::T_I32, 200);
    xfer += oprot->writeI32(this->askForItemsSecondsTTL);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("guildHallBuildingId", ::apache::thrift::protocol::T_STRING, 210);
  xfer += oprot->writeString(this->guildHallBuildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildSettings &a, GuildSettings &b) {
  using ::std::swap;
  swap(a.maxMemberCount, b.maxMemberCount);
  swap(a.maxChatHistory, b.maxChatHistory);
  swap(a.unlockRank, b.unlockRank);
  swap(a.createRank, b.createRank);
  swap(a.guildLeaderType, b.guildLeaderType);
  swap(a.guildCoLeaderType, b.guildCoLeaderType);
  swap(a.maxInvitations, b.maxInvitations);
  swap(a.maxDisplayLength, b.maxDisplayLength);
  swap(a.maxDisplayTagLength, b.maxDisplayTagLength);
  swap(a.maxDescriptionLength, b.maxDescriptionLength);
  swap(a.minDisplayLength, b.minDisplayLength);
  swap(a.minDisplayTagLength, b.minDisplayTagLength);
  swap(a.minDescriptionLength, b.minDescriptionLength);
  swap(a.onlineStatusActivityMinutes, b.onlineStatusActivityMinutes);
  swap(a.maxChatDisplayHistory, b.maxChatDisplayHistory);
  swap(a.chatAllowedCharacters, b.chatAllowedCharacters);
  swap(a.unknownLocationId, b.unknownLocationId);
  swap(a.anyLocationId, b.anyLocationId);
  swap(a.noEmblemId, b.noEmblemId);
  swap(a.defaultFrameAssetId, b.defaultFrameAssetId);
  swap(a.noGuildDefaultFrameAssetId, b.noGuildDefaultFrameAssetId);
  swap(a.suggestTargetGuildCount, b.suggestTargetGuildCount);
  swap(a.suggestBucketsPerLocation, b.suggestBucketsPerLocation);
  swap(a.suggestOverfetchMultiplier, b.suggestOverfetchMultiplier);
  swap(a.suggestDeadGuildInactivityMinutes, b.suggestDeadGuildInactivityMinutes);
  swap(a.suggestAutoJoinRatio, b.suggestAutoJoinRatio);
  swap(a.promotionTokenCurrencyID, b.promotionTokenCurrencyID);
  swap(a.demotionTokenCurrencyID, b.demotionTokenCurrencyID);
  swap(a.leaderTokenCurrencyID, b.leaderTokenCurrencyID);
  swap(a.canSendGuildInvites, b.canSendGuildInvites);
  swap(a.joinInvitationDefault, b.joinInvitationDefault);
  swap(a.joinApplicationDefault, b.joinApplicationDefault);
  swap(a.applicantAcceptedMessageTitle, b.applicantAcceptedMessageTitle);
  swap(a.applicantRejectedMessageTitle, b.applicantRejectedMessageTitle);
  swap(a.cannotSendGuildInvitesText, b.cannotSendGuildInvitesText);
  swap(a.cannotJoinFullGuildText, b.cannotJoinFullGuildText);
  swap(a.guildDisplayAndTagTakenText, b.guildDisplayAndTagTakenText);
  swap(a.guildNameTakenText, b.guildNameTakenText);
  swap(a.guildTagTakenText, b.guildTagTakenText);
  swap(a.guildDeletedText, b.guildDeletedText);
  swap(a.guildErrorText, b.guildErrorText);
  swap(a.askForItemsSecondsTTL, b.askForItemsSecondsTTL);
  swap(a.guildHallBuildingId, b.guildHallBuildingId);
  swap(a.__isset, b.__isset);
}

GuildSettings::GuildSettings(const GuildSettings& other1157) {
  maxMemberCount = other1157.maxMemberCount;
  maxChatHistory = other1157.maxChatHistory;
  unlockRank = other1157.unlockRank;
  createRank = other1157.createRank;
  guildLeaderType = other1157.guildLeaderType;
  guildCoLeaderType = other1157.guildCoLeaderType;
  maxInvitations = other1157.maxInvitations;
  maxDisplayLength = other1157.maxDisplayLength;
  maxDisplayTagLength = other1157.maxDisplayTagLength;
  maxDescriptionLength = other1157.maxDescriptionLength;
  minDisplayLength = other1157.minDisplayLength;
  minDisplayTagLength = other1157.minDisplayTagLength;
  minDescriptionLength = other1157.minDescriptionLength;
  onlineStatusActivityMinutes = other1157.onlineStatusActivityMinutes;
  maxChatDisplayHistory = other1157.maxChatDisplayHistory;
  chatAllowedCharacters = other1157.chatAllowedCharacters;
  unknownLocationId = other1157.unknownLocationId;
  anyLocationId = other1157.anyLocationId;
  noEmblemId = other1157.noEmblemId;
  defaultFrameAssetId = other1157.defaultFrameAssetId;
  noGuildDefaultFrameAssetId = other1157.noGuildDefaultFrameAssetId;
  suggestTargetGuildCount = other1157.suggestTargetGuildCount;
  suggestBucketsPerLocation = other1157.suggestBucketsPerLocation;
  suggestOverfetchMultiplier = other1157.suggestOverfetchMultiplier;
  suggestDeadGuildInactivityMinutes = other1157.suggestDeadGuildInactivityMinutes;
  suggestAutoJoinRatio = other1157.suggestAutoJoinRatio;
  promotionTokenCurrencyID = other1157.promotionTokenCurrencyID;
  demotionTokenCurrencyID = other1157.demotionTokenCurrencyID;
  leaderTokenCurrencyID = other1157.leaderTokenCurrencyID;
  canSendGuildInvites = other1157.canSendGuildInvites;
  joinInvitationDefault = other1157.joinInvitationDefault;
  joinApplicationDefault = other1157.joinApplicationDefault;
  applicantAcceptedMessageTitle = other1157.applicantAcceptedMessageTitle;
  applicantRejectedMessageTitle = other1157.applicantRejectedMessageTitle;
  cannotSendGuildInvitesText = other1157.cannotSendGuildInvitesText;
  cannotJoinFullGuildText = other1157.cannotJoinFullGuildText;
  guildDisplayAndTagTakenText = other1157.guildDisplayAndTagTakenText;
  guildNameTakenText = other1157.guildNameTakenText;
  guildTagTakenText = other1157.guildTagTakenText;
  guildDeletedText = other1157.guildDeletedText;
  guildErrorText = other1157.guildErrorText;
  askForItemsSecondsTTL = other1157.askForItemsSecondsTTL;
  guildHallBuildingId = other1157.guildHallBuildingId;
  __isset = other1157.__isset;
}
GuildSettings& GuildSettings::operator=(const GuildSettings& other1158) {
  maxMemberCount = other1158.maxMemberCount;
  maxChatHistory = other1158.maxChatHistory;
  unlockRank = other1158.unlockRank;
  createRank = other1158.createRank;
  guildLeaderType = other1158.guildLeaderType;
  guildCoLeaderType = other1158.guildCoLeaderType;
  maxInvitations = other1158.maxInvitations;
  maxDisplayLength = other1158.maxDisplayLength;
  maxDisplayTagLength = other1158.maxDisplayTagLength;
  maxDescriptionLength = other1158.maxDescriptionLength;
  minDisplayLength = other1158.minDisplayLength;
  minDisplayTagLength = other1158.minDisplayTagLength;
  minDescriptionLength = other1158.minDescriptionLength;
  onlineStatusActivityMinutes = other1158.onlineStatusActivityMinutes;
  maxChatDisplayHistory = other1158.maxChatDisplayHistory;
  chatAllowedCharacters = other1158.chatAllowedCharacters;
  unknownLocationId = other1158.unknownLocationId;
  anyLocationId = other1158.anyLocationId;
  noEmblemId = other1158.noEmblemId;
  defaultFrameAssetId = other1158.defaultFrameAssetId;
  noGuildDefaultFrameAssetId = other1158.noGuildDefaultFrameAssetId;
  suggestTargetGuildCount = other1158.suggestTargetGuildCount;
  suggestBucketsPerLocation = other1158.suggestBucketsPerLocation;
  suggestOverfetchMultiplier = other1158.suggestOverfetchMultiplier;
  suggestDeadGuildInactivityMinutes = other1158.suggestDeadGuildInactivityMinutes;
  suggestAutoJoinRatio = other1158.suggestAutoJoinRatio;
  promotionTokenCurrencyID = other1158.promotionTokenCurrencyID;
  demotionTokenCurrencyID = other1158.demotionTokenCurrencyID;
  leaderTokenCurrencyID = other1158.leaderTokenCurrencyID;
  canSendGuildInvites = other1158.canSendGuildInvites;
  joinInvitationDefault = other1158.joinInvitationDefault;
  joinApplicationDefault = other1158.joinApplicationDefault;
  applicantAcceptedMessageTitle = other1158.applicantAcceptedMessageTitle;
  applicantRejectedMessageTitle = other1158.applicantRejectedMessageTitle;
  cannotSendGuildInvitesText = other1158.cannotSendGuildInvitesText;
  cannotJoinFullGuildText = other1158.cannotJoinFullGuildText;
  guildDisplayAndTagTakenText = other1158.guildDisplayAndTagTakenText;
  guildNameTakenText = other1158.guildNameTakenText;
  guildTagTakenText = other1158.guildTagTakenText;
  guildDeletedText = other1158.guildDeletedText;
  guildErrorText = other1158.guildErrorText;
  askForItemsSecondsTTL = other1158.askForItemsSecondsTTL;
  guildHallBuildingId = other1158.guildHallBuildingId;
  __isset = other1158.__isset;
  return *this;
}
void GuildSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildSettings(";
  out << "maxMemberCount=" << to_string(maxMemberCount);
  out << ", " << "maxChatHistory=" << to_string(maxChatHistory);
  out << ", " << "unlockRank=" << to_string(unlockRank);
  out << ", " << "createRank=" << to_string(createRank);
  out << ", " << "guildLeaderType=" << to_string(guildLeaderType);
  out << ", " << "guildCoLeaderType=" << to_string(guildCoLeaderType);
  out << ", " << "maxInvitations=" << to_string(maxInvitations);
  out << ", " << "maxDisplayLength=" << to_string(maxDisplayLength);
  out << ", " << "maxDisplayTagLength=" << to_string(maxDisplayTagLength);
  out << ", " << "maxDescriptionLength=" << to_string(maxDescriptionLength);
  out << ", " << "minDisplayLength=" << to_string(minDisplayLength);
  out << ", " << "minDisplayTagLength=" << to_string(minDisplayTagLength);
  out << ", " << "minDescriptionLength=" << to_string(minDescriptionLength);
  out << ", " << "onlineStatusActivityMinutes=" << to_string(onlineStatusActivityMinutes);
  out << ", " << "maxChatDisplayHistory=" << to_string(maxChatDisplayHistory);
  out << ", " << "chatAllowedCharacters=" << to_string(chatAllowedCharacters);
  out << ", " << "unknownLocationId=" << to_string(unknownLocationId);
  out << ", " << "anyLocationId=" << to_string(anyLocationId);
  out << ", " << "noEmblemId=" << to_string(noEmblemId);
  out << ", " << "defaultFrameAssetId=" << to_string(defaultFrameAssetId);
  out << ", " << "noGuildDefaultFrameAssetId=" << to_string(noGuildDefaultFrameAssetId);
  out << ", " << "suggestTargetGuildCount=" << to_string(suggestTargetGuildCount);
  out << ", " << "suggestBucketsPerLocation=" << to_string(suggestBucketsPerLocation);
  out << ", " << "suggestOverfetchMultiplier=" << to_string(suggestOverfetchMultiplier);
  out << ", " << "suggestDeadGuildInactivityMinutes=" << to_string(suggestDeadGuildInactivityMinutes);
  out << ", " << "suggestAutoJoinRatio=" << to_string(suggestAutoJoinRatio);
  out << ", " << "promotionTokenCurrencyID=" << to_string(promotionTokenCurrencyID);
  out << ", " << "demotionTokenCurrencyID=" << to_string(demotionTokenCurrencyID);
  out << ", " << "leaderTokenCurrencyID=" << to_string(leaderTokenCurrencyID);
  out << ", " << "canSendGuildInvites=" << to_string(canSendGuildInvites);
  out << ", " << "joinInvitationDefault=" << to_string(joinInvitationDefault);
  out << ", " << "joinApplicationDefault=" << to_string(joinApplicationDefault);
  out << ", " << "applicantAcceptedMessageTitle=" << to_string(applicantAcceptedMessageTitle);
  out << ", " << "applicantRejectedMessageTitle=" << to_string(applicantRejectedMessageTitle);
  out << ", " << "cannotSendGuildInvitesText=" << to_string(cannotSendGuildInvitesText);
  out << ", " << "cannotJoinFullGuildText="; (__isset.cannotJoinFullGuildText ? (out << to_string(cannotJoinFullGuildText)) : (out << "<null>"));
  out << ", " << "guildDisplayAndTagTakenText="; (__isset.guildDisplayAndTagTakenText ? (out << to_string(guildDisplayAndTagTakenText)) : (out << "<null>"));
  out << ", " << "guildNameTakenText="; (__isset.guildNameTakenText ? (out << to_string(guildNameTakenText)) : (out << "<null>"));
  out << ", " << "guildTagTakenText="; (__isset.guildTagTakenText ? (out << to_string(guildTagTakenText)) : (out << "<null>"));
  out << ", " << "guildDeletedText="; (__isset.guildDeletedText ? (out << to_string(guildDeletedText)) : (out << "<null>"));
  out << ", " << "guildErrorText="; (__isset.guildErrorText ? (out << to_string(guildErrorText)) : (out << "<null>"));
  out << ", " << "askForItemsSecondsTTL="; (__isset.askForItemsSecondsTTL ? (out << to_string(askForItemsSecondsTTL)) : (out << "<null>"));
  out << ", " << "guildHallBuildingId=" << to_string(guildHallBuildingId);
  out << ")";
}


Location::~Location() throw() {
}


void Location::__set_locationId(const LocationID& val) {
  this->locationId = val;
}

void Location::__set_display(const LocalizedString& val) {
  this->display = val;
}

void Location::__set_imageAssetId(const AssetID& val) {
  this->imageAssetId = val;
__isset.imageAssetId = true;
}

void Location::__set_imagePath(const std::string& val) {
  this->imagePath = val;
}

void Location::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void Location::__set_section(const int32_t val) {
  this->section = val;
}

void Location::__set_altLocationId(const LocationID& val) {
  this->altLocationId = val;
__isset.altLocationId = true;
}

void Location::__set_shortDisplay(const LocalizedString& val) {
  this->shortDisplay = val;
__isset.shortDisplay = true;
}

void Location::__set_hideInUi(const bool val) {
  this->hideInUi = val;
}

void Location::__set_analyticsLabel(const std::string& val) {
  this->analyticsLabel = val;
}

void Location::__set_languages(const std::vector<std::string> & val) {
  this->languages = val;
}
std::ostream& operator<<(std::ostream& out, const Location& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Location::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_locationId = false;
  bool isset_display = false;
  bool isset_imagePath = false;
  bool isset_displayOrder = false;
  bool isset_section = false;
  bool isset_hideInUi = false;
  bool isset_analyticsLabel = false;
  bool isset_languages = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationId);
          isset_locationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageAssetId);
          this->__isset.imageAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imagePath);
          isset_imagePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->section);
          isset_section = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->altLocationId);
          this->__isset.altLocationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->shortDisplay.read(iprot);
          this->__isset.shortDisplay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideInUi);
          isset_hideInUi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->analyticsLabel);
          isset_analyticsLabel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->languages.clear();
            uint32_t _size1159;
            ::apache::thrift::protocol::TType _etype1162;
            xfer += iprot->readListBegin(_etype1162, _size1159);
            this->languages.resize(_size1159);
            uint32_t _i1163;
            for (_i1163 = 0; _i1163 < _size1159; ++_i1163)
            {
              xfer += iprot->readString(this->languages[_i1163]);
            }
            xfer += iprot->readListEnd();
          }
          isset_languages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_locationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_imagePath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_section)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideInUi)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_analyticsLabel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_languages)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Location::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Location");

  xfer += oprot->writeFieldBegin("locationId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->locationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.imageAssetId) {
    xfer += oprot->writeFieldBegin("imageAssetId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->imageAssetId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("imagePath", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->imagePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("section", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->section);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.altLocationId) {
    xfer += oprot->writeFieldBegin("altLocationId", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->altLocationId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shortDisplay) {
    xfer += oprot->writeFieldBegin("shortDisplay", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->shortDisplay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("hideInUi", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->hideInUi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyticsLabel", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->analyticsLabel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languages", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->languages.size()));
    std::vector<std::string> ::const_iterator _iter1164;
    for (_iter1164 = this->languages.begin(); _iter1164 != this->languages.end(); ++_iter1164)
    {
      xfer += oprot->writeString((*_iter1164));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Location &a, Location &b) {
  using ::std::swap;
  swap(a.locationId, b.locationId);
  swap(a.display, b.display);
  swap(a.imageAssetId, b.imageAssetId);
  swap(a.imagePath, b.imagePath);
  swap(a.displayOrder, b.displayOrder);
  swap(a.section, b.section);
  swap(a.altLocationId, b.altLocationId);
  swap(a.shortDisplay, b.shortDisplay);
  swap(a.hideInUi, b.hideInUi);
  swap(a.analyticsLabel, b.analyticsLabel);
  swap(a.languages, b.languages);
  swap(a.__isset, b.__isset);
}

Location::Location(const Location& other1165) {
  locationId = other1165.locationId;
  display = other1165.display;
  imageAssetId = other1165.imageAssetId;
  imagePath = other1165.imagePath;
  displayOrder = other1165.displayOrder;
  section = other1165.section;
  altLocationId = other1165.altLocationId;
  shortDisplay = other1165.shortDisplay;
  hideInUi = other1165.hideInUi;
  analyticsLabel = other1165.analyticsLabel;
  languages = other1165.languages;
  __isset = other1165.__isset;
}
Location& Location::operator=(const Location& other1166) {
  locationId = other1166.locationId;
  display = other1166.display;
  imageAssetId = other1166.imageAssetId;
  imagePath = other1166.imagePath;
  displayOrder = other1166.displayOrder;
  section = other1166.section;
  altLocationId = other1166.altLocationId;
  shortDisplay = other1166.shortDisplay;
  hideInUi = other1166.hideInUi;
  analyticsLabel = other1166.analyticsLabel;
  languages = other1166.languages;
  __isset = other1166.__isset;
  return *this;
}
void Location::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Location(";
  out << "locationId=" << to_string(locationId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "imageAssetId="; (__isset.imageAssetId ? (out << to_string(imageAssetId)) : (out << "<null>"));
  out << ", " << "imagePath=" << to_string(imagePath);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "section=" << to_string(section);
  out << ", " << "altLocationId="; (__isset.altLocationId ? (out << to_string(altLocationId)) : (out << "<null>"));
  out << ", " << "shortDisplay="; (__isset.shortDisplay ? (out << to_string(shortDisplay)) : (out << "<null>"));
  out << ", " << "hideInUi=" << to_string(hideInUi);
  out << ", " << "analyticsLabel=" << to_string(analyticsLabel);
  out << ", " << "languages=" << to_string(languages);
  out << ")";
}


GuildEmblem::~GuildEmblem() throw() {
}


void GuildEmblem::__set_guildEmblemId(const GuildEmblemID& val) {
  this->guildEmblemId = val;
}

void GuildEmblem::__set_imagePath(const std::string& val) {
  this->imagePath = val;
}

void GuildEmblem::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void GuildEmblem::__set_hideInUi(const bool val) {
  this->hideInUi = val;
}

void GuildEmblem::__set_minGuildRank(const int32_t val) {
  this->minGuildRank = val;
__isset.minGuildRank = true;
}
std::ostream& operator<<(std::ostream& out, const GuildEmblem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildEmblem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_guildEmblemId = false;
  bool isset_imagePath = false;
  bool isset_displayOrder = false;
  bool isset_hideInUi = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guildEmblemId);
          isset_guildEmblemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imagePath);
          isset_imagePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideInUi);
          isset_hideInUi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minGuildRank);
          this->__isset.minGuildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_guildEmblemId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_imagePath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideInUi)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildEmblem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildEmblem");

  xfer += oprot->writeFieldBegin("guildEmblemId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->guildEmblemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imagePath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->imagePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideInUi", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->hideInUi);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.minGuildRank) {
    xfer += oprot->writeFieldBegin("minGuildRank", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32(this->minGuildRank);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildEmblem &a, GuildEmblem &b) {
  using ::std::swap;
  swap(a.guildEmblemId, b.guildEmblemId);
  swap(a.imagePath, b.imagePath);
  swap(a.displayOrder, b.displayOrder);
  swap(a.hideInUi, b.hideInUi);
  swap(a.minGuildRank, b.minGuildRank);
  swap(a.__isset, b.__isset);
}

GuildEmblem::GuildEmblem(const GuildEmblem& other1167) {
  guildEmblemId = other1167.guildEmblemId;
  imagePath = other1167.imagePath;
  displayOrder = other1167.displayOrder;
  hideInUi = other1167.hideInUi;
  minGuildRank = other1167.minGuildRank;
  __isset = other1167.__isset;
}
GuildEmblem& GuildEmblem::operator=(const GuildEmblem& other1168) {
  guildEmblemId = other1168.guildEmblemId;
  imagePath = other1168.imagePath;
  displayOrder = other1168.displayOrder;
  hideInUi = other1168.hideInUi;
  minGuildRank = other1168.minGuildRank;
  __isset = other1168.__isset;
  return *this;
}
void GuildEmblem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildEmblem(";
  out << "guildEmblemId=" << to_string(guildEmblemId);
  out << ", " << "imagePath=" << to_string(imagePath);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "hideInUi=" << to_string(hideInUi);
  out << ", " << "minGuildRank="; (__isset.minGuildRank ? (out << to_string(minGuildRank)) : (out << "<null>"));
  out << ")";
}


GuildBoundItem::~GuildBoundItem() throw() {
}


void GuildBoundItem::__set_itemType(const LootItemType::type val) {
  this->itemType = val;
}

void GuildBoundItem::__set_itemId(const std::string& val) {
  this->itemId = val;
}
std::ostream& operator<<(std::ostream& out, const GuildBoundItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GuildBoundItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_itemType = false;
  bool isset_itemId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1169;
          xfer += iprot->readI32(ecast1169);
          this->itemType = (LootItemType::type)ecast1169;
          isset_itemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemId);
          isset_itemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_itemType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_itemId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GuildBoundItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GuildBoundItem");

  xfer += oprot->writeFieldBegin("itemType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->itemType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->itemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GuildBoundItem &a, GuildBoundItem &b) {
  using ::std::swap;
  swap(a.itemType, b.itemType);
  swap(a.itemId, b.itemId);
}

GuildBoundItem::GuildBoundItem(const GuildBoundItem& other1170) {
  itemType = other1170.itemType;
  itemId = other1170.itemId;
}
GuildBoundItem& GuildBoundItem::operator=(const GuildBoundItem& other1171) {
  itemType = other1171.itemType;
  itemId = other1171.itemId;
  return *this;
}
void GuildBoundItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuildBoundItem(";
  out << "itemType=" << to_string(itemType);
  out << ", " << "itemId=" << to_string(itemId);
  out << ")";
}


ChatSystemMessage::~ChatSystemMessage() throw() {
}


void ChatSystemMessage::__set_chatSystemMessageId(const ChatSystemMessageID& val) {
  this->chatSystemMessageId = val;
}

void ChatSystemMessage::__set_message(const LocalizedString& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const ChatSystemMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChatSystemMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_chatSystemMessageId = false;
  bool isset_message = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatSystemMessageId);
          isset_chatSystemMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          isset_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_chatSystemMessageId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ChatSystemMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChatSystemMessage");

  xfer += oprot->writeFieldBegin("chatSystemMessageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->chatSystemMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChatSystemMessage &a, ChatSystemMessage &b) {
  using ::std::swap;
  swap(a.chatSystemMessageId, b.chatSystemMessageId);
  swap(a.message, b.message);
}

ChatSystemMessage::ChatSystemMessage(const ChatSystemMessage& other1172) {
  chatSystemMessageId = other1172.chatSystemMessageId;
  message = other1172.message;
}
ChatSystemMessage& ChatSystemMessage::operator=(const ChatSystemMessage& other1173) {
  chatSystemMessageId = other1173.chatSystemMessageId;
  message = other1173.message;
  return *this;
}
void ChatSystemMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChatSystemMessage(";
  out << "chatSystemMessageId=" << to_string(chatSystemMessageId);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


Gift::~Gift() throw() {
}


void Gift::__set_giftId(const GiftID& val) {
  this->giftId = val;
}

void Gift::__set_display(const LocalizedString& val) {
  this->display = val;
}

void Gift::__set_iconAssetId(const AssetID& val) {
  this->iconAssetId = val;
}

void Gift::__set_description(const LocalizedString& val) {
  this->description = val;
}

void Gift::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void Gift::__set_gachaRevealFXAssetId(const AssetID& val) {
  this->gachaRevealFXAssetId = val;
}

void Gift::__set_lootTableIds(const std::vector<LootTableID> & val) {
  this->lootTableIds = val;
}

void Gift::__set_lootTableSpins(const std::vector<int32_t> & val) {
  this->lootTableSpins = val;
}

void Gift::__set_openable(const bool val) {
  this->openable = val;
}

void Gift::__set_claimable(const bool val) {
  this->claimable = val;
}

void Gift::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
__isset.eventIds = true;
}

void Gift::__set_eventPhases(const EventPhases::type val) {
  this->eventPhases = val;
__isset.eventPhases = true;
}
std::ostream& operator<<(std::ostream& out, const Gift& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Gift::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_giftId = false;
  bool isset_display = false;
  bool isset_iconAssetId = false;
  bool isset_description = false;
  bool isset_displayOrder = false;
  bool isset_gachaRevealFXAssetId = false;
  bool isset_lootTableIds = false;
  bool isset_lootTableSpins = false;
  bool isset_openable = false;
  bool isset_claimable = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->giftId);
          isset_giftId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconAssetId);
          isset_iconAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          isset_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaRevealFXAssetId);
          isset_gachaRevealFXAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableIds.clear();
            uint32_t _size1174;
            ::apache::thrift::protocol::TType _etype1177;
            xfer += iprot->readListBegin(_etype1177, _size1174);
            this->lootTableIds.resize(_size1174);
            uint32_t _i1178;
            for (_i1178 = 0; _i1178 < _size1174; ++_i1178)
            {
              xfer += iprot->readString(this->lootTableIds[_i1178]);
            }
            xfer += iprot->readListEnd();
          }
          isset_lootTableIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lootTableSpins.clear();
            uint32_t _size1179;
            ::apache::thrift::protocol::TType _etype1182;
            xfer += iprot->readListBegin(_etype1182, _size1179);
            this->lootTableSpins.resize(_size1179);
            uint32_t _i1183;
            for (_i1183 = 0; _i1183 < _size1179; ++_i1183)
            {
              xfer += iprot->readI32(this->lootTableSpins[_i1183]);
            }
            xfer += iprot->readListEnd();
          }
          isset_lootTableSpins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->openable);
          isset_openable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->claimable);
          isset_claimable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size1184;
            ::apache::thrift::protocol::TType _etype1187;
            xfer += iprot->readListBegin(_etype1187, _size1184);
            this->eventIds.resize(_size1184);
            uint32_t _i1188;
            for (_i1188 = 0; _i1188 < _size1184; ++_i1188)
            {
              xfer += iprot->readString(this->eventIds[_i1188]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1189;
          xfer += iprot->readI32(ecast1189);
          this->eventPhases = (EventPhases::type)ecast1189;
          this->__isset.eventPhases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_giftId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_iconAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_description)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaRevealFXAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTableIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTableSpins)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_openable)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_claimable)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Gift::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Gift");

  xfer += oprot->writeFieldBegin("giftId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->giftId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconAssetId", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->iconAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->description.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaRevealFXAssetId", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->gachaRevealFXAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootTableIds", ::apache::thrift::protocol::T_LIST, 40);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->lootTableIds.size()));
    std::vector<LootTableID> ::const_iterator _iter1190;
    for (_iter1190 = this->lootTableIds.begin(); _iter1190 != this->lootTableIds.end(); ++_iter1190)
    {
      xfer += oprot->writeString((*_iter1190));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootTableSpins", ::apache::thrift::protocol::T_LIST, 41);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->lootTableSpins.size()));
    std::vector<int32_t> ::const_iterator _iter1191;
    for (_iter1191 = this->lootTableSpins.begin(); _iter1191 != this->lootTableSpins.end(); ++_iter1191)
    {
      xfer += oprot->writeI32((*_iter1191));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("openable", ::apache::thrift::protocol::T_BOOL, 50);
  xfer += oprot->writeBool(this->openable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("claimable", ::apache::thrift::protocol::T_BOOL, 51);
  xfer += oprot->writeBool(this->claimable);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventIds) {
    xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 70);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
      std::vector<EventID> ::const_iterator _iter1192;
      for (_iter1192 = this->eventIds.begin(); _iter1192 != this->eventIds.end(); ++_iter1192)
      {
        xfer += oprot->writeString((*_iter1192));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventPhases) {
    xfer += oprot->writeFieldBegin("eventPhases", ::apache::thrift::protocol::T_I32, 71);
    xfer += oprot->writeI32((int32_t)this->eventPhases);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Gift &a, Gift &b) {
  using ::std::swap;
  swap(a.giftId, b.giftId);
  swap(a.display, b.display);
  swap(a.iconAssetId, b.iconAssetId);
  swap(a.description, b.description);
  swap(a.displayOrder, b.displayOrder);
  swap(a.gachaRevealFXAssetId, b.gachaRevealFXAssetId);
  swap(a.lootTableIds, b.lootTableIds);
  swap(a.lootTableSpins, b.lootTableSpins);
  swap(a.openable, b.openable);
  swap(a.claimable, b.claimable);
  swap(a.eventIds, b.eventIds);
  swap(a.eventPhases, b.eventPhases);
  swap(a.__isset, b.__isset);
}

Gift::Gift(const Gift& other1193) {
  giftId = other1193.giftId;
  display = other1193.display;
  iconAssetId = other1193.iconAssetId;
  description = other1193.description;
  displayOrder = other1193.displayOrder;
  gachaRevealFXAssetId = other1193.gachaRevealFXAssetId;
  lootTableIds = other1193.lootTableIds;
  lootTableSpins = other1193.lootTableSpins;
  openable = other1193.openable;
  claimable = other1193.claimable;
  eventIds = other1193.eventIds;
  eventPhases = other1193.eventPhases;
  __isset = other1193.__isset;
}
Gift& Gift::operator=(const Gift& other1194) {
  giftId = other1194.giftId;
  display = other1194.display;
  iconAssetId = other1194.iconAssetId;
  description = other1194.description;
  displayOrder = other1194.displayOrder;
  gachaRevealFXAssetId = other1194.gachaRevealFXAssetId;
  lootTableIds = other1194.lootTableIds;
  lootTableSpins = other1194.lootTableSpins;
  openable = other1194.openable;
  claimable = other1194.claimable;
  eventIds = other1194.eventIds;
  eventPhases = other1194.eventPhases;
  __isset = other1194.__isset;
  return *this;
}
void Gift::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Gift(";
  out << "giftId=" << to_string(giftId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "iconAssetId=" << to_string(iconAssetId);
  out << ", " << "description=" << to_string(description);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "gachaRevealFXAssetId=" << to_string(gachaRevealFXAssetId);
  out << ", " << "lootTableIds=" << to_string(lootTableIds);
  out << ", " << "lootTableSpins=" << to_string(lootTableSpins);
  out << ", " << "openable=" << to_string(openable);
  out << ", " << "claimable=" << to_string(claimable);
  out << ", " << "eventIds="; (__isset.eventIds ? (out << to_string(eventIds)) : (out << "<null>"));
  out << ", " << "eventPhases="; (__isset.eventPhases ? (out << to_string(eventPhases)) : (out << "<null>"));
  out << ")";
}


GearAvailableOnGachaOfferList::~GearAvailableOnGachaOfferList() throw() {
}


void GearAvailableOnGachaOfferList::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void GearAvailableOnGachaOfferList::__set_gachaOfferIds(const std::vector<GachaOfferID> & val) {
  this->gachaOfferIds = val;
}
std::ostream& operator<<(std::ostream& out, const GearAvailableOnGachaOfferList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GearAvailableOnGachaOfferList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currencyId = false;
  bool isset_gachaOfferIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gachaOfferIds.clear();
            uint32_t _size1195;
            ::apache::thrift::protocol::TType _etype1198;
            xfer += iprot->readListBegin(_etype1198, _size1195);
            this->gachaOfferIds.resize(_size1195);
            uint32_t _i1199;
            for (_i1199 = 0; _i1199 < _size1195; ++_i1199)
            {
              xfer += iprot->readString(this->gachaOfferIds[_i1199]);
            }
            xfer += iprot->readListEnd();
          }
          isset_gachaOfferIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaOfferIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GearAvailableOnGachaOfferList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GearAvailableOnGachaOfferList");

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaOfferIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->gachaOfferIds.size()));
    std::vector<GachaOfferID> ::const_iterator _iter1200;
    for (_iter1200 = this->gachaOfferIds.begin(); _iter1200 != this->gachaOfferIds.end(); ++_iter1200)
    {
      xfer += oprot->writeString((*_iter1200));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GearAvailableOnGachaOfferList &a, GearAvailableOnGachaOfferList &b) {
  using ::std::swap;
  swap(a.currencyId, b.currencyId);
  swap(a.gachaOfferIds, b.gachaOfferIds);
}

GearAvailableOnGachaOfferList::GearAvailableOnGachaOfferList(const GearAvailableOnGachaOfferList& other1201) {
  currencyId = other1201.currencyId;
  gachaOfferIds = other1201.gachaOfferIds;
}
GearAvailableOnGachaOfferList& GearAvailableOnGachaOfferList::operator=(const GearAvailableOnGachaOfferList& other1202) {
  currencyId = other1202.currencyId;
  gachaOfferIds = other1202.gachaOfferIds;
  return *this;
}
void GearAvailableOnGachaOfferList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GearAvailableOnGachaOfferList(";
  out << "currencyId=" << to_string(currencyId);
  out << ", " << "gachaOfferIds=" << to_string(gachaOfferIds);
  out << ")";
}


GearAvailableOnCardOfferList::~GearAvailableOnCardOfferList() throw() {
}


void GearAvailableOnCardOfferList::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void GearAvailableOnCardOfferList::__set_cardOfferIds(const std::vector<CardOfferID> & val) {
  this->cardOfferIds = val;
}
std::ostream& operator<<(std::ostream& out, const GearAvailableOnCardOfferList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GearAvailableOnCardOfferList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currencyId = false;
  bool isset_cardOfferIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cardOfferIds.clear();
            uint32_t _size1203;
            ::apache::thrift::protocol::TType _etype1206;
            xfer += iprot->readListBegin(_etype1206, _size1203);
            this->cardOfferIds.resize(_size1203);
            uint32_t _i1207;
            for (_i1207 = 0; _i1207 < _size1203; ++_i1207)
            {
              xfer += iprot->readString(this->cardOfferIds[_i1207]);
            }
            xfer += iprot->readListEnd();
          }
          isset_cardOfferIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cardOfferIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GearAvailableOnCardOfferList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GearAvailableOnCardOfferList");

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cardOfferIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->cardOfferIds.size()));
    std::vector<CardOfferID> ::const_iterator _iter1208;
    for (_iter1208 = this->cardOfferIds.begin(); _iter1208 != this->cardOfferIds.end(); ++_iter1208)
    {
      xfer += oprot->writeString((*_iter1208));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GearAvailableOnCardOfferList &a, GearAvailableOnCardOfferList &b) {
  using ::std::swap;
  swap(a.currencyId, b.currencyId);
  swap(a.cardOfferIds, b.cardOfferIds);
}

GearAvailableOnCardOfferList::GearAvailableOnCardOfferList(const GearAvailableOnCardOfferList& other1209) {
  currencyId = other1209.currencyId;
  cardOfferIds = other1209.cardOfferIds;
}
GearAvailableOnCardOfferList& GearAvailableOnCardOfferList::operator=(const GearAvailableOnCardOfferList& other1210) {
  currencyId = other1210.currencyId;
  cardOfferIds = other1210.cardOfferIds;
  return *this;
}
void GearAvailableOnCardOfferList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GearAvailableOnCardOfferList(";
  out << "currencyId=" << to_string(currencyId);
  out << ", " << "cardOfferIds=" << to_string(cardOfferIds);
  out << ")";
}


GearAvailableOnLevelList::~GearAvailableOnLevelList() throw() {
}


void GearAvailableOnLevelList::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void GearAvailableOnLevelList::__set_levelIds(const std::vector<LevelID> & val) {
  this->levelIds = val;
}
std::ostream& operator<<(std::ostream& out, const GearAvailableOnLevelList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GearAvailableOnLevelList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currencyId = false;
  bool isset_levelIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->levelIds.clear();
            uint32_t _size1211;
            ::apache::thrift::protocol::TType _etype1214;
            xfer += iprot->readListBegin(_etype1214, _size1211);
            this->levelIds.resize(_size1211);
            uint32_t _i1215;
            for (_i1215 = 0; _i1215 < _size1211; ++_i1215)
            {
              xfer += iprot->readString(this->levelIds[_i1215]);
            }
            xfer += iprot->readListEnd();
          }
          isset_levelIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GearAvailableOnLevelList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GearAvailableOnLevelList");

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->levelIds.size()));
    std::vector<LevelID> ::const_iterator _iter1216;
    for (_iter1216 = this->levelIds.begin(); _iter1216 != this->levelIds.end(); ++_iter1216)
    {
      xfer += oprot->writeString((*_iter1216));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GearAvailableOnLevelList &a, GearAvailableOnLevelList &b) {
  using ::std::swap;
  swap(a.currencyId, b.currencyId);
  swap(a.levelIds, b.levelIds);
}

GearAvailableOnLevelList::GearAvailableOnLevelList(const GearAvailableOnLevelList& other1217) {
  currencyId = other1217.currencyId;
  levelIds = other1217.levelIds;
}
GearAvailableOnLevelList& GearAvailableOnLevelList::operator=(const GearAvailableOnLevelList& other1218) {
  currencyId = other1218.currencyId;
  levelIds = other1218.levelIds;
  return *this;
}
void GearAvailableOnLevelList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GearAvailableOnLevelList(";
  out << "currencyId=" << to_string(currencyId);
  out << ", " << "levelIds=" << to_string(levelIds);
  out << ")";
}


GearAvailableOnBusinessHarvestList::~GearAvailableOnBusinessHarvestList() throw() {
}


void GearAvailableOnBusinessHarvestList::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void GearAvailableOnBusinessHarvestList::__set_businessIds(const std::vector<BuildingID> & val) {
  this->businessIds = val;
}
std::ostream& operator<<(std::ostream& out, const GearAvailableOnBusinessHarvestList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GearAvailableOnBusinessHarvestList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currencyId = false;
  bool isset_businessIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->businessIds.clear();
            uint32_t _size1219;
            ::apache::thrift::protocol::TType _etype1222;
            xfer += iprot->readListBegin(_etype1222, _size1219);
            this->businessIds.resize(_size1219);
            uint32_t _i1223;
            for (_i1223 = 0; _i1223 < _size1219; ++_i1223)
            {
              xfer += iprot->readString(this->businessIds[_i1223]);
            }
            xfer += iprot->readListEnd();
          }
          isset_businessIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_businessIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GearAvailableOnBusinessHarvestList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GearAvailableOnBusinessHarvestList");

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->businessIds.size()));
    std::vector<BuildingID> ::const_iterator _iter1224;
    for (_iter1224 = this->businessIds.begin(); _iter1224 != this->businessIds.end(); ++_iter1224)
    {
      xfer += oprot->writeString((*_iter1224));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GearAvailableOnBusinessHarvestList &a, GearAvailableOnBusinessHarvestList &b) {
  using ::std::swap;
  swap(a.currencyId, b.currencyId);
  swap(a.businessIds, b.businessIds);
}

GearAvailableOnBusinessHarvestList::GearAvailableOnBusinessHarvestList(const GearAvailableOnBusinessHarvestList& other1225) {
  currencyId = other1225.currencyId;
  businessIds = other1225.businessIds;
}
GearAvailableOnBusinessHarvestList& GearAvailableOnBusinessHarvestList::operator=(const GearAvailableOnBusinessHarvestList& other1226) {
  currencyId = other1226.currencyId;
  businessIds = other1226.businessIds;
  return *this;
}
void GearAvailableOnBusinessHarvestList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GearAvailableOnBusinessHarvestList(";
  out << "currencyId=" << to_string(currencyId);
  out << ", " << "businessIds=" << to_string(businessIds);
  out << ")";
}


MainShopEntry::~MainShopEntry() throw() {
}


void MainShopEntry::__set_mainShopEntryId(const MainShopEntryID& val) {
  this->mainShopEntryId = val;
}

void MainShopEntry::__set_gachaOfferId(const GachaOfferID& val) {
  this->gachaOfferId = val;
__isset.gachaOfferId = true;
}

void MainShopEntry::__set_storeId(const StoreID& val) {
  this->storeId = val;
__isset.storeId = true;
}

void MainShopEntry::__set_orderIndex(const int32_t val) {
  this->orderIndex = val;
}

void MainShopEntry::__set_showRank(const int32_t val) {
  this->showRank = val;
}

void MainShopEntry::__set_unlockRank(const int32_t val) {
  this->unlockRank = val;
}

void MainShopEntry::__set_hideRank(const int32_t val) {
  this->hideRank = val;
}
std::ostream& operator<<(std::ostream& out, const MainShopEntry& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MainShopEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_mainShopEntryId = false;
  bool isset_orderIndex = false;
  bool isset_showRank = false;
  bool isset_unlockRank = false;
  bool isset_hideRank = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mainShopEntryId);
          isset_mainShopEntryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gachaOfferId);
          this->__isset.gachaOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeId);
          this->__isset.storeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderIndex);
          isset_orderIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->showRank);
          isset_showRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockRank);
          isset_unlockRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hideRank);
          isset_hideRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_mainShopEntryId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_orderIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_showRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MainShopEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MainShopEntry");

  xfer += oprot->writeFieldBegin("mainShopEntryId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mainShopEntryId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gachaOfferId) {
    xfer += oprot->writeFieldBegin("gachaOfferId", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->gachaOfferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeId) {
    xfer += oprot->writeFieldBegin("storeId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->storeId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("orderIndex", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->orderIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showRank", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->showRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockRank", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->unlockRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideRank", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->hideRank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MainShopEntry &a, MainShopEntry &b) {
  using ::std::swap;
  swap(a.mainShopEntryId, b.mainShopEntryId);
  swap(a.gachaOfferId, b.gachaOfferId);
  swap(a.storeId, b.storeId);
  swap(a.orderIndex, b.orderIndex);
  swap(a.showRank, b.showRank);
  swap(a.unlockRank, b.unlockRank);
  swap(a.hideRank, b.hideRank);
  swap(a.__isset, b.__isset);
}

MainShopEntry::MainShopEntry(const MainShopEntry& other1227) {
  mainShopEntryId = other1227.mainShopEntryId;
  gachaOfferId = other1227.gachaOfferId;
  storeId = other1227.storeId;
  orderIndex = other1227.orderIndex;
  showRank = other1227.showRank;
  unlockRank = other1227.unlockRank;
  hideRank = other1227.hideRank;
  __isset = other1227.__isset;
}
MainShopEntry& MainShopEntry::operator=(const MainShopEntry& other1228) {
  mainShopEntryId = other1228.mainShopEntryId;
  gachaOfferId = other1228.gachaOfferId;
  storeId = other1228.storeId;
  orderIndex = other1228.orderIndex;
  showRank = other1228.showRank;
  unlockRank = other1228.unlockRank;
  hideRank = other1228.hideRank;
  __isset = other1228.__isset;
  return *this;
}
void MainShopEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MainShopEntry(";
  out << "mainShopEntryId=" << to_string(mainShopEntryId);
  out << ", " << "gachaOfferId="; (__isset.gachaOfferId ? (out << to_string(gachaOfferId)) : (out << "<null>"));
  out << ", " << "storeId="; (__isset.storeId ? (out << to_string(storeId)) : (out << "<null>"));
  out << ", " << "orderIndex=" << to_string(orderIndex);
  out << ", " << "showRank=" << to_string(showRank);
  out << ", " << "unlockRank=" << to_string(unlockRank);
  out << ", " << "hideRank=" << to_string(hideRank);
  out << ")";
}


AskForItemEntry::~AskForItemEntry() throw() {
}


void AskForItemEntry::__set_askForItemId(const AskForItemID& val) {
  this->askForItemId = val;
}

void AskForItemEntry::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
__isset.currencyId = true;
}

void AskForItemEntry::__set_currencyAmount(const int32_t val) {
  this->currencyAmount = val;
__isset.currencyAmount = true;
}

void AskForItemEntry::__set_costCurrencyId(const CurrencyID& val) {
  this->costCurrencyId = val;
__isset.costCurrencyId = true;
}

void AskForItemEntry::__set_rewardCurrencyId(const CurrencyID& val) {
  this->rewardCurrencyId = val;
__isset.rewardCurrencyId = true;
}

void AskForItemEntry::__set_rewardCurrencyAmount(const int32_t val) {
  this->rewardCurrencyAmount = val;
__isset.rewardCurrencyAmount = true;
}

void AskForItemEntry::__set_helpLimit(const int32_t val) {
  this->helpLimit = val;
__isset.helpLimit = true;
}
std::ostream& operator<<(std::ostream& out, const AskForItemEntry& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AskForItemEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_askForItemId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->askForItemId);
          isset_askForItemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          this->__isset.currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currencyAmount);
          this->__isset.currencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->costCurrencyId);
          this->__isset.costCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardCurrencyId);
          this->__isset.rewardCurrencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rewardCurrencyAmount);
          this->__isset.rewardCurrencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->helpLimit);
          this->__isset.helpLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_askForItemId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AskForItemEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AskForItemEntry");

  xfer += oprot->writeFieldBegin("askForItemId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->askForItemId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.currencyId) {
    xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->currencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyAmount) {
    xfer += oprot->writeFieldBegin("currencyAmount", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->currencyAmount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.costCurrencyId) {
    xfer += oprot->writeFieldBegin("costCurrencyId", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->costCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rewardCurrencyId) {
    xfer += oprot->writeFieldBegin("rewardCurrencyId", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->rewardCurrencyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rewardCurrencyAmount) {
    xfer += oprot->writeFieldBegin("rewardCurrencyAmount", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32(this->rewardCurrencyAmount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helpLimit) {
    xfer += oprot->writeFieldBegin("helpLimit", ::apache::thrift::protocol::T_I32, 40);
    xfer += oprot->writeI32(this->helpLimit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AskForItemEntry &a, AskForItemEntry &b) {
  using ::std::swap;
  swap(a.askForItemId, b.askForItemId);
  swap(a.currencyId, b.currencyId);
  swap(a.currencyAmount, b.currencyAmount);
  swap(a.costCurrencyId, b.costCurrencyId);
  swap(a.rewardCurrencyId, b.rewardCurrencyId);
  swap(a.rewardCurrencyAmount, b.rewardCurrencyAmount);
  swap(a.helpLimit, b.helpLimit);
  swap(a.__isset, b.__isset);
}

AskForItemEntry::AskForItemEntry(const AskForItemEntry& other1229) {
  askForItemId = other1229.askForItemId;
  currencyId = other1229.currencyId;
  currencyAmount = other1229.currencyAmount;
  costCurrencyId = other1229.costCurrencyId;
  rewardCurrencyId = other1229.rewardCurrencyId;
  rewardCurrencyAmount = other1229.rewardCurrencyAmount;
  helpLimit = other1229.helpLimit;
  __isset = other1229.__isset;
}
AskForItemEntry& AskForItemEntry::operator=(const AskForItemEntry& other1230) {
  askForItemId = other1230.askForItemId;
  currencyId = other1230.currencyId;
  currencyAmount = other1230.currencyAmount;
  costCurrencyId = other1230.costCurrencyId;
  rewardCurrencyId = other1230.rewardCurrencyId;
  rewardCurrencyAmount = other1230.rewardCurrencyAmount;
  helpLimit = other1230.helpLimit;
  __isset = other1230.__isset;
  return *this;
}
void AskForItemEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AskForItemEntry(";
  out << "askForItemId=" << to_string(askForItemId);
  out << ", " << "currencyId="; (__isset.currencyId ? (out << to_string(currencyId)) : (out << "<null>"));
  out << ", " << "currencyAmount="; (__isset.currencyAmount ? (out << to_string(currencyAmount)) : (out << "<null>"));
  out << ", " << "costCurrencyId="; (__isset.costCurrencyId ? (out << to_string(costCurrencyId)) : (out << "<null>"));
  out << ", " << "rewardCurrencyId="; (__isset.rewardCurrencyId ? (out << to_string(rewardCurrencyId)) : (out << "<null>"));
  out << ", " << "rewardCurrencyAmount="; (__isset.rewardCurrencyAmount ? (out << to_string(rewardCurrencyAmount)) : (out << "<null>"));
  out << ", " << "helpLimit="; (__isset.helpLimit ? (out << to_string(helpLimit)) : (out << "<null>"));
  out << ")";
}


TestBucket::~TestBucket() throw() {
}


void TestBucket::__set_testBucketId(const TestBucketID& val) {
  this->testBucketId = val;
}

void TestBucket::__set_priority(const int32_t val) {
  this->priority = val;
}

void TestBucket::__set_conflictingTestBucketIds(const std::set<TestBucketID> & val) {
  this->conflictingTestBucketIds = val;
__isset.conflictingTestBucketIds = true;
}

void TestBucket::__set_overridesString(const std::string& val) {
  this->overridesString = val;
__isset.overridesString = true;
}

void TestBucket::__set_settings(const Settings& val) {
  this->settings = val;
__isset.settings = true;
}

void TestBucket::__set_startingGameState(const StartingGameState& val) {
  this->startingGameState = val;
__isset.startingGameState = true;
}

void TestBucket::__set_storeProducts(const std::map<StoreProductID, StoreProduct> & val) {
  this->storeProducts = val;
__isset.storeProducts = true;
}

void TestBucket::__set_vendorProducts(const std::map<StoreProductID, VendorProduct> & val) {
  this->vendorProducts = val;
__isset.vendorProducts = true;
}

void TestBucket::__set_gachaOffer(const std::map<GachaOfferID, GachaOffer> & val) {
  this->gachaOffer = val;
__isset.gachaOffer = true;
}

void TestBucket::__set_rank(const std::map<RankID, Rank> & val) {
  this->rank = val;
__isset.rank = true;
}

void TestBucket::__set_level(const std::map<LevelID, Level> & val) {
  this->level = val;
__isset.level = true;
}

void TestBucket::__set_newLevel(const std::map<LevelID, NewLevel> & val) {
  this->newLevel = val;
__isset.newLevel = true;
}

void TestBucket::__set_boost(const std::map<BoostID, Boost> & val) {
  this->boost = val;
__isset.boost = true;
}

void TestBucket::__set_levelDot(const std::map<LevelDotID, LevelDot> & val) {
  this->levelDot = val;
__isset.levelDot = true;
}

void TestBucket::__set_villain(const std::map<VillainID, Villain> & val) {
  this->villain = val;
__isset.villain = true;
}

void TestBucket::__set_matchThreeData(const std::map<LevelName, MatchThreeData> & val) {
  this->matchThreeData = val;
__isset.matchThreeData = true;
}

void TestBucket::__set_achievement(const std::map<AchievementID, Achievement> & val) {
  this->achievement = val;
__isset.achievement = true;
}

void TestBucket::__set_achievementGroup(const std::map<AchievementGroupID, AchievementGroup> & val) {
  this->achievementGroup = val;
__isset.achievementGroup = true;
}

void TestBucket::__set_tutorialStates(const std::vector<TutorialState> & val) {
  this->tutorialStates = val;
__isset.tutorialStates = true;
}

void TestBucket::__set_popupMessages(const std::map<PopupMessageID, PopupMessage> & val) {
  this->popupMessages = val;
__isset.popupMessages = true;
}

void TestBucket::__set_popupMessageSettings(const PopupMessageSettings& val) {
  this->popupMessageSettings = val;
__isset.popupMessageSettings = true;
}

void TestBucket::__set_levelCampaigns(const std::map<LevelCampaignID, LevelCampaign> & val) {
  this->levelCampaigns = val;
__isset.levelCampaigns = true;
}

void TestBucket::__set_stores(const std::map<StoreID, Store> & val) {
  this->stores = val;
__isset.stores = true;
}

void TestBucket::__set_storeInventories(const std::map<StoreID, std::vector<StoreInventoryItem> > & val) {
  this->storeInventories = val;
__isset.storeInventories = true;
}

void TestBucket::__set_cardOffers(const std::map<CardOfferID, CardOffer> & val) {
  this->cardOffers = val;
__isset.cardOffers = true;
}

void TestBucket::__set_iapProducts(const std::map<IAPProductID, IAPProduct> & val) {
  this->iapProducts = val;
__isset.iapProducts = true;
}

void TestBucket::__set_quests(const std::map<QuestID, Quest> & val) {
  this->quests = val;
__isset.quests = true;
}
std::ostream& operator<<(std::ostream& out, const TestBucket& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TestBucket::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_testBucketId = false;
  bool isset_priority = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->testBucketId);
          isset_testBucketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->conflictingTestBucketIds.clear();
            uint32_t _size1231;
            ::apache::thrift::protocol::TType _etype1234;
            xfer += iprot->readSetBegin(_etype1234, _size1231);
            uint32_t _i1235;
            for (_i1235 = 0; _i1235 < _size1231; ++_i1235)
            {
              TestBucketID _elem1236;
              xfer += iprot->readString(_elem1236);
              this->conflictingTestBucketIds.insert(_elem1236);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.conflictingTestBucketIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->overridesString);
          this->__isset.overridesString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->settings.read(iprot);
          this->__isset.settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startingGameState.read(iprot);
          this->__isset.startingGameState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->storeProducts.clear();
            uint32_t _size1237;
            ::apache::thrift::protocol::TType _ktype1238;
            ::apache::thrift::protocol::TType _vtype1239;
            xfer += iprot->readMapBegin(_ktype1238, _vtype1239, _size1237);
            uint32_t _i1241;
            for (_i1241 = 0; _i1241 < _size1237; ++_i1241)
            {
              StoreProductID _key1242;
              xfer += iprot->readString(_key1242);
              StoreProduct& _val1243 = this->storeProducts[_key1242];
              xfer += _val1243.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.storeProducts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->vendorProducts.clear();
            uint32_t _size1244;
            ::apache::thrift::protocol::TType _ktype1245;
            ::apache::thrift::protocol::TType _vtype1246;
            xfer += iprot->readMapBegin(_ktype1245, _vtype1246, _size1244);
            uint32_t _i1248;
            for (_i1248 = 0; _i1248 < _size1244; ++_i1248)
            {
              StoreProductID _key1249;
              xfer += iprot->readString(_key1249);
              VendorProduct& _val1250 = this->vendorProducts[_key1249];
              xfer += _val1250.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.vendorProducts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gachaOffer.clear();
            uint32_t _size1251;
            ::apache::thrift::protocol::TType _ktype1252;
            ::apache::thrift::protocol::TType _vtype1253;
            xfer += iprot->readMapBegin(_ktype1252, _vtype1253, _size1251);
            uint32_t _i1255;
            for (_i1255 = 0; _i1255 < _size1251; ++_i1255)
            {
              GachaOfferID _key1256;
              xfer += iprot->readString(_key1256);
              GachaOffer& _val1257 = this->gachaOffer[_key1256];
              xfer += _val1257.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.gachaOffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 201:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rank.clear();
            uint32_t _size1258;
            ::apache::thrift::protocol::TType _ktype1259;
            ::apache::thrift::protocol::TType _vtype1260;
            xfer += iprot->readMapBegin(_ktype1259, _vtype1260, _size1258);
            uint32_t _i1262;
            for (_i1262 = 0; _i1262 < _size1258; ++_i1262)
            {
              RankID _key1263;
              xfer += iprot->readI32(_key1263);
              Rank& _val1264 = this->rank[_key1263];
              xfer += _val1264.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.rank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 202:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->level.clear();
            uint32_t _size1265;
            ::apache::thrift::protocol::TType _ktype1266;
            ::apache::thrift::protocol::TType _vtype1267;
            xfer += iprot->readMapBegin(_ktype1266, _vtype1267, _size1265);
            uint32_t _i1269;
            for (_i1269 = 0; _i1269 < _size1265; ++_i1269)
            {
              LevelID _key1270;
              xfer += iprot->readString(_key1270);
              Level& _val1271 = this->level[_key1270];
              xfer += _val1271.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 300:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->newLevel.clear();
            uint32_t _size1272;
            ::apache::thrift::protocol::TType _ktype1273;
            ::apache::thrift::protocol::TType _vtype1274;
            xfer += iprot->readMapBegin(_ktype1273, _vtype1274, _size1272);
            uint32_t _i1276;
            for (_i1276 = 0; _i1276 < _size1272; ++_i1276)
            {
              LevelID _key1277;
              xfer += iprot->readString(_key1277);
              NewLevel& _val1278 = this->newLevel[_key1277];
              xfer += _val1278.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.newLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 203:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->boost.clear();
            uint32_t _size1279;
            ::apache::thrift::protocol::TType _ktype1280;
            ::apache::thrift::protocol::TType _vtype1281;
            xfer += iprot->readMapBegin(_ktype1280, _vtype1281, _size1279);
            uint32_t _i1283;
            for (_i1283 = 0; _i1283 < _size1279; ++_i1283)
            {
              BoostID _key1284;
              xfer += iprot->readString(_key1284);
              Boost& _val1285 = this->boost[_key1284];
              xfer += _val1285.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.boost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 204:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->levelDot.clear();
            uint32_t _size1286;
            ::apache::thrift::protocol::TType _ktype1287;
            ::apache::thrift::protocol::TType _vtype1288;
            xfer += iprot->readMapBegin(_ktype1287, _vtype1288, _size1286);
            uint32_t _i1290;
            for (_i1290 = 0; _i1290 < _size1286; ++_i1290)
            {
              LevelDotID _key1291;
              xfer += iprot->readString(_key1291);
              LevelDot& _val1292 = this->levelDot[_key1291];
              xfer += _val1292.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.levelDot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 205:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->villain.clear();
            uint32_t _size1293;
            ::apache::thrift::protocol::TType _ktype1294;
            ::apache::thrift::protocol::TType _vtype1295;
            xfer += iprot->readMapBegin(_ktype1294, _vtype1295, _size1293);
            uint32_t _i1297;
            for (_i1297 = 0; _i1297 < _size1293; ++_i1297)
            {
              VillainID _key1298;
              xfer += iprot->readString(_key1298);
              Villain& _val1299 = this->villain[_key1298];
              xfer += _val1299.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.villain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 206:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->matchThreeData.clear();
            uint32_t _size1300;
            ::apache::thrift::protocol::TType _ktype1301;
            ::apache::thrift::protocol::TType _vtype1302;
            xfer += iprot->readMapBegin(_ktype1301, _vtype1302, _size1300);
            uint32_t _i1304;
            for (_i1304 = 0; _i1304 < _size1300; ++_i1304)
            {
              LevelName _key1305;
              xfer += iprot->readString(_key1305);
              MatchThreeData& _val1306 = this->matchThreeData[_key1305];
              xfer += _val1306.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.matchThreeData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 207:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->achievement.clear();
            uint32_t _size1307;
            ::apache::thrift::protocol::TType _ktype1308;
            ::apache::thrift::protocol::TType _vtype1309;
            xfer += iprot->readMapBegin(_ktype1308, _vtype1309, _size1307);
            uint32_t _i1311;
            for (_i1311 = 0; _i1311 < _size1307; ++_i1311)
            {
              AchievementID _key1312;
              xfer += iprot->readString(_key1312);
              Achievement& _val1313 = this->achievement[_key1312];
              xfer += _val1313.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.achievement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 208:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->achievementGroup.clear();
            uint32_t _size1314;
            ::apache::thrift::protocol::TType _ktype1315;
            ::apache::thrift::protocol::TType _vtype1316;
            xfer += iprot->readMapBegin(_ktype1315, _vtype1316, _size1314);
            uint32_t _i1318;
            for (_i1318 = 0; _i1318 < _size1314; ++_i1318)
            {
              AchievementGroupID _key1319;
              xfer += iprot->readString(_key1319);
              AchievementGroup& _val1320 = this->achievementGroup[_key1319];
              xfer += _val1320.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.achievementGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 209:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tutorialStates.clear();
            uint32_t _size1321;
            ::apache::thrift::protocol::TType _etype1324;
            xfer += iprot->readListBegin(_etype1324, _size1321);
            this->tutorialStates.resize(_size1321);
            uint32_t _i1325;
            for (_i1325 = 0; _i1325 < _size1321; ++_i1325)
            {
              xfer += this->tutorialStates[_i1325].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tutorialStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 210:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->popupMessages.clear();
            uint32_t _size1326;
            ::apache::thrift::protocol::TType _ktype1327;
            ::apache::thrift::protocol::TType _vtype1328;
            xfer += iprot->readMapBegin(_ktype1327, _vtype1328, _size1326);
            uint32_t _i1330;
            for (_i1330 = 0; _i1330 < _size1326; ++_i1330)
            {
              PopupMessageID _key1331;
              xfer += iprot->readString(_key1331);
              PopupMessage& _val1332 = this->popupMessages[_key1331];
              xfer += _val1332.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.popupMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 211:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->popupMessageSettings.read(iprot);
          this->__isset.popupMessageSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 212:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->levelCampaigns.clear();
            uint32_t _size1333;
            ::apache::thrift::protocol::TType _ktype1334;
            ::apache::thrift::protocol::TType _vtype1335;
            xfer += iprot->readMapBegin(_ktype1334, _vtype1335, _size1333);
            uint32_t _i1337;
            for (_i1337 = 0; _i1337 < _size1333; ++_i1337)
            {
              LevelCampaignID _key1338;
              xfer += iprot->readString(_key1338);
              LevelCampaign& _val1339 = this->levelCampaigns[_key1338];
              xfer += _val1339.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.levelCampaigns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 220:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->stores.clear();
            uint32_t _size1340;
            ::apache::thrift::protocol::TType _ktype1341;
            ::apache::thrift::protocol::TType _vtype1342;
            xfer += iprot->readMapBegin(_ktype1341, _vtype1342, _size1340);
            uint32_t _i1344;
            for (_i1344 = 0; _i1344 < _size1340; ++_i1344)
            {
              StoreID _key1345;
              xfer += iprot->readString(_key1345);
              Store& _val1346 = this->stores[_key1345];
              xfer += _val1346.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.stores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 221:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->storeInventories.clear();
            uint32_t _size1347;
            ::apache::thrift::protocol::TType _ktype1348;
            ::apache::thrift::protocol::TType _vtype1349;
            xfer += iprot->readMapBegin(_ktype1348, _vtype1349, _size1347);
            uint32_t _i1351;
            for (_i1351 = 0; _i1351 < _size1347; ++_i1351)
            {
              StoreID _key1352;
              xfer += iprot->readString(_key1352);
              std::vector<StoreInventoryItem> & _val1353 = this->storeInventories[_key1352];
              {
                _val1353.clear();
                uint32_t _size1354;
                ::apache::thrift::protocol::TType _etype1357;
                xfer += iprot->readListBegin(_etype1357, _size1354);
                _val1353.resize(_size1354);
                uint32_t _i1358;
                for (_i1358 = 0; _i1358 < _size1354; ++_i1358)
                {
                  xfer += _val1353[_i1358].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.storeInventories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 222:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->cardOffers.clear();
            uint32_t _size1359;
            ::apache::thrift::protocol::TType _ktype1360;
            ::apache::thrift::protocol::TType _vtype1361;
            xfer += iprot->readMapBegin(_ktype1360, _vtype1361, _size1359);
            uint32_t _i1363;
            for (_i1363 = 0; _i1363 < _size1359; ++_i1363)
            {
              CardOfferID _key1364;
              xfer += iprot->readString(_key1364);
              CardOffer& _val1365 = this->cardOffers[_key1364];
              xfer += _val1365.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.cardOffers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 223:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->iapProducts.clear();
            uint32_t _size1366;
            ::apache::thrift::protocol::TType _ktype1367;
            ::apache::thrift::protocol::TType _vtype1368;
            xfer += iprot->readMapBegin(_ktype1367, _vtype1368, _size1366);
            uint32_t _i1370;
            for (_i1370 = 0; _i1370 < _size1366; ++_i1370)
            {
              IAPProductID _key1371;
              xfer += iprot->readString(_key1371);
              IAPProduct& _val1372 = this->iapProducts[_key1371];
              xfer += _val1372.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.iapProducts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 224:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->quests.clear();
            uint32_t _size1373;
            ::apache::thrift::protocol::TType _ktype1374;
            ::apache::thrift::protocol::TType _vtype1375;
            xfer += iprot->readMapBegin(_ktype1374, _vtype1375, _size1373);
            uint32_t _i1377;
            for (_i1377 = 0; _i1377 < _size1373; ++_i1377)
            {
              QuestID _key1378;
              xfer += iprot->readString(_key1378);
              Quest& _val1379 = this->quests[_key1378];
              xfer += _val1379.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.quests = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_testBucketId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TestBucket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TestBucket");

  xfer += oprot->writeFieldBegin("testBucketId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->testBucketId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.conflictingTestBucketIds) {
    xfer += oprot->writeFieldBegin("conflictingTestBucketIds", ::apache::thrift::protocol::T_SET, 3);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->conflictingTestBucketIds.size()));
      std::set<TestBucketID> ::const_iterator _iter1380;
      for (_iter1380 = this->conflictingTestBucketIds.begin(); _iter1380 != this->conflictingTestBucketIds.end(); ++_iter1380)
      {
        xfer += oprot->writeString((*_iter1380));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.overridesString) {
    xfer += oprot->writeFieldBegin("overridesString", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->overridesString);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.settings) {
    xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->settings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startingGameState) {
    xfer += oprot->writeFieldBegin("startingGameState", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->startingGameState.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeProducts) {
    xfer += oprot->writeFieldBegin("storeProducts", ::apache::thrift::protocol::T_MAP, 100);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->storeProducts.size()));
      std::map<StoreProductID, StoreProduct> ::const_iterator _iter1381;
      for (_iter1381 = this->storeProducts.begin(); _iter1381 != this->storeProducts.end(); ++_iter1381)
      {
        xfer += oprot->writeString(_iter1381->first);
        xfer += _iter1381->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vendorProducts) {
    xfer += oprot->writeFieldBegin("vendorProducts", ::apache::thrift::protocol::T_MAP, 110);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vendorProducts.size()));
      std::map<StoreProductID, VendorProduct> ::const_iterator _iter1382;
      for (_iter1382 = this->vendorProducts.begin(); _iter1382 != this->vendorProducts.end(); ++_iter1382)
      {
        xfer += oprot->writeString(_iter1382->first);
        xfer += _iter1382->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaOffer) {
    xfer += oprot->writeFieldBegin("gachaOffer", ::apache::thrift::protocol::T_MAP, 200);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gachaOffer.size()));
      std::map<GachaOfferID, GachaOffer> ::const_iterator _iter1383;
      for (_iter1383 = this->gachaOffer.begin(); _iter1383 != this->gachaOffer.end(); ++_iter1383)
      {
        xfer += oprot->writeString(_iter1383->first);
        xfer += _iter1383->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rank) {
    xfer += oprot->writeFieldBegin("rank", ::apache::thrift::protocol::T_MAP, 201);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rank.size()));
      std::map<RankID, Rank> ::const_iterator _iter1384;
      for (_iter1384 = this->rank.begin(); _iter1384 != this->rank.end(); ++_iter1384)
      {
        xfer += oprot->writeI32(_iter1384->first);
        xfer += _iter1384->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level) {
    xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_MAP, 202);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->level.size()));
      std::map<LevelID, Level> ::const_iterator _iter1385;
      for (_iter1385 = this->level.begin(); _iter1385 != this->level.end(); ++_iter1385)
      {
        xfer += oprot->writeString(_iter1385->first);
        xfer += _iter1385->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.boost) {
    xfer += oprot->writeFieldBegin("boost", ::apache::thrift::protocol::T_MAP, 203);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->boost.size()));
      std::map<BoostID, Boost> ::const_iterator _iter1386;
      for (_iter1386 = this->boost.begin(); _iter1386 != this->boost.end(); ++_iter1386)
      {
        xfer += oprot->writeString(_iter1386->first);
        xfer += _iter1386->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelDot) {
    xfer += oprot->writeFieldBegin("levelDot", ::apache::thrift::protocol::T_MAP, 204);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->levelDot.size()));
      std::map<LevelDotID, LevelDot> ::const_iterator _iter1387;
      for (_iter1387 = this->levelDot.begin(); _iter1387 != this->levelDot.end(); ++_iter1387)
      {
        xfer += oprot->writeString(_iter1387->first);
        xfer += _iter1387->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villain) {
    xfer += oprot->writeFieldBegin("villain", ::apache::thrift::protocol::T_MAP, 205);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->villain.size()));
      std::map<VillainID, Villain> ::const_iterator _iter1388;
      for (_iter1388 = this->villain.begin(); _iter1388 != this->villain.end(); ++_iter1388)
      {
        xfer += oprot->writeString(_iter1388->first);
        xfer += _iter1388->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.matchThreeData) {
    xfer += oprot->writeFieldBegin("matchThreeData", ::apache::thrift::protocol::T_MAP, 206);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->matchThreeData.size()));
      std::map<LevelName, MatchThreeData> ::const_iterator _iter1389;
      for (_iter1389 = this->matchThreeData.begin(); _iter1389 != this->matchThreeData.end(); ++_iter1389)
      {
        xfer += oprot->writeString(_iter1389->first);
        xfer += _iter1389->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.achievement) {
    xfer += oprot->writeFieldBegin("achievement", ::apache::thrift::protocol::T_MAP, 207);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->achievement.size()));
      std::map<AchievementID, Achievement> ::const_iterator _iter1390;
      for (_iter1390 = this->achievement.begin(); _iter1390 != this->achievement.end(); ++_iter1390)
      {
        xfer += oprot->writeString(_iter1390->first);
        xfer += _iter1390->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.achievementGroup) {
    xfer += oprot->writeFieldBegin("achievementGroup", ::apache::thrift::protocol::T_MAP, 208);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->achievementGroup.size()));
      std::map<AchievementGroupID, AchievementGroup> ::const_iterator _iter1391;
      for (_iter1391 = this->achievementGroup.begin(); _iter1391 != this->achievementGroup.end(); ++_iter1391)
      {
        xfer += oprot->writeString(_iter1391->first);
        xfer += _iter1391->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tutorialStates) {
    xfer += oprot->writeFieldBegin("tutorialStates", ::apache::thrift::protocol::T_LIST, 209);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tutorialStates.size()));
      std::vector<TutorialState> ::const_iterator _iter1392;
      for (_iter1392 = this->tutorialStates.begin(); _iter1392 != this->tutorialStates.end(); ++_iter1392)
      {
        xfer += (*_iter1392).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.popupMessages) {
    xfer += oprot->writeFieldBegin("popupMessages", ::apache::thrift::protocol::T_MAP, 210);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->popupMessages.size()));
      std::map<PopupMessageID, PopupMessage> ::const_iterator _iter1393;
      for (_iter1393 = this->popupMessages.begin(); _iter1393 != this->popupMessages.end(); ++_iter1393)
      {
        xfer += oprot->writeString(_iter1393->first);
        xfer += _iter1393->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.popupMessageSettings) {
    xfer += oprot->writeFieldBegin("popupMessageSettings", ::apache::thrift::protocol::T_STRUCT, 211);
    xfer += this->popupMessageSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.levelCampaigns) {
    xfer += oprot->writeFieldBegin("levelCampaigns", ::apache::thrift::protocol::T_MAP, 212);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->levelCampaigns.size()));
      std::map<LevelCampaignID, LevelCampaign> ::const_iterator _iter1394;
      for (_iter1394 = this->levelCampaigns.begin(); _iter1394 != this->levelCampaigns.end(); ++_iter1394)
      {
        xfer += oprot->writeString(_iter1394->first);
        xfer += _iter1394->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stores) {
    xfer += oprot->writeFieldBegin("stores", ::apache::thrift::protocol::T_MAP, 220);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stores.size()));
      std::map<StoreID, Store> ::const_iterator _iter1395;
      for (_iter1395 = this->stores.begin(); _iter1395 != this->stores.end(); ++_iter1395)
      {
        xfer += oprot->writeString(_iter1395->first);
        xfer += _iter1395->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeInventories) {
    xfer += oprot->writeFieldBegin("storeInventories", ::apache::thrift::protocol::T_MAP, 221);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->storeInventories.size()));
      std::map<StoreID, std::vector<StoreInventoryItem> > ::const_iterator _iter1396;
      for (_iter1396 = this->storeInventories.begin(); _iter1396 != this->storeInventories.end(); ++_iter1396)
      {
        xfer += oprot->writeString(_iter1396->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter1396->second.size()));
          std::vector<StoreInventoryItem> ::const_iterator _iter1397;
          for (_iter1397 = _iter1396->second.begin(); _iter1397 != _iter1396->second.end(); ++_iter1397)
          {
            xfer += (*_iter1397).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cardOffers) {
    xfer += oprot->writeFieldBegin("cardOffers", ::apache::thrift::protocol::T_MAP, 222);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cardOffers.size()));
      std::map<CardOfferID, CardOffer> ::const_iterator _iter1398;
      for (_iter1398 = this->cardOffers.begin(); _iter1398 != this->cardOffers.end(); ++_iter1398)
      {
        xfer += oprot->writeString(_iter1398->first);
        xfer += _iter1398->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iapProducts) {
    xfer += oprot->writeFieldBegin("iapProducts", ::apache::thrift::protocol::T_MAP, 223);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->iapProducts.size()));
      std::map<IAPProductID, IAPProduct> ::const_iterator _iter1399;
      for (_iter1399 = this->iapProducts.begin(); _iter1399 != this->iapProducts.end(); ++_iter1399)
      {
        xfer += oprot->writeString(_iter1399->first);
        xfer += _iter1399->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.quests) {
    xfer += oprot->writeFieldBegin("quests", ::apache::thrift::protocol::T_MAP, 224);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->quests.size()));
      std::map<QuestID, Quest> ::const_iterator _iter1400;
      for (_iter1400 = this->quests.begin(); _iter1400 != this->quests.end(); ++_iter1400)
      {
        xfer += oprot->writeString(_iter1400->first);
        xfer += _iter1400->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newLevel) {
    xfer += oprot->writeFieldBegin("newLevel", ::apache::thrift::protocol::T_MAP, 300);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->newLevel.size()));
      std::map<LevelID, NewLevel> ::const_iterator _iter1401;
      for (_iter1401 = this->newLevel.begin(); _iter1401 != this->newLevel.end(); ++_iter1401)
      {
        xfer += oprot->writeString(_iter1401->first);
        xfer += _iter1401->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TestBucket &a, TestBucket &b) {
  using ::std::swap;
  swap(a.testBucketId, b.testBucketId);
  swap(a.priority, b.priority);
  swap(a.conflictingTestBucketIds, b.conflictingTestBucketIds);
  swap(a.overridesString, b.overridesString);
  swap(a.settings, b.settings);
  swap(a.startingGameState, b.startingGameState);
  swap(a.storeProducts, b.storeProducts);
  swap(a.vendorProducts, b.vendorProducts);
  swap(a.gachaOffer, b.gachaOffer);
  swap(a.rank, b.rank);
  swap(a.level, b.level);
  swap(a.newLevel, b.newLevel);
  swap(a.boost, b.boost);
  swap(a.levelDot, b.levelDot);
  swap(a.villain, b.villain);
  swap(a.matchThreeData, b.matchThreeData);
  swap(a.achievement, b.achievement);
  swap(a.achievementGroup, b.achievementGroup);
  swap(a.tutorialStates, b.tutorialStates);
  swap(a.popupMessages, b.popupMessages);
  swap(a.popupMessageSettings, b.popupMessageSettings);
  swap(a.levelCampaigns, b.levelCampaigns);
  swap(a.stores, b.stores);
  swap(a.storeInventories, b.storeInventories);
  swap(a.cardOffers, b.cardOffers);
  swap(a.iapProducts, b.iapProducts);
  swap(a.quests, b.quests);
  swap(a.__isset, b.__isset);
}

TestBucket::TestBucket(const TestBucket& other1402) {
  testBucketId = other1402.testBucketId;
  priority = other1402.priority;
  conflictingTestBucketIds = other1402.conflictingTestBucketIds;
  overridesString = other1402.overridesString;
  settings = other1402.settings;
  startingGameState = other1402.startingGameState;
  storeProducts = other1402.storeProducts;
  vendorProducts = other1402.vendorProducts;
  gachaOffer = other1402.gachaOffer;
  rank = other1402.rank;
  level = other1402.level;
  newLevel = other1402.newLevel;
  boost = other1402.boost;
  levelDot = other1402.levelDot;
  villain = other1402.villain;
  matchThreeData = other1402.matchThreeData;
  achievement = other1402.achievement;
  achievementGroup = other1402.achievementGroup;
  tutorialStates = other1402.tutorialStates;
  popupMessages = other1402.popupMessages;
  popupMessageSettings = other1402.popupMessageSettings;
  levelCampaigns = other1402.levelCampaigns;
  stores = other1402.stores;
  storeInventories = other1402.storeInventories;
  cardOffers = other1402.cardOffers;
  iapProducts = other1402.iapProducts;
  quests = other1402.quests;
  __isset = other1402.__isset;
}
TestBucket& TestBucket::operator=(const TestBucket& other1403) {
  testBucketId = other1403.testBucketId;
  priority = other1403.priority;
  conflictingTestBucketIds = other1403.conflictingTestBucketIds;
  overridesString = other1403.overridesString;
  settings = other1403.settings;
  startingGameState = other1403.startingGameState;
  storeProducts = other1403.storeProducts;
  vendorProducts = other1403.vendorProducts;
  gachaOffer = other1403.gachaOffer;
  rank = other1403.rank;
  level = other1403.level;
  newLevel = other1403.newLevel;
  boost = other1403.boost;
  levelDot = other1403.levelDot;
  villain = other1403.villain;
  matchThreeData = other1403.matchThreeData;
  achievement = other1403.achievement;
  achievementGroup = other1403.achievementGroup;
  tutorialStates = other1403.tutorialStates;
  popupMessages = other1403.popupMessages;
  popupMessageSettings = other1403.popupMessageSettings;
  levelCampaigns = other1403.levelCampaigns;
  stores = other1403.stores;
  storeInventories = other1403.storeInventories;
  cardOffers = other1403.cardOffers;
  iapProducts = other1403.iapProducts;
  quests = other1403.quests;
  __isset = other1403.__isset;
  return *this;
}
void TestBucket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TestBucket(";
  out << "testBucketId=" << to_string(testBucketId);
  out << ", " << "priority=" << to_string(priority);
  out << ", " << "conflictingTestBucketIds="; (__isset.conflictingTestBucketIds ? (out << to_string(conflictingTestBucketIds)) : (out << "<null>"));
  out << ", " << "overridesString="; (__isset.overridesString ? (out << to_string(overridesString)) : (out << "<null>"));
  out << ", " << "settings="; (__isset.settings ? (out << to_string(settings)) : (out << "<null>"));
  out << ", " << "startingGameState="; (__isset.startingGameState ? (out << to_string(startingGameState)) : (out << "<null>"));
  out << ", " << "storeProducts="; (__isset.storeProducts ? (out << to_string(storeProducts)) : (out << "<null>"));
  out << ", " << "vendorProducts="; (__isset.vendorProducts ? (out << to_string(vendorProducts)) : (out << "<null>"));
  out << ", " << "gachaOffer="; (__isset.gachaOffer ? (out << to_string(gachaOffer)) : (out << "<null>"));
  out << ", " << "rank="; (__isset.rank ? (out << to_string(rank)) : (out << "<null>"));
  out << ", " << "level="; (__isset.level ? (out << to_string(level)) : (out << "<null>"));
  out << ", " << "newLevel="; (__isset.newLevel ? (out << to_string(newLevel)) : (out << "<null>"));
  out << ", " << "boost="; (__isset.boost ? (out << to_string(boost)) : (out << "<null>"));
  out << ", " << "levelDot="; (__isset.levelDot ? (out << to_string(levelDot)) : (out << "<null>"));
  out << ", " << "villain="; (__isset.villain ? (out << to_string(villain)) : (out << "<null>"));
  out << ", " << "matchThreeData="; (__isset.matchThreeData ? (out << to_string(matchThreeData)) : (out << "<null>"));
  out << ", " << "achievement="; (__isset.achievement ? (out << to_string(achievement)) : (out << "<null>"));
  out << ", " << "achievementGroup="; (__isset.achievementGroup ? (out << to_string(achievementGroup)) : (out << "<null>"));
  out << ", " << "tutorialStates="; (__isset.tutorialStates ? (out << to_string(tutorialStates)) : (out << "<null>"));
  out << ", " << "popupMessages="; (__isset.popupMessages ? (out << to_string(popupMessages)) : (out << "<null>"));
  out << ", " << "popupMessageSettings="; (__isset.popupMessageSettings ? (out << to_string(popupMessageSettings)) : (out << "<null>"));
  out << ", " << "levelCampaigns="; (__isset.levelCampaigns ? (out << to_string(levelCampaigns)) : (out << "<null>"));
  out << ", " << "stores="; (__isset.stores ? (out << to_string(stores)) : (out << "<null>"));
  out << ", " << "storeInventories="; (__isset.storeInventories ? (out << to_string(storeInventories)) : (out << "<null>"));
  out << ", " << "cardOffers="; (__isset.cardOffers ? (out << to_string(cardOffers)) : (out << "<null>"));
  out << ", " << "iapProducts="; (__isset.iapProducts ? (out << to_string(iapProducts)) : (out << "<null>"));
  out << ", " << "quests="; (__isset.quests ? (out << to_string(quests)) : (out << "<null>"));
  out << ")";
}


ABTest::~ABTest() throw() {
}


void ABTest::__set_abTestId(const ABTestID& val) {
  this->abTestId = val;
}

void ABTest::__set_testBucketId(const TestBucketID& val) {
  this->testBucketId = val;
}

void ABTest::__set_weight(const int32_t val) {
  this->weight = val;
}

void ABTest::__set_enabled(const bool val) {
  this->enabled = val;
__isset.enabled = true;
}
std::ostream& operator<<(std::ostream& out, const ABTest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ABTest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_abTestId = false;
  bool isset_testBucketId = false;
  bool isset_weight = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->abTestId);
          isset_abTestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->testBucketId);
          isset_testBucketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          isset_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_abTestId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_testBucketId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_weight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABTest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ABTest");

  xfer += oprot->writeFieldBegin("abTestId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->abTestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("testBucketId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->testBucketId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->weight);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.enabled) {
    xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->enabled);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABTest &a, ABTest &b) {
  using ::std::swap;
  swap(a.abTestId, b.abTestId);
  swap(a.testBucketId, b.testBucketId);
  swap(a.weight, b.weight);
  swap(a.enabled, b.enabled);
  swap(a.__isset, b.__isset);
}

ABTest::ABTest(const ABTest& other1404) {
  abTestId = other1404.abTestId;
  testBucketId = other1404.testBucketId;
  weight = other1404.weight;
  enabled = other1404.enabled;
  __isset = other1404.__isset;
}
ABTest& ABTest::operator=(const ABTest& other1405) {
  abTestId = other1405.abTestId;
  testBucketId = other1405.testBucketId;
  weight = other1405.weight;
  enabled = other1405.enabled;
  __isset = other1405.__isset;
  return *this;
}
void ABTest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ABTest(";
  out << "abTestId=" << to_string(abTestId);
  out << ", " << "testBucketId=" << to_string(testBucketId);
  out << ", " << "weight=" << to_string(weight);
  out << ", " << "enabled="; (__isset.enabled ? (out << to_string(enabled)) : (out << "<null>"));
  out << ")";
}


ClientVersionTestBucket::~ClientVersionTestBucket() throw() {
}


void ClientVersionTestBucket::__set_overrideId(const ABTestID& val) {
  this->overrideId = val;
}

void ClientVersionTestBucket::__set_testBucketIdOldVersion(const TestBucketID& val) {
  this->testBucketIdOldVersion = val;
}

void ClientVersionTestBucket::__set_testBucketIdNewVersion(const TestBucketID& val) {
  this->testBucketIdNewVersion = val;
}

void ClientVersionTestBucket::__set_enabled(const bool val) {
  this->enabled = val;
__isset.enabled = true;
}
std::ostream& operator<<(std::ostream& out, const ClientVersionTestBucket& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ClientVersionTestBucket::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_overrideId = false;
  bool isset_testBucketIdOldVersion = false;
  bool isset_testBucketIdNewVersion = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->overrideId);
          isset_overrideId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->testBucketIdOldVersion);
          isset_testBucketIdOldVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->testBucketIdNewVersion);
          isset_testBucketIdNewVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_overrideId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_testBucketIdOldVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_testBucketIdNewVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClientVersionTestBucket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientVersionTestBucket");

  xfer += oprot->writeFieldBegin("overrideId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->overrideId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("testBucketIdOldVersion", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->testBucketIdOldVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("testBucketIdNewVersion", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->testBucketIdNewVersion);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.enabled) {
    xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->enabled);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientVersionTestBucket &a, ClientVersionTestBucket &b) {
  using ::std::swap;
  swap(a.overrideId, b.overrideId);
  swap(a.testBucketIdOldVersion, b.testBucketIdOldVersion);
  swap(a.testBucketIdNewVersion, b.testBucketIdNewVersion);
  swap(a.enabled, b.enabled);
  swap(a.__isset, b.__isset);
}

ClientVersionTestBucket::ClientVersionTestBucket(const ClientVersionTestBucket& other1406) {
  overrideId = other1406.overrideId;
  testBucketIdOldVersion = other1406.testBucketIdOldVersion;
  testBucketIdNewVersion = other1406.testBucketIdNewVersion;
  enabled = other1406.enabled;
  __isset = other1406.__isset;
}
ClientVersionTestBucket& ClientVersionTestBucket::operator=(const ClientVersionTestBucket& other1407) {
  overrideId = other1407.overrideId;
  testBucketIdOldVersion = other1407.testBucketIdOldVersion;
  testBucketIdNewVersion = other1407.testBucketIdNewVersion;
  enabled = other1407.enabled;
  __isset = other1407.__isset;
  return *this;
}
void ClientVersionTestBucket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientVersionTestBucket(";
  out << "overrideId=" << to_string(overrideId);
  out << ", " << "testBucketIdOldVersion=" << to_string(testBucketIdOldVersion);
  out << ", " << "testBucketIdNewVersion=" << to_string(testBucketIdNewVersion);
  out << ", " << "enabled="; (__isset.enabled ? (out << to_string(enabled)) : (out << "<null>"));
  out << ")";
}


HeroType::~HeroType() throw() {
}


void HeroType::__set_heroTypeId(const HeroTypeID val) {
  this->heroTypeId = val;
}

void HeroType::__set_display(const LocalizedString& val) {
  this->display = val;
}

void HeroType::__set_iconAssetId(const AssetID& val) {
  this->iconAssetId = val;
}

void HeroType::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void HeroType::__set_hideInUi(const bool val) {
  this->hideInUi = val;
}
std::ostream& operator<<(std::ostream& out, const HeroType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeroType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_heroTypeId = false;
  bool isset_display = false;
  bool isset_iconAssetId = false;
  bool isset_displayOrder = false;
  bool isset_hideInUi = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heroTypeId);
          isset_heroTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconAssetId);
          isset_iconAssetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideInUi);
          isset_hideInUi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_heroTypeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_iconAssetId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hideInUi)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HeroType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeroType");

  xfer += oprot->writeFieldBegin("heroTypeId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->heroTypeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconAssetId", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->iconAssetId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideInUi", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->hideInUi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeroType &a, HeroType &b) {
  using ::std::swap;
  swap(a.heroTypeId, b.heroTypeId);
  swap(a.display, b.display);
  swap(a.iconAssetId, b.iconAssetId);
  swap(a.displayOrder, b.displayOrder);
  swap(a.hideInUi, b.hideInUi);
}

HeroType::HeroType(const HeroType& other1408) {
  heroTypeId = other1408.heroTypeId;
  display = other1408.display;
  iconAssetId = other1408.iconAssetId;
  displayOrder = other1408.displayOrder;
  hideInUi = other1408.hideInUi;
}
HeroType& HeroType::operator=(const HeroType& other1409) {
  heroTypeId = other1409.heroTypeId;
  display = other1409.display;
  iconAssetId = other1409.iconAssetId;
  displayOrder = other1409.displayOrder;
  hideInUi = other1409.hideInUi;
  return *this;
}
void HeroType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeroType(";
  out << "heroTypeId=" << to_string(heroTypeId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "iconAssetId=" << to_string(iconAssetId);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "hideInUi=" << to_string(hideInUi);
  out << ")";
}


HeroLevelCurve::~HeroLevelCurve() throw() {
}


void HeroLevelCurve::__set_heroLevelCurveId(const HeroLevelCurveID& val) {
  this->heroLevelCurveId = val;
}

void HeroLevelCurve::__set_xp(const int32_t val) {
  this->xp = val;
}

void HeroLevelCurve::__set_display(const std::string& val) {
  this->display = val;
}
std::ostream& operator<<(std::ostream& out, const HeroLevelCurve& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeroLevelCurve::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_heroLevelCurveId = false;
  bool isset_xp = false;
  bool isset_display = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->heroLevelCurveId);
          isset_heroLevelCurveId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xp);
          isset_xp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->display);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_heroLevelCurveId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_xp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HeroLevelCurve::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeroLevelCurve");

  xfer += oprot->writeFieldBegin("heroLevelCurveId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->heroLevelCurveId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xp", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->xp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->display);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeroLevelCurve &a, HeroLevelCurve &b) {
  using ::std::swap;
  swap(a.heroLevelCurveId, b.heroLevelCurveId);
  swap(a.xp, b.xp);
  swap(a.display, b.display);
}

HeroLevelCurve::HeroLevelCurve(const HeroLevelCurve& other1410) {
  heroLevelCurveId = other1410.heroLevelCurveId;
  xp = other1410.xp;
  display = other1410.display;
}
HeroLevelCurve& HeroLevelCurve::operator=(const HeroLevelCurve& other1411) {
  heroLevelCurveId = other1411.heroLevelCurveId;
  xp = other1411.xp;
  display = other1411.display;
  return *this;
}
void HeroLevelCurve::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeroLevelCurve(";
  out << "heroLevelCurveId=" << to_string(heroLevelCurveId);
  out << ", " << "xp=" << to_string(xp);
  out << ", " << "display=" << to_string(display);
  out << ")";
}


HeroMaxUpgrade::~HeroMaxUpgrade() throw() {
}


void HeroMaxUpgrade::__set_amount(const int32_t val) {
  this->amount = val;
}

void HeroMaxUpgrade::__set_currencyId(const CurrencyID& val) {
  this->currencyId = val;
}

void HeroMaxUpgrade::__set_currencyAmount(const int32_t val) {
  this->currencyAmount = val;
}
std::ostream& operator<<(std::ostream& out, const HeroMaxUpgrade& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeroMaxUpgrade::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_amount = false;
  bool isset_currencyId = false;
  bool isset_currencyAmount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->amount);
          isset_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyId);
          isset_currencyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currencyAmount);
          isset_currencyAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_amount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currencyAmount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HeroMaxUpgrade::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeroMaxUpgrade");

  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->currencyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyAmount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->currencyAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeroMaxUpgrade &a, HeroMaxUpgrade &b) {
  using ::std::swap;
  swap(a.amount, b.amount);
  swap(a.currencyId, b.currencyId);
  swap(a.currencyAmount, b.currencyAmount);
}

HeroMaxUpgrade::HeroMaxUpgrade(const HeroMaxUpgrade& other1412) {
  amount = other1412.amount;
  currencyId = other1412.currencyId;
  currencyAmount = other1412.currencyAmount;
}
HeroMaxUpgrade& HeroMaxUpgrade::operator=(const HeroMaxUpgrade& other1413) {
  amount = other1413.amount;
  currencyId = other1413.currencyId;
  currencyAmount = other1413.currencyAmount;
  return *this;
}
void HeroMaxUpgrade::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeroMaxUpgrade(";
  out << "amount=" << to_string(amount);
  out << ", " << "currencyId=" << to_string(currencyId);
  out << ", " << "currencyAmount=" << to_string(currencyAmount);
  out << ")";
}


Hero::~Hero() throw() {
}


void Hero::__set_heroId(const HeroID& val) {
  this->heroId = val;
}

void Hero::__set_display(const LocalizedString& val) {
  this->display = val;
}

void Hero::__set_description(const LocalizedString& val) {
  this->description = val;
}

void Hero::__set_boardIconImage(const AssetID& val) {
  this->boardIconImage = val;
__isset.boardIconImage = true;
}

void Hero::__set_boardIconImage2(const AssetID& val) {
  this->boardIconImage2 = val;
__isset.boardIconImage2 = true;
}

void Hero::__set_affinityId(const AffinityID::type val) {
  this->affinityId = val;
}

void Hero::__set_rarityId(const RarityID val) {
  this->rarityId = val;
__isset.rarityId = true;
}

void Hero::__set_specialtyId(const SpecialtyID::type val) {
  this->specialtyId = val;
}

void Hero::__set_leaderSkillId(const SkillID& val) {
  this->leaderSkillId = val;
__isset.leaderSkillId = true;
}

void Hero::__set_activeSkillId(const SkillID& val) {
  this->activeSkillId = val;
__isset.activeSkillId = true;
}

void Hero::__set_additionalSkillIds(const std::vector<SkillID> & val) {
  this->additionalSkillIds = val;
__isset.additionalSkillIds = true;
}

void Hero::__set_raidBossBaseValueMultiplier(const int32_t val) {
  this->raidBossBaseValueMultiplier = val;
__isset.raidBossBaseValueMultiplier = true;
}
std::ostream& operator<<(std::ostream& out, const Hero& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Hero::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_heroId = false;
  bool isset_display = false;
  bool isset_description = false;
  bool isset_affinityId = false;
  bool isset_specialtyId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->heroId);
          isset_heroId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          isset_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->boardIconImage);
          this->__isset.boardIconImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->boardIconImage2);
          this->__isset.boardIconImage2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1414;
          xfer += iprot->readI32(ecast1414);
          this->affinityId = (AffinityID::type)ecast1414;
          isset_affinityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rarityId);
          this->__isset.rarityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1415;
          xfer += iprot->readI32(ecast1415);
          this->specialtyId = (SpecialtyID::type)ecast1415;
          isset_specialtyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->leaderSkillId);
          this->__isset.leaderSkillId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->activeSkillId);
          this->__isset.activeSkillId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->additionalSkillIds.clear();
            uint32_t _size1416;
            ::apache::thrift::protocol::TType _etype1419;
            xfer += iprot->readListBegin(_etype1419, _size1416);
            this->additionalSkillIds.resize(_size1416);
            uint32_t _i1420;
            for (_i1420 = 0; _i1420 < _size1416; ++_i1420)
            {
              xfer += iprot->readString(this->additionalSkillIds[_i1420]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.additionalSkillIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->raidBossBaseValueMultiplier);
          this->__isset.raidBossBaseValueMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_heroId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_description)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_affinityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_specialtyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Hero::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Hero");

  xfer += oprot->writeFieldBegin("heroId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->heroId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->description.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.boardIconImage) {
    xfer += oprot->writeFieldBegin("boardIconImage", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->boardIconImage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.boardIconImage2) {
    xfer += oprot->writeFieldBegin("boardIconImage2", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->boardIconImage2);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("affinityId", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32((int32_t)this->affinityId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rarityId) {
    xfer += oprot->writeFieldBegin("rarityId", ::apache::thrift::protocol::T_I32, 21);
    xfer += oprot->writeI32(this->rarityId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("specialtyId", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32((int32_t)this->specialtyId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.leaderSkillId) {
    xfer += oprot->writeFieldBegin("leaderSkillId", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->leaderSkillId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeSkillId) {
    xfer += oprot->writeFieldBegin("activeSkillId", ::apache::thrift::protocol::T_STRING, 26);
    xfer += oprot->writeString(this->activeSkillId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.additionalSkillIds) {
    xfer += oprot->writeFieldBegin("additionalSkillIds", ::apache::thrift::protocol::T_LIST, 27);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->additionalSkillIds.size()));
      std::vector<SkillID> ::const_iterator _iter1421;
      for (_iter1421 = this->additionalSkillIds.begin(); _iter1421 != this->additionalSkillIds.end(); ++_iter1421)
      {
        xfer += oprot->writeString((*_iter1421));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBossBaseValueMultiplier) {
    xfer += oprot->writeFieldBegin("raidBossBaseValueMultiplier", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32(this->raidBossBaseValueMultiplier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Hero &a, Hero &b) {
  using ::std::swap;
  swap(a.heroId, b.heroId);
  swap(a.display, b.display);
  swap(a.description, b.description);
  swap(a.boardIconImage, b.boardIconImage);
  swap(a.boardIconImage2, b.boardIconImage2);
  swap(a.affinityId, b.affinityId);
  swap(a.rarityId, b.rarityId);
  swap(a.specialtyId, b.specialtyId);
  swap(a.leaderSkillId, b.leaderSkillId);
  swap(a.activeSkillId, b.activeSkillId);
  swap(a.additionalSkillIds, b.additionalSkillIds);
  swap(a.raidBossBaseValueMultiplier, b.raidBossBaseValueMultiplier);
  swap(a.__isset, b.__isset);
}

Hero::Hero(const Hero& other1422) {
  heroId = other1422.heroId;
  display = other1422.display;
  description = other1422.description;
  boardIconImage = other1422.boardIconImage;
  boardIconImage2 = other1422.boardIconImage2;
  affinityId = other1422.affinityId;
  rarityId = other1422.rarityId;
  specialtyId = other1422.specialtyId;
  leaderSkillId = other1422.leaderSkillId;
  activeSkillId = other1422.activeSkillId;
  additionalSkillIds = other1422.additionalSkillIds;
  raidBossBaseValueMultiplier = other1422.raidBossBaseValueMultiplier;
  __isset = other1422.__isset;
}
Hero& Hero::operator=(const Hero& other1423) {
  heroId = other1423.heroId;
  display = other1423.display;
  description = other1423.description;
  boardIconImage = other1423.boardIconImage;
  boardIconImage2 = other1423.boardIconImage2;
  affinityId = other1423.affinityId;
  rarityId = other1423.rarityId;
  specialtyId = other1423.specialtyId;
  leaderSkillId = other1423.leaderSkillId;
  activeSkillId = other1423.activeSkillId;
  additionalSkillIds = other1423.additionalSkillIds;
  raidBossBaseValueMultiplier = other1423.raidBossBaseValueMultiplier;
  __isset = other1423.__isset;
  return *this;
}
void Hero::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Hero(";
  out << "heroId=" << to_string(heroId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "description=" << to_string(description);
  out << ", " << "boardIconImage="; (__isset.boardIconImage ? (out << to_string(boardIconImage)) : (out << "<null>"));
  out << ", " << "boardIconImage2="; (__isset.boardIconImage2 ? (out << to_string(boardIconImage2)) : (out << "<null>"));
  out << ", " << "affinityId=" << to_string(affinityId);
  out << ", " << "rarityId="; (__isset.rarityId ? (out << to_string(rarityId)) : (out << "<null>"));
  out << ", " << "specialtyId=" << to_string(specialtyId);
  out << ", " << "leaderSkillId="; (__isset.leaderSkillId ? (out << to_string(leaderSkillId)) : (out << "<null>"));
  out << ", " << "activeSkillId="; (__isset.activeSkillId ? (out << to_string(activeSkillId)) : (out << "<null>"));
  out << ", " << "additionalSkillIds="; (__isset.additionalSkillIds ? (out << to_string(additionalSkillIds)) : (out << "<null>"));
  out << ", " << "raidBossBaseValueMultiplier="; (__isset.raidBossBaseValueMultiplier ? (out << to_string(raidBossBaseValueMultiplier)) : (out << "<null>"));
  out << ")";
}


RaidBoss::~RaidBoss() throw() {
}


void RaidBoss::__set_raidBossId(const RaidBossID& val) {
  this->raidBossId = val;
}

void RaidBoss::__set_raidBossActivityId(const RaidBossActivityID& val) {
  this->raidBossActivityId = val;
}

void RaidBoss::__set_display(const LocalizedString& val) {
  this->display = val;
}

void RaidBoss::__set_eventIds(const std::vector<EventID> & val) {
  this->eventIds = val;
}

void RaidBoss::__set_levelIds(const std::vector<LevelID> & val) {
  this->levelIds = val;
}

void RaidBoss::__set_affinityId(const AffinityID::type val) {
  this->affinityId = val;
}

void RaidBoss::__set_specialtyId(const SpecialtyID::type val) {
  this->specialtyId = val;
}

void RaidBoss::__set_orderSize(const int32_t val) {
  this->orderSize = val;
__isset.orderSize = true;
}

void RaidBoss::__set_maxBakers(const int32_t val) {
  this->maxBakers = val;
__isset.maxBakers = true;
}

void RaidBoss::__set_maxHeroes(const int32_t val) {
  this->maxHeroes = val;
__isset.maxHeroes = true;
}

void RaidBoss::__set_baseCollectValue(const int32_t val) {
  this->baseCollectValue = val;
__isset.baseCollectValue = true;
}

void RaidBoss::__set_baseOrdersPerDonut(const std::vector<int32_t> & val) {
  this->baseOrdersPerDonut = val;
__isset.baseOrdersPerDonut = true;
}

void RaidBoss::__set_affinityBonus(const int32_t val) {
  this->affinityBonus = val;
__isset.affinityBonus = true;
}

void RaidBoss::__set_specialtyBonus(const int32_t val) {
  this->specialtyBonus = val;
__isset.specialtyBonus = true;
}

void RaidBoss::__set_orderSizeCurveId(const RaidBossCurveID& val) {
  this->orderSizeCurveId = val;
__isset.orderSizeCurveId = true;
}

void RaidBoss::__set_battleTimerSeconds(const int32_t val) {
  this->battleTimerSeconds = val;
}

void RaidBoss::__set_levelMin(const int32_t val) {
  this->levelMin = val;
}

void RaidBoss::__set_levelMax(const int32_t val) {
  this->levelMax = val;
}

void RaidBoss::__set_levelForced(const int32_t val) {
  this->levelForced = val;
__isset.levelForced = true;
}

void RaidBoss::__set_maxParticipants(const int32_t val) {
  this->maxParticipants = val;
}

void RaidBoss::__set_maxImpressions(const int32_t val) {
  this->maxImpressions = val;
}

void RaidBoss::__set_spawnWeight(const double val) {
  this->spawnWeight = val;
}

void RaidBoss::__set_guildOnly(const bool val) {
  this->guildOnly = val;
}

void RaidBoss::__set_battleEnergyCardOfferId(const CardOfferID& val) {
  this->battleEnergyCardOfferId = val;
__isset.battleEnergyCardOfferId = true;
}
std::ostream& operator<<(std::ostream& out, const RaidBoss& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RaidBoss::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raidBossId = false;
  bool isset_raidBossActivityId = false;
  bool isset_display = false;
  bool isset_eventIds = false;
  bool isset_levelIds = false;
  bool isset_affinityId = false;
  bool isset_specialtyId = false;
  bool isset_battleTimerSeconds = false;
  bool isset_levelMin = false;
  bool isset_levelMax = false;
  bool isset_maxParticipants = false;
  bool isset_maxImpressions = false;
  bool isset_spawnWeight = false;
  bool isset_guildOnly = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossId);
          isset_raidBossId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossActivityId);
          isset_raidBossActivityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size1424;
            ::apache::thrift::protocol::TType _etype1427;
            xfer += iprot->readListBegin(_etype1427, _size1424);
            this->eventIds.resize(_size1424);
            uint32_t _i1428;
            for (_i1428 = 0; _i1428 < _size1424; ++_i1428)
            {
              xfer += iprot->readString(this->eventIds[_i1428]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->levelIds.clear();
            uint32_t _size1429;
            ::apache::thrift::protocol::TType _etype1432;
            xfer += iprot->readListBegin(_etype1432, _size1429);
            this->levelIds.resize(_size1429);
            uint32_t _i1433;
            for (_i1433 = 0; _i1433 < _size1429; ++_i1433)
            {
              xfer += iprot->readString(this->levelIds[_i1433]);
            }
            xfer += iprot->readListEnd();
          }
          isset_levelIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1434;
          xfer += iprot->readI32(ecast1434);
          this->affinityId = (AffinityID::type)ecast1434;
          isset_affinityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1435;
          xfer += iprot->readI32(ecast1435);
          this->specialtyId = (SpecialtyID::type)ecast1435;
          isset_specialtyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderSize);
          this->__isset.orderSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxBakers);
          this->__isset.maxBakers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxHeroes);
          this->__isset.maxHeroes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baseCollectValue);
          this->__isset.baseCollectValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->baseOrdersPerDonut.clear();
            uint32_t _size1436;
            ::apache::thrift::protocol::TType _etype1439;
            xfer += iprot->readListBegin(_etype1439, _size1436);
            this->baseOrdersPerDonut.resize(_size1436);
            uint32_t _i1440;
            for (_i1440 = 0; _i1440 < _size1436; ++_i1440)
            {
              xfer += iprot->readI32(this->baseOrdersPerDonut[_i1440]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.baseOrdersPerDonut = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->affinityBonus);
          this->__isset.affinityBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->specialtyBonus);
          this->__isset.specialtyBonus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderSizeCurveId);
          this->__isset.orderSizeCurveId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->battleTimerSeconds);
          isset_battleTimerSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->levelMin);
          isset_levelMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->levelMax);
          isset_levelMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->levelForced);
          this->__isset.levelForced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxParticipants);
          isset_maxParticipants = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxImpressions);
          isset_maxImpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->spawnWeight);
          isset_spawnWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->guildOnly);
          isset_guildOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->battleEnergyCardOfferId);
          this->__isset.battleEnergyCardOfferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raidBossId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_raidBossActivityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_affinityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_specialtyId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_battleTimerSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelMin)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelMax)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxParticipants)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxImpressions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spawnWeight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildOnly)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RaidBoss::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RaidBoss");

  xfer += oprot->writeFieldBegin("raidBossId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->raidBossId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raidBossActivityId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->raidBossActivityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<EventID> ::const_iterator _iter1441;
    for (_iter1441 = this->eventIds.begin(); _iter1441 != this->eventIds.end(); ++_iter1441)
    {
      xfer += oprot->writeString((*_iter1441));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelIds", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->levelIds.size()));
    std::vector<LevelID> ::const_iterator _iter1442;
    for (_iter1442 = this->levelIds.begin(); _iter1442 != this->levelIds.end(); ++_iter1442)
    {
      xfer += oprot->writeString((*_iter1442));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("affinityId", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32((int32_t)this->affinityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("specialtyId", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32((int32_t)this->specialtyId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.orderSize) {
    xfer += oprot->writeFieldBegin("orderSize", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->orderSize);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxBakers) {
    xfer += oprot->writeFieldBegin("maxBakers", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->maxBakers);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxHeroes) {
    xfer += oprot->writeFieldBegin("maxHeroes", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->maxHeroes);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("battleTimerSeconds", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->battleTimerSeconds);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.baseCollectValue) {
    xfer += oprot->writeFieldBegin("baseCollectValue", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32(this->baseCollectValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.affinityBonus) {
    xfer += oprot->writeFieldBegin("affinityBonus", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32(this->affinityBonus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.specialtyBonus) {
    xfer += oprot->writeFieldBegin("specialtyBonus", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32(this->specialtyBonus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.baseOrdersPerDonut) {
    xfer += oprot->writeFieldBegin("baseOrdersPerDonut", ::apache::thrift::protocol::T_LIST, 33);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->baseOrdersPerDonut.size()));
      std::vector<int32_t> ::const_iterator _iter1443;
      for (_iter1443 = this->baseOrdersPerDonut.begin(); _iter1443 != this->baseOrdersPerDonut.end(); ++_iter1443)
      {
        xfer += oprot->writeI32((*_iter1443));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orderSizeCurveId) {
    xfer += oprot->writeFieldBegin("orderSizeCurveId", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->orderSizeCurveId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("levelMin", ::apache::thrift::protocol::T_I32, 53);
  xfer += oprot->writeI32(this->levelMin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelMax", ::apache::thrift::protocol::T_I32, 54);
  xfer += oprot->writeI32(this->levelMax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxParticipants", ::apache::thrift::protocol::T_I32, 55);
  xfer += oprot->writeI32(this->maxParticipants);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxImpressions", ::apache::thrift::protocol::T_I32, 56);
  xfer += oprot->writeI32(this->maxImpressions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spawnWeight", ::apache::thrift::protocol::T_DOUBLE, 57);
  xfer += oprot->writeDouble(this->spawnWeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildOnly", ::apache::thrift::protocol::T_BOOL, 58);
  xfer += oprot->writeBool(this->guildOnly);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.levelForced) {
    xfer += oprot->writeFieldBegin("levelForced", ::apache::thrift::protocol::T_I32, 59);
    xfer += oprot->writeI32(this->levelForced);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.battleEnergyCardOfferId) {
    xfer += oprot->writeFieldBegin("battleEnergyCardOfferId", ::apache::thrift::protocol::T_STRING, 74);
    xfer += oprot->writeString(this->battleEnergyCardOfferId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RaidBoss &a, RaidBoss &b) {
  using ::std::swap;
  swap(a.raidBossId, b.raidBossId);
  swap(a.raidBossActivityId, b.raidBossActivityId);
  swap(a.display, b.display);
  swap(a.eventIds, b.eventIds);
  swap(a.levelIds, b.levelIds);
  swap(a.affinityId, b.affinityId);
  swap(a.specialtyId, b.specialtyId);
  swap(a.orderSize, b.orderSize);
  swap(a.maxBakers, b.maxBakers);
  swap(a.maxHeroes, b.maxHeroes);
  swap(a.baseCollectValue, b.baseCollectValue);
  swap(a.baseOrdersPerDonut, b.baseOrdersPerDonut);
  swap(a.affinityBonus, b.affinityBonus);
  swap(a.specialtyBonus, b.specialtyBonus);
  swap(a.orderSizeCurveId, b.orderSizeCurveId);
  swap(a.battleTimerSeconds, b.battleTimerSeconds);
  swap(a.levelMin, b.levelMin);
  swap(a.levelMax, b.levelMax);
  swap(a.levelForced, b.levelForced);
  swap(a.maxParticipants, b.maxParticipants);
  swap(a.maxImpressions, b.maxImpressions);
  swap(a.spawnWeight, b.spawnWeight);
  swap(a.guildOnly, b.guildOnly);
  swap(a.battleEnergyCardOfferId, b.battleEnergyCardOfferId);
  swap(a.__isset, b.__isset);
}

RaidBoss::RaidBoss(const RaidBoss& other1444) {
  raidBossId = other1444.raidBossId;
  raidBossActivityId = other1444.raidBossActivityId;
  display = other1444.display;
  eventIds = other1444.eventIds;
  levelIds = other1444.levelIds;
  affinityId = other1444.affinityId;
  specialtyId = other1444.specialtyId;
  orderSize = other1444.orderSize;
  maxBakers = other1444.maxBakers;
  maxHeroes = other1444.maxHeroes;
  baseCollectValue = other1444.baseCollectValue;
  baseOrdersPerDonut = other1444.baseOrdersPerDonut;
  affinityBonus = other1444.affinityBonus;
  specialtyBonus = other1444.specialtyBonus;
  orderSizeCurveId = other1444.orderSizeCurveId;
  battleTimerSeconds = other1444.battleTimerSeconds;
  levelMin = other1444.levelMin;
  levelMax = other1444.levelMax;
  levelForced = other1444.levelForced;
  maxParticipants = other1444.maxParticipants;
  maxImpressions = other1444.maxImpressions;
  spawnWeight = other1444.spawnWeight;
  guildOnly = other1444.guildOnly;
  battleEnergyCardOfferId = other1444.battleEnergyCardOfferId;
  __isset = other1444.__isset;
}
RaidBoss& RaidBoss::operator=(const RaidBoss& other1445) {
  raidBossId = other1445.raidBossId;
  raidBossActivityId = other1445.raidBossActivityId;
  display = other1445.display;
  eventIds = other1445.eventIds;
  levelIds = other1445.levelIds;
  affinityId = other1445.affinityId;
  specialtyId = other1445.specialtyId;
  orderSize = other1445.orderSize;
  maxBakers = other1445.maxBakers;
  maxHeroes = other1445.maxHeroes;
  baseCollectValue = other1445.baseCollectValue;
  baseOrdersPerDonut = other1445.baseOrdersPerDonut;
  affinityBonus = other1445.affinityBonus;
  specialtyBonus = other1445.specialtyBonus;
  orderSizeCurveId = other1445.orderSizeCurveId;
  battleTimerSeconds = other1445.battleTimerSeconds;
  levelMin = other1445.levelMin;
  levelMax = other1445.levelMax;
  levelForced = other1445.levelForced;
  maxParticipants = other1445.maxParticipants;
  maxImpressions = other1445.maxImpressions;
  spawnWeight = other1445.spawnWeight;
  guildOnly = other1445.guildOnly;
  battleEnergyCardOfferId = other1445.battleEnergyCardOfferId;
  __isset = other1445.__isset;
  return *this;
}
void RaidBoss::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RaidBoss(";
  out << "raidBossId=" << to_string(raidBossId);
  out << ", " << "raidBossActivityId=" << to_string(raidBossActivityId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "eventIds=" << to_string(eventIds);
  out << ", " << "levelIds=" << to_string(levelIds);
  out << ", " << "affinityId=" << to_string(affinityId);
  out << ", " << "specialtyId=" << to_string(specialtyId);
  out << ", " << "orderSize="; (__isset.orderSize ? (out << to_string(orderSize)) : (out << "<null>"));
  out << ", " << "maxBakers="; (__isset.maxBakers ? (out << to_string(maxBakers)) : (out << "<null>"));
  out << ", " << "maxHeroes="; (__isset.maxHeroes ? (out << to_string(maxHeroes)) : (out << "<null>"));
  out << ", " << "baseCollectValue="; (__isset.baseCollectValue ? (out << to_string(baseCollectValue)) : (out << "<null>"));
  out << ", " << "baseOrdersPerDonut="; (__isset.baseOrdersPerDonut ? (out << to_string(baseOrdersPerDonut)) : (out << "<null>"));
  out << ", " << "affinityBonus="; (__isset.affinityBonus ? (out << to_string(affinityBonus)) : (out << "<null>"));
  out << ", " << "specialtyBonus="; (__isset.specialtyBonus ? (out << to_string(specialtyBonus)) : (out << "<null>"));
  out << ", " << "orderSizeCurveId="; (__isset.orderSizeCurveId ? (out << to_string(orderSizeCurveId)) : (out << "<null>"));
  out << ", " << "battleTimerSeconds=" << to_string(battleTimerSeconds);
  out << ", " << "levelMin=" << to_string(levelMin);
  out << ", " << "levelMax=" << to_string(levelMax);
  out << ", " << "levelForced="; (__isset.levelForced ? (out << to_string(levelForced)) : (out << "<null>"));
  out << ", " << "maxParticipants=" << to_string(maxParticipants);
  out << ", " << "maxImpressions=" << to_string(maxImpressions);
  out << ", " << "spawnWeight=" << to_string(spawnWeight);
  out << ", " << "guildOnly=" << to_string(guildOnly);
  out << ", " << "battleEnergyCardOfferId="; (__isset.battleEnergyCardOfferId ? (out << to_string(battleEnergyCardOfferId)) : (out << "<null>"));
  out << ")";
}


RaidBossCurve::~RaidBossCurve() throw() {
}


void RaidBossCurve::__set_raidBossCurveId(const RaidBossCurveID& val) {
  this->raidBossCurveId = val;
}

void RaidBossCurve::__set_level(const int32_t val) {
  this->level = val;
}

void RaidBossCurve::__set_multiplier(const int32_t val) {
  this->multiplier = val;
}
std::ostream& operator<<(std::ostream& out, const RaidBossCurve& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RaidBossCurve::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raidBossCurveId = false;
  bool isset_level = false;
  bool isset_multiplier = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossCurveId);
          isset_raidBossCurveId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          isset_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->multiplier);
          isset_multiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raidBossCurveId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_multiplier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RaidBossCurve::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RaidBossCurve");

  xfer += oprot->writeFieldBegin("raidBossCurveId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->raidBossCurveId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("multiplier", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->multiplier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RaidBossCurve &a, RaidBossCurve &b) {
  using ::std::swap;
  swap(a.raidBossCurveId, b.raidBossCurveId);
  swap(a.level, b.level);
  swap(a.multiplier, b.multiplier);
}

RaidBossCurve::RaidBossCurve(const RaidBossCurve& other1446) {
  raidBossCurveId = other1446.raidBossCurveId;
  level = other1446.level;
  multiplier = other1446.multiplier;
}
RaidBossCurve& RaidBossCurve::operator=(const RaidBossCurve& other1447) {
  raidBossCurveId = other1447.raidBossCurveId;
  level = other1447.level;
  multiplier = other1447.multiplier;
  return *this;
}
void RaidBossCurve::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RaidBossCurve(";
  out << "raidBossCurveId=" << to_string(raidBossCurveId);
  out << ", " << "level=" << to_string(level);
  out << ", " << "multiplier=" << to_string(multiplier);
  out << ")";
}


RaidBossObjective::~RaidBossObjective() throw() {
}


void RaidBossObjective::__set_raidBossObjectiveId(const RaidBossObjectiveID& val) {
  this->raidBossObjectiveId = val;
}

void RaidBossObjective::__set_type(const RaidBossObjectiveType::type val) {
  this->type = val;
}

void RaidBossObjective::__set_display(const LocalizedString& val) {
  this->display = val;
}

void RaidBossObjective::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void RaidBossObjective::__set_details(const LocalizedString& val) {
  this->details = val;
}
std::ostream& operator<<(std::ostream& out, const RaidBossObjective& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RaidBossObjective::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raidBossObjectiveId = false;
  bool isset_type = false;
  bool isset_display = false;
  bool isset_displayOrder = false;
  bool isset_details = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossObjectiveId);
          isset_raidBossObjectiveId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1448;
          xfer += iprot->readI32(ecast1448);
          this->type = (RaidBossObjectiveType::type)ecast1448;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          isset_displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->details.read(iprot);
          isset_details = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raidBossObjectiveId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_displayOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_details)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RaidBossObjective::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RaidBossObjective");

  xfer += oprot->writeFieldBegin("raidBossObjectiveId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->raidBossObjectiveId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("details", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->details.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RaidBossObjective &a, RaidBossObjective &b) {
  using ::std::swap;
  swap(a.raidBossObjectiveId, b.raidBossObjectiveId);
  swap(a.type, b.type);
  swap(a.display, b.display);
  swap(a.displayOrder, b.displayOrder);
  swap(a.details, b.details);
}

RaidBossObjective::RaidBossObjective(const RaidBossObjective& other1449) {
  raidBossObjectiveId = other1449.raidBossObjectiveId;
  type = other1449.type;
  display = other1449.display;
  displayOrder = other1449.displayOrder;
  details = other1449.details;
}
RaidBossObjective& RaidBossObjective::operator=(const RaidBossObjective& other1450) {
  raidBossObjectiveId = other1450.raidBossObjectiveId;
  type = other1450.type;
  display = other1450.display;
  displayOrder = other1450.displayOrder;
  details = other1450.details;
  return *this;
}
void RaidBossObjective::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RaidBossObjective(";
  out << "raidBossObjectiveId=" << to_string(raidBossObjectiveId);
  out << ", " << "type=" << to_string(type);
  out << ", " << "display=" << to_string(display);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "details=" << to_string(details);
  out << ")";
}


RaidBossRarity::~RaidBossRarity() throw() {
}


void RaidBossRarity::__set_raidBossRarityId(const RaidBossRarityID& val) {
  this->raidBossRarityId = val;
}

void RaidBossRarity::__set_display(const LocalizedString& val) {
  this->display = val;
}

void RaidBossRarity::__set_chestId(const AssetID& val) {
  this->chestId = val;
}

void RaidBossRarity::__set_avatarFrameId(const AssetID& val) {
  this->avatarFrameId = val;
}
std::ostream& operator<<(std::ostream& out, const RaidBossRarity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RaidBossRarity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raidBossRarityId = false;
  bool isset_display = false;
  bool isset_chestId = false;
  bool isset_avatarFrameId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossRarityId);
          isset_raidBossRarityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->display.read(iprot);
          isset_display = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chestId);
          isset_chestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatarFrameId);
          isset_avatarFrameId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raidBossRarityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_display)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_chestId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_avatarFrameId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RaidBossRarity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RaidBossRarity");

  xfer += oprot->writeFieldBegin("raidBossRarityId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->raidBossRarityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->display.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chestId", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->chestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatarFrameId", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->avatarFrameId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RaidBossRarity &a, RaidBossRarity &b) {
  using ::std::swap;
  swap(a.raidBossRarityId, b.raidBossRarityId);
  swap(a.display, b.display);
  swap(a.chestId, b.chestId);
  swap(a.avatarFrameId, b.avatarFrameId);
}

RaidBossRarity::RaidBossRarity(const RaidBossRarity& other1451) {
  raidBossRarityId = other1451.raidBossRarityId;
  display = other1451.display;
  chestId = other1451.chestId;
  avatarFrameId = other1451.avatarFrameId;
}
RaidBossRarity& RaidBossRarity::operator=(const RaidBossRarity& other1452) {
  raidBossRarityId = other1452.raidBossRarityId;
  display = other1452.display;
  chestId = other1452.chestId;
  avatarFrameId = other1452.avatarFrameId;
  return *this;
}
void RaidBossRarity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RaidBossRarity(";
  out << "raidBossRarityId=" << to_string(raidBossRarityId);
  out << ", " << "display=" << to_string(display);
  out << ", " << "chestId=" << to_string(chestId);
  out << ", " << "avatarFrameId=" << to_string(avatarFrameId);
  out << ")";
}


RaidBossReward::~RaidBossReward() throw() {
}


void RaidBossReward::__set_raidBossRewardId(const RaidBossRewardID& val) {
  this->raidBossRewardId = val;
}

void RaidBossReward::__set_rewardType(const LootItemType::type val) {
  this->rewardType = val;
}

void RaidBossReward::__set_rewardItemId(const std::string& val) {
  this->rewardItemId = val;
}

void RaidBossReward::__set_rewardBase(const int32_t val) {
  this->rewardBase = val;
}

void RaidBossReward::__set_rewardGrowth(const double val) {
  this->rewardGrowth = val;
}

void RaidBossReward::__set_rewardCurveId(const RaidBossCurveID& val) {
  this->rewardCurveId = val;
}
std::ostream& operator<<(std::ostream& out, const RaidBossReward& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RaidBossReward::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raidBossRewardId = false;
  bool isset_rewardType = false;
  bool isset_rewardItemId = false;
  bool isset_rewardBase = false;
  bool isset_rewardGrowth = false;
  bool isset_rewardCurveId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossRewardId);
          isset_raidBossRewardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1453;
          xfer += iprot->readI32(ecast1453);
          this->rewardType = (LootItemType::type)ecast1453;
          isset_rewardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardItemId);
          isset_rewardItemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rewardBase);
          isset_rewardBase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rewardGrowth);
          isset_rewardGrowth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rewardCurveId);
          isset_rewardCurveId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raidBossRewardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardItemId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardBase)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardGrowth)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardCurveId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RaidBossReward::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RaidBossReward");

  xfer += oprot->writeFieldBegin("raidBossRewardId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->raidBossRewardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->rewardType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardItemId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->rewardItemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardBase", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->rewardBase);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardGrowth", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->rewardGrowth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardCurveId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->rewardCurveId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RaidBossReward &a, RaidBossReward &b) {
  using ::std::swap;
  swap(a.raidBossRewardId, b.raidBossRewardId);
  swap(a.rewardType, b.rewardType);
  swap(a.rewardItemId, b.rewardItemId);
  swap(a.rewardBase, b.rewardBase);
  swap(a.rewardGrowth, b.rewardGrowth);
  swap(a.rewardCurveId, b.rewardCurveId);
}

RaidBossReward::RaidBossReward(const RaidBossReward& other1454) {
  raidBossRewardId = other1454.raidBossRewardId;
  rewardType = other1454.rewardType;
  rewardItemId = other1454.rewardItemId;
  rewardBase = other1454.rewardBase;
  rewardGrowth = other1454.rewardGrowth;
  rewardCurveId = other1454.rewardCurveId;
}
RaidBossReward& RaidBossReward::operator=(const RaidBossReward& other1455) {
  raidBossRewardId = other1455.raidBossRewardId;
  rewardType = other1455.rewardType;
  rewardItemId = other1455.rewardItemId;
  rewardBase = other1455.rewardBase;
  rewardGrowth = other1455.rewardGrowth;
  rewardCurveId = other1455.rewardCurveId;
  return *this;
}
void RaidBossReward::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RaidBossReward(";
  out << "raidBossRewardId=" << to_string(raidBossRewardId);
  out << ", " << "rewardType=" << to_string(rewardType);
  out << ", " << "rewardItemId=" << to_string(rewardItemId);
  out << ", " << "rewardBase=" << to_string(rewardBase);
  out << ", " << "rewardGrowth=" << to_string(rewardGrowth);
  out << ", " << "rewardCurveId=" << to_string(rewardCurveId);
  out << ")";
}


RaidBossKarmaBracket::~RaidBossKarmaBracket() throw() {
}


void RaidBossKarmaBracket::__set_raidBossActivityId(const RaidBossActivityID& val) {
  this->raidBossActivityId = val;
}

void RaidBossKarmaBracket::__set_minKarma(const int32_t val) {
  this->minKarma = val;
}

void RaidBossKarmaBracket::__set_maxKarma(const int32_t val) {
  this->maxKarma = val;
}

void RaidBossKarmaBracket::__set_minNotAttacked(const int32_t val) {
  this->minNotAttacked = val;
}

void RaidBossKarmaBracket::__set_maxNotAttacked(const int32_t val) {
  this->maxNotAttacked = val;
}

void RaidBossKarmaBracket::__set_stdDev(const double val) {
  this->stdDev = val;
}

void RaidBossKarmaBracket::__set_stdDevCutOff(const int32_t val) {
  this->stdDevCutOff = val;
}

void RaidBossKarmaBracket::__set_karmaIncrement(const int32_t val) {
  this->karmaIncrement = val;
}

void RaidBossKarmaBracket::__set_karmaDecrement(const int32_t val) {
  this->karmaDecrement = val;
}

void RaidBossKarmaBracket::__set_mvpKarmaIncrement(const int32_t val) {
  this->mvpKarmaIncrement = val;
}

void RaidBossKarmaBracket::__set_fairShareMultiplier(const double val) {
  this->fairShareMultiplier = val;
}
std::ostream& operator<<(std::ostream& out, const RaidBossKarmaBracket& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RaidBossKarmaBracket::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raidBossActivityId = false;
  bool isset_minKarma = false;
  bool isset_maxKarma = false;
  bool isset_minNotAttacked = false;
  bool isset_maxNotAttacked = false;
  bool isset_stdDev = false;
  bool isset_stdDevCutOff = false;
  bool isset_karmaIncrement = false;
  bool isset_karmaDecrement = false;
  bool isset_mvpKarmaIncrement = false;
  bool isset_fairShareMultiplier = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossActivityId);
          isset_raidBossActivityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minKarma);
          isset_minKarma = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxKarma);
          isset_maxKarma = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minNotAttacked);
          isset_minNotAttacked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxNotAttacked);
          isset_maxNotAttacked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stdDev);
          isset_stdDev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stdDevCutOff);
          isset_stdDevCutOff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->karmaIncrement);
          isset_karmaIncrement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->karmaDecrement);
          isset_karmaDecrement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mvpKarmaIncrement);
          isset_mvpKarmaIncrement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fairShareMultiplier);
          isset_fairShareMultiplier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raidBossActivityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minKarma)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxKarma)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minNotAttacked)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxNotAttacked)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stdDev)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stdDevCutOff)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_karmaIncrement)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_karmaDecrement)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mvpKarmaIncrement)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fairShareMultiplier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RaidBossKarmaBracket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RaidBossKarmaBracket");

  xfer += oprot->writeFieldBegin("raidBossActivityId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->raidBossActivityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minKarma", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->minKarma);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxKarma", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maxKarma);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minNotAttacked", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->minNotAttacked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxNotAttacked", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->maxNotAttacked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stdDev", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->stdDev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stdDevCutOff", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->stdDevCutOff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("karmaIncrement", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->karmaIncrement);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("karmaDecrement", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->karmaDecrement);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mvpKarmaIncrement", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->mvpKarmaIncrement);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fairShareMultiplier", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->fairShareMultiplier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RaidBossKarmaBracket &a, RaidBossKarmaBracket &b) {
  using ::std::swap;
  swap(a.raidBossActivityId, b.raidBossActivityId);
  swap(a.minKarma, b.minKarma);
  swap(a.maxKarma, b.maxKarma);
  swap(a.minNotAttacked, b.minNotAttacked);
  swap(a.maxNotAttacked, b.maxNotAttacked);
  swap(a.stdDev, b.stdDev);
  swap(a.stdDevCutOff, b.stdDevCutOff);
  swap(a.karmaIncrement, b.karmaIncrement);
  swap(a.karmaDecrement, b.karmaDecrement);
  swap(a.mvpKarmaIncrement, b.mvpKarmaIncrement);
  swap(a.fairShareMultiplier, b.fairShareMultiplier);
}

RaidBossKarmaBracket::RaidBossKarmaBracket(const RaidBossKarmaBracket& other1456) {
  raidBossActivityId = other1456.raidBossActivityId;
  minKarma = other1456.minKarma;
  maxKarma = other1456.maxKarma;
  minNotAttacked = other1456.minNotAttacked;
  maxNotAttacked = other1456.maxNotAttacked;
  stdDev = other1456.stdDev;
  stdDevCutOff = other1456.stdDevCutOff;
  karmaIncrement = other1456.karmaIncrement;
  karmaDecrement = other1456.karmaDecrement;
  mvpKarmaIncrement = other1456.mvpKarmaIncrement;
  fairShareMultiplier = other1456.fairShareMultiplier;
}
RaidBossKarmaBracket& RaidBossKarmaBracket::operator=(const RaidBossKarmaBracket& other1457) {
  raidBossActivityId = other1457.raidBossActivityId;
  minKarma = other1457.minKarma;
  maxKarma = other1457.maxKarma;
  minNotAttacked = other1457.minNotAttacked;
  maxNotAttacked = other1457.maxNotAttacked;
  stdDev = other1457.stdDev;
  stdDevCutOff = other1457.stdDevCutOff;
  karmaIncrement = other1457.karmaIncrement;
  karmaDecrement = other1457.karmaDecrement;
  mvpKarmaIncrement = other1457.mvpKarmaIncrement;
  fairShareMultiplier = other1457.fairShareMultiplier;
  return *this;
}
void RaidBossKarmaBracket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RaidBossKarmaBracket(";
  out << "raidBossActivityId=" << to_string(raidBossActivityId);
  out << ", " << "minKarma=" << to_string(minKarma);
  out << ", " << "maxKarma=" << to_string(maxKarma);
  out << ", " << "minNotAttacked=" << to_string(minNotAttacked);
  out << ", " << "maxNotAttacked=" << to_string(maxNotAttacked);
  out << ", " << "stdDev=" << to_string(stdDev);
  out << ", " << "stdDevCutOff=" << to_string(stdDevCutOff);
  out << ", " << "karmaIncrement=" << to_string(karmaIncrement);
  out << ", " << "karmaDecrement=" << to_string(karmaDecrement);
  out << ", " << "mvpKarmaIncrement=" << to_string(mvpKarmaIncrement);
  out << ", " << "fairShareMultiplier=" << to_string(fairShareMultiplier);
  out << ")";
}


RaidBossDifficultyBracket::~RaidBossDifficultyBracket() throw() {
}


void RaidBossDifficultyBracket::__set_raidBossActivityId(const RaidBossActivityID& val) {
  this->raidBossActivityId = val;
}

void RaidBossDifficultyBracket::__set_raidBossDifficultyBracketId(const RaidBossDifficultyBracketID& val) {
  this->raidBossDifficultyBracketId = val;
}

void RaidBossDifficultyBracket::__set_minDifficulty(const int32_t val) {
  this->minDifficulty = val;
}

void RaidBossDifficultyBracket::__set_maxDifficulty(const int32_t val) {
  this->maxDifficulty = val;
}
std::ostream& operator<<(std::ostream& out, const RaidBossDifficultyBracket& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RaidBossDifficultyBracket::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raidBossActivityId = false;
  bool isset_raidBossDifficultyBracketId = false;
  bool isset_minDifficulty = false;
  bool isset_maxDifficulty = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossActivityId);
          isset_raidBossActivityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->raidBossDifficultyBracketId);
          isset_raidBossDifficultyBracketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minDifficulty);
          isset_minDifficulty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxDifficulty);
          isset_maxDifficulty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raidBossActivityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_raidBossDifficultyBracketId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minDifficulty)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxDifficulty)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RaidBossDifficultyBracket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RaidBossDifficultyBracket");

  xfer += oprot->writeFieldBegin("raidBossActivityId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->raidBossActivityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raidBossDifficultyBracketId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->raidBossDifficultyBracketId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minDifficulty", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->minDifficulty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxDifficulty", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maxDifficulty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RaidBossDifficultyBracket &a, RaidBossDifficultyBracket &b) {
  using ::std::swap;
  swap(a.raidBossActivityId, b.raidBossActivityId);
  swap(a.raidBossDifficultyBracketId, b.raidBossDifficultyBracketId);
  swap(a.minDifficulty, b.minDifficulty);
  swap(a.maxDifficulty, b.maxDifficulty);
}

RaidBossDifficultyBracket::RaidBossDifficultyBracket(const RaidBossDifficultyBracket& other1458) {
  raidBossActivityId = other1458.raidBossActivityId;
  raidBossDifficultyBracketId = other1458.raidBossDifficultyBracketId;
  minDifficulty = other1458.minDifficulty;
  maxDifficulty = other1458.maxDifficulty;
}
RaidBossDifficultyBracket& RaidBossDifficultyBracket::operator=(const RaidBossDifficultyBracket& other1459) {
  raidBossActivityId = other1459.raidBossActivityId;
  raidBossDifficultyBracketId = other1459.raidBossDifficultyBracketId;
  minDifficulty = other1459.minDifficulty;
  maxDifficulty = other1459.maxDifficulty;
  return *this;
}
void RaidBossDifficultyBracket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RaidBossDifficultyBracket(";
  out << "raidBossActivityId=" << to_string(raidBossActivityId);
  out << ", " << "raidBossDifficultyBracketId=" << to_string(raidBossDifficultyBracketId);
  out << ", " << "minDifficulty=" << to_string(minDifficulty);
  out << ", " << "maxDifficulty=" << to_string(maxDifficulty);
  out << ")";
}


Data::~Data() throw() {
}


void Data::__set_rank(const std::map<RankID, Rank> & val) {
  this->rank = val;
}

void Data::__set_currency(const std::map<CurrencyID, Currency> & val) {
  this->currency = val;
}

void Data::__set_eventLock(const std::map<EventLockID, EventLock> & val) {
  this->eventLock = val;
}

void Data::__set_settings(const Settings& val) {
  this->settings = val;
__isset.settings = true;
}

void Data::__set_startingGameState(const StartingGameState& val) {
  this->startingGameState = val;
__isset.startingGameState = true;
}

void Data::__set_startingKingdomEntities(const std::map<EntityID, StartingKingdomEntity> & val) {
  this->startingKingdomEntities = val;
__isset.startingKingdomEntities = true;
}

void Data::__set_bundlesConfig(const std::map<BundleID, std::vector<ConfigBundle> > & val) {
  this->bundlesConfig = val;
}

void Data::__set_levelBlobs(const std::map<BlobID, LevelBlob> & val) {
  this->levelBlobs = val;
__isset.levelBlobs = true;
}

void Data::__set_resolutionBundles(const std::map<BundleID, std::vector<ConfigBundle> > & val) {
  this->resolutionBundles = val;
__isset.resolutionBundles = true;
}

void Data::__set_bundleManifest(const BundleManifest& val) {
  this->bundleManifest = val;
__isset.bundleManifest = true;
}

void Data::__set_resolutionManifests(const BundleManifest& val) {
  this->resolutionManifests = val;
__isset.resolutionManifests = true;
}

void Data::__set_localizationManifests(const BundleManifest& val) {
  this->localizationManifests = val;
__isset.localizationManifests = true;
}

void Data::__set_building(const std::map<BuildingID, Building> & val) {
  this->building = val;
}

void Data::__set_recipe(const std::map<RecipeID, Recipe> & val) {
  this->recipe = val;
}

void Data::__set_deco(const std::map<DecoID, Deco> & val) {
  this->deco = val;
}

void Data::__set_business(const std::map<BusinessID, Business> & val) {
  this->business = val;
}

void Data::__set_businessOrder(const std::map<BusinessOrderID, BusinessOrder> & val) {
  this->businessOrder = val;
__isset.businessOrder = true;
}

void Data::__set_inventoryTab(const std::map<int32_t, InventoryTab> & val) {
  this->inventoryTab = val;
}

void Data::__set_blockers(const std::map<BuildingID, Blocker> & val) {
  this->blockers = val;
}

void Data::__set_weightedLootList(const std::map<WeightedLootListID, std::vector<WeightedLoot> > & val) {
  this->weightedLootList = val;
}

void Data::__set_rarity(const std::map<RarityID, Rarity> & val) {
  this->rarity = val;
}

void Data::__set_newRarity(const std::map<RarityID, Rarity> & val) {
  this->newRarity = val;
__isset.newRarity = true;
}

void Data::__set_level(const std::map<LevelID, Level> & val) {
  this->level = val;
}

void Data::__set_boost(const std::map<BoostID, Boost> & val) {
  this->boost = val;
}

void Data::__set_levelDot(const std::map<LevelDotID, LevelDot> & val) {
  this->levelDot = val;
__isset.levelDot = true;
}

void Data::__set_villain(const std::map<VillainID, Villain> & val) {
  this->villain = val;
__isset.villain = true;
}

void Data::__set_matchThreeData(const std::map<LevelName, MatchThreeData> & val) {
  this->matchThreeData = val;
__isset.matchThreeData = true;
}

void Data::__set_newLevel(const std::map<LevelID, NewLevel> & val) {
  this->newLevel = val;
__isset.newLevel = true;
}

void Data::__set_newLevelDot(const std::map<LevelDotID, LevelDotV2> & val) {
  this->newLevelDot = val;
}

void Data::__set_material(const std::map<MaterialID, Material> & val) {
  this->material = val;
}

void Data::__set_island(const std::map<IslandID, Island> & val) {
  this->island = val;
}

void Data::__set_islandSettings(const IslandSettings& val) {
  this->islandSettings = val;
__isset.islandSettings = true;
}

void Data::__set_islandObject(const std::map<IslandObjectID, IslandObject> & val) {
  this->islandObject = val;
__isset.islandObject = true;
}

void Data::__set_color(const std::map<ColorID, Color> & val) {
  this->color = val;
__isset.color = true;
}

void Data::__set_expansion(const std::map<ExpansionID, Expansion> & val) {
  this->expansion = val;
}

void Data::__set_expansionType(const std::map<ExpansionTypeID, ExpansionType> & val) {
  this->expansionType = val;
}

void Data::__set_gachaGroup(const std::map<GachaGroupID, GachaGroup> & val) {
  this->gachaGroup = val;
}

void Data::__set_gachaOffer(const std::map<GachaOfferID, GachaOffer> & val) {
  this->gachaOffer = val;
}

void Data::__set_gachaPack(const std::map<GachaPackID, GachaPack> & val) {
  this->gachaPack = val;
}

void Data::__set_lootTable(const std::map<LootTableID, std::vector<LootTable> > & val) {
  this->lootTable = val;
}

void Data::__set_lootCurrencyGroup(const std::map<LootCurrencyGroupID, std::vector<LootCurrencyGroup> > & val) {
  this->lootCurrencyGroup = val;
}

void Data::__set_lootBuildingGroup(const std::map<LootBuildingGroupID, std::vector<LootBuildingGroup> > & val) {
  this->lootBuildingGroup = val;
}

void Data::__set_avatar(const std::map<AvatarID, Avatar> & val) {
  this->avatar = val;
}

void Data::__set_adminMessages(const std::map<AdminMessageID, AdminMessage> & val) {
  this->adminMessages = val;
__isset.adminMessages = true;
}

void Data::__set_adminGiftMessages(const std::vector<AdminGiftMessage> & val) {
  this->adminGiftMessages = val;
}

void Data::__set_analyticsEvents(const std::map<AnalyticsEventID, AnalyticsEvent> & val) {
  this->analyticsEvents = val;
}

void Data::__set_appBoyEvents(const std::map<AnalyticsEventID, AppBoyEvent> & val) {
  this->appBoyEvents = val;
}

void Data::__set_analyticsDimensions(const std::map<AnalyticsDimensionID, AnalyticsDimension> & val) {
  this->analyticsDimensions = val;
}

void Data::__set_apsalarEvents(const std::map<AnalyticsEventID, ApsalarEvent> & val) {
  this->apsalarEvents = val;
__isset.apsalarEvents = true;
}

void Data::__set_businessOrderList(const std::map<BusinessOrderListID, BusinessOrderList> & val) {
  this->businessOrderList = val;
__isset.businessOrderList = true;
}

void Data::__set_businessEvolution(const std::map<EvolutionMaterialID, BusinessEvolution> & val) {
  this->businessEvolution = val;
}

void Data::__set_npc(const std::map<NpcID, Npc> & val) {
  this->npc = val;
}

void Data::__set_vendorProducts(const std::map<StoreProductID, VendorProduct> & val) {
  this->vendorProducts = val;
}

void Data::__set_storeProducts(const std::map<StoreProductID, StoreProduct> & val) {
  this->storeProducts = val;
}

void Data::__set_buyItemOrder(const std::map<MarketOrderID, BuyItemOrder> & val) {
  this->buyItemOrder = val;
}

void Data::__set_marketType(const std::map<MarketType::type, Market> & val) {
  this->marketType = val;
}

void Data::__set_forcedUpgrade(const std::map<ClientPlatform::type, ForcedUpgrade> & val) {
  this->forcedUpgrade = val;
}

void Data::__set_errorMessage(const std::map<ErrorId, ErrorMessage> & val) {
  this->errorMessage = val;
}

void Data::__set_achievement(const std::map<AchievementID, Achievement> & val) {
  this->achievement = val;
__isset.achievement = true;
}

void Data::__set_achievementGroup(const std::map<AchievementGroupID, AchievementGroup> & val) {
  this->achievementGroup = val;
__isset.achievementGroup = true;
}

void Data::__set_testBuckets(const std::map<TestBucketID, TestBucket> & val) {
  this->testBuckets = val;
}

void Data::__set_strangerSettings(const StrangerSettings& val) {
  this->strangerSettings = val;
}

void Data::__set_strangerMatchSettings(const std::vector<StrangerMatchSettings> & val) {
  this->strangerMatchSettings = val;
}

void Data::__set_fakeStrangerDisplays(const std::vector<FakeStrangerDisplay> & val) {
  this->fakeStrangerDisplays = val;
}

void Data::__set_giftMessageRewards(const std::map<GiftMessageRewardID, GiftMessageReward> & val) {
  this->giftMessageRewards = val;
}

void Data::__set_partialKingdomLikeGifts(const std::vector<PartialKingdomLikeGift> & val) {
  this->partialKingdomLikeGifts = val;
}

void Data::__set_kingdomLikeGifts(const std::map<KingdomLikeGiftID, KingdomLikeGift> & val) {
  this->kingdomLikeGifts = val;
}

void Data::__set_pushMessages(const std::map<PushMessageID, PushMessage> & val) {
  this->pushMessages = val;
__isset.pushMessages = true;
}

void Data::__set_socialUnlockrewards(const std::map<SocialUnlockRewardID, SocialUnlockReward> & val) {
  this->socialUnlockrewards = val;
__isset.socialUnlockrewards = true;
}

void Data::__set_adProviders(const std::vector<AdProvider> & val) {
  this->adProviders = val;
__isset.adProviders = true;
}

void Data::__set_popupTemplate(const std::vector<PopupTemplate> & val) {
  this->popupTemplate = val;
}

void Data::__set_defaultTemplate(const std::map<PopupTemplateType::type, DefaultTemplate> & val) {
  this->defaultTemplate = val;
}

void Data::__set_rushCostsByRemainingTime(const std::vector<RushCostByRemainingTime> & val) {
  this->rushCostsByRemainingTime = val;
}

void Data::__set_messageTemplateModifiers(const std::map<PopupMessageID, std::vector<MessageTemplateModifier> > & val) {
  this->messageTemplateModifiers = val;
__isset.messageTemplateModifiers = true;
}

void Data::__set_gachaBanner(const std::map<GachaBannerID, GachaBanner> & val) {
  this->gachaBanner = val;
__isset.gachaBanner = true;
}

void Data::__set_presetKingdoms(const std::map<PresetKingdomID, std::vector<PresetKingdomEntity> > & val) {
  this->presetKingdoms = val;
__isset.presetKingdoms = true;
}

void Data::__set_abTests(const std::map<ABTestID, std::vector<ABTest> > & val) {
  this->abTests = val;
__isset.abTests = true;
}

void Data::__set_clientVersionTestBuckets(const std::map<ABTestID, ClientVersionTestBucket> & val) {
  this->clientVersionTestBuckets = val;
__isset.clientVersionTestBuckets = true;
}

void Data::__set_buildMenuSpecialCard(const std::map<BuildMenuSpecialCardID, BuildMenuSpecialCard> & val) {
  this->buildMenuSpecialCard = val;
__isset.buildMenuSpecialCard = true;
}

void Data::__set_businessMenuSettings(const BusinessMenuSettings& val) {
  this->businessMenuSettings = val;
__isset.businessMenuSettings = true;
}

void Data::__set_rewardMessages(const std::map<RewardMessageID, RewardMessage> & val) {
  this->rewardMessages = val;
}

void Data::__set_events(const std::map<EventID, Event> & val) {
  this->events = val;
}

void Data::__set_leaderboards(const std::map<LeaderboardID, Leaderboard> & val) {
  this->leaderboards = val;
}

void Data::__set_leaderboardSettings(const LeaderboardSettings& val) {
  this->leaderboardSettings = val;
}

void Data::__set_leaderboardLeagues(const std::vector<LeaderboardLeague> & val) {
  this->leaderboardLeagues = val;
__isset.leaderboardLeagues = true;
}

void Data::__set_leaderboardRibbons(const std::vector<LeaderboardRibbon> & val) {
  this->leaderboardRibbons = val;
__isset.leaderboardRibbons = true;
}

void Data::__set_leaderboardRewards(const std::vector<LeaderboardReward> & val) {
  this->leaderboardRewards = val;
__isset.leaderboardRewards = true;
}

void Data::__set_leaderboardPlacements(const std::map<CurrencyID, std::vector<LeaderboardPlacement> > & val) {
  this->leaderboardPlacements = val;
}

void Data::__set_rarityEvoLevelKeyDropRates(const std::vector<RarityEvoLevelKeyDropRate> & val) {
  this->rarityEvoLevelKeyDropRates = val;
}

void Data::__set_keyDropRateByOrderTime(const std::map<EventKeyDropRateFormulaID, std::vector<KeyDropRateByOrderTime> > & val) {
  this->keyDropRateByOrderTime = val;
}

void Data::__set_eventBusinessKeyDropRates(const std::map<BuildingID, EventBusinessKeyDropRate> & val) {
  this->eventBusinessKeyDropRates = val;
}

void Data::__set_leaderboardTemplates(const std::map<LeaderboardTemplateID, LeaderboardTemplate> & val) {
  this->leaderboardTemplates = val;
__isset.leaderboardTemplates = true;
}

void Data::__set_eventIslands(const std::map<EventIslandID, EventIsland> & val) {
  this->eventIslands = val;
}

void Data::__set_eventHowToPlays(const std::map<EventHowToPlayID, EventHowToPlay> & val) {
  this->eventHowToPlays = val;
}

void Data::__set_eventMainMenus(const std::map<EventMainMenuID, EventMainMenu> & val) {
  this->eventMainMenus = val;
}

void Data::__set_castleActivities(const std::map<CastleActivityID, CastleActivity> & val) {
  this->castleActivities = val;
}

void Data::__set_playerDisplaySuggestStart(const std::vector<PlayerDisplaySuggest> & val) {
  this->playerDisplaySuggestStart = val;
}

void Data::__set_playerDisplaySuggestMiddle(const std::vector<PlayerDisplaySuggest> & val) {
  this->playerDisplaySuggestMiddle = val;
}

void Data::__set_playerDisplaySuggestEnd(const std::vector<PlayerDisplaySuggest> & val) {
  this->playerDisplaySuggestEnd = val;
}

void Data::__set_tutorialStates(const std::vector<TutorialState> & val) {
  this->tutorialStates = val;
}

void Data::__set_popupMessages(const std::map<PopupMessageID, PopupMessage> & val) {
  this->popupMessages = val;
}

void Data::__set_popupMessageSettings(const PopupMessageSettings& val) {
  this->popupMessageSettings = val;
}

void Data::__set_eventSettings(const EventSettings& val) {
  this->eventSettings = val;
__isset.eventSettings = true;
}

void Data::__set_screenNameMapping(const std::vector<ScreenNameMapping> & val) {
  this->screenNameMapping = val;
__isset.screenNameMapping = true;
}

void Data::__set_cellInfo(const std::map<CellInfoMapID, std::vector<CellInfo> > & val) {
  this->cellInfo = val;
__isset.cellInfo = true;
}

void Data::__set_keyCostPerLevel(const std::map<KeyCostPerLevelID, std::vector<KeyCostPerLevel> > & val) {
  this->keyCostPerLevel = val;
__isset.keyCostPerLevel = true;
}

void Data::__set_playerMatchRankSettings(const std::vector<PlayerMatchRankSettings> & val) {
  this->playerMatchRankSettings = val;
__isset.playerMatchRankSettings = true;
}

void Data::__set_buildingMultipliers(const std::map<BuildingID, BuildingMultiplier> & val) {
  this->buildingMultipliers = val;
}

void Data::__set_guildLeaderboardSettings(const GuildLeaderboardSettings& val) {
  this->guildLeaderboardSettings = val;
}

void Data::__set_guildLeaderboards(const std::map<GuildLeaderboardID, GuildLeaderboard> & val) {
  this->guildLeaderboards = val;
__isset.guildLeaderboards = true;
}

void Data::__set_guildLeaderboardRibbons(const std::vector<GuildLeaderboardRibbon> & val) {
  this->guildLeaderboardRibbons = val;
__isset.guildLeaderboardRibbons = true;
}

void Data::__set_guildLeaderboardRewards(const std::vector<GuildLeaderboardReward> & val) {
  this->guildLeaderboardRewards = val;
__isset.guildLeaderboardRewards = true;
}

void Data::__set_locations(const std::map<LocationID, Location> & val) {
  this->locations = val;
}

void Data::__set_guildSettings(const GuildSettings& val) {
  this->guildSettings = val;
}

void Data::__set_guildMemberTypeDisplays(const std::map<GuildMemberType::type, GuildMemberTypeDisplay> & val) {
  this->guildMemberTypeDisplays = val;
}

void Data::__set_guildJoinTypeDisplays(const std::map<GuildJoinType::type, GuildJoinTypeDisplay> & val) {
  this->guildJoinTypeDisplays = val;
}

void Data::__set_guildEmblems(const std::map<GuildEmblemID, GuildEmblem> & val) {
  this->guildEmblems = val;
}

void Data::__set_guildBoundItems(const std::vector<GuildBoundItem> & val) {
  this->guildBoundItems = val;
}

void Data::__set_guildRank(const std::map<GuildRankID, GuildRank> & val) {
  this->guildRank = val;
}

void Data::__set_chatSystemMessages(const std::map<ChatSystemMessageID, ChatSystemMessage> & val) {
  this->chatSystemMessages = val;
}

void Data::__set_gifts(const std::map<GiftID, Gift> & val) {
  this->gifts = val;
}

void Data::__set_pollSettings(const PollSettings& val) {
  this->pollSettings = val;
__isset.pollSettings = true;
}

void Data::__set_guildNameSuggestStart(const std::vector<GuildNameSuggest> & val) {
  this->guildNameSuggestStart = val;
}

void Data::__set_guildNameSuggestMiddle(const std::vector<GuildNameSuggest> & val) {
  this->guildNameSuggestMiddle = val;
}

void Data::__set_guildNameSuggestEnd(const std::vector<GuildNameSuggest> & val) {
  this->guildNameSuggestEnd = val;
}

void Data::__set_quests(const std::map<QuestID, Quest> & val) {
  this->quests = val;
}

void Data::__set_questGoals(const std::vector<Goal> & val) {
  this->questGoals = val;
__isset.questGoals = true;
}

void Data::__set_questTemplates(const std::map<QuestID, Quest> & val) {
  this->questTemplates = val;
}

void Data::__set_questGoalTemplates(const std::vector<Goal> & val) {
  this->questGoalTemplates = val;
__isset.questGoalTemplates = true;
}

void Data::__set_questNpc(const std::map<QuestNpcID, QuestNpc> & val) {
  this->questNpc = val;
}

void Data::__set_businessQuestNpc(const std::map<BuildingID, BusinessQuestNpc> & val) {
  this->businessQuestNpc = val;
}

void Data::__set_happinessSettings(const HappinessSettings& val) {
  this->happinessSettings = val;
__isset.happinessSettings = true;
}

void Data::__set_stores(const std::map<StoreID, Store> & val) {
  this->stores = val;
}

void Data::__set_storeInventories(const std::map<StoreID, std::vector<StoreInventoryItem> > & val) {
  this->storeInventories = val;
}

void Data::__set_cardOffers(const std::map<CardOfferID, CardOffer> & val) {
  this->cardOffers = val;
}

void Data::__set_iapProducts(const std::map<IAPProductID, IAPProduct> & val) {
  this->iapProducts = val;
}

void Data::__set_campaignSettings(const CampaignSettings& val) {
  this->campaignSettings = val;
}

void Data::__set_levelCampaigns(const std::map<LevelCampaignID, LevelCampaign> & val) {
  this->levelCampaigns = val;
}

void Data::__set_businessLevelIdsLookup(const std::map<LevelCampaignID, BusinessLevelsList> & val) {
  this->businessLevelIdsLookup = val;
__isset.businessLevelIdsLookup = true;
}

void Data::__set_castleEventLevelIdsLookup(const std::map<LevelCampaignID, CastleEventLevelsList> & val) {
  this->castleEventLevelIdsLookup = val;
__isset.castleEventLevelIdsLookup = true;
}

void Data::__set_campaignLevelIdsLookup(const std::map<LevelCampaignID, LevelCampaignLevelsList> & val) {
  this->campaignLevelIdsLookup = val;
__isset.campaignLevelIdsLookup = true;
}

void Data::__set_levelCampaignStyles(const std::map<LevelCampaignStyleID, LevelCampaignStyle> & val) {
  this->levelCampaignStyles = val;
}

void Data::__set_buildingTypeLocalizations(const std::map<BuildingType::type, BuildingTypeLocalization> & val) {
  this->buildingTypeLocalizations = val;
}

void Data::__set_ftueSettings(const FTUESettings& val) {
  this->ftueSettings = val;
__isset.ftueSettings = true;
}

void Data::__set_matchThreeCellDefinitions(const std::map<Match3ThemeId, std::vector<MatchThreeCellDefinition> > & val) {
  this->matchThreeCellDefinitions = val;
__isset.matchThreeCellDefinitions = true;
}

void Data::__set_matchThreeBlasterDefinitions(const std::map<Match3ThemeId, std::vector<MatchThreeBlasterDefinition> > & val) {
  this->matchThreeBlasterDefinitions = val;
__isset.matchThreeBlasterDefinitions = true;
}

void Data::__set_goalDisplayTemplates(const std::vector<GoalDisplayTemplate> & val) {
  this->goalDisplayTemplates = val;
}

void Data::__set_questTitles(const std::map<GoalType::type, std::vector<QuestDisplayTemplate> > & val) {
  this->questTitles = val;
}

void Data::__set_questSettings(const QuestSettings& val) {
  this->questSettings = val;
}

void Data::__set_questRankSettings(const std::map<RankID, QuestRankSettings> & val) {
  this->questRankSettings = val;
}

void Data::__set_newBusinessOrders(const std::map<BusinessOrderID, NewBusinessOrder> & val) {
  this->newBusinessOrders = val;
}

void Data::__set_eventMenuWidgets(const std::map<EventMenuWidgetID, EventMenuWidget> & val) {
  this->eventMenuWidgets = val;
__isset.eventMenuWidgets = true;
}

void Data::__set_gearAvailableOnGachas(const std::map<CurrencyID, GearAvailableOnGachaOfferList> & val) {
  this->gearAvailableOnGachas = val;
__isset.gearAvailableOnGachas = true;
}

void Data::__set_gearAvailableOnCardOffers(const std::map<CurrencyID, GearAvailableOnCardOfferList> & val) {
  this->gearAvailableOnCardOffers = val;
__isset.gearAvailableOnCardOffers = true;
}

void Data::__set_gearAvailableOnLevels(const std::map<CurrencyID, GearAvailableOnLevelList> & val) {
  this->gearAvailableOnLevels = val;
__isset.gearAvailableOnLevels = true;
}

void Data::__set_gearAvailableOnBusinessHarvest(const std::map<CurrencyID, GearAvailableOnBusinessHarvestList> & val) {
  this->gearAvailableOnBusinessHarvest = val;
__isset.gearAvailableOnBusinessHarvest = true;
}

void Data::__set_mainShopEntries(const std::map<MainShopEntryID, MainShopEntry> & val) {
  this->mainShopEntries = val;
}

void Data::__set_askForItems(const std::map<AskForItemID, AskForItemEntry> & val) {
  this->askForItems = val;
__isset.askForItems = true;
}

void Data::__set_storeTabs(const std::map<StoreTabID, StoreTab> & val) {
  this->storeTabs = val;
__isset.storeTabs = true;
}

void Data::__set_guildQuestRewards(const std::map<GuildQuestRewardID, std::vector<GuildQuestReward> > & val) {
  this->guildQuestRewards = val;
__isset.guildQuestRewards = true;
}

void Data::__set_raidBosses(const std::map<RaidBossID, RaidBoss> & val) {
  this->raidBosses = val;
__isset.raidBosses = true;
}

void Data::__set_raidBossActivities(const std::map<RaidBossActivityID, RaidBossActivity> & val) {
  this->raidBossActivities = val;
__isset.raidBossActivities = true;
}

void Data::__set_raidBossObjectives(const std::map<RaidBossObjectiveID, RaidBossObjective> & val) {
  this->raidBossObjectives = val;
__isset.raidBossObjectives = true;
}

void Data::__set_raidBossKarmaBrackets(const std::map<RaidBossActivityID, std::vector<RaidBossKarmaBracket> > & val) {
  this->raidBossKarmaBrackets = val;
__isset.raidBossKarmaBrackets = true;
}

void Data::__set_raidBossDifficultyBrackets(const std::map<RaidBossActivityID, std::vector<RaidBossDifficultyBracket> > & val) {
  this->raidBossDifficultyBrackets = val;
__isset.raidBossDifficultyBrackets = true;
}

void Data::__set_raidBossCurves(const std::map<RaidBossCurveID, std::vector<RaidBossCurve> > & val) {
  this->raidBossCurves = val;
__isset.raidBossCurves = true;
}

void Data::__set_raidBossRewards(const std::map<RaidBossRewardID, std::vector<RaidBossReward> > & val) {
  this->raidBossRewards = val;
__isset.raidBossRewards = true;
}

void Data::__set_raidBossRarities(const std::map<RaidBossRarityID, RaidBossRarity> & val) {
  this->raidBossRarities = val;
__isset.raidBossRarities = true;
}

void Data::__set_heroes(const std::map<HeroID, Hero> & val) {
  this->heroes = val;
__isset.heroes = true;
}
std::ostream& operator<<(std::ostream& out, const Data& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rank = false;
  bool isset_currency = false;
  bool isset_eventLock = false;
  bool isset_bundlesConfig = false;
  bool isset_building = false;
  bool isset_recipe = false;
  bool isset_deco = false;
  bool isset_business = false;
  bool isset_inventoryTab = false;
  bool isset_blockers = false;
  bool isset_weightedLootList = false;
  bool isset_rarity = false;
  bool isset_level = false;
  bool isset_boost = false;
  bool isset_newLevelDot = false;
  bool isset_material = false;
  bool isset_island = false;
  bool isset_expansion = false;
  bool isset_expansionType = false;
  bool isset_gachaGroup = false;
  bool isset_gachaOffer = false;
  bool isset_gachaPack = false;
  bool isset_lootTable = false;
  bool isset_lootCurrencyGroup = false;
  bool isset_lootBuildingGroup = false;
  bool isset_avatar = false;
  bool isset_adminGiftMessages = false;
  bool isset_analyticsEvents = false;
  bool isset_appBoyEvents = false;
  bool isset_analyticsDimensions = false;
  bool isset_businessEvolution = false;
  bool isset_npc = false;
  bool isset_vendorProducts = false;
  bool isset_storeProducts = false;
  bool isset_buyItemOrder = false;
  bool isset_marketType = false;
  bool isset_forcedUpgrade = false;
  bool isset_errorMessage = false;
  bool isset_testBuckets = false;
  bool isset_strangerSettings = false;
  bool isset_strangerMatchSettings = false;
  bool isset_fakeStrangerDisplays = false;
  bool isset_giftMessageRewards = false;
  bool isset_partialKingdomLikeGifts = false;
  bool isset_kingdomLikeGifts = false;
  bool isset_popupTemplate = false;
  bool isset_defaultTemplate = false;
  bool isset_rushCostsByRemainingTime = false;
  bool isset_rewardMessages = false;
  bool isset_events = false;
  bool isset_leaderboards = false;
  bool isset_leaderboardSettings = false;
  bool isset_leaderboardPlacements = false;
  bool isset_rarityEvoLevelKeyDropRates = false;
  bool isset_keyDropRateByOrderTime = false;
  bool isset_eventBusinessKeyDropRates = false;
  bool isset_eventIslands = false;
  bool isset_eventHowToPlays = false;
  bool isset_eventMainMenus = false;
  bool isset_castleActivities = false;
  bool isset_playerDisplaySuggestStart = false;
  bool isset_playerDisplaySuggestMiddle = false;
  bool isset_playerDisplaySuggestEnd = false;
  bool isset_tutorialStates = false;
  bool isset_popupMessages = false;
  bool isset_popupMessageSettings = false;
  bool isset_buildingMultipliers = false;
  bool isset_guildLeaderboardSettings = false;
  bool isset_locations = false;
  bool isset_guildSettings = false;
  bool isset_guildMemberTypeDisplays = false;
  bool isset_guildJoinTypeDisplays = false;
  bool isset_guildEmblems = false;
  bool isset_guildBoundItems = false;
  bool isset_guildRank = false;
  bool isset_chatSystemMessages = false;
  bool isset_gifts = false;
  bool isset_guildNameSuggestStart = false;
  bool isset_guildNameSuggestMiddle = false;
  bool isset_guildNameSuggestEnd = false;
  bool isset_quests = false;
  bool isset_questTemplates = false;
  bool isset_questNpc = false;
  bool isset_businessQuestNpc = false;
  bool isset_stores = false;
  bool isset_storeInventories = false;
  bool isset_cardOffers = false;
  bool isset_iapProducts = false;
  bool isset_campaignSettings = false;
  bool isset_levelCampaigns = false;
  bool isset_levelCampaignStyles = false;
  bool isset_buildingTypeLocalizations = false;
  bool isset_goalDisplayTemplates = false;
  bool isset_questTitles = false;
  bool isset_questSettings = false;
  bool isset_questRankSettings = false;
  bool isset_newBusinessOrders = false;
  bool isset_mainShopEntries = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rank.clear();
            uint32_t _size1460;
            ::apache::thrift::protocol::TType _ktype1461;
            ::apache::thrift::protocol::TType _vtype1462;
            xfer += iprot->readMapBegin(_ktype1461, _vtype1462, _size1460);
            uint32_t _i1464;
            for (_i1464 = 0; _i1464 < _size1460; ++_i1464)
            {
              RankID _key1465;
              xfer += iprot->readI32(_key1465);
              Rank& _val1466 = this->rank[_key1465];
              xfer += _val1466.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_rank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->currency.clear();
            uint32_t _size1467;
            ::apache::thrift::protocol::TType _ktype1468;
            ::apache::thrift::protocol::TType _vtype1469;
            xfer += iprot->readMapBegin(_ktype1468, _vtype1469, _size1467);
            uint32_t _i1471;
            for (_i1471 = 0; _i1471 < _size1467; ++_i1471)
            {
              CurrencyID _key1472;
              xfer += iprot->readString(_key1472);
              Currency& _val1473 = this->currency[_key1472];
              xfer += _val1473.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->eventLock.clear();
            uint32_t _size1474;
            ::apache::thrift::protocol::TType _ktype1475;
            ::apache::thrift::protocol::TType _vtype1476;
            xfer += iprot->readMapBegin(_ktype1475, _vtype1476, _size1474);
            uint32_t _i1478;
            for (_i1478 = 0; _i1478 < _size1474; ++_i1478)
            {
              EventLockID _key1479;
              xfer += iprot->readString(_key1479);
              EventLock& _val1480 = this->eventLock[_key1479];
              xfer += _val1480.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_eventLock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->settings.read(iprot);
          this->__isset.settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startingGameState.read(iprot);
          this->__isset.startingGameState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 93:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->startingKingdomEntities.clear();
            uint32_t _size1481;
            ::apache::thrift::protocol::TType _ktype1482;
            ::apache::thrift::protocol::TType _vtype1483;
            xfer += iprot->readMapBegin(_ktype1482, _vtype1483, _size1481);
            uint32_t _i1485;
            for (_i1485 = 0; _i1485 < _size1481; ++_i1485)
            {
              EntityID _key1486;
              xfer += iprot->readI32(_key1486);
              StartingKingdomEntity& _val1487 = this->startingKingdomEntities[_key1486];
              xfer += _val1487.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.startingKingdomEntities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bundlesConfig.clear();
            uint32_t _size1488;
            ::apache::thrift::protocol::TType _ktype1489;
            ::apache::thrift::protocol::TType _vtype1490;
            xfer += iprot->readMapBegin(_ktype1489, _vtype1490, _size1488);
            uint32_t _i1492;
            for (_i1492 = 0; _i1492 < _size1488; ++_i1492)
            {
              BundleID _key1493;
              xfer += iprot->readString(_key1493);
              std::vector<ConfigBundle> & _val1494 = this->bundlesConfig[_key1493];
              {
                _val1494.clear();
                uint32_t _size1495;
                ::apache::thrift::protocol::TType _etype1498;
                xfer += iprot->readListBegin(_etype1498, _size1495);
                _val1494.resize(_size1495);
                uint32_t _i1499;
                for (_i1499 = 0; _i1499 < _size1495; ++_i1499)
                {
                  xfer += _val1494[_i1499].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_bundlesConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->levelBlobs.clear();
            uint32_t _size1500;
            ::apache::thrift::protocol::TType _ktype1501;
            ::apache::thrift::protocol::TType _vtype1502;
            xfer += iprot->readMapBegin(_ktype1501, _vtype1502, _size1500);
            uint32_t _i1504;
            for (_i1504 = 0; _i1504 < _size1500; ++_i1504)
            {
              BlobID _key1505;
              xfer += iprot->readString(_key1505);
              LevelBlob& _val1506 = this->levelBlobs[_key1505];
              xfer += _val1506.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.levelBlobs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 300:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->resolutionBundles.clear();
            uint32_t _size1507;
            ::apache::thrift::protocol::TType _ktype1508;
            ::apache::thrift::protocol::TType _vtype1509;
            xfer += iprot->readMapBegin(_ktype1508, _vtype1509, _size1507);
            uint32_t _i1511;
            for (_i1511 = 0; _i1511 < _size1507; ++_i1511)
            {
              BundleID _key1512;
              xfer += iprot->readString(_key1512);
              std::vector<ConfigBundle> & _val1513 = this->resolutionBundles[_key1512];
              {
                _val1513.clear();
                uint32_t _size1514;
                ::apache::thrift::protocol::TType _etype1517;
                xfer += iprot->readListBegin(_etype1517, _size1514);
                _val1513.resize(_size1514);
                uint32_t _i1518;
                for (_i1518 = 0; _i1518 < _size1514; ++_i1518)
                {
                  xfer += _val1513[_i1518].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.resolutionBundles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 310:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bundleManifest.read(iprot);
          this->__isset.bundleManifest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 320:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resolutionManifests.read(iprot);
          this->__isset.resolutionManifests = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 330:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->localizationManifests.read(iprot);
          this->__isset.localizationManifests = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->building.clear();
            uint32_t _size1519;
            ::apache::thrift::protocol::TType _ktype1520;
            ::apache::thrift::protocol::TType _vtype1521;
            xfer += iprot->readMapBegin(_ktype1520, _vtype1521, _size1519);
            uint32_t _i1523;
            for (_i1523 = 0; _i1523 < _size1519; ++_i1523)
            {
              BuildingID _key1524;
              xfer += iprot->readString(_key1524);
              Building& _val1525 = this->building[_key1524];
              xfer += _val1525.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_building = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->recipe.clear();
            uint32_t _size1526;
            ::apache::thrift::protocol::TType _ktype1527;
            ::apache::thrift::protocol::TType _vtype1528;
            xfer += iprot->readMapBegin(_ktype1527, _vtype1528, _size1526);
            uint32_t _i1530;
            for (_i1530 = 0; _i1530 < _size1526; ++_i1530)
            {
              RecipeID _key1531;
              xfer += iprot->readString(_key1531);
              Recipe& _val1532 = this->recipe[_key1531];
              xfer += _val1532.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_recipe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->deco.clear();
            uint32_t _size1533;
            ::apache::thrift::protocol::TType _ktype1534;
            ::apache::thrift::protocol::TType _vtype1535;
            xfer += iprot->readMapBegin(_ktype1534, _vtype1535, _size1533);
            uint32_t _i1537;
            for (_i1537 = 0; _i1537 < _size1533; ++_i1537)
            {
              DecoID _key1538;
              xfer += iprot->readString(_key1538);
              Deco& _val1539 = this->deco[_key1538];
              xfer += _val1539.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_deco = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->business.clear();
            uint32_t _size1540;
            ::apache::thrift::protocol::TType _ktype1541;
            ::apache::thrift::protocol::TType _vtype1542;
            xfer += iprot->readMapBegin(_ktype1541, _vtype1542, _size1540);
            uint32_t _i1544;
            for (_i1544 = 0; _i1544 < _size1540; ++_i1544)
            {
              BusinessID _key1545;
              xfer += iprot->readString(_key1545);
              Business& _val1546 = this->business[_key1545];
              xfer += _val1546.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_business = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->businessOrder.clear();
            uint32_t _size1547;
            ::apache::thrift::protocol::TType _ktype1548;
            ::apache::thrift::protocol::TType _vtype1549;
            xfer += iprot->readMapBegin(_ktype1548, _vtype1549, _size1547);
            uint32_t _i1551;
            for (_i1551 = 0; _i1551 < _size1547; ++_i1551)
            {
              BusinessOrderID _key1552;
              xfer += iprot->readString(_key1552);
              BusinessOrder& _val1553 = this->businessOrder[_key1552];
              xfer += _val1553.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.businessOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->inventoryTab.clear();
            uint32_t _size1554;
            ::apache::thrift::protocol::TType _ktype1555;
            ::apache::thrift::protocol::TType _vtype1556;
            xfer += iprot->readMapBegin(_ktype1555, _vtype1556, _size1554);
            uint32_t _i1558;
            for (_i1558 = 0; _i1558 < _size1554; ++_i1558)
            {
              int32_t _key1559;
              xfer += iprot->readI32(_key1559);
              InventoryTab& _val1560 = this->inventoryTab[_key1559];
              xfer += _val1560.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_inventoryTab = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->blockers.clear();
            uint32_t _size1561;
            ::apache::thrift::protocol::TType _ktype1562;
            ::apache::thrift::protocol::TType _vtype1563;
            xfer += iprot->readMapBegin(_ktype1562, _vtype1563, _size1561);
            uint32_t _i1565;
            for (_i1565 = 0; _i1565 < _size1561; ++_i1565)
            {
              BuildingID _key1566;
              xfer += iprot->readString(_key1566);
              Blocker& _val1567 = this->blockers[_key1566];
              xfer += _val1567.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_blockers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->weightedLootList.clear();
            uint32_t _size1568;
            ::apache::thrift::protocol::TType _ktype1569;
            ::apache::thrift::protocol::TType _vtype1570;
            xfer += iprot->readMapBegin(_ktype1569, _vtype1570, _size1568);
            uint32_t _i1572;
            for (_i1572 = 0; _i1572 < _size1568; ++_i1572)
            {
              WeightedLootListID _key1573;
              xfer += iprot->readString(_key1573);
              std::vector<WeightedLoot> & _val1574 = this->weightedLootList[_key1573];
              {
                _val1574.clear();
                uint32_t _size1575;
                ::apache::thrift::protocol::TType _etype1578;
                xfer += iprot->readListBegin(_etype1578, _size1575);
                _val1574.resize(_size1575);
                uint32_t _i1579;
                for (_i1579 = 0; _i1579 < _size1575; ++_i1579)
                {
                  xfer += _val1574[_i1579].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_weightedLootList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rarity.clear();
            uint32_t _size1580;
            ::apache::thrift::protocol::TType _ktype1581;
            ::apache::thrift::protocol::TType _vtype1582;
            xfer += iprot->readMapBegin(_ktype1581, _vtype1582, _size1580);
            uint32_t _i1584;
            for (_i1584 = 0; _i1584 < _size1580; ++_i1584)
            {
              RarityID _key1585;
              xfer += iprot->readI32(_key1585);
              Rarity& _val1586 = this->rarity[_key1585];
              xfer += _val1586.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_rarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->newRarity.clear();
            uint32_t _size1587;
            ::apache::thrift::protocol::TType _ktype1588;
            ::apache::thrift::protocol::TType _vtype1589;
            xfer += iprot->readMapBegin(_ktype1588, _vtype1589, _size1587);
            uint32_t _i1591;
            for (_i1591 = 0; _i1591 < _size1587; ++_i1591)
            {
              RarityID _key1592;
              xfer += iprot->readI32(_key1592);
              Rarity& _val1593 = this->newRarity[_key1592];
              xfer += _val1593.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.newRarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->level.clear();
            uint32_t _size1594;
            ::apache::thrift::protocol::TType _ktype1595;
            ::apache::thrift::protocol::TType _vtype1596;
            xfer += iprot->readMapBegin(_ktype1595, _vtype1596, _size1594);
            uint32_t _i1598;
            for (_i1598 = 0; _i1598 < _size1594; ++_i1598)
            {
              LevelID _key1599;
              xfer += iprot->readString(_key1599);
              Level& _val1600 = this->level[_key1599];
              xfer += _val1600.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->boost.clear();
            uint32_t _size1601;
            ::apache::thrift::protocol::TType _ktype1602;
            ::apache::thrift::protocol::TType _vtype1603;
            xfer += iprot->readMapBegin(_ktype1602, _vtype1603, _size1601);
            uint32_t _i1605;
            for (_i1605 = 0; _i1605 < _size1601; ++_i1605)
            {
              BoostID _key1606;
              xfer += iprot->readString(_key1606);
              Boost& _val1607 = this->boost[_key1606];
              xfer += _val1607.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_boost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->levelDot.clear();
            uint32_t _size1608;
            ::apache::thrift::protocol::TType _ktype1609;
            ::apache::thrift::protocol::TType _vtype1610;
            xfer += iprot->readMapBegin(_ktype1609, _vtype1610, _size1608);
            uint32_t _i1612;
            for (_i1612 = 0; _i1612 < _size1608; ++_i1612)
            {
              LevelDotID _key1613;
              xfer += iprot->readString(_key1613);
              LevelDot& _val1614 = this->levelDot[_key1613];
              xfer += _val1614.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.levelDot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->villain.clear();
            uint32_t _size1615;
            ::apache::thrift::protocol::TType _ktype1616;
            ::apache::thrift::protocol::TType _vtype1617;
            xfer += iprot->readMapBegin(_ktype1616, _vtype1617, _size1615);
            uint32_t _i1619;
            for (_i1619 = 0; _i1619 < _size1615; ++_i1619)
            {
              VillainID _key1620;
              xfer += iprot->readString(_key1620);
              Villain& _val1621 = this->villain[_key1620];
              xfer += _val1621.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.villain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->matchThreeData.clear();
            uint32_t _size1622;
            ::apache::thrift::protocol::TType _ktype1623;
            ::apache::thrift::protocol::TType _vtype1624;
            xfer += iprot->readMapBegin(_ktype1623, _vtype1624, _size1622);
            uint32_t _i1626;
            for (_i1626 = 0; _i1626 < _size1622; ++_i1626)
            {
              LevelName _key1627;
              xfer += iprot->readString(_key1627);
              MatchThreeData& _val1628 = this->matchThreeData[_key1627];
              xfer += _val1628.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.matchThreeData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->newLevel.clear();
            uint32_t _size1629;
            ::apache::thrift::protocol::TType _ktype1630;
            ::apache::thrift::protocol::TType _vtype1631;
            xfer += iprot->readMapBegin(_ktype1630, _vtype1631, _size1629);
            uint32_t _i1633;
            for (_i1633 = 0; _i1633 < _size1629; ++_i1633)
            {
              LevelID _key1634;
              xfer += iprot->readString(_key1634);
              NewLevel& _val1635 = this->newLevel[_key1634];
              xfer += _val1635.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.newLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->newLevelDot.clear();
            uint32_t _size1636;
            ::apache::thrift::protocol::TType _ktype1637;
            ::apache::thrift::protocol::TType _vtype1638;
            xfer += iprot->readMapBegin(_ktype1637, _vtype1638, _size1636);
            uint32_t _i1640;
            for (_i1640 = 0; _i1640 < _size1636; ++_i1640)
            {
              LevelDotID _key1641;
              xfer += iprot->readString(_key1641);
              LevelDotV2& _val1642 = this->newLevelDot[_key1641];
              xfer += _val1642.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_newLevelDot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->material.clear();
            uint32_t _size1643;
            ::apache::thrift::protocol::TType _ktype1644;
            ::apache::thrift::protocol::TType _vtype1645;
            xfer += iprot->readMapBegin(_ktype1644, _vtype1645, _size1643);
            uint32_t _i1647;
            for (_i1647 = 0; _i1647 < _size1643; ++_i1647)
            {
              MaterialID _key1648;
              xfer += iprot->readString(_key1648);
              Material& _val1649 = this->material[_key1648];
              xfer += _val1649.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_material = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->island.clear();
            uint32_t _size1650;
            ::apache::thrift::protocol::TType _ktype1651;
            ::apache::thrift::protocol::TType _vtype1652;
            xfer += iprot->readMapBegin(_ktype1651, _vtype1652, _size1650);
            uint32_t _i1654;
            for (_i1654 = 0; _i1654 < _size1650; ++_i1654)
            {
              IslandID _key1655;
              xfer += iprot->readString(_key1655);
              Island& _val1656 = this->island[_key1655];
              xfer += _val1656.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_island = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->islandSettings.read(iprot);
          this->__isset.islandSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->islandObject.clear();
            uint32_t _size1657;
            ::apache::thrift::protocol::TType _ktype1658;
            ::apache::thrift::protocol::TType _vtype1659;
            xfer += iprot->readMapBegin(_ktype1658, _vtype1659, _size1657);
            uint32_t _i1661;
            for (_i1661 = 0; _i1661 < _size1657; ++_i1661)
            {
              IslandObjectID _key1662;
              xfer += iprot->readString(_key1662);
              IslandObject& _val1663 = this->islandObject[_key1662];
              xfer += _val1663.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.islandObject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->color.clear();
            uint32_t _size1664;
            ::apache::thrift::protocol::TType _ktype1665;
            ::apache::thrift::protocol::TType _vtype1666;
            xfer += iprot->readMapBegin(_ktype1665, _vtype1666, _size1664);
            uint32_t _i1668;
            for (_i1668 = 0; _i1668 < _size1664; ++_i1668)
            {
              ColorID _key1669;
              xfer += iprot->readString(_key1669);
              Color& _val1670 = this->color[_key1669];
              xfer += _val1670.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->expansion.clear();
            uint32_t _size1671;
            ::apache::thrift::protocol::TType _ktype1672;
            ::apache::thrift::protocol::TType _vtype1673;
            xfer += iprot->readMapBegin(_ktype1672, _vtype1673, _size1671);
            uint32_t _i1675;
            for (_i1675 = 0; _i1675 < _size1671; ++_i1675)
            {
              ExpansionID _key1676;
              xfer += iprot->readString(_key1676);
              Expansion& _val1677 = this->expansion[_key1676];
              xfer += _val1677.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_expansion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->expansionType.clear();
            uint32_t _size1678;
            ::apache::thrift::protocol::TType _ktype1679;
            ::apache::thrift::protocol::TType _vtype1680;
            xfer += iprot->readMapBegin(_ktype1679, _vtype1680, _size1678);
            uint32_t _i1682;
            for (_i1682 = 0; _i1682 < _size1678; ++_i1682)
            {
              ExpansionTypeID _key1683;
              xfer += iprot->readString(_key1683);
              ExpansionType& _val1684 = this->expansionType[_key1683];
              xfer += _val1684.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_expansionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gachaGroup.clear();
            uint32_t _size1685;
            ::apache::thrift::protocol::TType _ktype1686;
            ::apache::thrift::protocol::TType _vtype1687;
            xfer += iprot->readMapBegin(_ktype1686, _vtype1687, _size1685);
            uint32_t _i1689;
            for (_i1689 = 0; _i1689 < _size1685; ++_i1689)
            {
              GachaGroupID _key1690;
              xfer += iprot->readString(_key1690);
              GachaGroup& _val1691 = this->gachaGroup[_key1690];
              xfer += _val1691.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_gachaGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gachaOffer.clear();
            uint32_t _size1692;
            ::apache::thrift::protocol::TType _ktype1693;
            ::apache::thrift::protocol::TType _vtype1694;
            xfer += iprot->readMapBegin(_ktype1693, _vtype1694, _size1692);
            uint32_t _i1696;
            for (_i1696 = 0; _i1696 < _size1692; ++_i1696)
            {
              GachaOfferID _key1697;
              xfer += iprot->readString(_key1697);
              GachaOffer& _val1698 = this->gachaOffer[_key1697];
              xfer += _val1698.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_gachaOffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gachaPack.clear();
            uint32_t _size1699;
            ::apache::thrift::protocol::TType _ktype1700;
            ::apache::thrift::protocol::TType _vtype1701;
            xfer += iprot->readMapBegin(_ktype1700, _vtype1701, _size1699);
            uint32_t _i1703;
            for (_i1703 = 0; _i1703 < _size1699; ++_i1703)
            {
              GachaPackID _key1704;
              xfer += iprot->readString(_key1704);
              GachaPack& _val1705 = this->gachaPack[_key1704];
              xfer += _val1705.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_gachaPack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 77:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->lootTable.clear();
            uint32_t _size1706;
            ::apache::thrift::protocol::TType _ktype1707;
            ::apache::thrift::protocol::TType _vtype1708;
            xfer += iprot->readMapBegin(_ktype1707, _vtype1708, _size1706);
            uint32_t _i1710;
            for (_i1710 = 0; _i1710 < _size1706; ++_i1710)
            {
              LootTableID _key1711;
              xfer += iprot->readString(_key1711);
              std::vector<LootTable> & _val1712 = this->lootTable[_key1711];
              {
                _val1712.clear();
                uint32_t _size1713;
                ::apache::thrift::protocol::TType _etype1716;
                xfer += iprot->readListBegin(_etype1716, _size1713);
                _val1712.resize(_size1713);
                uint32_t _i1717;
                for (_i1717 = 0; _i1717 < _size1713; ++_i1717)
                {
                  xfer += _val1712[_i1717].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_lootTable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 78:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->lootCurrencyGroup.clear();
            uint32_t _size1718;
            ::apache::thrift::protocol::TType _ktype1719;
            ::apache::thrift::protocol::TType _vtype1720;
            xfer += iprot->readMapBegin(_ktype1719, _vtype1720, _size1718);
            uint32_t _i1722;
            for (_i1722 = 0; _i1722 < _size1718; ++_i1722)
            {
              LootCurrencyGroupID _key1723;
              xfer += iprot->readString(_key1723);
              std::vector<LootCurrencyGroup> & _val1724 = this->lootCurrencyGroup[_key1723];
              {
                _val1724.clear();
                uint32_t _size1725;
                ::apache::thrift::protocol::TType _etype1728;
                xfer += iprot->readListBegin(_etype1728, _size1725);
                _val1724.resize(_size1725);
                uint32_t _i1729;
                for (_i1729 = 0; _i1729 < _size1725; ++_i1729)
                {
                  xfer += _val1724[_i1729].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_lootCurrencyGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 79:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->lootBuildingGroup.clear();
            uint32_t _size1730;
            ::apache::thrift::protocol::TType _ktype1731;
            ::apache::thrift::protocol::TType _vtype1732;
            xfer += iprot->readMapBegin(_ktype1731, _vtype1732, _size1730);
            uint32_t _i1734;
            for (_i1734 = 0; _i1734 < _size1730; ++_i1734)
            {
              LootBuildingGroupID _key1735;
              xfer += iprot->readString(_key1735);
              std::vector<LootBuildingGroup> & _val1736 = this->lootBuildingGroup[_key1735];
              {
                _val1736.clear();
                uint32_t _size1737;
                ::apache::thrift::protocol::TType _etype1740;
                xfer += iprot->readListBegin(_etype1740, _size1737);
                _val1736.resize(_size1737);
                uint32_t _i1741;
                for (_i1741 = 0; _i1741 < _size1737; ++_i1741)
                {
                  xfer += _val1736[_i1741].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_lootBuildingGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->avatar.clear();
            uint32_t _size1742;
            ::apache::thrift::protocol::TType _ktype1743;
            ::apache::thrift::protocol::TType _vtype1744;
            xfer += iprot->readMapBegin(_ktype1743, _vtype1744, _size1742);
            uint32_t _i1746;
            for (_i1746 = 0; _i1746 < _size1742; ++_i1746)
            {
              AvatarID _key1747;
              xfer += iprot->readString(_key1747);
              Avatar& _val1748 = this->avatar[_key1747];
              xfer += _val1748.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 130:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->adminMessages.clear();
            uint32_t _size1749;
            ::apache::thrift::protocol::TType _ktype1750;
            ::apache::thrift::protocol::TType _vtype1751;
            xfer += iprot->readMapBegin(_ktype1750, _vtype1751, _size1749);
            uint32_t _i1753;
            for (_i1753 = 0; _i1753 < _size1749; ++_i1753)
            {
              AdminMessageID _key1754;
              xfer += iprot->readString(_key1754);
              AdminMessage& _val1755 = this->adminMessages[_key1754];
              xfer += _val1755.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.adminMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 131:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->adminGiftMessages.clear();
            uint32_t _size1756;
            ::apache::thrift::protocol::TType _etype1759;
            xfer += iprot->readListBegin(_etype1759, _size1756);
            this->adminGiftMessages.resize(_size1756);
            uint32_t _i1760;
            for (_i1760 = 0; _i1760 < _size1756; ++_i1760)
            {
              xfer += this->adminGiftMessages[_i1760].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_adminGiftMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 140:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->analyticsEvents.clear();
            uint32_t _size1761;
            ::apache::thrift::protocol::TType _ktype1762;
            ::apache::thrift::protocol::TType _vtype1763;
            xfer += iprot->readMapBegin(_ktype1762, _vtype1763, _size1761);
            uint32_t _i1765;
            for (_i1765 = 0; _i1765 < _size1761; ++_i1765)
            {
              AnalyticsEventID _key1766;
              xfer += iprot->readString(_key1766);
              AnalyticsEvent& _val1767 = this->analyticsEvents[_key1766];
              xfer += _val1767.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_analyticsEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 141:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->appBoyEvents.clear();
            uint32_t _size1768;
            ::apache::thrift::protocol::TType _ktype1769;
            ::apache::thrift::protocol::TType _vtype1770;
            xfer += iprot->readMapBegin(_ktype1769, _vtype1770, _size1768);
            uint32_t _i1772;
            for (_i1772 = 0; _i1772 < _size1768; ++_i1772)
            {
              AnalyticsEventID _key1773;
              xfer += iprot->readString(_key1773);
              AppBoyEvent& _val1774 = this->appBoyEvents[_key1773];
              xfer += _val1774.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_appBoyEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 142:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->analyticsDimensions.clear();
            uint32_t _size1775;
            ::apache::thrift::protocol::TType _ktype1776;
            ::apache::thrift::protocol::TType _vtype1777;
            xfer += iprot->readMapBegin(_ktype1776, _vtype1777, _size1775);
            uint32_t _i1779;
            for (_i1779 = 0; _i1779 < _size1775; ++_i1779)
            {
              AnalyticsDimensionID _key1780;
              xfer += iprot->readString(_key1780);
              AnalyticsDimension& _val1781 = this->analyticsDimensions[_key1780];
              xfer += _val1781.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_analyticsDimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 143:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->apsalarEvents.clear();
            uint32_t _size1782;
            ::apache::thrift::protocol::TType _ktype1783;
            ::apache::thrift::protocol::TType _vtype1784;
            xfer += iprot->readMapBegin(_ktype1783, _vtype1784, _size1782);
            uint32_t _i1786;
            for (_i1786 = 0; _i1786 < _size1782; ++_i1786)
            {
              AnalyticsEventID _key1787;
              xfer += iprot->readString(_key1787);
              ApsalarEvent& _val1788 = this->apsalarEvents[_key1787];
              xfer += _val1788.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.apsalarEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 150:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->businessOrderList.clear();
            uint32_t _size1789;
            ::apache::thrift::protocol::TType _ktype1790;
            ::apache::thrift::protocol::TType _vtype1791;
            xfer += iprot->readMapBegin(_ktype1790, _vtype1791, _size1789);
            uint32_t _i1793;
            for (_i1793 = 0; _i1793 < _size1789; ++_i1793)
            {
              BusinessOrderListID _key1794;
              xfer += iprot->readString(_key1794);
              BusinessOrderList& _val1795 = this->businessOrderList[_key1794];
              xfer += _val1795.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.businessOrderList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 152:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->businessEvolution.clear();
            uint32_t _size1796;
            ::apache::thrift::protocol::TType _ktype1797;
            ::apache::thrift::protocol::TType _vtype1798;
            xfer += iprot->readMapBegin(_ktype1797, _vtype1798, _size1796);
            uint32_t _i1800;
            for (_i1800 = 0; _i1800 < _size1796; ++_i1800)
            {
              EvolutionMaterialID _key1801;
              xfer += iprot->readString(_key1801);
              BusinessEvolution& _val1802 = this->businessEvolution[_key1801];
              xfer += _val1802.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_businessEvolution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 160:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->npc.clear();
            uint32_t _size1803;
            ::apache::thrift::protocol::TType _ktype1804;
            ::apache::thrift::protocol::TType _vtype1805;
            xfer += iprot->readMapBegin(_ktype1804, _vtype1805, _size1803);
            uint32_t _i1807;
            for (_i1807 = 0; _i1807 < _size1803; ++_i1807)
            {
              NpcID _key1808;
              xfer += iprot->readString(_key1808);
              Npc& _val1809 = this->npc[_key1808];
              xfer += _val1809.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_npc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 170:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->vendorProducts.clear();
            uint32_t _size1810;
            ::apache::thrift::protocol::TType _ktype1811;
            ::apache::thrift::protocol::TType _vtype1812;
            xfer += iprot->readMapBegin(_ktype1811, _vtype1812, _size1810);
            uint32_t _i1814;
            for (_i1814 = 0; _i1814 < _size1810; ++_i1814)
            {
              StoreProductID _key1815;
              xfer += iprot->readString(_key1815);
              VendorProduct& _val1816 = this->vendorProducts[_key1815];
              xfer += _val1816.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_vendorProducts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 180:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->storeProducts.clear();
            uint32_t _size1817;
            ::apache::thrift::protocol::TType _ktype1818;
            ::apache::thrift::protocol::TType _vtype1819;
            xfer += iprot->readMapBegin(_ktype1818, _vtype1819, _size1817);
            uint32_t _i1821;
            for (_i1821 = 0; _i1821 < _size1817; ++_i1821)
            {
              StoreProductID _key1822;
              xfer += iprot->readString(_key1822);
              StoreProduct& _val1823 = this->storeProducts[_key1822];
              xfer += _val1823.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_storeProducts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->buyItemOrder.clear();
            uint32_t _size1824;
            ::apache::thrift::protocol::TType _ktype1825;
            ::apache::thrift::protocol::TType _vtype1826;
            xfer += iprot->readMapBegin(_ktype1825, _vtype1826, _size1824);
            uint32_t _i1828;
            for (_i1828 = 0; _i1828 < _size1824; ++_i1828)
            {
              MarketOrderID _key1829;
              xfer += iprot->readString(_key1829);
              BuyItemOrder& _val1830 = this->buyItemOrder[_key1829];
              xfer += _val1830.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_buyItemOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 201:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->marketType.clear();
            uint32_t _size1831;
            ::apache::thrift::protocol::TType _ktype1832;
            ::apache::thrift::protocol::TType _vtype1833;
            xfer += iprot->readMapBegin(_ktype1832, _vtype1833, _size1831);
            uint32_t _i1835;
            for (_i1835 = 0; _i1835 < _size1831; ++_i1835)
            {
              MarketType::type _key1836;
              int32_t ecast1838;
              xfer += iprot->readI32(ecast1838);
              _key1836 = (MarketType::type)ecast1838;
              Market& _val1837 = this->marketType[_key1836];
              xfer += _val1837.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_marketType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 202:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->forcedUpgrade.clear();
            uint32_t _size1839;
            ::apache::thrift::protocol::TType _ktype1840;
            ::apache::thrift::protocol::TType _vtype1841;
            xfer += iprot->readMapBegin(_ktype1840, _vtype1841, _size1839);
            uint32_t _i1843;
            for (_i1843 = 0; _i1843 < _size1839; ++_i1843)
            {
              ClientPlatform::type _key1844;
              int32_t ecast1846;
              xfer += iprot->readI32(ecast1846);
              _key1844 = (ClientPlatform::type)ecast1846;
              ForcedUpgrade& _val1845 = this->forcedUpgrade[_key1844];
              xfer += _val1845.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_forcedUpgrade = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 203:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->errorMessage.clear();
            uint32_t _size1847;
            ::apache::thrift::protocol::TType _ktype1848;
            ::apache::thrift::protocol::TType _vtype1849;
            xfer += iprot->readMapBegin(_ktype1848, _vtype1849, _size1847);
            uint32_t _i1851;
            for (_i1851 = 0; _i1851 < _size1847; ++_i1851)
            {
              ErrorId _key1852;
              xfer += iprot->readString(_key1852);
              ErrorMessage& _val1853 = this->errorMessage[_key1852];
              xfer += _val1853.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 204:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->achievement.clear();
            uint32_t _size1854;
            ::apache::thrift::protocol::TType _ktype1855;
            ::apache::thrift::protocol::TType _vtype1856;
            xfer += iprot->readMapBegin(_ktype1855, _vtype1856, _size1854);
            uint32_t _i1858;
            for (_i1858 = 0; _i1858 < _size1854; ++_i1858)
            {
              AchievementID _key1859;
              xfer += iprot->readString(_key1859);
              Achievement& _val1860 = this->achievement[_key1859];
              xfer += _val1860.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.achievement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 205:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->achievementGroup.clear();
            uint32_t _size1861;
            ::apache::thrift::protocol::TType _ktype1862;
            ::apache::thrift::protocol::TType _vtype1863;
            xfer += iprot->readMapBegin(_ktype1862, _vtype1863, _size1861);
            uint32_t _i1865;
            for (_i1865 = 0; _i1865 < _size1861; ++_i1865)
            {
              AchievementGroupID _key1866;
              xfer += iprot->readString(_key1866);
              AchievementGroup& _val1867 = this->achievementGroup[_key1866];
              xfer += _val1867.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.achievementGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 210:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->testBuckets.clear();
            uint32_t _size1868;
            ::apache::thrift::protocol::TType _ktype1869;
            ::apache::thrift::protocol::TType _vtype1870;
            xfer += iprot->readMapBegin(_ktype1869, _vtype1870, _size1868);
            uint32_t _i1872;
            for (_i1872 = 0; _i1872 < _size1868; ++_i1872)
            {
              TestBucketID _key1873;
              xfer += iprot->readString(_key1873);
              TestBucket& _val1874 = this->testBuckets[_key1873];
              xfer += _val1874.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_testBuckets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 220:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->strangerSettings.read(iprot);
          isset_strangerSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 221:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->strangerMatchSettings.clear();
            uint32_t _size1875;
            ::apache::thrift::protocol::TType _etype1878;
            xfer += iprot->readListBegin(_etype1878, _size1875);
            this->strangerMatchSettings.resize(_size1875);
            uint32_t _i1879;
            for (_i1879 = 0; _i1879 < _size1875; ++_i1879)
            {
              xfer += this->strangerMatchSettings[_i1879].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_strangerMatchSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 222:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fakeStrangerDisplays.clear();
            uint32_t _size1880;
            ::apache::thrift::protocol::TType _etype1883;
            xfer += iprot->readListBegin(_etype1883, _size1880);
            this->fakeStrangerDisplays.resize(_size1880);
            uint32_t _i1884;
            for (_i1884 = 0; _i1884 < _size1880; ++_i1884)
            {
              xfer += this->fakeStrangerDisplays[_i1884].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_fakeStrangerDisplays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 223:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->giftMessageRewards.clear();
            uint32_t _size1885;
            ::apache::thrift::protocol::TType _ktype1886;
            ::apache::thrift::protocol::TType _vtype1887;
            xfer += iprot->readMapBegin(_ktype1886, _vtype1887, _size1885);
            uint32_t _i1889;
            for (_i1889 = 0; _i1889 < _size1885; ++_i1889)
            {
              GiftMessageRewardID _key1890;
              xfer += iprot->readString(_key1890);
              GiftMessageReward& _val1891 = this->giftMessageRewards[_key1890];
              xfer += _val1891.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_giftMessageRewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 224:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partialKingdomLikeGifts.clear();
            uint32_t _size1892;
            ::apache::thrift::protocol::TType _etype1895;
            xfer += iprot->readListBegin(_etype1895, _size1892);
            this->partialKingdomLikeGifts.resize(_size1892);
            uint32_t _i1896;
            for (_i1896 = 0; _i1896 < _size1892; ++_i1896)
            {
              xfer += this->partialKingdomLikeGifts[_i1896].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partialKingdomLikeGifts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 225:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->kingdomLikeGifts.clear();
            uint32_t _size1897;
            ::apache::thrift::protocol::TType _ktype1898;
            ::apache::thrift::protocol::TType _vtype1899;
            xfer += iprot->readMapBegin(_ktype1898, _vtype1899, _size1897);
            uint32_t _i1901;
            for (_i1901 = 0; _i1901 < _size1897; ++_i1901)
            {
              KingdomLikeGiftID _key1902;
              xfer += iprot->readString(_key1902);
              KingdomLikeGift& _val1903 = this->kingdomLikeGifts[_key1902];
              xfer += _val1903.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_kingdomLikeGifts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 226:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->pushMessages.clear();
            uint32_t _size1904;
            ::apache::thrift::protocol::TType _ktype1905;
            ::apache::thrift::protocol::TType _vtype1906;
            xfer += iprot->readMapBegin(_ktype1905, _vtype1906, _size1904);
            uint32_t _i1908;
            for (_i1908 = 0; _i1908 < _size1904; ++_i1908)
            {
              PushMessageID _key1909;
              xfer += iprot->readString(_key1909);
              PushMessage& _val1910 = this->pushMessages[_key1909];
              xfer += _val1910.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.pushMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 229:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->socialUnlockrewards.clear();
            uint32_t _size1911;
            ::apache::thrift::protocol::TType _ktype1912;
            ::apache::thrift::protocol::TType _vtype1913;
            xfer += iprot->readMapBegin(_ktype1912, _vtype1913, _size1911);
            uint32_t _i1915;
            for (_i1915 = 0; _i1915 < _size1911; ++_i1915)
            {
              SocialUnlockRewardID _key1916;
              xfer += iprot->readString(_key1916);
              SocialUnlockReward& _val1917 = this->socialUnlockrewards[_key1916];
              xfer += _val1917.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.socialUnlockrewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 400:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->adProviders.clear();
            uint32_t _size1918;
            ::apache::thrift::protocol::TType _etype1921;
            xfer += iprot->readListBegin(_etype1921, _size1918);
            this->adProviders.resize(_size1918);
            uint32_t _i1922;
            for (_i1922 = 0; _i1922 < _size1918; ++_i1922)
            {
              xfer += this->adProviders[_i1922].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.adProviders = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 500:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->popupTemplate.clear();
            uint32_t _size1923;
            ::apache::thrift::protocol::TType _etype1926;
            xfer += iprot->readListBegin(_etype1926, _size1923);
            this->popupTemplate.resize(_size1923);
            uint32_t _i1927;
            for (_i1927 = 0; _i1927 < _size1923; ++_i1927)
            {
              xfer += this->popupTemplate[_i1927].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_popupTemplate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 501:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->defaultTemplate.clear();
            uint32_t _size1928;
            ::apache::thrift::protocol::TType _ktype1929;
            ::apache::thrift::protocol::TType _vtype1930;
            xfer += iprot->readMapBegin(_ktype1929, _vtype1930, _size1928);
            uint32_t _i1932;
            for (_i1932 = 0; _i1932 < _size1928; ++_i1932)
            {
              PopupTemplateType::type _key1933;
              int32_t ecast1935;
              xfer += iprot->readI32(ecast1935);
              _key1933 = (PopupTemplateType::type)ecast1935;
              DefaultTemplate& _val1934 = this->defaultTemplate[_key1933];
              xfer += _val1934.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_defaultTemplate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 502:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rushCostsByRemainingTime.clear();
            uint32_t _size1936;
            ::apache::thrift::protocol::TType _etype1939;
            xfer += iprot->readListBegin(_etype1939, _size1936);
            this->rushCostsByRemainingTime.resize(_size1936);
            uint32_t _i1940;
            for (_i1940 = 0; _i1940 < _size1936; ++_i1940)
            {
              xfer += this->rushCostsByRemainingTime[_i1940].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_rushCostsByRemainingTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 503:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->messageTemplateModifiers.clear();
            uint32_t _size1941;
            ::apache::thrift::protocol::TType _ktype1942;
            ::apache::thrift::protocol::TType _vtype1943;
            xfer += iprot->readMapBegin(_ktype1942, _vtype1943, _size1941);
            uint32_t _i1945;
            for (_i1945 = 0; _i1945 < _size1941; ++_i1945)
            {
              PopupMessageID _key1946;
              xfer += iprot->readString(_key1946);
              std::vector<MessageTemplateModifier> & _val1947 = this->messageTemplateModifiers[_key1946];
              {
                _val1947.clear();
                uint32_t _size1948;
                ::apache::thrift::protocol::TType _etype1951;
                xfer += iprot->readListBegin(_etype1951, _size1948);
                _val1947.resize(_size1948);
                uint32_t _i1952;
                for (_i1952 = 0; _i1952 < _size1948; ++_i1952)
                {
                  xfer += _val1947[_i1952].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.messageTemplateModifiers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 600:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gachaBanner.clear();
            uint32_t _size1953;
            ::apache::thrift::protocol::TType _ktype1954;
            ::apache::thrift::protocol::TType _vtype1955;
            xfer += iprot->readMapBegin(_ktype1954, _vtype1955, _size1953);
            uint32_t _i1957;
            for (_i1957 = 0; _i1957 < _size1953; ++_i1957)
            {
              GachaBannerID _key1958;
              xfer += iprot->readString(_key1958);
              GachaBanner& _val1959 = this->gachaBanner[_key1958];
              xfer += _val1959.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.gachaBanner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 601:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->presetKingdoms.clear();
            uint32_t _size1960;
            ::apache::thrift::protocol::TType _ktype1961;
            ::apache::thrift::protocol::TType _vtype1962;
            xfer += iprot->readMapBegin(_ktype1961, _vtype1962, _size1960);
            uint32_t _i1964;
            for (_i1964 = 0; _i1964 < _size1960; ++_i1964)
            {
              PresetKingdomID _key1965;
              xfer += iprot->readString(_key1965);
              std::vector<PresetKingdomEntity> & _val1966 = this->presetKingdoms[_key1965];
              {
                _val1966.clear();
                uint32_t _size1967;
                ::apache::thrift::protocol::TType _etype1970;
                xfer += iprot->readListBegin(_etype1970, _size1967);
                _val1966.resize(_size1967);
                uint32_t _i1971;
                for (_i1971 = 0; _i1971 < _size1967; ++_i1971)
                {
                  xfer += _val1966[_i1971].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.presetKingdoms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 602:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->abTests.clear();
            uint32_t _size1972;
            ::apache::thrift::protocol::TType _ktype1973;
            ::apache::thrift::protocol::TType _vtype1974;
            xfer += iprot->readMapBegin(_ktype1973, _vtype1974, _size1972);
            uint32_t _i1976;
            for (_i1976 = 0; _i1976 < _size1972; ++_i1976)
            {
              ABTestID _key1977;
              xfer += iprot->readString(_key1977);
              std::vector<ABTest> & _val1978 = this->abTests[_key1977];
              {
                _val1978.clear();
                uint32_t _size1979;
                ::apache::thrift::protocol::TType _etype1982;
                xfer += iprot->readListBegin(_etype1982, _size1979);
                _val1978.resize(_size1979);
                uint32_t _i1983;
                for (_i1983 = 0; _i1983 < _size1979; ++_i1983)
                {
                  xfer += _val1978[_i1983].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.abTests = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 603:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->clientVersionTestBuckets.clear();
            uint32_t _size1984;
            ::apache::thrift::protocol::TType _ktype1985;
            ::apache::thrift::protocol::TType _vtype1986;
            xfer += iprot->readMapBegin(_ktype1985, _vtype1986, _size1984);
            uint32_t _i1988;
            for (_i1988 = 0; _i1988 < _size1984; ++_i1988)
            {
              ABTestID _key1989;
              xfer += iprot->readString(_key1989);
              ClientVersionTestBucket& _val1990 = this->clientVersionTestBuckets[_key1989];
              xfer += _val1990.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.clientVersionTestBuckets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 610:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->buildMenuSpecialCard.clear();
            uint32_t _size1991;
            ::apache::thrift::protocol::TType _ktype1992;
            ::apache::thrift::protocol::TType _vtype1993;
            xfer += iprot->readMapBegin(_ktype1992, _vtype1993, _size1991);
            uint32_t _i1995;
            for (_i1995 = 0; _i1995 < _size1991; ++_i1995)
            {
              BuildMenuSpecialCardID _key1996;
              xfer += iprot->readString(_key1996);
              BuildMenuSpecialCard& _val1997 = this->buildMenuSpecialCard[_key1996];
              xfer += _val1997.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.buildMenuSpecialCard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 700:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->businessMenuSettings.read(iprot);
          this->__isset.businessMenuSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 790:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rewardMessages.clear();
            uint32_t _size1998;
            ::apache::thrift::protocol::TType _ktype1999;
            ::apache::thrift::protocol::TType _vtype2000;
            xfer += iprot->readMapBegin(_ktype1999, _vtype2000, _size1998);
            uint32_t _i2002;
            for (_i2002 = 0; _i2002 < _size1998; ++_i2002)
            {
              RewardMessageID _key2003;
              xfer += iprot->readString(_key2003);
              RewardMessage& _val2004 = this->rewardMessages[_key2003];
              xfer += _val2004.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_rewardMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 800:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->events.clear();
            uint32_t _size2005;
            ::apache::thrift::protocol::TType _ktype2006;
            ::apache::thrift::protocol::TType _vtype2007;
            xfer += iprot->readMapBegin(_ktype2006, _vtype2007, _size2005);
            uint32_t _i2009;
            for (_i2009 = 0; _i2009 < _size2005; ++_i2009)
            {
              EventID _key2010;
              xfer += iprot->readString(_key2010);
              Event& _val2011 = this->events[_key2010];
              xfer += _val2011.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 810:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->leaderboards.clear();
            uint32_t _size2012;
            ::apache::thrift::protocol::TType _ktype2013;
            ::apache::thrift::protocol::TType _vtype2014;
            xfer += iprot->readMapBegin(_ktype2013, _vtype2014, _size2012);
            uint32_t _i2016;
            for (_i2016 = 0; _i2016 < _size2012; ++_i2016)
            {
              LeaderboardID _key2017;
              xfer += iprot->readString(_key2017);
              Leaderboard& _val2018 = this->leaderboards[_key2017];
              xfer += _val2018.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_leaderboards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 811:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->leaderboardSettings.read(iprot);
          isset_leaderboardSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 812:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->leaderboardLeagues.clear();
            uint32_t _size2019;
            ::apache::thrift::protocol::TType _etype2022;
            xfer += iprot->readListBegin(_etype2022, _size2019);
            this->leaderboardLeagues.resize(_size2019);
            uint32_t _i2023;
            for (_i2023 = 0; _i2023 < _size2019; ++_i2023)
            {
              xfer += this->leaderboardLeagues[_i2023].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.leaderboardLeagues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 813:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->leaderboardRibbons.clear();
            uint32_t _size2024;
            ::apache::thrift::protocol::TType _etype2027;
            xfer += iprot->readListBegin(_etype2027, _size2024);
            this->leaderboardRibbons.resize(_size2024);
            uint32_t _i2028;
            for (_i2028 = 0; _i2028 < _size2024; ++_i2028)
            {
              xfer += this->leaderboardRibbons[_i2028].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.leaderboardRibbons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 814:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->leaderboardRewards.clear();
            uint32_t _size2029;
            ::apache::thrift::protocol::TType _etype2032;
            xfer += iprot->readListBegin(_etype2032, _size2029);
            this->leaderboardRewards.resize(_size2029);
            uint32_t _i2033;
            for (_i2033 = 0; _i2033 < _size2029; ++_i2033)
            {
              xfer += this->leaderboardRewards[_i2033].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.leaderboardRewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 815:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->leaderboardPlacements.clear();
            uint32_t _size2034;
            ::apache::thrift::protocol::TType _ktype2035;
            ::apache::thrift::protocol::TType _vtype2036;
            xfer += iprot->readMapBegin(_ktype2035, _vtype2036, _size2034);
            uint32_t _i2038;
            for (_i2038 = 0; _i2038 < _size2034; ++_i2038)
            {
              CurrencyID _key2039;
              xfer += iprot->readString(_key2039);
              std::vector<LeaderboardPlacement> & _val2040 = this->leaderboardPlacements[_key2039];
              {
                _val2040.clear();
                uint32_t _size2041;
                ::apache::thrift::protocol::TType _etype2044;
                xfer += iprot->readListBegin(_etype2044, _size2041);
                _val2040.resize(_size2041);
                uint32_t _i2045;
                for (_i2045 = 0; _i2045 < _size2041; ++_i2045)
                {
                  xfer += _val2040[_i2045].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_leaderboardPlacements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 816:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rarityEvoLevelKeyDropRates.clear();
            uint32_t _size2046;
            ::apache::thrift::protocol::TType _etype2049;
            xfer += iprot->readListBegin(_etype2049, _size2046);
            this->rarityEvoLevelKeyDropRates.resize(_size2046);
            uint32_t _i2050;
            for (_i2050 = 0; _i2050 < _size2046; ++_i2050)
            {
              xfer += this->rarityEvoLevelKeyDropRates[_i2050].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_rarityEvoLevelKeyDropRates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 817:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->keyDropRateByOrderTime.clear();
            uint32_t _size2051;
            ::apache::thrift::protocol::TType _ktype2052;
            ::apache::thrift::protocol::TType _vtype2053;
            xfer += iprot->readMapBegin(_ktype2052, _vtype2053, _size2051);
            uint32_t _i2055;
            for (_i2055 = 0; _i2055 < _size2051; ++_i2055)
            {
              EventKeyDropRateFormulaID _key2056;
              xfer += iprot->readString(_key2056);
              std::vector<KeyDropRateByOrderTime> & _val2057 = this->keyDropRateByOrderTime[_key2056];
              {
                _val2057.clear();
                uint32_t _size2058;
                ::apache::thrift::protocol::TType _etype2061;
                xfer += iprot->readListBegin(_etype2061, _size2058);
                _val2057.resize(_size2058);
                uint32_t _i2062;
                for (_i2062 = 0; _i2062 < _size2058; ++_i2062)
                {
                  xfer += _val2057[_i2062].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_keyDropRateByOrderTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 818:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->eventBusinessKeyDropRates.clear();
            uint32_t _size2063;
            ::apache::thrift::protocol::TType _ktype2064;
            ::apache::thrift::protocol::TType _vtype2065;
            xfer += iprot->readMapBegin(_ktype2064, _vtype2065, _size2063);
            uint32_t _i2067;
            for (_i2067 = 0; _i2067 < _size2063; ++_i2067)
            {
              BuildingID _key2068;
              xfer += iprot->readString(_key2068);
              EventBusinessKeyDropRate& _val2069 = this->eventBusinessKeyDropRates[_key2068];
              xfer += _val2069.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_eventBusinessKeyDropRates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 820:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->leaderboardTemplates.clear();
            uint32_t _size2070;
            ::apache::thrift::protocol::TType _ktype2071;
            ::apache::thrift::protocol::TType _vtype2072;
            xfer += iprot->readMapBegin(_ktype2071, _vtype2072, _size2070);
            uint32_t _i2074;
            for (_i2074 = 0; _i2074 < _size2070; ++_i2074)
            {
              LeaderboardTemplateID _key2075;
              xfer += iprot->readString(_key2075);
              LeaderboardTemplate& _val2076 = this->leaderboardTemplates[_key2075];
              xfer += _val2076.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.leaderboardTemplates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 850:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->eventIslands.clear();
            uint32_t _size2077;
            ::apache::thrift::protocol::TType _ktype2078;
            ::apache::thrift::protocol::TType _vtype2079;
            xfer += iprot->readMapBegin(_ktype2078, _vtype2079, _size2077);
            uint32_t _i2081;
            for (_i2081 = 0; _i2081 < _size2077; ++_i2081)
            {
              EventIslandID _key2082;
              xfer += iprot->readString(_key2082);
              EventIsland& _val2083 = this->eventIslands[_key2082];
              xfer += _val2083.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_eventIslands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 851:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->eventHowToPlays.clear();
            uint32_t _size2084;
            ::apache::thrift::protocol::TType _ktype2085;
            ::apache::thrift::protocol::TType _vtype2086;
            xfer += iprot->readMapBegin(_ktype2085, _vtype2086, _size2084);
            uint32_t _i2088;
            for (_i2088 = 0; _i2088 < _size2084; ++_i2088)
            {
              EventHowToPlayID _key2089;
              xfer += iprot->readString(_key2089);
              EventHowToPlay& _val2090 = this->eventHowToPlays[_key2089];
              xfer += _val2090.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_eventHowToPlays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 852:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->eventMainMenus.clear();
            uint32_t _size2091;
            ::apache::thrift::protocol::TType _ktype2092;
            ::apache::thrift::protocol::TType _vtype2093;
            xfer += iprot->readMapBegin(_ktype2092, _vtype2093, _size2091);
            uint32_t _i2095;
            for (_i2095 = 0; _i2095 < _size2091; ++_i2095)
            {
              EventMainMenuID _key2096;
              xfer += iprot->readString(_key2096);
              EventMainMenu& _val2097 = this->eventMainMenus[_key2096];
              xfer += _val2097.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_eventMainMenus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 900:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->castleActivities.clear();
            uint32_t _size2098;
            ::apache::thrift::protocol::TType _ktype2099;
            ::apache::thrift::protocol::TType _vtype2100;
            xfer += iprot->readMapBegin(_ktype2099, _vtype2100, _size2098);
            uint32_t _i2102;
            for (_i2102 = 0; _i2102 < _size2098; ++_i2102)
            {
              CastleActivityID _key2103;
              xfer += iprot->readString(_key2103);
              CastleActivity& _val2104 = this->castleActivities[_key2103];
              xfer += _val2104.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_castleActivities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 901:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->playerDisplaySuggestStart.clear();
            uint32_t _size2105;
            ::apache::thrift::protocol::TType _etype2108;
            xfer += iprot->readListBegin(_etype2108, _size2105);
            this->playerDisplaySuggestStart.resize(_size2105);
            uint32_t _i2109;
            for (_i2109 = 0; _i2109 < _size2105; ++_i2109)
            {
              xfer += this->playerDisplaySuggestStart[_i2109].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_playerDisplaySuggestStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 902:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->playerDisplaySuggestMiddle.clear();
            uint32_t _size2110;
            ::apache::thrift::protocol::TType _etype2113;
            xfer += iprot->readListBegin(_etype2113, _size2110);
            this->playerDisplaySuggestMiddle.resize(_size2110);
            uint32_t _i2114;
            for (_i2114 = 0; _i2114 < _size2110; ++_i2114)
            {
              xfer += this->playerDisplaySuggestMiddle[_i2114].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_playerDisplaySuggestMiddle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 903:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->playerDisplaySuggestEnd.clear();
            uint32_t _size2115;
            ::apache::thrift::protocol::TType _etype2118;
            xfer += iprot->readListBegin(_etype2118, _size2115);
            this->playerDisplaySuggestEnd.resize(_size2115);
            uint32_t _i2119;
            for (_i2119 = 0; _i2119 < _size2115; ++_i2119)
            {
              xfer += this->playerDisplaySuggestEnd[_i2119].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_playerDisplaySuggestEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 910:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tutorialStates.clear();
            uint32_t _size2120;
            ::apache::thrift::protocol::TType _etype2123;
            xfer += iprot->readListBegin(_etype2123, _size2120);
            this->tutorialStates.resize(_size2120);
            uint32_t _i2124;
            for (_i2124 = 0; _i2124 < _size2120; ++_i2124)
            {
              xfer += this->tutorialStates[_i2124].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_tutorialStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 911:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->popupMessages.clear();
            uint32_t _size2125;
            ::apache::thrift::protocol::TType _ktype2126;
            ::apache::thrift::protocol::TType _vtype2127;
            xfer += iprot->readMapBegin(_ktype2126, _vtype2127, _size2125);
            uint32_t _i2129;
            for (_i2129 = 0; _i2129 < _size2125; ++_i2129)
            {
              PopupMessageID _key2130;
              xfer += iprot->readString(_key2130);
              PopupMessage& _val2131 = this->popupMessages[_key2130];
              xfer += _val2131.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_popupMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 912:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->popupMessageSettings.read(iprot);
          isset_popupMessageSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->eventSettings.read(iprot);
          this->__isset.eventSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1100:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->screenNameMapping.clear();
            uint32_t _size2132;
            ::apache::thrift::protocol::TType _etype2135;
            xfer += iprot->readListBegin(_etype2135, _size2132);
            this->screenNameMapping.resize(_size2132);
            uint32_t _i2136;
            for (_i2136 = 0; _i2136 < _size2132; ++_i2136)
            {
              xfer += this->screenNameMapping[_i2136].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.screenNameMapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1101:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->cellInfo.clear();
            uint32_t _size2137;
            ::apache::thrift::protocol::TType _ktype2138;
            ::apache::thrift::protocol::TType _vtype2139;
            xfer += iprot->readMapBegin(_ktype2138, _vtype2139, _size2137);
            uint32_t _i2141;
            for (_i2141 = 0; _i2141 < _size2137; ++_i2141)
            {
              CellInfoMapID _key2142;
              xfer += iprot->readString(_key2142);
              std::vector<CellInfo> & _val2143 = this->cellInfo[_key2142];
              {
                _val2143.clear();
                uint32_t _size2144;
                ::apache::thrift::protocol::TType _etype2147;
                xfer += iprot->readListBegin(_etype2147, _size2144);
                _val2143.resize(_size2144);
                uint32_t _i2148;
                for (_i2148 = 0; _i2148 < _size2144; ++_i2148)
                {
                  xfer += _val2143[_i2148].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.cellInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1200:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->keyCostPerLevel.clear();
            uint32_t _size2149;
            ::apache::thrift::protocol::TType _ktype2150;
            ::apache::thrift::protocol::TType _vtype2151;
            xfer += iprot->readMapBegin(_ktype2150, _vtype2151, _size2149);
            uint32_t _i2153;
            for (_i2153 = 0; _i2153 < _size2149; ++_i2153)
            {
              KeyCostPerLevelID _key2154;
              xfer += iprot->readString(_key2154);
              std::vector<KeyCostPerLevel> & _val2155 = this->keyCostPerLevel[_key2154];
              {
                _val2155.clear();
                uint32_t _size2156;
                ::apache::thrift::protocol::TType _etype2159;
                xfer += iprot->readListBegin(_etype2159, _size2156);
                _val2155.resize(_size2156);
                uint32_t _i2160;
                for (_i2160 = 0; _i2160 < _size2156; ++_i2160)
                {
                  xfer += _val2155[_i2160].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.keyCostPerLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1201:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->playerMatchRankSettings.clear();
            uint32_t _size2161;
            ::apache::thrift::protocol::TType _etype2164;
            xfer += iprot->readListBegin(_etype2164, _size2161);
            this->playerMatchRankSettings.resize(_size2161);
            uint32_t _i2165;
            for (_i2165 = 0; _i2165 < _size2161; ++_i2165)
            {
              xfer += this->playerMatchRankSettings[_i2165].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.playerMatchRankSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1202:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->buildingMultipliers.clear();
            uint32_t _size2166;
            ::apache::thrift::protocol::TType _ktype2167;
            ::apache::thrift::protocol::TType _vtype2168;
            xfer += iprot->readMapBegin(_ktype2167, _vtype2168, _size2166);
            uint32_t _i2170;
            for (_i2170 = 0; _i2170 < _size2166; ++_i2170)
            {
              BuildingID _key2171;
              xfer += iprot->readString(_key2171);
              BuildingMultiplier& _val2172 = this->buildingMultipliers[_key2171];
              xfer += _val2172.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_buildingMultipliers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1300:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->guildLeaderboardSettings.read(iprot);
          isset_guildLeaderboardSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1301:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->guildLeaderboards.clear();
            uint32_t _size2173;
            ::apache::thrift::protocol::TType _ktype2174;
            ::apache::thrift::protocol::TType _vtype2175;
            xfer += iprot->readMapBegin(_ktype2174, _vtype2175, _size2173);
            uint32_t _i2177;
            for (_i2177 = 0; _i2177 < _size2173; ++_i2177)
            {
              GuildLeaderboardID _key2178;
              xfer += iprot->readString(_key2178);
              GuildLeaderboard& _val2179 = this->guildLeaderboards[_key2178];
              xfer += _val2179.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.guildLeaderboards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1302:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guildLeaderboardRibbons.clear();
            uint32_t _size2180;
            ::apache::thrift::protocol::TType _etype2183;
            xfer += iprot->readListBegin(_etype2183, _size2180);
            this->guildLeaderboardRibbons.resize(_size2180);
            uint32_t _i2184;
            for (_i2184 = 0; _i2184 < _size2180; ++_i2184)
            {
              xfer += this->guildLeaderboardRibbons[_i2184].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.guildLeaderboardRibbons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1303:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guildLeaderboardRewards.clear();
            uint32_t _size2185;
            ::apache::thrift::protocol::TType _etype2188;
            xfer += iprot->readListBegin(_etype2188, _size2185);
            this->guildLeaderboardRewards.resize(_size2185);
            uint32_t _i2189;
            for (_i2189 = 0; _i2189 < _size2185; ++_i2189)
            {
              xfer += this->guildLeaderboardRewards[_i2189].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.guildLeaderboardRewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1311:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->locations.clear();
            uint32_t _size2190;
            ::apache::thrift::protocol::TType _ktype2191;
            ::apache::thrift::protocol::TType _vtype2192;
            xfer += iprot->readMapBegin(_ktype2191, _vtype2192, _size2190);
            uint32_t _i2194;
            for (_i2194 = 0; _i2194 < _size2190; ++_i2194)
            {
              LocationID _key2195;
              xfer += iprot->readString(_key2195);
              Location& _val2196 = this->locations[_key2195];
              xfer += _val2196.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_locations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1312:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->guildSettings.read(iprot);
          isset_guildSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1313:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->guildMemberTypeDisplays.clear();
            uint32_t _size2197;
            ::apache::thrift::protocol::TType _ktype2198;
            ::apache::thrift::protocol::TType _vtype2199;
            xfer += iprot->readMapBegin(_ktype2198, _vtype2199, _size2197);
            uint32_t _i2201;
            for (_i2201 = 0; _i2201 < _size2197; ++_i2201)
            {
              GuildMemberType::type _key2202;
              int32_t ecast2204;
              xfer += iprot->readI32(ecast2204);
              _key2202 = (GuildMemberType::type)ecast2204;
              GuildMemberTypeDisplay& _val2203 = this->guildMemberTypeDisplays[_key2202];
              xfer += _val2203.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_guildMemberTypeDisplays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1314:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->guildJoinTypeDisplays.clear();
            uint32_t _size2205;
            ::apache::thrift::protocol::TType _ktype2206;
            ::apache::thrift::protocol::TType _vtype2207;
            xfer += iprot->readMapBegin(_ktype2206, _vtype2207, _size2205);
            uint32_t _i2209;
            for (_i2209 = 0; _i2209 < _size2205; ++_i2209)
            {
              GuildJoinType::type _key2210;
              int32_t ecast2212;
              xfer += iprot->readI32(ecast2212);
              _key2210 = (GuildJoinType::type)ecast2212;
              GuildJoinTypeDisplay& _val2211 = this->guildJoinTypeDisplays[_key2210];
              xfer += _val2211.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_guildJoinTypeDisplays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1315:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->guildEmblems.clear();
            uint32_t _size2213;
            ::apache::thrift::protocol::TType _ktype2214;
            ::apache::thrift::protocol::TType _vtype2215;
            xfer += iprot->readMapBegin(_ktype2214, _vtype2215, _size2213);
            uint32_t _i2217;
            for (_i2217 = 0; _i2217 < _size2213; ++_i2217)
            {
              GuildEmblemID _key2218;
              xfer += iprot->readString(_key2218);
              GuildEmblem& _val2219 = this->guildEmblems[_key2218];
              xfer += _val2219.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_guildEmblems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1316:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guildBoundItems.clear();
            uint32_t _size2220;
            ::apache::thrift::protocol::TType _etype2223;
            xfer += iprot->readListBegin(_etype2223, _size2220);
            this->guildBoundItems.resize(_size2220);
            uint32_t _i2224;
            for (_i2224 = 0; _i2224 < _size2220; ++_i2224)
            {
              xfer += this->guildBoundItems[_i2224].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_guildBoundItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1317:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->guildRank.clear();
            uint32_t _size2225;
            ::apache::thrift::protocol::TType _ktype2226;
            ::apache::thrift::protocol::TType _vtype2227;
            xfer += iprot->readMapBegin(_ktype2226, _vtype2227, _size2225);
            uint32_t _i2229;
            for (_i2229 = 0; _i2229 < _size2225; ++_i2229)
            {
              GuildRankID _key2230;
              xfer += iprot->readI32(_key2230);
              GuildRank& _val2231 = this->guildRank[_key2230];
              xfer += _val2231.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_guildRank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1330:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->chatSystemMessages.clear();
            uint32_t _size2232;
            ::apache::thrift::protocol::TType _ktype2233;
            ::apache::thrift::protocol::TType _vtype2234;
            xfer += iprot->readMapBegin(_ktype2233, _vtype2234, _size2232);
            uint32_t _i2236;
            for (_i2236 = 0; _i2236 < _size2232; ++_i2236)
            {
              ChatSystemMessageID _key2237;
              xfer += iprot->readString(_key2237);
              ChatSystemMessage& _val2238 = this->chatSystemMessages[_key2237];
              xfer += _val2238.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_chatSystemMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1400:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gifts.clear();
            uint32_t _size2239;
            ::apache::thrift::protocol::TType _ktype2240;
            ::apache::thrift::protocol::TType _vtype2241;
            xfer += iprot->readMapBegin(_ktype2240, _vtype2241, _size2239);
            uint32_t _i2243;
            for (_i2243 = 0; _i2243 < _size2239; ++_i2243)
            {
              GiftID _key2244;
              xfer += iprot->readString(_key2244);
              Gift& _val2245 = this->gifts[_key2244];
              xfer += _val2245.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_gifts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1410:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pollSettings.read(iprot);
          this->__isset.pollSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1500:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guildNameSuggestStart.clear();
            uint32_t _size2246;
            ::apache::thrift::protocol::TType _etype2249;
            xfer += iprot->readListBegin(_etype2249, _size2246);
            this->guildNameSuggestStart.resize(_size2246);
            uint32_t _i2250;
            for (_i2250 = 0; _i2250 < _size2246; ++_i2250)
            {
              xfer += this->guildNameSuggestStart[_i2250].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_guildNameSuggestStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1501:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guildNameSuggestMiddle.clear();
            uint32_t _size2251;
            ::apache::thrift::protocol::TType _etype2254;
            xfer += iprot->readListBegin(_etype2254, _size2251);
            this->guildNameSuggestMiddle.resize(_size2251);
            uint32_t _i2255;
            for (_i2255 = 0; _i2255 < _size2251; ++_i2255)
            {
              xfer += this->guildNameSuggestMiddle[_i2255].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_guildNameSuggestMiddle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1502:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guildNameSuggestEnd.clear();
            uint32_t _size2256;
            ::apache::thrift::protocol::TType _etype2259;
            xfer += iprot->readListBegin(_etype2259, _size2256);
            this->guildNameSuggestEnd.resize(_size2256);
            uint32_t _i2260;
            for (_i2260 = 0; _i2260 < _size2256; ++_i2260)
            {
              xfer += this->guildNameSuggestEnd[_i2260].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_guildNameSuggestEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1600:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->quests.clear();
            uint32_t _size2261;
            ::apache::thrift::protocol::TType _ktype2262;
            ::apache::thrift::protocol::TType _vtype2263;
            xfer += iprot->readMapBegin(_ktype2262, _vtype2263, _size2261);
            uint32_t _i2265;
            for (_i2265 = 0; _i2265 < _size2261; ++_i2265)
            {
              QuestID _key2266;
              xfer += iprot->readString(_key2266);
              Quest& _val2267 = this->quests[_key2266];
              xfer += _val2267.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_quests = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1601:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->questGoals.clear();
            uint32_t _size2268;
            ::apache::thrift::protocol::TType _etype2271;
            xfer += iprot->readListBegin(_etype2271, _size2268);
            this->questGoals.resize(_size2268);
            uint32_t _i2272;
            for (_i2272 = 0; _i2272 < _size2268; ++_i2272)
            {
              xfer += this->questGoals[_i2272].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.questGoals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1610:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->questTemplates.clear();
            uint32_t _size2273;
            ::apache::thrift::protocol::TType _ktype2274;
            ::apache::thrift::protocol::TType _vtype2275;
            xfer += iprot->readMapBegin(_ktype2274, _vtype2275, _size2273);
            uint32_t _i2277;
            for (_i2277 = 0; _i2277 < _size2273; ++_i2277)
            {
              QuestID _key2278;
              xfer += iprot->readString(_key2278);
              Quest& _val2279 = this->questTemplates[_key2278];
              xfer += _val2279.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_questTemplates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1611:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->questGoalTemplates.clear();
            uint32_t _size2280;
            ::apache::thrift::protocol::TType _etype2283;
            xfer += iprot->readListBegin(_etype2283, _size2280);
            this->questGoalTemplates.resize(_size2280);
            uint32_t _i2284;
            for (_i2284 = 0; _i2284 < _size2280; ++_i2284)
            {
              xfer += this->questGoalTemplates[_i2284].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.questGoalTemplates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1602:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->questNpc.clear();
            uint32_t _size2285;
            ::apache::thrift::protocol::TType _ktype2286;
            ::apache::thrift::protocol::TType _vtype2287;
            xfer += iprot->readMapBegin(_ktype2286, _vtype2287, _size2285);
            uint32_t _i2289;
            for (_i2289 = 0; _i2289 < _size2285; ++_i2289)
            {
              QuestNpcID _key2290;
              xfer += iprot->readString(_key2290);
              QuestNpc& _val2291 = this->questNpc[_key2290];
              xfer += _val2291.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_questNpc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1603:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->businessQuestNpc.clear();
            uint32_t _size2292;
            ::apache::thrift::protocol::TType _ktype2293;
            ::apache::thrift::protocol::TType _vtype2294;
            xfer += iprot->readMapBegin(_ktype2293, _vtype2294, _size2292);
            uint32_t _i2296;
            for (_i2296 = 0; _i2296 < _size2292; ++_i2296)
            {
              BuildingID _key2297;
              xfer += iprot->readString(_key2297);
              BusinessQuestNpc& _val2298 = this->businessQuestNpc[_key2297];
              xfer += _val2298.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_businessQuestNpc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1700:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->happinessSettings.read(iprot);
          this->__isset.happinessSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1710:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->stores.clear();
            uint32_t _size2299;
            ::apache::thrift::protocol::TType _ktype2300;
            ::apache::thrift::protocol::TType _vtype2301;
            xfer += iprot->readMapBegin(_ktype2300, _vtype2301, _size2299);
            uint32_t _i2303;
            for (_i2303 = 0; _i2303 < _size2299; ++_i2303)
            {
              StoreID _key2304;
              xfer += iprot->readString(_key2304);
              Store& _val2305 = this->stores[_key2304];
              xfer += _val2305.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_stores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1711:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->storeInventories.clear();
            uint32_t _size2306;
            ::apache::thrift::protocol::TType _ktype2307;
            ::apache::thrift::protocol::TType _vtype2308;
            xfer += iprot->readMapBegin(_ktype2307, _vtype2308, _size2306);
            uint32_t _i2310;
            for (_i2310 = 0; _i2310 < _size2306; ++_i2310)
            {
              StoreID _key2311;
              xfer += iprot->readString(_key2311);
              std::vector<StoreInventoryItem> & _val2312 = this->storeInventories[_key2311];
              {
                _val2312.clear();
                uint32_t _size2313;
                ::apache::thrift::protocol::TType _etype2316;
                xfer += iprot->readListBegin(_etype2316, _size2313);
                _val2312.resize(_size2313);
                uint32_t _i2317;
                for (_i2317 = 0; _i2317 < _size2313; ++_i2317)
                {
                  xfer += _val2312[_i2317].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_storeInventories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1712:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->cardOffers.clear();
            uint32_t _size2318;
            ::apache::thrift::protocol::TType _ktype2319;
            ::apache::thrift::protocol::TType _vtype2320;
            xfer += iprot->readMapBegin(_ktype2319, _vtype2320, _size2318);
            uint32_t _i2322;
            for (_i2322 = 0; _i2322 < _size2318; ++_i2322)
            {
              CardOfferID _key2323;
              xfer += iprot->readString(_key2323);
              CardOffer& _val2324 = this->cardOffers[_key2323];
              xfer += _val2324.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_cardOffers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1713:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->iapProducts.clear();
            uint32_t _size2325;
            ::apache::thrift::protocol::TType _ktype2326;
            ::apache::thrift::protocol::TType _vtype2327;
            xfer += iprot->readMapBegin(_ktype2326, _vtype2327, _size2325);
            uint32_t _i2329;
            for (_i2329 = 0; _i2329 < _size2325; ++_i2329)
            {
              IAPProductID _key2330;
              xfer += iprot->readString(_key2330);
              IAPProduct& _val2331 = this->iapProducts[_key2330];
              xfer += _val2331.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_iapProducts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1899:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->campaignSettings.read(iprot);
          isset_campaignSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1900:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->levelCampaigns.clear();
            uint32_t _size2332;
            ::apache::thrift::protocol::TType _ktype2333;
            ::apache::thrift::protocol::TType _vtype2334;
            xfer += iprot->readMapBegin(_ktype2333, _vtype2334, _size2332);
            uint32_t _i2336;
            for (_i2336 = 0; _i2336 < _size2332; ++_i2336)
            {
              LevelCampaignID _key2337;
              xfer += iprot->readString(_key2337);
              LevelCampaign& _val2338 = this->levelCampaigns[_key2337];
              xfer += _val2338.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_levelCampaigns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1901:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->businessLevelIdsLookup.clear();
            uint32_t _size2339;
            ::apache::thrift::protocol::TType _ktype2340;
            ::apache::thrift::protocol::TType _vtype2341;
            xfer += iprot->readMapBegin(_ktype2340, _vtype2341, _size2339);
            uint32_t _i2343;
            for (_i2343 = 0; _i2343 < _size2339; ++_i2343)
            {
              LevelCampaignID _key2344;
              xfer += iprot->readString(_key2344);
              BusinessLevelsList& _val2345 = this->businessLevelIdsLookup[_key2344];
              xfer += _val2345.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.businessLevelIdsLookup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1902:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->castleEventLevelIdsLookup.clear();
            uint32_t _size2346;
            ::apache::thrift::protocol::TType _ktype2347;
            ::apache::thrift::protocol::TType _vtype2348;
            xfer += iprot->readMapBegin(_ktype2347, _vtype2348, _size2346);
            uint32_t _i2350;
            for (_i2350 = 0; _i2350 < _size2346; ++_i2350)
            {
              LevelCampaignID _key2351;
              xfer += iprot->readString(_key2351);
              CastleEventLevelsList& _val2352 = this->castleEventLevelIdsLookup[_key2351];
              xfer += _val2352.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.castleEventLevelIdsLookup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1903:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->campaignLevelIdsLookup.clear();
            uint32_t _size2353;
            ::apache::thrift::protocol::TType _ktype2354;
            ::apache::thrift::protocol::TType _vtype2355;
            xfer += iprot->readMapBegin(_ktype2354, _vtype2355, _size2353);
            uint32_t _i2357;
            for (_i2357 = 0; _i2357 < _size2353; ++_i2357)
            {
              LevelCampaignID _key2358;
              xfer += iprot->readString(_key2358);
              LevelCampaignLevelsList& _val2359 = this->campaignLevelIdsLookup[_key2358];
              xfer += _val2359.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.campaignLevelIdsLookup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1904:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->levelCampaignStyles.clear();
            uint32_t _size2360;
            ::apache::thrift::protocol::TType _ktype2361;
            ::apache::thrift::protocol::TType _vtype2362;
            xfer += iprot->readMapBegin(_ktype2361, _vtype2362, _size2360);
            uint32_t _i2364;
            for (_i2364 = 0; _i2364 < _size2360; ++_i2364)
            {
              LevelCampaignStyleID _key2365;
              xfer += iprot->readString(_key2365);
              LevelCampaignStyle& _val2366 = this->levelCampaignStyles[_key2365];
              xfer += _val2366.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_levelCampaignStyles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2014:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->buildingTypeLocalizations.clear();
            uint32_t _size2367;
            ::apache::thrift::protocol::TType _ktype2368;
            ::apache::thrift::protocol::TType _vtype2369;
            xfer += iprot->readMapBegin(_ktype2368, _vtype2369, _size2367);
            uint32_t _i2371;
            for (_i2371 = 0; _i2371 < _size2367; ++_i2371)
            {
              BuildingType::type _key2372;
              int32_t ecast2374;
              xfer += iprot->readI32(ecast2374);
              _key2372 = (BuildingType::type)ecast2374;
              BuildingTypeLocalization& _val2373 = this->buildingTypeLocalizations[_key2372];
              xfer += _val2373.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_buildingTypeLocalizations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ftueSettings.read(iprot);
          this->__isset.ftueSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3301:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->matchThreeCellDefinitions.clear();
            uint32_t _size2375;
            ::apache::thrift::protocol::TType _ktype2376;
            ::apache::thrift::protocol::TType _vtype2377;
            xfer += iprot->readMapBegin(_ktype2376, _vtype2377, _size2375);
            uint32_t _i2379;
            for (_i2379 = 0; _i2379 < _size2375; ++_i2379)
            {
              Match3ThemeId _key2380;
              xfer += iprot->readString(_key2380);
              std::vector<MatchThreeCellDefinition> & _val2381 = this->matchThreeCellDefinitions[_key2380];
              {
                _val2381.clear();
                uint32_t _size2382;
                ::apache::thrift::protocol::TType _etype2385;
                xfer += iprot->readListBegin(_etype2385, _size2382);
                _val2381.resize(_size2382);
                uint32_t _i2386;
                for (_i2386 = 0; _i2386 < _size2382; ++_i2386)
                {
                  xfer += _val2381[_i2386].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.matchThreeCellDefinitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3302:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->matchThreeBlasterDefinitions.clear();
            uint32_t _size2387;
            ::apache::thrift::protocol::TType _ktype2388;
            ::apache::thrift::protocol::TType _vtype2389;
            xfer += iprot->readMapBegin(_ktype2388, _vtype2389, _size2387);
            uint32_t _i2391;
            for (_i2391 = 0; _i2391 < _size2387; ++_i2391)
            {
              Match3ThemeId _key2392;
              xfer += iprot->readString(_key2392);
              std::vector<MatchThreeBlasterDefinition> & _val2393 = this->matchThreeBlasterDefinitions[_key2392];
              {
                _val2393.clear();
                uint32_t _size2394;
                ::apache::thrift::protocol::TType _etype2397;
                xfer += iprot->readListBegin(_etype2397, _size2394);
                _val2393.resize(_size2394);
                uint32_t _i2398;
                for (_i2398 = 0; _i2398 < _size2394; ++_i2398)
                {
                  xfer += _val2393[_i2398].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.matchThreeBlasterDefinitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2000:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->goalDisplayTemplates.clear();
            uint32_t _size2399;
            ::apache::thrift::protocol::TType _etype2402;
            xfer += iprot->readListBegin(_etype2402, _size2399);
            this->goalDisplayTemplates.resize(_size2399);
            uint32_t _i2403;
            for (_i2403 = 0; _i2403 < _size2399; ++_i2403)
            {
              xfer += this->goalDisplayTemplates[_i2403].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_goalDisplayTemplates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2001:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->questTitles.clear();
            uint32_t _size2404;
            ::apache::thrift::protocol::TType _ktype2405;
            ::apache::thrift::protocol::TType _vtype2406;
            xfer += iprot->readMapBegin(_ktype2405, _vtype2406, _size2404);
            uint32_t _i2408;
            for (_i2408 = 0; _i2408 < _size2404; ++_i2408)
            {
              GoalType::type _key2409;
              int32_t ecast2411;
              xfer += iprot->readI32(ecast2411);
              _key2409 = (GoalType::type)ecast2411;
              std::vector<QuestDisplayTemplate> & _val2410 = this->questTitles[_key2409];
              {
                _val2410.clear();
                uint32_t _size2412;
                ::apache::thrift::protocol::TType _etype2415;
                xfer += iprot->readListBegin(_etype2415, _size2412);
                _val2410.resize(_size2412);
                uint32_t _i2416;
                for (_i2416 = 0; _i2416 < _size2412; ++_i2416)
                {
                  xfer += _val2410[_i2416].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_questTitles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2006:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->questSettings.read(iprot);
          isset_questSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2015:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->questRankSettings.clear();
            uint32_t _size2417;
            ::apache::thrift::protocol::TType _ktype2418;
            ::apache::thrift::protocol::TType _vtype2419;
            xfer += iprot->readMapBegin(_ktype2418, _vtype2419, _size2417);
            uint32_t _i2421;
            for (_i2421 = 0; _i2421 < _size2417; ++_i2421)
            {
              RankID _key2422;
              xfer += iprot->readI32(_key2422);
              QuestRankSettings& _val2423 = this->questRankSettings[_key2422];
              xfer += _val2423.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_questRankSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2016:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->newBusinessOrders.clear();
            uint32_t _size2424;
            ::apache::thrift::protocol::TType _ktype2425;
            ::apache::thrift::protocol::TType _vtype2426;
            xfer += iprot->readMapBegin(_ktype2425, _vtype2426, _size2424);
            uint32_t _i2428;
            for (_i2428 = 0; _i2428 < _size2424; ++_i2428)
            {
              BusinessOrderID _key2429;
              xfer += iprot->readString(_key2429);
              NewBusinessOrder& _val2430 = this->newBusinessOrders[_key2429];
              xfer += _val2430.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_newBusinessOrders = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2100:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->eventMenuWidgets.clear();
            uint32_t _size2431;
            ::apache::thrift::protocol::TType _ktype2432;
            ::apache::thrift::protocol::TType _vtype2433;
            xfer += iprot->readMapBegin(_ktype2432, _vtype2433, _size2431);
            uint32_t _i2435;
            for (_i2435 = 0; _i2435 < _size2431; ++_i2435)
            {
              EventMenuWidgetID _key2436;
              xfer += iprot->readString(_key2436);
              EventMenuWidget& _val2437 = this->eventMenuWidgets[_key2436];
              xfer += _val2437.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.eventMenuWidgets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6100:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gearAvailableOnGachas.clear();
            uint32_t _size2438;
            ::apache::thrift::protocol::TType _ktype2439;
            ::apache::thrift::protocol::TType _vtype2440;
            xfer += iprot->readMapBegin(_ktype2439, _vtype2440, _size2438);
            uint32_t _i2442;
            for (_i2442 = 0; _i2442 < _size2438; ++_i2442)
            {
              CurrencyID _key2443;
              xfer += iprot->readString(_key2443);
              GearAvailableOnGachaOfferList& _val2444 = this->gearAvailableOnGachas[_key2443];
              xfer += _val2444.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.gearAvailableOnGachas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6101:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gearAvailableOnCardOffers.clear();
            uint32_t _size2445;
            ::apache::thrift::protocol::TType _ktype2446;
            ::apache::thrift::protocol::TType _vtype2447;
            xfer += iprot->readMapBegin(_ktype2446, _vtype2447, _size2445);
            uint32_t _i2449;
            for (_i2449 = 0; _i2449 < _size2445; ++_i2449)
            {
              CurrencyID _key2450;
              xfer += iprot->readString(_key2450);
              GearAvailableOnCardOfferList& _val2451 = this->gearAvailableOnCardOffers[_key2450];
              xfer += _val2451.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.gearAvailableOnCardOffers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6102:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gearAvailableOnLevels.clear();
            uint32_t _size2452;
            ::apache::thrift::protocol::TType _ktype2453;
            ::apache::thrift::protocol::TType _vtype2454;
            xfer += iprot->readMapBegin(_ktype2453, _vtype2454, _size2452);
            uint32_t _i2456;
            for (_i2456 = 0; _i2456 < _size2452; ++_i2456)
            {
              CurrencyID _key2457;
              xfer += iprot->readString(_key2457);
              GearAvailableOnLevelList& _val2458 = this->gearAvailableOnLevels[_key2457];
              xfer += _val2458.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.gearAvailableOnLevels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6103:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gearAvailableOnBusinessHarvest.clear();
            uint32_t _size2459;
            ::apache::thrift::protocol::TType _ktype2460;
            ::apache::thrift::protocol::TType _vtype2461;
            xfer += iprot->readMapBegin(_ktype2460, _vtype2461, _size2459);
            uint32_t _i2463;
            for (_i2463 = 0; _i2463 < _size2459; ++_i2463)
            {
              CurrencyID _key2464;
              xfer += iprot->readString(_key2464);
              GearAvailableOnBusinessHarvestList& _val2465 = this->gearAvailableOnBusinessHarvest[_key2464];
              xfer += _val2465.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.gearAvailableOnBusinessHarvest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7100:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->mainShopEntries.clear();
            uint32_t _size2466;
            ::apache::thrift::protocol::TType _ktype2467;
            ::apache::thrift::protocol::TType _vtype2468;
            xfer += iprot->readMapBegin(_ktype2467, _vtype2468, _size2466);
            uint32_t _i2470;
            for (_i2470 = 0; _i2470 < _size2466; ++_i2470)
            {
              MainShopEntryID _key2471;
              xfer += iprot->readString(_key2471);
              MainShopEntry& _val2472 = this->mainShopEntries[_key2471];
              xfer += _val2472.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_mainShopEntries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8000:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->askForItems.clear();
            uint32_t _size2473;
            ::apache::thrift::protocol::TType _ktype2474;
            ::apache::thrift::protocol::TType _vtype2475;
            xfer += iprot->readMapBegin(_ktype2474, _vtype2475, _size2473);
            uint32_t _i2477;
            for (_i2477 = 0; _i2477 < _size2473; ++_i2477)
            {
              AskForItemID _key2478;
              xfer += iprot->readString(_key2478);
              AskForItemEntry& _val2479 = this->askForItems[_key2478];
              xfer += _val2479.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.askForItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8001:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->storeTabs.clear();
            uint32_t _size2480;
            ::apache::thrift::protocol::TType _ktype2481;
            ::apache::thrift::protocol::TType _vtype2482;
            xfer += iprot->readMapBegin(_ktype2481, _vtype2482, _size2480);
            uint32_t _i2484;
            for (_i2484 = 0; _i2484 < _size2480; ++_i2484)
            {
              StoreTabID _key2485;
              xfer += iprot->readString(_key2485);
              StoreTab& _val2486 = this->storeTabs[_key2485];
              xfer += _val2486.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.storeTabs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8100:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->guildQuestRewards.clear();
            uint32_t _size2487;
            ::apache::thrift::protocol::TType _ktype2488;
            ::apache::thrift::protocol::TType _vtype2489;
            xfer += iprot->readMapBegin(_ktype2488, _vtype2489, _size2487);
            uint32_t _i2491;
            for (_i2491 = 0; _i2491 < _size2487; ++_i2491)
            {
              GuildQuestRewardID _key2492;
              xfer += iprot->readString(_key2492);
              std::vector<GuildQuestReward> & _val2493 = this->guildQuestRewards[_key2492];
              {
                _val2493.clear();
                uint32_t _size2494;
                ::apache::thrift::protocol::TType _etype2497;
                xfer += iprot->readListBegin(_etype2497, _size2494);
                _val2493.resize(_size2494);
                uint32_t _i2498;
                for (_i2498 = 0; _i2498 < _size2494; ++_i2498)
                {
                  xfer += _val2493[_i2498].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.guildQuestRewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2200:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->raidBosses.clear();
            uint32_t _size2499;
            ::apache::thrift::protocol::TType _ktype2500;
            ::apache::thrift::protocol::TType _vtype2501;
            xfer += iprot->readMapBegin(_ktype2500, _vtype2501, _size2499);
            uint32_t _i2503;
            for (_i2503 = 0; _i2503 < _size2499; ++_i2503)
            {
              RaidBossID _key2504;
              xfer += iprot->readString(_key2504);
              RaidBoss& _val2505 = this->raidBosses[_key2504];
              xfer += _val2505.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.raidBosses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2201:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->raidBossActivities.clear();
            uint32_t _size2506;
            ::apache::thrift::protocol::TType _ktype2507;
            ::apache::thrift::protocol::TType _vtype2508;
            xfer += iprot->readMapBegin(_ktype2507, _vtype2508, _size2506);
            uint32_t _i2510;
            for (_i2510 = 0; _i2510 < _size2506; ++_i2510)
            {
              RaidBossActivityID _key2511;
              xfer += iprot->readString(_key2511);
              RaidBossActivity& _val2512 = this->raidBossActivities[_key2511];
              xfer += _val2512.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.raidBossActivities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2202:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->raidBossObjectives.clear();
            uint32_t _size2513;
            ::apache::thrift::protocol::TType _ktype2514;
            ::apache::thrift::protocol::TType _vtype2515;
            xfer += iprot->readMapBegin(_ktype2514, _vtype2515, _size2513);
            uint32_t _i2517;
            for (_i2517 = 0; _i2517 < _size2513; ++_i2517)
            {
              RaidBossObjectiveID _key2518;
              xfer += iprot->readString(_key2518);
              RaidBossObjective& _val2519 = this->raidBossObjectives[_key2518];
              xfer += _val2519.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.raidBossObjectives = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2203:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->raidBossKarmaBrackets.clear();
            uint32_t _size2520;
            ::apache::thrift::protocol::TType _ktype2521;
            ::apache::thrift::protocol::TType _vtype2522;
            xfer += iprot->readMapBegin(_ktype2521, _vtype2522, _size2520);
            uint32_t _i2524;
            for (_i2524 = 0; _i2524 < _size2520; ++_i2524)
            {
              RaidBossActivityID _key2525;
              xfer += iprot->readString(_key2525);
              std::vector<RaidBossKarmaBracket> & _val2526 = this->raidBossKarmaBrackets[_key2525];
              {
                _val2526.clear();
                uint32_t _size2527;
                ::apache::thrift::protocol::TType _etype2530;
                xfer += iprot->readListBegin(_etype2530, _size2527);
                _val2526.resize(_size2527);
                uint32_t _i2531;
                for (_i2531 = 0; _i2531 < _size2527; ++_i2531)
                {
                  xfer += _val2526[_i2531].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.raidBossKarmaBrackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2204:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->raidBossDifficultyBrackets.clear();
            uint32_t _size2532;
            ::apache::thrift::protocol::TType _ktype2533;
            ::apache::thrift::protocol::TType _vtype2534;
            xfer += iprot->readMapBegin(_ktype2533, _vtype2534, _size2532);
            uint32_t _i2536;
            for (_i2536 = 0; _i2536 < _size2532; ++_i2536)
            {
              RaidBossActivityID _key2537;
              xfer += iprot->readString(_key2537);
              std::vector<RaidBossDifficultyBracket> & _val2538 = this->raidBossDifficultyBrackets[_key2537];
              {
                _val2538.clear();
                uint32_t _size2539;
                ::apache::thrift::protocol::TType _etype2542;
                xfer += iprot->readListBegin(_etype2542, _size2539);
                _val2538.resize(_size2539);
                uint32_t _i2543;
                for (_i2543 = 0; _i2543 < _size2539; ++_i2543)
                {
                  xfer += _val2538[_i2543].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.raidBossDifficultyBrackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2205:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->raidBossCurves.clear();
            uint32_t _size2544;
            ::apache::thrift::protocol::TType _ktype2545;
            ::apache::thrift::protocol::TType _vtype2546;
            xfer += iprot->readMapBegin(_ktype2545, _vtype2546, _size2544);
            uint32_t _i2548;
            for (_i2548 = 0; _i2548 < _size2544; ++_i2548)
            {
              RaidBossCurveID _key2549;
              xfer += iprot->readString(_key2549);
              std::vector<RaidBossCurve> & _val2550 = this->raidBossCurves[_key2549];
              {
                _val2550.clear();
                uint32_t _size2551;
                ::apache::thrift::protocol::TType _etype2554;
                xfer += iprot->readListBegin(_etype2554, _size2551);
                _val2550.resize(_size2551);
                uint32_t _i2555;
                for (_i2555 = 0; _i2555 < _size2551; ++_i2555)
                {
                  xfer += _val2550[_i2555].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.raidBossCurves = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2206:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->raidBossRewards.clear();
            uint32_t _size2556;
            ::apache::thrift::protocol::TType _ktype2557;
            ::apache::thrift::protocol::TType _vtype2558;
            xfer += iprot->readMapBegin(_ktype2557, _vtype2558, _size2556);
            uint32_t _i2560;
            for (_i2560 = 0; _i2560 < _size2556; ++_i2560)
            {
              RaidBossRewardID _key2561;
              xfer += iprot->readString(_key2561);
              std::vector<RaidBossReward> & _val2562 = this->raidBossRewards[_key2561];
              {
                _val2562.clear();
                uint32_t _size2563;
                ::apache::thrift::protocol::TType _etype2566;
                xfer += iprot->readListBegin(_etype2566, _size2563);
                _val2562.resize(_size2563);
                uint32_t _i2567;
                for (_i2567 = 0; _i2567 < _size2563; ++_i2567)
                {
                  xfer += _val2562[_i2567].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.raidBossRewards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2207:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->raidBossRarities.clear();
            uint32_t _size2568;
            ::apache::thrift::protocol::TType _ktype2569;
            ::apache::thrift::protocol::TType _vtype2570;
            xfer += iprot->readMapBegin(_ktype2569, _vtype2570, _size2568);
            uint32_t _i2572;
            for (_i2572 = 0; _i2572 < _size2568; ++_i2572)
            {
              RaidBossRarityID _key2573;
              xfer += iprot->readString(_key2573);
              RaidBossRarity& _val2574 = this->raidBossRarities[_key2573];
              xfer += _val2574.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.raidBossRarities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2220:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->heroes.clear();
            uint32_t _size2575;
            ::apache::thrift::protocol::TType _ktype2576;
            ::apache::thrift::protocol::TType _vtype2577;
            xfer += iprot->readMapBegin(_ktype2576, _vtype2577, _size2575);
            uint32_t _i2579;
            for (_i2579 = 0; _i2579 < _size2575; ++_i2579)
            {
              HeroID _key2580;
              xfer += iprot->readString(_key2580);
              Hero& _val2581 = this->heroes[_key2580];
              xfer += _val2581.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.heroes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_currency)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventLock)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bundlesConfig)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_building)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recipe)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deco)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_business)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inventoryTab)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_blockers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_weightedLootList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rarity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_boost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_newLevelDot)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_material)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_island)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expansion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expansionType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaGroup)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaOffer)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gachaPack)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootTable)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootCurrencyGroup)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lootBuildingGroup)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_avatar)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_adminGiftMessages)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_analyticsEvents)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appBoyEvents)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_analyticsDimensions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_businessEvolution)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_npc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vendorProducts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_storeProducts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buyItemOrder)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_marketType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_forcedUpgrade)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_errorMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_testBuckets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_strangerSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_strangerMatchSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fakeStrangerDisplays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_giftMessageRewards)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partialKingdomLikeGifts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kingdomLikeGifts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_popupTemplate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_defaultTemplate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rushCostsByRemainingTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rewardMessages)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_events)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboards)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leaderboardPlacements)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rarityEvoLevelKeyDropRates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyDropRateByOrderTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventBusinessKeyDropRates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIslands)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventHowToPlays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventMainMenus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_castleActivities)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playerDisplaySuggestStart)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playerDisplaySuggestMiddle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_playerDisplaySuggestEnd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tutorialStates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_popupMessages)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_popupMessageSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingMultipliers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildLeaderboardSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_locations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildMemberTypeDisplays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildJoinTypeDisplays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildEmblems)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildBoundItems)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildRank)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_chatSystemMessages)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gifts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildNameSuggestStart)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildNameSuggestMiddle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_guildNameSuggestEnd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_quests)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questTemplates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questNpc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_businessQuestNpc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_storeInventories)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cardOffers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_iapProducts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_campaignSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelCampaigns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_levelCampaignStyles)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buildingTypeLocalizations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_goalDisplayTemplates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questTitles)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_questRankSettings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_newBusinessOrders)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mainShopEntries)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Data");

  xfer += oprot->writeFieldBegin("rank", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rank.size()));
    std::map<RankID, Rank> ::const_iterator _iter2582;
    for (_iter2582 = this->rank.begin(); _iter2582 != this->rank.end(); ++_iter2582)
    {
      xfer += oprot->writeI32(_iter2582->first);
      xfer += _iter2582->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->currency.size()));
    std::map<CurrencyID, Currency> ::const_iterator _iter2583;
    for (_iter2583 = this->currency.begin(); _iter2583 != this->currency.end(); ++_iter2583)
    {
      xfer += oprot->writeString(_iter2583->first);
      xfer += _iter2583->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventLock", ::apache::thrift::protocol::T_MAP, 11);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventLock.size()));
    std::map<EventLockID, EventLock> ::const_iterator _iter2584;
    for (_iter2584 = this->eventLock.begin(); _iter2584 != this->eventLock.end(); ++_iter2584)
    {
      xfer += oprot->writeString(_iter2584->first);
      xfer += _iter2584->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.settings) {
    xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->settings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startingGameState) {
    xfer += oprot->writeFieldBegin("startingGameState", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->startingGameState.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("bundlesConfig", ::apache::thrift::protocol::T_MAP, 17);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->bundlesConfig.size()));
    std::map<BundleID, std::vector<ConfigBundle> > ::const_iterator _iter2585;
    for (_iter2585 = this->bundlesConfig.begin(); _iter2585 != this->bundlesConfig.end(); ++_iter2585)
    {
      xfer += oprot->writeString(_iter2585->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2585->second.size()));
        std::vector<ConfigBundle> ::const_iterator _iter2586;
        for (_iter2586 = _iter2585->second.begin(); _iter2586 != _iter2585->second.end(); ++_iter2586)
        {
          xfer += (*_iter2586).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.levelBlobs) {
    xfer += oprot->writeFieldBegin("levelBlobs", ::apache::thrift::protocol::T_MAP, 19);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->levelBlobs.size()));
      std::map<BlobID, LevelBlob> ::const_iterator _iter2587;
      for (_iter2587 = this->levelBlobs.begin(); _iter2587 != this->levelBlobs.end(); ++_iter2587)
      {
        xfer += oprot->writeString(_iter2587->first);
        xfer += _iter2587->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("building", ::apache::thrift::protocol::T_MAP, 20);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->building.size()));
    std::map<BuildingID, Building> ::const_iterator _iter2588;
    for (_iter2588 = this->building.begin(); _iter2588 != this->building.end(); ++_iter2588)
    {
      xfer += oprot->writeString(_iter2588->first);
      xfer += _iter2588->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recipe", ::apache::thrift::protocol::T_MAP, 21);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->recipe.size()));
    std::map<RecipeID, Recipe> ::const_iterator _iter2589;
    for (_iter2589 = this->recipe.begin(); _iter2589 != this->recipe.end(); ++_iter2589)
    {
      xfer += oprot->writeString(_iter2589->first);
      xfer += _iter2589->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deco", ::apache::thrift::protocol::T_MAP, 24);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->deco.size()));
    std::map<DecoID, Deco> ::const_iterator _iter2590;
    for (_iter2590 = this->deco.begin(); _iter2590 != this->deco.end(); ++_iter2590)
    {
      xfer += oprot->writeString(_iter2590->first);
      xfer += _iter2590->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("business", ::apache::thrift::protocol::T_MAP, 25);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->business.size()));
    std::map<BusinessID, Business> ::const_iterator _iter2591;
    for (_iter2591 = this->business.begin(); _iter2591 != this->business.end(); ++_iter2591)
    {
      xfer += oprot->writeString(_iter2591->first);
      xfer += _iter2591->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.businessOrder) {
    xfer += oprot->writeFieldBegin("businessOrder", ::apache::thrift::protocol::T_MAP, 26);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->businessOrder.size()));
      std::map<BusinessOrderID, BusinessOrder> ::const_iterator _iter2592;
      for (_iter2592 = this->businessOrder.begin(); _iter2592 != this->businessOrder.end(); ++_iter2592)
      {
        xfer += oprot->writeString(_iter2592->first);
        xfer += _iter2592->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("inventoryTab", ::apache::thrift::protocol::T_MAP, 27);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->inventoryTab.size()));
    std::map<int32_t, InventoryTab> ::const_iterator _iter2593;
    for (_iter2593 = this->inventoryTab.begin(); _iter2593 != this->inventoryTab.end(); ++_iter2593)
    {
      xfer += oprot->writeI32(_iter2593->first);
      xfer += _iter2593->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blockers", ::apache::thrift::protocol::T_MAP, 28);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->blockers.size()));
    std::map<BuildingID, Blocker> ::const_iterator _iter2594;
    for (_iter2594 = this->blockers.begin(); _iter2594 != this->blockers.end(); ++_iter2594)
    {
      xfer += oprot->writeString(_iter2594->first);
      xfer += _iter2594->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weightedLootList", ::apache::thrift::protocol::T_MAP, 32);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->weightedLootList.size()));
    std::map<WeightedLootListID, std::vector<WeightedLoot> > ::const_iterator _iter2595;
    for (_iter2595 = this->weightedLootList.begin(); _iter2595 != this->weightedLootList.end(); ++_iter2595)
    {
      xfer += oprot->writeString(_iter2595->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2595->second.size()));
        std::vector<WeightedLoot> ::const_iterator _iter2596;
        for (_iter2596 = _iter2595->second.begin(); _iter2596 != _iter2595->second.end(); ++_iter2596)
        {
          xfer += (*_iter2596).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rarity", ::apache::thrift::protocol::T_MAP, 34);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rarity.size()));
    std::map<RarityID, Rarity> ::const_iterator _iter2597;
    for (_iter2597 = this->rarity.begin(); _iter2597 != this->rarity.end(); ++_iter2597)
    {
      xfer += oprot->writeI32(_iter2597->first);
      xfer += _iter2597->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.newRarity) {
    xfer += oprot->writeFieldBegin("newRarity", ::apache::thrift::protocol::T_MAP, 35);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->newRarity.size()));
      std::map<RarityID, Rarity> ::const_iterator _iter2598;
      for (_iter2598 = this->newRarity.begin(); _iter2598 != this->newRarity.end(); ++_iter2598)
      {
        xfer += oprot->writeI32(_iter2598->first);
        xfer += _iter2598->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_MAP, 40);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->level.size()));
    std::map<LevelID, Level> ::const_iterator _iter2599;
    for (_iter2599 = this->level.begin(); _iter2599 != this->level.end(); ++_iter2599)
    {
      xfer += oprot->writeString(_iter2599->first);
      xfer += _iter2599->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("boost", ::apache::thrift::protocol::T_MAP, 41);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->boost.size()));
    std::map<BoostID, Boost> ::const_iterator _iter2600;
    for (_iter2600 = this->boost.begin(); _iter2600 != this->boost.end(); ++_iter2600)
    {
      xfer += oprot->writeString(_iter2600->first);
      xfer += _iter2600->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.levelDot) {
    xfer += oprot->writeFieldBegin("levelDot", ::apache::thrift::protocol::T_MAP, 42);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->levelDot.size()));
      std::map<LevelDotID, LevelDot> ::const_iterator _iter2601;
      for (_iter2601 = this->levelDot.begin(); _iter2601 != this->levelDot.end(); ++_iter2601)
      {
        xfer += oprot->writeString(_iter2601->first);
        xfer += _iter2601->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.villain) {
    xfer += oprot->writeFieldBegin("villain", ::apache::thrift::protocol::T_MAP, 43);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->villain.size()));
      std::map<VillainID, Villain> ::const_iterator _iter2602;
      for (_iter2602 = this->villain.begin(); _iter2602 != this->villain.end(); ++_iter2602)
      {
        xfer += oprot->writeString(_iter2602->first);
        xfer += _iter2602->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.matchThreeData) {
    xfer += oprot->writeFieldBegin("matchThreeData", ::apache::thrift::protocol::T_MAP, 44);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->matchThreeData.size()));
      std::map<LevelName, MatchThreeData> ::const_iterator _iter2603;
      for (_iter2603 = this->matchThreeData.begin(); _iter2603 != this->matchThreeData.end(); ++_iter2603)
      {
        xfer += oprot->writeString(_iter2603->first);
        xfer += _iter2603->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newLevel) {
    xfer += oprot->writeFieldBegin("newLevel", ::apache::thrift::protocol::T_MAP, 45);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->newLevel.size()));
      std::map<LevelID, NewLevel> ::const_iterator _iter2604;
      for (_iter2604 = this->newLevel.begin(); _iter2604 != this->newLevel.end(); ++_iter2604)
      {
        xfer += oprot->writeString(_iter2604->first);
        xfer += _iter2604->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("newLevelDot", ::apache::thrift::protocol::T_MAP, 46);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->newLevelDot.size()));
    std::map<LevelDotID, LevelDotV2> ::const_iterator _iter2605;
    for (_iter2605 = this->newLevelDot.begin(); _iter2605 != this->newLevelDot.end(); ++_iter2605)
    {
      xfer += oprot->writeString(_iter2605->first);
      xfer += _iter2605->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("material", ::apache::thrift::protocol::T_MAP, 55);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->material.size()));
    std::map<MaterialID, Material> ::const_iterator _iter2606;
    for (_iter2606 = this->material.begin(); _iter2606 != this->material.end(); ++_iter2606)
    {
      xfer += oprot->writeString(_iter2606->first);
      xfer += _iter2606->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("island", ::apache::thrift::protocol::T_MAP, 60);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->island.size()));
    std::map<IslandID, Island> ::const_iterator _iter2607;
    for (_iter2607 = this->island.begin(); _iter2607 != this->island.end(); ++_iter2607)
    {
      xfer += oprot->writeString(_iter2607->first);
      xfer += _iter2607->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.islandSettings) {
    xfer += oprot->writeFieldBegin("islandSettings", ::apache::thrift::protocol::T_STRUCT, 61);
    xfer += this->islandSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.islandObject) {
    xfer += oprot->writeFieldBegin("islandObject", ::apache::thrift::protocol::T_MAP, 63);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->islandObject.size()));
      std::map<IslandObjectID, IslandObject> ::const_iterator _iter2608;
      for (_iter2608 = this->islandObject.begin(); _iter2608 != this->islandObject.end(); ++_iter2608)
      {
        xfer += oprot->writeString(_iter2608->first);
        xfer += _iter2608->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.color) {
    xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_MAP, 64);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->color.size()));
      std::map<ColorID, Color> ::const_iterator _iter2609;
      for (_iter2609 = this->color.begin(); _iter2609 != this->color.end(); ++_iter2609)
      {
        xfer += oprot->writeString(_iter2609->first);
        xfer += _iter2609->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("expansion", ::apache::thrift::protocol::T_MAP, 70);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->expansion.size()));
    std::map<ExpansionID, Expansion> ::const_iterator _iter2610;
    for (_iter2610 = this->expansion.begin(); _iter2610 != this->expansion.end(); ++_iter2610)
    {
      xfer += oprot->writeString(_iter2610->first);
      xfer += _iter2610->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expansionType", ::apache::thrift::protocol::T_MAP, 71);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->expansionType.size()));
    std::map<ExpansionTypeID, ExpansionType> ::const_iterator _iter2611;
    for (_iter2611 = this->expansionType.begin(); _iter2611 != this->expansionType.end(); ++_iter2611)
    {
      xfer += oprot->writeString(_iter2611->first);
      xfer += _iter2611->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaGroup", ::apache::thrift::protocol::T_MAP, 74);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gachaGroup.size()));
    std::map<GachaGroupID, GachaGroup> ::const_iterator _iter2612;
    for (_iter2612 = this->gachaGroup.begin(); _iter2612 != this->gachaGroup.end(); ++_iter2612)
    {
      xfer += oprot->writeString(_iter2612->first);
      xfer += _iter2612->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaOffer", ::apache::thrift::protocol::T_MAP, 75);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gachaOffer.size()));
    std::map<GachaOfferID, GachaOffer> ::const_iterator _iter2613;
    for (_iter2613 = this->gachaOffer.begin(); _iter2613 != this->gachaOffer.end(); ++_iter2613)
    {
      xfer += oprot->writeString(_iter2613->first);
      xfer += _iter2613->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gachaPack", ::apache::thrift::protocol::T_MAP, 76);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gachaPack.size()));
    std::map<GachaPackID, GachaPack> ::const_iterator _iter2614;
    for (_iter2614 = this->gachaPack.begin(); _iter2614 != this->gachaPack.end(); ++_iter2614)
    {
      xfer += oprot->writeString(_iter2614->first);
      xfer += _iter2614->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootTable", ::apache::thrift::protocol::T_MAP, 77);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->lootTable.size()));
    std::map<LootTableID, std::vector<LootTable> > ::const_iterator _iter2615;
    for (_iter2615 = this->lootTable.begin(); _iter2615 != this->lootTable.end(); ++_iter2615)
    {
      xfer += oprot->writeString(_iter2615->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2615->second.size()));
        std::vector<LootTable> ::const_iterator _iter2616;
        for (_iter2616 = _iter2615->second.begin(); _iter2616 != _iter2615->second.end(); ++_iter2616)
        {
          xfer += (*_iter2616).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootCurrencyGroup", ::apache::thrift::protocol::T_MAP, 78);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->lootCurrencyGroup.size()));
    std::map<LootCurrencyGroupID, std::vector<LootCurrencyGroup> > ::const_iterator _iter2617;
    for (_iter2617 = this->lootCurrencyGroup.begin(); _iter2617 != this->lootCurrencyGroup.end(); ++_iter2617)
    {
      xfer += oprot->writeString(_iter2617->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2617->second.size()));
        std::vector<LootCurrencyGroup> ::const_iterator _iter2618;
        for (_iter2618 = _iter2617->second.begin(); _iter2618 != _iter2617->second.end(); ++_iter2618)
        {
          xfer += (*_iter2618).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lootBuildingGroup", ::apache::thrift::protocol::T_MAP, 79);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->lootBuildingGroup.size()));
    std::map<LootBuildingGroupID, std::vector<LootBuildingGroup> > ::const_iterator _iter2619;
    for (_iter2619 = this->lootBuildingGroup.begin(); _iter2619 != this->lootBuildingGroup.end(); ++_iter2619)
    {
      xfer += oprot->writeString(_iter2619->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2619->second.size()));
        std::vector<LootBuildingGroup> ::const_iterator _iter2620;
        for (_iter2620 = _iter2619->second.begin(); _iter2620 != _iter2619->second.end(); ++_iter2620)
        {
          xfer += (*_iter2620).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_MAP, 80);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->avatar.size()));
    std::map<AvatarID, Avatar> ::const_iterator _iter2621;
    for (_iter2621 = this->avatar.begin(); _iter2621 != this->avatar.end(); ++_iter2621)
    {
      xfer += oprot->writeString(_iter2621->first);
      xfer += _iter2621->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.startingKingdomEntities) {
    xfer += oprot->writeFieldBegin("startingKingdomEntities", ::apache::thrift::protocol::T_MAP, 93);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->startingKingdomEntities.size()));
      std::map<EntityID, StartingKingdomEntity> ::const_iterator _iter2622;
      for (_iter2622 = this->startingKingdomEntities.begin(); _iter2622 != this->startingKingdomEntities.end(); ++_iter2622)
      {
        xfer += oprot->writeI32(_iter2622->first);
        xfer += _iter2622->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.adminMessages) {
    xfer += oprot->writeFieldBegin("adminMessages", ::apache::thrift::protocol::T_MAP, 130);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->adminMessages.size()));
      std::map<AdminMessageID, AdminMessage> ::const_iterator _iter2623;
      for (_iter2623 = this->adminMessages.begin(); _iter2623 != this->adminMessages.end(); ++_iter2623)
      {
        xfer += oprot->writeString(_iter2623->first);
        xfer += _iter2623->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("adminGiftMessages", ::apache::thrift::protocol::T_LIST, 131);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->adminGiftMessages.size()));
    std::vector<AdminGiftMessage> ::const_iterator _iter2624;
    for (_iter2624 = this->adminGiftMessages.begin(); _iter2624 != this->adminGiftMessages.end(); ++_iter2624)
    {
      xfer += (*_iter2624).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyticsEvents", ::apache::thrift::protocol::T_MAP, 140);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->analyticsEvents.size()));
    std::map<AnalyticsEventID, AnalyticsEvent> ::const_iterator _iter2625;
    for (_iter2625 = this->analyticsEvents.begin(); _iter2625 != this->analyticsEvents.end(); ++_iter2625)
    {
      xfer += oprot->writeString(_iter2625->first);
      xfer += _iter2625->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appBoyEvents", ::apache::thrift::protocol::T_MAP, 141);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->appBoyEvents.size()));
    std::map<AnalyticsEventID, AppBoyEvent> ::const_iterator _iter2626;
    for (_iter2626 = this->appBoyEvents.begin(); _iter2626 != this->appBoyEvents.end(); ++_iter2626)
    {
      xfer += oprot->writeString(_iter2626->first);
      xfer += _iter2626->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyticsDimensions", ::apache::thrift::protocol::T_MAP, 142);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->analyticsDimensions.size()));
    std::map<AnalyticsDimensionID, AnalyticsDimension> ::const_iterator _iter2627;
    for (_iter2627 = this->analyticsDimensions.begin(); _iter2627 != this->analyticsDimensions.end(); ++_iter2627)
    {
      xfer += oprot->writeString(_iter2627->first);
      xfer += _iter2627->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.apsalarEvents) {
    xfer += oprot->writeFieldBegin("apsalarEvents", ::apache::thrift::protocol::T_MAP, 143);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->apsalarEvents.size()));
      std::map<AnalyticsEventID, ApsalarEvent> ::const_iterator _iter2628;
      for (_iter2628 = this->apsalarEvents.begin(); _iter2628 != this->apsalarEvents.end(); ++_iter2628)
      {
        xfer += oprot->writeString(_iter2628->first);
        xfer += _iter2628->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessOrderList) {
    xfer += oprot->writeFieldBegin("businessOrderList", ::apache::thrift::protocol::T_MAP, 150);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->businessOrderList.size()));
      std::map<BusinessOrderListID, BusinessOrderList> ::const_iterator _iter2629;
      for (_iter2629 = this->businessOrderList.begin(); _iter2629 != this->businessOrderList.end(); ++_iter2629)
      {
        xfer += oprot->writeString(_iter2629->first);
        xfer += _iter2629->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("businessEvolution", ::apache::thrift::protocol::T_MAP, 152);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->businessEvolution.size()));
    std::map<EvolutionMaterialID, BusinessEvolution> ::const_iterator _iter2630;
    for (_iter2630 = this->businessEvolution.begin(); _iter2630 != this->businessEvolution.end(); ++_iter2630)
    {
      xfer += oprot->writeString(_iter2630->first);
      xfer += _iter2630->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("npc", ::apache::thrift::protocol::T_MAP, 160);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->npc.size()));
    std::map<NpcID, Npc> ::const_iterator _iter2631;
    for (_iter2631 = this->npc.begin(); _iter2631 != this->npc.end(); ++_iter2631)
    {
      xfer += oprot->writeString(_iter2631->first);
      xfer += _iter2631->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vendorProducts", ::apache::thrift::protocol::T_MAP, 170);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vendorProducts.size()));
    std::map<StoreProductID, VendorProduct> ::const_iterator _iter2632;
    for (_iter2632 = this->vendorProducts.begin(); _iter2632 != this->vendorProducts.end(); ++_iter2632)
    {
      xfer += oprot->writeString(_iter2632->first);
      xfer += _iter2632->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("storeProducts", ::apache::thrift::protocol::T_MAP, 180);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->storeProducts.size()));
    std::map<StoreProductID, StoreProduct> ::const_iterator _iter2633;
    for (_iter2633 = this->storeProducts.begin(); _iter2633 != this->storeProducts.end(); ++_iter2633)
    {
      xfer += oprot->writeString(_iter2633->first);
      xfer += _iter2633->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyItemOrder", ::apache::thrift::protocol::T_MAP, 200);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->buyItemOrder.size()));
    std::map<MarketOrderID, BuyItemOrder> ::const_iterator _iter2634;
    for (_iter2634 = this->buyItemOrder.begin(); _iter2634 != this->buyItemOrder.end(); ++_iter2634)
    {
      xfer += oprot->writeString(_iter2634->first);
      xfer += _iter2634->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("marketType", ::apache::thrift::protocol::T_MAP, 201);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->marketType.size()));
    std::map<MarketType::type, Market> ::const_iterator _iter2635;
    for (_iter2635 = this->marketType.begin(); _iter2635 != this->marketType.end(); ++_iter2635)
    {
      xfer += oprot->writeI32((int32_t)_iter2635->first);
      xfer += _iter2635->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forcedUpgrade", ::apache::thrift::protocol::T_MAP, 202);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->forcedUpgrade.size()));
    std::map<ClientPlatform::type, ForcedUpgrade> ::const_iterator _iter2636;
    for (_iter2636 = this->forcedUpgrade.begin(); _iter2636 != this->forcedUpgrade.end(); ++_iter2636)
    {
      xfer += oprot->writeI32((int32_t)_iter2636->first);
      xfer += _iter2636->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_MAP, 203);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->errorMessage.size()));
    std::map<ErrorId, ErrorMessage> ::const_iterator _iter2637;
    for (_iter2637 = this->errorMessage.begin(); _iter2637 != this->errorMessage.end(); ++_iter2637)
    {
      xfer += oprot->writeString(_iter2637->first);
      xfer += _iter2637->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.achievement) {
    xfer += oprot->writeFieldBegin("achievement", ::apache::thrift::protocol::T_MAP, 204);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->achievement.size()));
      std::map<AchievementID, Achievement> ::const_iterator _iter2638;
      for (_iter2638 = this->achievement.begin(); _iter2638 != this->achievement.end(); ++_iter2638)
      {
        xfer += oprot->writeString(_iter2638->first);
        xfer += _iter2638->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.achievementGroup) {
    xfer += oprot->writeFieldBegin("achievementGroup", ::apache::thrift::protocol::T_MAP, 205);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->achievementGroup.size()));
      std::map<AchievementGroupID, AchievementGroup> ::const_iterator _iter2639;
      for (_iter2639 = this->achievementGroup.begin(); _iter2639 != this->achievementGroup.end(); ++_iter2639)
      {
        xfer += oprot->writeString(_iter2639->first);
        xfer += _iter2639->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("testBuckets", ::apache::thrift::protocol::T_MAP, 210);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->testBuckets.size()));
    std::map<TestBucketID, TestBucket> ::const_iterator _iter2640;
    for (_iter2640 = this->testBuckets.begin(); _iter2640 != this->testBuckets.end(); ++_iter2640)
    {
      xfer += oprot->writeString(_iter2640->first);
      xfer += _iter2640->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strangerSettings", ::apache::thrift::protocol::T_STRUCT, 220);
  xfer += this->strangerSettings.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strangerMatchSettings", ::apache::thrift::protocol::T_LIST, 221);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->strangerMatchSettings.size()));
    std::vector<StrangerMatchSettings> ::const_iterator _iter2641;
    for (_iter2641 = this->strangerMatchSettings.begin(); _iter2641 != this->strangerMatchSettings.end(); ++_iter2641)
    {
      xfer += (*_iter2641).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fakeStrangerDisplays", ::apache::thrift::protocol::T_LIST, 222);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fakeStrangerDisplays.size()));
    std::vector<FakeStrangerDisplay> ::const_iterator _iter2642;
    for (_iter2642 = this->fakeStrangerDisplays.begin(); _iter2642 != this->fakeStrangerDisplays.end(); ++_iter2642)
    {
      xfer += (*_iter2642).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("giftMessageRewards", ::apache::thrift::protocol::T_MAP, 223);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->giftMessageRewards.size()));
    std::map<GiftMessageRewardID, GiftMessageReward> ::const_iterator _iter2643;
    for (_iter2643 = this->giftMessageRewards.begin(); _iter2643 != this->giftMessageRewards.end(); ++_iter2643)
    {
      xfer += oprot->writeString(_iter2643->first);
      xfer += _iter2643->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partialKingdomLikeGifts", ::apache::thrift::protocol::T_LIST, 224);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partialKingdomLikeGifts.size()));
    std::vector<PartialKingdomLikeGift> ::const_iterator _iter2644;
    for (_iter2644 = this->partialKingdomLikeGifts.begin(); _iter2644 != this->partialKingdomLikeGifts.end(); ++_iter2644)
    {
      xfer += (*_iter2644).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kingdomLikeGifts", ::apache::thrift::protocol::T_MAP, 225);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->kingdomLikeGifts.size()));
    std::map<KingdomLikeGiftID, KingdomLikeGift> ::const_iterator _iter2645;
    for (_iter2645 = this->kingdomLikeGifts.begin(); _iter2645 != this->kingdomLikeGifts.end(); ++_iter2645)
    {
      xfer += oprot->writeString(_iter2645->first);
      xfer += _iter2645->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.pushMessages) {
    xfer += oprot->writeFieldBegin("pushMessages", ::apache::thrift::protocol::T_MAP, 226);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pushMessages.size()));
      std::map<PushMessageID, PushMessage> ::const_iterator _iter2646;
      for (_iter2646 = this->pushMessages.begin(); _iter2646 != this->pushMessages.end(); ++_iter2646)
      {
        xfer += oprot->writeString(_iter2646->first);
        xfer += _iter2646->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.socialUnlockrewards) {
    xfer += oprot->writeFieldBegin("socialUnlockrewards", ::apache::thrift::protocol::T_MAP, 229);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->socialUnlockrewards.size()));
      std::map<SocialUnlockRewardID, SocialUnlockReward> ::const_iterator _iter2647;
      for (_iter2647 = this->socialUnlockrewards.begin(); _iter2647 != this->socialUnlockrewards.end(); ++_iter2647)
      {
        xfer += oprot->writeString(_iter2647->first);
        xfer += _iter2647->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resolutionBundles) {
    xfer += oprot->writeFieldBegin("resolutionBundles", ::apache::thrift::protocol::T_MAP, 300);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->resolutionBundles.size()));
      std::map<BundleID, std::vector<ConfigBundle> > ::const_iterator _iter2648;
      for (_iter2648 = this->resolutionBundles.begin(); _iter2648 != this->resolutionBundles.end(); ++_iter2648)
      {
        xfer += oprot->writeString(_iter2648->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2648->second.size()));
          std::vector<ConfigBundle> ::const_iterator _iter2649;
          for (_iter2649 = _iter2648->second.begin(); _iter2649 != _iter2648->second.end(); ++_iter2649)
          {
            xfer += (*_iter2649).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bundleManifest) {
    xfer += oprot->writeFieldBegin("bundleManifest", ::apache::thrift::protocol::T_STRUCT, 310);
    xfer += this->bundleManifest.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resolutionManifests) {
    xfer += oprot->writeFieldBegin("resolutionManifests", ::apache::thrift::protocol::T_STRUCT, 320);
    xfer += this->resolutionManifests.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localizationManifests) {
    xfer += oprot->writeFieldBegin("localizationManifests", ::apache::thrift::protocol::T_STRUCT, 330);
    xfer += this->localizationManifests.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.adProviders) {
    xfer += oprot->writeFieldBegin("adProviders", ::apache::thrift::protocol::T_LIST, 400);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->adProviders.size()));
      std::vector<AdProvider> ::const_iterator _iter2650;
      for (_iter2650 = this->adProviders.begin(); _iter2650 != this->adProviders.end(); ++_iter2650)
      {
        xfer += (*_iter2650).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("popupTemplate", ::apache::thrift::protocol::T_LIST, 500);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->popupTemplate.size()));
    std::vector<PopupTemplate> ::const_iterator _iter2651;
    for (_iter2651 = this->popupTemplate.begin(); _iter2651 != this->popupTemplate.end(); ++_iter2651)
    {
      xfer += (*_iter2651).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defaultTemplate", ::apache::thrift::protocol::T_MAP, 501);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->defaultTemplate.size()));
    std::map<PopupTemplateType::type, DefaultTemplate> ::const_iterator _iter2652;
    for (_iter2652 = this->defaultTemplate.begin(); _iter2652 != this->defaultTemplate.end(); ++_iter2652)
    {
      xfer += oprot->writeI32((int32_t)_iter2652->first);
      xfer += _iter2652->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rushCostsByRemainingTime", ::apache::thrift::protocol::T_LIST, 502);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rushCostsByRemainingTime.size()));
    std::vector<RushCostByRemainingTime> ::const_iterator _iter2653;
    for (_iter2653 = this->rushCostsByRemainingTime.begin(); _iter2653 != this->rushCostsByRemainingTime.end(); ++_iter2653)
    {
      xfer += (*_iter2653).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageTemplateModifiers) {
    xfer += oprot->writeFieldBegin("messageTemplateModifiers", ::apache::thrift::protocol::T_MAP, 503);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->messageTemplateModifiers.size()));
      std::map<PopupMessageID, std::vector<MessageTemplateModifier> > ::const_iterator _iter2654;
      for (_iter2654 = this->messageTemplateModifiers.begin(); _iter2654 != this->messageTemplateModifiers.end(); ++_iter2654)
      {
        xfer += oprot->writeString(_iter2654->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2654->second.size()));
          std::vector<MessageTemplateModifier> ::const_iterator _iter2655;
          for (_iter2655 = _iter2654->second.begin(); _iter2655 != _iter2654->second.end(); ++_iter2655)
          {
            xfer += (*_iter2655).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gachaBanner) {
    xfer += oprot->writeFieldBegin("gachaBanner", ::apache::thrift::protocol::T_MAP, 600);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gachaBanner.size()));
      std::map<GachaBannerID, GachaBanner> ::const_iterator _iter2656;
      for (_iter2656 = this->gachaBanner.begin(); _iter2656 != this->gachaBanner.end(); ++_iter2656)
      {
        xfer += oprot->writeString(_iter2656->first);
        xfer += _iter2656->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.presetKingdoms) {
    xfer += oprot->writeFieldBegin("presetKingdoms", ::apache::thrift::protocol::T_MAP, 601);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->presetKingdoms.size()));
      std::map<PresetKingdomID, std::vector<PresetKingdomEntity> > ::const_iterator _iter2657;
      for (_iter2657 = this->presetKingdoms.begin(); _iter2657 != this->presetKingdoms.end(); ++_iter2657)
      {
        xfer += oprot->writeString(_iter2657->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2657->second.size()));
          std::vector<PresetKingdomEntity> ::const_iterator _iter2658;
          for (_iter2658 = _iter2657->second.begin(); _iter2658 != _iter2657->second.end(); ++_iter2658)
          {
            xfer += (*_iter2658).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.abTests) {
    xfer += oprot->writeFieldBegin("abTests", ::apache::thrift::protocol::T_MAP, 602);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->abTests.size()));
      std::map<ABTestID, std::vector<ABTest> > ::const_iterator _iter2659;
      for (_iter2659 = this->abTests.begin(); _iter2659 != this->abTests.end(); ++_iter2659)
      {
        xfer += oprot->writeString(_iter2659->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2659->second.size()));
          std::vector<ABTest> ::const_iterator _iter2660;
          for (_iter2660 = _iter2659->second.begin(); _iter2660 != _iter2659->second.end(); ++_iter2660)
          {
            xfer += (*_iter2660).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientVersionTestBuckets) {
    xfer += oprot->writeFieldBegin("clientVersionTestBuckets", ::apache::thrift::protocol::T_MAP, 603);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->clientVersionTestBuckets.size()));
      std::map<ABTestID, ClientVersionTestBucket> ::const_iterator _iter2661;
      for (_iter2661 = this->clientVersionTestBuckets.begin(); _iter2661 != this->clientVersionTestBuckets.end(); ++_iter2661)
      {
        xfer += oprot->writeString(_iter2661->first);
        xfer += _iter2661->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buildMenuSpecialCard) {
    xfer += oprot->writeFieldBegin("buildMenuSpecialCard", ::apache::thrift::protocol::T_MAP, 610);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->buildMenuSpecialCard.size()));
      std::map<BuildMenuSpecialCardID, BuildMenuSpecialCard> ::const_iterator _iter2662;
      for (_iter2662 = this->buildMenuSpecialCard.begin(); _iter2662 != this->buildMenuSpecialCard.end(); ++_iter2662)
      {
        xfer += oprot->writeString(_iter2662->first);
        xfer += _iter2662->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessMenuSettings) {
    xfer += oprot->writeFieldBegin("businessMenuSettings", ::apache::thrift::protocol::T_STRUCT, 700);
    xfer += this->businessMenuSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("rewardMessages", ::apache::thrift::protocol::T_MAP, 790);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rewardMessages.size()));
    std::map<RewardMessageID, RewardMessage> ::const_iterator _iter2663;
    for (_iter2663 = this->rewardMessages.begin(); _iter2663 != this->rewardMessages.end(); ++_iter2663)
    {
      xfer += oprot->writeString(_iter2663->first);
      xfer += _iter2663->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_MAP, 800);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::map<EventID, Event> ::const_iterator _iter2664;
    for (_iter2664 = this->events.begin(); _iter2664 != this->events.end(); ++_iter2664)
    {
      xfer += oprot->writeString(_iter2664->first);
      xfer += _iter2664->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboards", ::apache::thrift::protocol::T_MAP, 810);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->leaderboards.size()));
    std::map<LeaderboardID, Leaderboard> ::const_iterator _iter2665;
    for (_iter2665 = this->leaderboards.begin(); _iter2665 != this->leaderboards.end(); ++_iter2665)
    {
      xfer += oprot->writeString(_iter2665->first);
      xfer += _iter2665->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leaderboardSettings", ::apache::thrift::protocol::T_STRUCT, 811);
  xfer += this->leaderboardSettings.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.leaderboardLeagues) {
    xfer += oprot->writeFieldBegin("leaderboardLeagues", ::apache::thrift::protocol::T_LIST, 812);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->leaderboardLeagues.size()));
      std::vector<LeaderboardLeague> ::const_iterator _iter2666;
      for (_iter2666 = this->leaderboardLeagues.begin(); _iter2666 != this->leaderboardLeagues.end(); ++_iter2666)
      {
        xfer += (*_iter2666).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leaderboardRibbons) {
    xfer += oprot->writeFieldBegin("leaderboardRibbons", ::apache::thrift::protocol::T_LIST, 813);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->leaderboardRibbons.size()));
      std::vector<LeaderboardRibbon> ::const_iterator _iter2667;
      for (_iter2667 = this->leaderboardRibbons.begin(); _iter2667 != this->leaderboardRibbons.end(); ++_iter2667)
      {
        xfer += (*_iter2667).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leaderboardRewards) {
    xfer += oprot->writeFieldBegin("leaderboardRewards", ::apache::thrift::protocol::T_LIST, 814);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->leaderboardRewards.size()));
      std::vector<LeaderboardReward> ::const_iterator _iter2668;
      for (_iter2668 = this->leaderboardRewards.begin(); _iter2668 != this->leaderboardRewards.end(); ++_iter2668)
      {
        xfer += (*_iter2668).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("leaderboardPlacements", ::apache::thrift::protocol::T_MAP, 815);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->leaderboardPlacements.size()));
    std::map<CurrencyID, std::vector<LeaderboardPlacement> > ::const_iterator _iter2669;
    for (_iter2669 = this->leaderboardPlacements.begin(); _iter2669 != this->leaderboardPlacements.end(); ++_iter2669)
    {
      xfer += oprot->writeString(_iter2669->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2669->second.size()));
        std::vector<LeaderboardPlacement> ::const_iterator _iter2670;
        for (_iter2670 = _iter2669->second.begin(); _iter2670 != _iter2669->second.end(); ++_iter2670)
        {
          xfer += (*_iter2670).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rarityEvoLevelKeyDropRates", ::apache::thrift::protocol::T_LIST, 816);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rarityEvoLevelKeyDropRates.size()));
    std::vector<RarityEvoLevelKeyDropRate> ::const_iterator _iter2671;
    for (_iter2671 = this->rarityEvoLevelKeyDropRates.begin(); _iter2671 != this->rarityEvoLevelKeyDropRates.end(); ++_iter2671)
    {
      xfer += (*_iter2671).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyDropRateByOrderTime", ::apache::thrift::protocol::T_MAP, 817);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->keyDropRateByOrderTime.size()));
    std::map<EventKeyDropRateFormulaID, std::vector<KeyDropRateByOrderTime> > ::const_iterator _iter2672;
    for (_iter2672 = this->keyDropRateByOrderTime.begin(); _iter2672 != this->keyDropRateByOrderTime.end(); ++_iter2672)
    {
      xfer += oprot->writeString(_iter2672->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2672->second.size()));
        std::vector<KeyDropRateByOrderTime> ::const_iterator _iter2673;
        for (_iter2673 = _iter2672->second.begin(); _iter2673 != _iter2672->second.end(); ++_iter2673)
        {
          xfer += (*_iter2673).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventBusinessKeyDropRates", ::apache::thrift::protocol::T_MAP, 818);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventBusinessKeyDropRates.size()));
    std::map<BuildingID, EventBusinessKeyDropRate> ::const_iterator _iter2674;
    for (_iter2674 = this->eventBusinessKeyDropRates.begin(); _iter2674 != this->eventBusinessKeyDropRates.end(); ++_iter2674)
    {
      xfer += oprot->writeString(_iter2674->first);
      xfer += _iter2674->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.leaderboardTemplates) {
    xfer += oprot->writeFieldBegin("leaderboardTemplates", ::apache::thrift::protocol::T_MAP, 820);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->leaderboardTemplates.size()));
      std::map<LeaderboardTemplateID, LeaderboardTemplate> ::const_iterator _iter2675;
      for (_iter2675 = this->leaderboardTemplates.begin(); _iter2675 != this->leaderboardTemplates.end(); ++_iter2675)
      {
        xfer += oprot->writeString(_iter2675->first);
        xfer += _iter2675->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("eventIslands", ::apache::thrift::protocol::T_MAP, 850);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventIslands.size()));
    std::map<EventIslandID, EventIsland> ::const_iterator _iter2676;
    for (_iter2676 = this->eventIslands.begin(); _iter2676 != this->eventIslands.end(); ++_iter2676)
    {
      xfer += oprot->writeString(_iter2676->first);
      xfer += _iter2676->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventHowToPlays", ::apache::thrift::protocol::T_MAP, 851);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventHowToPlays.size()));
    std::map<EventHowToPlayID, EventHowToPlay> ::const_iterator _iter2677;
    for (_iter2677 = this->eventHowToPlays.begin(); _iter2677 != this->eventHowToPlays.end(); ++_iter2677)
    {
      xfer += oprot->writeString(_iter2677->first);
      xfer += _iter2677->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventMainMenus", ::apache::thrift::protocol::T_MAP, 852);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventMainMenus.size()));
    std::map<EventMainMenuID, EventMainMenu> ::const_iterator _iter2678;
    for (_iter2678 = this->eventMainMenus.begin(); _iter2678 != this->eventMainMenus.end(); ++_iter2678)
    {
      xfer += oprot->writeString(_iter2678->first);
      xfer += _iter2678->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("castleActivities", ::apache::thrift::protocol::T_MAP, 900);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->castleActivities.size()));
    std::map<CastleActivityID, CastleActivity> ::const_iterator _iter2679;
    for (_iter2679 = this->castleActivities.begin(); _iter2679 != this->castleActivities.end(); ++_iter2679)
    {
      xfer += oprot->writeString(_iter2679->first);
      xfer += _iter2679->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playerDisplaySuggestStart", ::apache::thrift::protocol::T_LIST, 901);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->playerDisplaySuggestStart.size()));
    std::vector<PlayerDisplaySuggest> ::const_iterator _iter2680;
    for (_iter2680 = this->playerDisplaySuggestStart.begin(); _iter2680 != this->playerDisplaySuggestStart.end(); ++_iter2680)
    {
      xfer += (*_iter2680).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playerDisplaySuggestMiddle", ::apache::thrift::protocol::T_LIST, 902);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->playerDisplaySuggestMiddle.size()));
    std::vector<PlayerDisplaySuggest> ::const_iterator _iter2681;
    for (_iter2681 = this->playerDisplaySuggestMiddle.begin(); _iter2681 != this->playerDisplaySuggestMiddle.end(); ++_iter2681)
    {
      xfer += (*_iter2681).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("playerDisplaySuggestEnd", ::apache::thrift::protocol::T_LIST, 903);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->playerDisplaySuggestEnd.size()));
    std::vector<PlayerDisplaySuggest> ::const_iterator _iter2682;
    for (_iter2682 = this->playerDisplaySuggestEnd.begin(); _iter2682 != this->playerDisplaySuggestEnd.end(); ++_iter2682)
    {
      xfer += (*_iter2682).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tutorialStates", ::apache::thrift::protocol::T_LIST, 910);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tutorialStates.size()));
    std::vector<TutorialState> ::const_iterator _iter2683;
    for (_iter2683 = this->tutorialStates.begin(); _iter2683 != this->tutorialStates.end(); ++_iter2683)
    {
      xfer += (*_iter2683).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("popupMessages", ::apache::thrift::protocol::T_MAP, 911);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->popupMessages.size()));
    std::map<PopupMessageID, PopupMessage> ::const_iterator _iter2684;
    for (_iter2684 = this->popupMessages.begin(); _iter2684 != this->popupMessages.end(); ++_iter2684)
    {
      xfer += oprot->writeString(_iter2684->first);
      xfer += _iter2684->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("popupMessageSettings", ::apache::thrift::protocol::T_STRUCT, 912);
  xfer += this->popupMessageSettings.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventSettings) {
    xfer += oprot->writeFieldBegin("eventSettings", ::apache::thrift::protocol::T_STRUCT, 1000);
    xfer += this->eventSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.screenNameMapping) {
    xfer += oprot->writeFieldBegin("screenNameMapping", ::apache::thrift::protocol::T_LIST, 1100);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->screenNameMapping.size()));
      std::vector<ScreenNameMapping> ::const_iterator _iter2685;
      for (_iter2685 = this->screenNameMapping.begin(); _iter2685 != this->screenNameMapping.end(); ++_iter2685)
      {
        xfer += (*_iter2685).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cellInfo) {
    xfer += oprot->writeFieldBegin("cellInfo", ::apache::thrift::protocol::T_MAP, 1101);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->cellInfo.size()));
      std::map<CellInfoMapID, std::vector<CellInfo> > ::const_iterator _iter2686;
      for (_iter2686 = this->cellInfo.begin(); _iter2686 != this->cellInfo.end(); ++_iter2686)
      {
        xfer += oprot->writeString(_iter2686->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2686->second.size()));
          std::vector<CellInfo> ::const_iterator _iter2687;
          for (_iter2687 = _iter2686->second.begin(); _iter2687 != _iter2686->second.end(); ++_iter2687)
          {
            xfer += (*_iter2687).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keyCostPerLevel) {
    xfer += oprot->writeFieldBegin("keyCostPerLevel", ::apache::thrift::protocol::T_MAP, 1200);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->keyCostPerLevel.size()));
      std::map<KeyCostPerLevelID, std::vector<KeyCostPerLevel> > ::const_iterator _iter2688;
      for (_iter2688 = this->keyCostPerLevel.begin(); _iter2688 != this->keyCostPerLevel.end(); ++_iter2688)
      {
        xfer += oprot->writeString(_iter2688->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2688->second.size()));
          std::vector<KeyCostPerLevel> ::const_iterator _iter2689;
          for (_iter2689 = _iter2688->second.begin(); _iter2689 != _iter2688->second.end(); ++_iter2689)
          {
            xfer += (*_iter2689).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playerMatchRankSettings) {
    xfer += oprot->writeFieldBegin("playerMatchRankSettings", ::apache::thrift::protocol::T_LIST, 1201);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->playerMatchRankSettings.size()));
      std::vector<PlayerMatchRankSettings> ::const_iterator _iter2690;
      for (_iter2690 = this->playerMatchRankSettings.begin(); _iter2690 != this->playerMatchRankSettings.end(); ++_iter2690)
      {
        xfer += (*_iter2690).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("buildingMultipliers", ::apache::thrift::protocol::T_MAP, 1202);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->buildingMultipliers.size()));
    std::map<BuildingID, BuildingMultiplier> ::const_iterator _iter2691;
    for (_iter2691 = this->buildingMultipliers.begin(); _iter2691 != this->buildingMultipliers.end(); ++_iter2691)
    {
      xfer += oprot->writeString(_iter2691->first);
      xfer += _iter2691->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildLeaderboardSettings", ::apache::thrift::protocol::T_STRUCT, 1300);
  xfer += this->guildLeaderboardSettings.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.guildLeaderboards) {
    xfer += oprot->writeFieldBegin("guildLeaderboards", ::apache::thrift::protocol::T_MAP, 1301);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildLeaderboards.size()));
      std::map<GuildLeaderboardID, GuildLeaderboard> ::const_iterator _iter2692;
      for (_iter2692 = this->guildLeaderboards.begin(); _iter2692 != this->guildLeaderboards.end(); ++_iter2692)
      {
        xfer += oprot->writeString(_iter2692->first);
        xfer += _iter2692->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildLeaderboardRibbons) {
    xfer += oprot->writeFieldBegin("guildLeaderboardRibbons", ::apache::thrift::protocol::T_LIST, 1302);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildLeaderboardRibbons.size()));
      std::vector<GuildLeaderboardRibbon> ::const_iterator _iter2693;
      for (_iter2693 = this->guildLeaderboardRibbons.begin(); _iter2693 != this->guildLeaderboardRibbons.end(); ++_iter2693)
      {
        xfer += (*_iter2693).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildLeaderboardRewards) {
    xfer += oprot->writeFieldBegin("guildLeaderboardRewards", ::apache::thrift::protocol::T_LIST, 1303);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildLeaderboardRewards.size()));
      std::vector<GuildLeaderboardReward> ::const_iterator _iter2694;
      for (_iter2694 = this->guildLeaderboardRewards.begin(); _iter2694 != this->guildLeaderboardRewards.end(); ++_iter2694)
      {
        xfer += (*_iter2694).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("locations", ::apache::thrift::protocol::T_MAP, 1311);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->locations.size()));
    std::map<LocationID, Location> ::const_iterator _iter2695;
    for (_iter2695 = this->locations.begin(); _iter2695 != this->locations.end(); ++_iter2695)
    {
      xfer += oprot->writeString(_iter2695->first);
      xfer += _iter2695->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildSettings", ::apache::thrift::protocol::T_STRUCT, 1312);
  xfer += this->guildSettings.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildMemberTypeDisplays", ::apache::thrift::protocol::T_MAP, 1313);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildMemberTypeDisplays.size()));
    std::map<GuildMemberType::type, GuildMemberTypeDisplay> ::const_iterator _iter2696;
    for (_iter2696 = this->guildMemberTypeDisplays.begin(); _iter2696 != this->guildMemberTypeDisplays.end(); ++_iter2696)
    {
      xfer += oprot->writeI32((int32_t)_iter2696->first);
      xfer += _iter2696->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildJoinTypeDisplays", ::apache::thrift::protocol::T_MAP, 1314);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildJoinTypeDisplays.size()));
    std::map<GuildJoinType::type, GuildJoinTypeDisplay> ::const_iterator _iter2697;
    for (_iter2697 = this->guildJoinTypeDisplays.begin(); _iter2697 != this->guildJoinTypeDisplays.end(); ++_iter2697)
    {
      xfer += oprot->writeI32((int32_t)_iter2697->first);
      xfer += _iter2697->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildEmblems", ::apache::thrift::protocol::T_MAP, 1315);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildEmblems.size()));
    std::map<GuildEmblemID, GuildEmblem> ::const_iterator _iter2698;
    for (_iter2698 = this->guildEmblems.begin(); _iter2698 != this->guildEmblems.end(); ++_iter2698)
    {
      xfer += oprot->writeString(_iter2698->first);
      xfer += _iter2698->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildBoundItems", ::apache::thrift::protocol::T_LIST, 1316);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildBoundItems.size()));
    std::vector<GuildBoundItem> ::const_iterator _iter2699;
    for (_iter2699 = this->guildBoundItems.begin(); _iter2699 != this->guildBoundItems.end(); ++_iter2699)
    {
      xfer += (*_iter2699).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildRank", ::apache::thrift::protocol::T_MAP, 1317);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildRank.size()));
    std::map<GuildRankID, GuildRank> ::const_iterator _iter2700;
    for (_iter2700 = this->guildRank.begin(); _iter2700 != this->guildRank.end(); ++_iter2700)
    {
      xfer += oprot->writeI32(_iter2700->first);
      xfer += _iter2700->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatSystemMessages", ::apache::thrift::protocol::T_MAP, 1330);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->chatSystemMessages.size()));
    std::map<ChatSystemMessageID, ChatSystemMessage> ::const_iterator _iter2701;
    for (_iter2701 = this->chatSystemMessages.begin(); _iter2701 != this->chatSystemMessages.end(); ++_iter2701)
    {
      xfer += oprot->writeString(_iter2701->first);
      xfer += _iter2701->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gifts", ::apache::thrift::protocol::T_MAP, 1400);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gifts.size()));
    std::map<GiftID, Gift> ::const_iterator _iter2702;
    for (_iter2702 = this->gifts.begin(); _iter2702 != this->gifts.end(); ++_iter2702)
    {
      xfer += oprot->writeString(_iter2702->first);
      xfer += _iter2702->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.pollSettings) {
    xfer += oprot->writeFieldBegin("pollSettings", ::apache::thrift::protocol::T_STRUCT, 1410);
    xfer += this->pollSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("guildNameSuggestStart", ::apache::thrift::protocol::T_LIST, 1500);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildNameSuggestStart.size()));
    std::vector<GuildNameSuggest> ::const_iterator _iter2703;
    for (_iter2703 = this->guildNameSuggestStart.begin(); _iter2703 != this->guildNameSuggestStart.end(); ++_iter2703)
    {
      xfer += (*_iter2703).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildNameSuggestMiddle", ::apache::thrift::protocol::T_LIST, 1501);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildNameSuggestMiddle.size()));
    std::vector<GuildNameSuggest> ::const_iterator _iter2704;
    for (_iter2704 = this->guildNameSuggestMiddle.begin(); _iter2704 != this->guildNameSuggestMiddle.end(); ++_iter2704)
    {
      xfer += (*_iter2704).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guildNameSuggestEnd", ::apache::thrift::protocol::T_LIST, 1502);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->guildNameSuggestEnd.size()));
    std::vector<GuildNameSuggest> ::const_iterator _iter2705;
    for (_iter2705 = this->guildNameSuggestEnd.begin(); _iter2705 != this->guildNameSuggestEnd.end(); ++_iter2705)
    {
      xfer += (*_iter2705).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quests", ::apache::thrift::protocol::T_MAP, 1600);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->quests.size()));
    std::map<QuestID, Quest> ::const_iterator _iter2706;
    for (_iter2706 = this->quests.begin(); _iter2706 != this->quests.end(); ++_iter2706)
    {
      xfer += oprot->writeString(_iter2706->first);
      xfer += _iter2706->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.questGoals) {
    xfer += oprot->writeFieldBegin("questGoals", ::apache::thrift::protocol::T_LIST, 1601);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->questGoals.size()));
      std::vector<Goal> ::const_iterator _iter2707;
      for (_iter2707 = this->questGoals.begin(); _iter2707 != this->questGoals.end(); ++_iter2707)
      {
        xfer += (*_iter2707).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("questNpc", ::apache::thrift::protocol::T_MAP, 1602);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->questNpc.size()));
    std::map<QuestNpcID, QuestNpc> ::const_iterator _iter2708;
    for (_iter2708 = this->questNpc.begin(); _iter2708 != this->questNpc.end(); ++_iter2708)
    {
      xfer += oprot->writeString(_iter2708->first);
      xfer += _iter2708->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessQuestNpc", ::apache::thrift::protocol::T_MAP, 1603);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->businessQuestNpc.size()));
    std::map<BuildingID, BusinessQuestNpc> ::const_iterator _iter2709;
    for (_iter2709 = this->businessQuestNpc.begin(); _iter2709 != this->businessQuestNpc.end(); ++_iter2709)
    {
      xfer += oprot->writeString(_iter2709->first);
      xfer += _iter2709->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questTemplates", ::apache::thrift::protocol::T_MAP, 1610);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->questTemplates.size()));
    std::map<QuestID, Quest> ::const_iterator _iter2710;
    for (_iter2710 = this->questTemplates.begin(); _iter2710 != this->questTemplates.end(); ++_iter2710)
    {
      xfer += oprot->writeString(_iter2710->first);
      xfer += _iter2710->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.questGoalTemplates) {
    xfer += oprot->writeFieldBegin("questGoalTemplates", ::apache::thrift::protocol::T_LIST, 1611);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->questGoalTemplates.size()));
      std::vector<Goal> ::const_iterator _iter2711;
      for (_iter2711 = this->questGoalTemplates.begin(); _iter2711 != this->questGoalTemplates.end(); ++_iter2711)
      {
        xfer += (*_iter2711).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.happinessSettings) {
    xfer += oprot->writeFieldBegin("happinessSettings", ::apache::thrift::protocol::T_STRUCT, 1700);
    xfer += this->happinessSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("stores", ::apache::thrift::protocol::T_MAP, 1710);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stores.size()));
    std::map<StoreID, Store> ::const_iterator _iter2712;
    for (_iter2712 = this->stores.begin(); _iter2712 != this->stores.end(); ++_iter2712)
    {
      xfer += oprot->writeString(_iter2712->first);
      xfer += _iter2712->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("storeInventories", ::apache::thrift::protocol::T_MAP, 1711);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->storeInventories.size()));
    std::map<StoreID, std::vector<StoreInventoryItem> > ::const_iterator _iter2713;
    for (_iter2713 = this->storeInventories.begin(); _iter2713 != this->storeInventories.end(); ++_iter2713)
    {
      xfer += oprot->writeString(_iter2713->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2713->second.size()));
        std::vector<StoreInventoryItem> ::const_iterator _iter2714;
        for (_iter2714 = _iter2713->second.begin(); _iter2714 != _iter2713->second.end(); ++_iter2714)
        {
          xfer += (*_iter2714).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cardOffers", ::apache::thrift::protocol::T_MAP, 1712);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cardOffers.size()));
    std::map<CardOfferID, CardOffer> ::const_iterator _iter2715;
    for (_iter2715 = this->cardOffers.begin(); _iter2715 != this->cardOffers.end(); ++_iter2715)
    {
      xfer += oprot->writeString(_iter2715->first);
      xfer += _iter2715->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iapProducts", ::apache::thrift::protocol::T_MAP, 1713);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->iapProducts.size()));
    std::map<IAPProductID, IAPProduct> ::const_iterator _iter2716;
    for (_iter2716 = this->iapProducts.begin(); _iter2716 != this->iapProducts.end(); ++_iter2716)
    {
      xfer += oprot->writeString(_iter2716->first);
      xfer += _iter2716->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("campaignSettings", ::apache::thrift::protocol::T_STRUCT, 1899);
  xfer += this->campaignSettings.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelCampaigns", ::apache::thrift::protocol::T_MAP, 1900);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->levelCampaigns.size()));
    std::map<LevelCampaignID, LevelCampaign> ::const_iterator _iter2717;
    for (_iter2717 = this->levelCampaigns.begin(); _iter2717 != this->levelCampaigns.end(); ++_iter2717)
    {
      xfer += oprot->writeString(_iter2717->first);
      xfer += _iter2717->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.businessLevelIdsLookup) {
    xfer += oprot->writeFieldBegin("businessLevelIdsLookup", ::apache::thrift::protocol::T_MAP, 1901);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->businessLevelIdsLookup.size()));
      std::map<LevelCampaignID, BusinessLevelsList> ::const_iterator _iter2718;
      for (_iter2718 = this->businessLevelIdsLookup.begin(); _iter2718 != this->businessLevelIdsLookup.end(); ++_iter2718)
      {
        xfer += oprot->writeString(_iter2718->first);
        xfer += _iter2718->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.castleEventLevelIdsLookup) {
    xfer += oprot->writeFieldBegin("castleEventLevelIdsLookup", ::apache::thrift::protocol::T_MAP, 1902);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->castleEventLevelIdsLookup.size()));
      std::map<LevelCampaignID, CastleEventLevelsList> ::const_iterator _iter2719;
      for (_iter2719 = this->castleEventLevelIdsLookup.begin(); _iter2719 != this->castleEventLevelIdsLookup.end(); ++_iter2719)
      {
        xfer += oprot->writeString(_iter2719->first);
        xfer += _iter2719->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.campaignLevelIdsLookup) {
    xfer += oprot->writeFieldBegin("campaignLevelIdsLookup", ::apache::thrift::protocol::T_MAP, 1903);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->campaignLevelIdsLookup.size()));
      std::map<LevelCampaignID, LevelCampaignLevelsList> ::const_iterator _iter2720;
      for (_iter2720 = this->campaignLevelIdsLookup.begin(); _iter2720 != this->campaignLevelIdsLookup.end(); ++_iter2720)
      {
        xfer += oprot->writeString(_iter2720->first);
        xfer += _iter2720->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("levelCampaignStyles", ::apache::thrift::protocol::T_MAP, 1904);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->levelCampaignStyles.size()));
    std::map<LevelCampaignStyleID, LevelCampaignStyle> ::const_iterator _iter2721;
    for (_iter2721 = this->levelCampaignStyles.begin(); _iter2721 != this->levelCampaignStyles.end(); ++_iter2721)
    {
      xfer += oprot->writeString(_iter2721->first);
      xfer += _iter2721->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalDisplayTemplates", ::apache::thrift::protocol::T_LIST, 2000);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->goalDisplayTemplates.size()));
    std::vector<GoalDisplayTemplate> ::const_iterator _iter2722;
    for (_iter2722 = this->goalDisplayTemplates.begin(); _iter2722 != this->goalDisplayTemplates.end(); ++_iter2722)
    {
      xfer += (*_iter2722).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questTitles", ::apache::thrift::protocol::T_MAP, 2001);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->questTitles.size()));
    std::map<GoalType::type, std::vector<QuestDisplayTemplate> > ::const_iterator _iter2723;
    for (_iter2723 = this->questTitles.begin(); _iter2723 != this->questTitles.end(); ++_iter2723)
    {
      xfer += oprot->writeI32((int32_t)_iter2723->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2723->second.size()));
        std::vector<QuestDisplayTemplate> ::const_iterator _iter2724;
        for (_iter2724 = _iter2723->second.begin(); _iter2724 != _iter2723->second.end(); ++_iter2724)
        {
          xfer += (*_iter2724).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questSettings", ::apache::thrift::protocol::T_STRUCT, 2006);
  xfer += this->questSettings.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingTypeLocalizations", ::apache::thrift::protocol::T_MAP, 2014);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->buildingTypeLocalizations.size()));
    std::map<BuildingType::type, BuildingTypeLocalization> ::const_iterator _iter2725;
    for (_iter2725 = this->buildingTypeLocalizations.begin(); _iter2725 != this->buildingTypeLocalizations.end(); ++_iter2725)
    {
      xfer += oprot->writeI32((int32_t)_iter2725->first);
      xfer += _iter2725->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("questRankSettings", ::apache::thrift::protocol::T_MAP, 2015);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->questRankSettings.size()));
    std::map<RankID, QuestRankSettings> ::const_iterator _iter2726;
    for (_iter2726 = this->questRankSettings.begin(); _iter2726 != this->questRankSettings.end(); ++_iter2726)
    {
      xfer += oprot->writeI32(_iter2726->first);
      xfer += _iter2726->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newBusinessOrders", ::apache::thrift::protocol::T_MAP, 2016);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->newBusinessOrders.size()));
    std::map<BusinessOrderID, NewBusinessOrder> ::const_iterator _iter2727;
    for (_iter2727 = this->newBusinessOrders.begin(); _iter2727 != this->newBusinessOrders.end(); ++_iter2727)
    {
      xfer += oprot->writeString(_iter2727->first);
      xfer += _iter2727->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventMenuWidgets) {
    xfer += oprot->writeFieldBegin("eventMenuWidgets", ::apache::thrift::protocol::T_MAP, 2100);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventMenuWidgets.size()));
      std::map<EventMenuWidgetID, EventMenuWidget> ::const_iterator _iter2728;
      for (_iter2728 = this->eventMenuWidgets.begin(); _iter2728 != this->eventMenuWidgets.end(); ++_iter2728)
      {
        xfer += oprot->writeString(_iter2728->first);
        xfer += _iter2728->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBosses) {
    xfer += oprot->writeFieldBegin("raidBosses", ::apache::thrift::protocol::T_MAP, 2200);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->raidBosses.size()));
      std::map<RaidBossID, RaidBoss> ::const_iterator _iter2729;
      for (_iter2729 = this->raidBosses.begin(); _iter2729 != this->raidBosses.end(); ++_iter2729)
      {
        xfer += oprot->writeString(_iter2729->first);
        xfer += _iter2729->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBossActivities) {
    xfer += oprot->writeFieldBegin("raidBossActivities", ::apache::thrift::protocol::T_MAP, 2201);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->raidBossActivities.size()));
      std::map<RaidBossActivityID, RaidBossActivity> ::const_iterator _iter2730;
      for (_iter2730 = this->raidBossActivities.begin(); _iter2730 != this->raidBossActivities.end(); ++_iter2730)
      {
        xfer += oprot->writeString(_iter2730->first);
        xfer += _iter2730->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBossObjectives) {
    xfer += oprot->writeFieldBegin("raidBossObjectives", ::apache::thrift::protocol::T_MAP, 2202);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->raidBossObjectives.size()));
      std::map<RaidBossObjectiveID, RaidBossObjective> ::const_iterator _iter2731;
      for (_iter2731 = this->raidBossObjectives.begin(); _iter2731 != this->raidBossObjectives.end(); ++_iter2731)
      {
        xfer += oprot->writeString(_iter2731->first);
        xfer += _iter2731->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBossKarmaBrackets) {
    xfer += oprot->writeFieldBegin("raidBossKarmaBrackets", ::apache::thrift::protocol::T_MAP, 2203);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->raidBossKarmaBrackets.size()));
      std::map<RaidBossActivityID, std::vector<RaidBossKarmaBracket> > ::const_iterator _iter2732;
      for (_iter2732 = this->raidBossKarmaBrackets.begin(); _iter2732 != this->raidBossKarmaBrackets.end(); ++_iter2732)
      {
        xfer += oprot->writeString(_iter2732->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2732->second.size()));
          std::vector<RaidBossKarmaBracket> ::const_iterator _iter2733;
          for (_iter2733 = _iter2732->second.begin(); _iter2733 != _iter2732->second.end(); ++_iter2733)
          {
            xfer += (*_iter2733).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBossDifficultyBrackets) {
    xfer += oprot->writeFieldBegin("raidBossDifficultyBrackets", ::apache::thrift::protocol::T_MAP, 2204);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->raidBossDifficultyBrackets.size()));
      std::map<RaidBossActivityID, std::vector<RaidBossDifficultyBracket> > ::const_iterator _iter2734;
      for (_iter2734 = this->raidBossDifficultyBrackets.begin(); _iter2734 != this->raidBossDifficultyBrackets.end(); ++_iter2734)
      {
        xfer += oprot->writeString(_iter2734->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2734->second.size()));
          std::vector<RaidBossDifficultyBracket> ::const_iterator _iter2735;
          for (_iter2735 = _iter2734->second.begin(); _iter2735 != _iter2734->second.end(); ++_iter2735)
          {
            xfer += (*_iter2735).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBossCurves) {
    xfer += oprot->writeFieldBegin("raidBossCurves", ::apache::thrift::protocol::T_MAP, 2205);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->raidBossCurves.size()));
      std::map<RaidBossCurveID, std::vector<RaidBossCurve> > ::const_iterator _iter2736;
      for (_iter2736 = this->raidBossCurves.begin(); _iter2736 != this->raidBossCurves.end(); ++_iter2736)
      {
        xfer += oprot->writeString(_iter2736->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2736->second.size()));
          std::vector<RaidBossCurve> ::const_iterator _iter2737;
          for (_iter2737 = _iter2736->second.begin(); _iter2737 != _iter2736->second.end(); ++_iter2737)
          {
            xfer += (*_iter2737).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBossRewards) {
    xfer += oprot->writeFieldBegin("raidBossRewards", ::apache::thrift::protocol::T_MAP, 2206);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->raidBossRewards.size()));
      std::map<RaidBossRewardID, std::vector<RaidBossReward> > ::const_iterator _iter2738;
      for (_iter2738 = this->raidBossRewards.begin(); _iter2738 != this->raidBossRewards.end(); ++_iter2738)
      {
        xfer += oprot->writeString(_iter2738->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2738->second.size()));
          std::vector<RaidBossReward> ::const_iterator _iter2739;
          for (_iter2739 = _iter2738->second.begin(); _iter2739 != _iter2738->second.end(); ++_iter2739)
          {
            xfer += (*_iter2739).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raidBossRarities) {
    xfer += oprot->writeFieldBegin("raidBossRarities", ::apache::thrift::protocol::T_MAP, 2207);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->raidBossRarities.size()));
      std::map<RaidBossRarityID, RaidBossRarity> ::const_iterator _iter2740;
      for (_iter2740 = this->raidBossRarities.begin(); _iter2740 != this->raidBossRarities.end(); ++_iter2740)
      {
        xfer += oprot->writeString(_iter2740->first);
        xfer += _iter2740->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.heroes) {
    xfer += oprot->writeFieldBegin("heroes", ::apache::thrift::protocol::T_MAP, 2220);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->heroes.size()));
      std::map<HeroID, Hero> ::const_iterator _iter2741;
      for (_iter2741 = this->heroes.begin(); _iter2741 != this->heroes.end(); ++_iter2741)
      {
        xfer += oprot->writeString(_iter2741->first);
        xfer += _iter2741->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ftueSettings) {
    xfer += oprot->writeFieldBegin("ftueSettings", ::apache::thrift::protocol::T_STRUCT, 3000);
    xfer += this->ftueSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.matchThreeCellDefinitions) {
    xfer += oprot->writeFieldBegin("matchThreeCellDefinitions", ::apache::thrift::protocol::T_MAP, 3301);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->matchThreeCellDefinitions.size()));
      std::map<Match3ThemeId, std::vector<MatchThreeCellDefinition> > ::const_iterator _iter2742;
      for (_iter2742 = this->matchThreeCellDefinitions.begin(); _iter2742 != this->matchThreeCellDefinitions.end(); ++_iter2742)
      {
        xfer += oprot->writeString(_iter2742->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2742->second.size()));
          std::vector<MatchThreeCellDefinition> ::const_iterator _iter2743;
          for (_iter2743 = _iter2742->second.begin(); _iter2743 != _iter2742->second.end(); ++_iter2743)
          {
            xfer += (*_iter2743).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.matchThreeBlasterDefinitions) {
    xfer += oprot->writeFieldBegin("matchThreeBlasterDefinitions", ::apache::thrift::protocol::T_MAP, 3302);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->matchThreeBlasterDefinitions.size()));
      std::map<Match3ThemeId, std::vector<MatchThreeBlasterDefinition> > ::const_iterator _iter2744;
      for (_iter2744 = this->matchThreeBlasterDefinitions.begin(); _iter2744 != this->matchThreeBlasterDefinitions.end(); ++_iter2744)
      {
        xfer += oprot->writeString(_iter2744->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2744->second.size()));
          std::vector<MatchThreeBlasterDefinition> ::const_iterator _iter2745;
          for (_iter2745 = _iter2744->second.begin(); _iter2745 != _iter2744->second.end(); ++_iter2745)
          {
            xfer += (*_iter2745).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gearAvailableOnGachas) {
    xfer += oprot->writeFieldBegin("gearAvailableOnGachas", ::apache::thrift::protocol::T_MAP, 6100);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gearAvailableOnGachas.size()));
      std::map<CurrencyID, GearAvailableOnGachaOfferList> ::const_iterator _iter2746;
      for (_iter2746 = this->gearAvailableOnGachas.begin(); _iter2746 != this->gearAvailableOnGachas.end(); ++_iter2746)
      {
        xfer += oprot->writeString(_iter2746->first);
        xfer += _iter2746->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gearAvailableOnCardOffers) {
    xfer += oprot->writeFieldBegin("gearAvailableOnCardOffers", ::apache::thrift::protocol::T_MAP, 6101);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gearAvailableOnCardOffers.size()));
      std::map<CurrencyID, GearAvailableOnCardOfferList> ::const_iterator _iter2747;
      for (_iter2747 = this->gearAvailableOnCardOffers.begin(); _iter2747 != this->gearAvailableOnCardOffers.end(); ++_iter2747)
      {
        xfer += oprot->writeString(_iter2747->first);
        xfer += _iter2747->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gearAvailableOnLevels) {
    xfer += oprot->writeFieldBegin("gearAvailableOnLevels", ::apache::thrift::protocol::T_MAP, 6102);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gearAvailableOnLevels.size()));
      std::map<CurrencyID, GearAvailableOnLevelList> ::const_iterator _iter2748;
      for (_iter2748 = this->gearAvailableOnLevels.begin(); _iter2748 != this->gearAvailableOnLevels.end(); ++_iter2748)
      {
        xfer += oprot->writeString(_iter2748->first);
        xfer += _iter2748->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gearAvailableOnBusinessHarvest) {
    xfer += oprot->writeFieldBegin("gearAvailableOnBusinessHarvest", ::apache::thrift::protocol::T_MAP, 6103);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gearAvailableOnBusinessHarvest.size()));
      std::map<CurrencyID, GearAvailableOnBusinessHarvestList> ::const_iterator _iter2749;
      for (_iter2749 = this->gearAvailableOnBusinessHarvest.begin(); _iter2749 != this->gearAvailableOnBusinessHarvest.end(); ++_iter2749)
      {
        xfer += oprot->writeString(_iter2749->first);
        xfer += _iter2749->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("mainShopEntries", ::apache::thrift::protocol::T_MAP, 7100);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->mainShopEntries.size()));
    std::map<MainShopEntryID, MainShopEntry> ::const_iterator _iter2750;
    for (_iter2750 = this->mainShopEntries.begin(); _iter2750 != this->mainShopEntries.end(); ++_iter2750)
    {
      xfer += oprot->writeString(_iter2750->first);
      xfer += _iter2750->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.askForItems) {
    xfer += oprot->writeFieldBegin("askForItems", ::apache::thrift::protocol::T_MAP, 8000);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->askForItems.size()));
      std::map<AskForItemID, AskForItemEntry> ::const_iterator _iter2751;
      for (_iter2751 = this->askForItems.begin(); _iter2751 != this->askForItems.end(); ++_iter2751)
      {
        xfer += oprot->writeString(_iter2751->first);
        xfer += _iter2751->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storeTabs) {
    xfer += oprot->writeFieldBegin("storeTabs", ::apache::thrift::protocol::T_MAP, 8001);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->storeTabs.size()));
      std::map<StoreTabID, StoreTab> ::const_iterator _iter2752;
      for (_iter2752 = this->storeTabs.begin(); _iter2752 != this->storeTabs.end(); ++_iter2752)
      {
        xfer += oprot->writeString(_iter2752->first);
        xfer += _iter2752->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guildQuestRewards) {
    xfer += oprot->writeFieldBegin("guildQuestRewards", ::apache::thrift::protocol::T_MAP, 8100);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->guildQuestRewards.size()));
      std::map<GuildQuestRewardID, std::vector<GuildQuestReward> > ::const_iterator _iter2753;
      for (_iter2753 = this->guildQuestRewards.begin(); _iter2753 != this->guildQuestRewards.end(); ++_iter2753)
      {
        xfer += oprot->writeString(_iter2753->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter2753->second.size()));
          std::vector<GuildQuestReward> ::const_iterator _iter2754;
          for (_iter2754 = _iter2753->second.begin(); _iter2754 != _iter2753->second.end(); ++_iter2754)
          {
            xfer += (*_iter2754).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Data &a, Data &b) {
  using ::std::swap;
  swap(a.rank, b.rank);
  swap(a.currency, b.currency);
  swap(a.eventLock, b.eventLock);
  swap(a.settings, b.settings);
  swap(a.startingGameState, b.startingGameState);
  swap(a.startingKingdomEntities, b.startingKingdomEntities);
  swap(a.bundlesConfig, b.bundlesConfig);
  swap(a.levelBlobs, b.levelBlobs);
  swap(a.resolutionBundles, b.resolutionBundles);
  swap(a.bundleManifest, b.bundleManifest);
  swap(a.resolutionManifests, b.resolutionManifests);
  swap(a.localizationManifests, b.localizationManifests);
  swap(a.building, b.building);
  swap(a.recipe, b.recipe);
  swap(a.deco, b.deco);
  swap(a.business, b.business);
  swap(a.businessOrder, b.businessOrder);
  swap(a.inventoryTab, b.inventoryTab);
  swap(a.blockers, b.blockers);
  swap(a.weightedLootList, b.weightedLootList);
  swap(a.rarity, b.rarity);
  swap(a.newRarity, b.newRarity);
  swap(a.level, b.level);
  swap(a.boost, b.boost);
  swap(a.levelDot, b.levelDot);
  swap(a.villain, b.villain);
  swap(a.matchThreeData, b.matchThreeData);
  swap(a.newLevel, b.newLevel);
  swap(a.newLevelDot, b.newLevelDot);
  swap(a.material, b.material);
  swap(a.island, b.island);
  swap(a.islandSettings, b.islandSettings);
  swap(a.islandObject, b.islandObject);
  swap(a.color, b.color);
  swap(a.expansion, b.expansion);
  swap(a.expansionType, b.expansionType);
  swap(a.gachaGroup, b.gachaGroup);
  swap(a.gachaOffer, b.gachaOffer);
  swap(a.gachaPack, b.gachaPack);
  swap(a.lootTable, b.lootTable);
  swap(a.lootCurrencyGroup, b.lootCurrencyGroup);
  swap(a.lootBuildingGroup, b.lootBuildingGroup);
  swap(a.avatar, b.avatar);
  swap(a.adminMessages, b.adminMessages);
  swap(a.adminGiftMessages, b.adminGiftMessages);
  swap(a.analyticsEvents, b.analyticsEvents);
  swap(a.appBoyEvents, b.appBoyEvents);
  swap(a.analyticsDimensions, b.analyticsDimensions);
  swap(a.apsalarEvents, b.apsalarEvents);
  swap(a.businessOrderList, b.businessOrderList);
  swap(a.businessEvolution, b.businessEvolution);
  swap(a.npc, b.npc);
  swap(a.vendorProducts, b.vendorProducts);
  swap(a.storeProducts, b.storeProducts);
  swap(a.buyItemOrder, b.buyItemOrder);
  swap(a.marketType, b.marketType);
  swap(a.forcedUpgrade, b.forcedUpgrade);
  swap(a.errorMessage, b.errorMessage);
  swap(a.achievement, b.achievement);
  swap(a.achievementGroup, b.achievementGroup);
  swap(a.testBuckets, b.testBuckets);
  swap(a.strangerSettings, b.strangerSettings);
  swap(a.strangerMatchSettings, b.strangerMatchSettings);
  swap(a.fakeStrangerDisplays, b.fakeStrangerDisplays);
  swap(a.giftMessageRewards, b.giftMessageRewards);
  swap(a.partialKingdomLikeGifts, b.partialKingdomLikeGifts);
  swap(a.kingdomLikeGifts, b.kingdomLikeGifts);
  swap(a.pushMessages, b.pushMessages);
  swap(a.socialUnlockrewards, b.socialUnlockrewards);
  swap(a.adProviders, b.adProviders);
  swap(a.popupTemplate, b.popupTemplate);
  swap(a.defaultTemplate, b.defaultTemplate);
  swap(a.rushCostsByRemainingTime, b.rushCostsByRemainingTime);
  swap(a.messageTemplateModifiers, b.messageTemplateModifiers);
  swap(a.gachaBanner, b.gachaBanner);
  swap(a.presetKingdoms, b.presetKingdoms);
  swap(a.abTests, b.abTests);
  swap(a.clientVersionTestBuckets, b.clientVersionTestBuckets);
  swap(a.buildMenuSpecialCard, b.buildMenuSpecialCard);
  swap(a.businessMenuSettings, b.businessMenuSettings);
  swap(a.rewardMessages, b.rewardMessages);
  swap(a.events, b.events);
  swap(a.leaderboards, b.leaderboards);
  swap(a.leaderboardSettings, b.leaderboardSettings);
  swap(a.leaderboardLeagues, b.leaderboardLeagues);
  swap(a.leaderboardRibbons, b.leaderboardRibbons);
  swap(a.leaderboardRewards, b.leaderboardRewards);
  swap(a.leaderboardPlacements, b.leaderboardPlacements);
  swap(a.rarityEvoLevelKeyDropRates, b.rarityEvoLevelKeyDropRates);
  swap(a.keyDropRateByOrderTime, b.keyDropRateByOrderTime);
  swap(a.eventBusinessKeyDropRates, b.eventBusinessKeyDropRates);
  swap(a.leaderboardTemplates, b.leaderboardTemplates);
  swap(a.eventIslands, b.eventIslands);
  swap(a.eventHowToPlays, b.eventHowToPlays);
  swap(a.eventMainMenus, b.eventMainMenus);
  swap(a.castleActivities, b.castleActivities);
  swap(a.playerDisplaySuggestStart, b.playerDisplaySuggestStart);
  swap(a.playerDisplaySuggestMiddle, b.playerDisplaySuggestMiddle);
  swap(a.playerDisplaySuggestEnd, b.playerDisplaySuggestEnd);
  swap(a.tutorialStates, b.tutorialStates);
  swap(a.popupMessages, b.popupMessages);
  swap(a.popupMessageSettings, b.popupMessageSettings);
  swap(a.eventSettings, b.eventSettings);
  swap(a.screenNameMapping, b.screenNameMapping);
  swap(a.cellInfo, b.cellInfo);
  swap(a.keyCostPerLevel, b.keyCostPerLevel);
  swap(a.playerMatchRankSettings, b.playerMatchRankSettings);
  swap(a.buildingMultipliers, b.buildingMultipliers);
  swap(a.guildLeaderboardSettings, b.guildLeaderboardSettings);
  swap(a.guildLeaderboards, b.guildLeaderboards);
  swap(a.guildLeaderboardRibbons, b.guildLeaderboardRibbons);
  swap(a.guildLeaderboardRewards, b.guildLeaderboardRewards);
  swap(a.locations, b.locations);
  swap(a.guildSettings, b.guildSettings);
  swap(a.guildMemberTypeDisplays, b.guildMemberTypeDisplays);
  swap(a.guildJoinTypeDisplays, b.guildJoinTypeDisplays);
  swap(a.guildEmblems, b.guildEmblems);
  swap(a.guildBoundItems, b.guildBoundItems);
  swap(a.guildRank, b.guildRank);
  swap(a.chatSystemMessages, b.chatSystemMessages);
  swap(a.gifts, b.gifts);
  swap(a.pollSettings, b.pollSettings);
  swap(a.guildNameSuggestStart, b.guildNameSuggestStart);
  swap(a.guildNameSuggestMiddle, b.guildNameSuggestMiddle);
  swap(a.guildNameSuggestEnd, b.guildNameSuggestEnd);
  swap(a.quests, b.quests);
  swap(a.questGoals, b.questGoals);
  swap(a.questTemplates, b.questTemplates);
  swap(a.questGoalTemplates, b.questGoalTemplates);
  swap(a.questNpc, b.questNpc);
  swap(a.businessQuestNpc, b.businessQuestNpc);
  swap(a.happinessSettings, b.happinessSettings);
  swap(a.stores, b.stores);
  swap(a.storeInventories, b.storeInventories);
  swap(a.cardOffers, b.cardOffers);
  swap(a.iapProducts, b.iapProducts);
  swap(a.campaignSettings, b.campaignSettings);
  swap(a.levelCampaigns, b.levelCampaigns);
  swap(a.businessLevelIdsLookup, b.businessLevelIdsLookup);
  swap(a.castleEventLevelIdsLookup, b.castleEventLevelIdsLookup);
  swap(a.campaignLevelIdsLookup, b.campaignLevelIdsLookup);
  swap(a.levelCampaignStyles, b.levelCampaignStyles);
  swap(a.buildingTypeLocalizations, b.buildingTypeLocalizations);
  swap(a.ftueSettings, b.ftueSettings);
  swap(a.matchThreeCellDefinitions, b.matchThreeCellDefinitions);
  swap(a.matchThreeBlasterDefinitions, b.matchThreeBlasterDefinitions);
  swap(a.goalDisplayTemplates, b.goalDisplayTemplates);
  swap(a.questTitles, b.questTitles);
  swap(a.questSettings, b.questSettings);
  swap(a.questRankSettings, b.questRankSettings);
  swap(a.newBusinessOrders, b.newBusinessOrders);
  swap(a.eventMenuWidgets, b.eventMenuWidgets);
  swap(a.gearAvailableOnGachas, b.gearAvailableOnGachas);
  swap(a.gearAvailableOnCardOffers, b.gearAvailableOnCardOffers);
  swap(a.gearAvailableOnLevels, b.gearAvailableOnLevels);
  swap(a.gearAvailableOnBusinessHarvest, b.gearAvailableOnBusinessHarvest);
  swap(a.mainShopEntries, b.mainShopEntries);
  swap(a.askForItems, b.askForItems);
  swap(a.storeTabs, b.storeTabs);
  swap(a.guildQuestRewards, b.guildQuestRewards);
  swap(a.raidBosses, b.raidBosses);
  swap(a.raidBossActivities, b.raidBossActivities);
  swap(a.raidBossObjectives, b.raidBossObjectives);
  swap(a.raidBossKarmaBrackets, b.raidBossKarmaBrackets);
  swap(a.raidBossDifficultyBrackets, b.raidBossDifficultyBrackets);
  swap(a.raidBossCurves, b.raidBossCurves);
  swap(a.raidBossRewards, b.raidBossRewards);
  swap(a.raidBossRarities, b.raidBossRarities);
  swap(a.heroes, b.heroes);
  swap(a.__isset, b.__isset);
}

Data::Data(const Data& other2755) {
  rank = other2755.rank;
  currency = other2755.currency;
  eventLock = other2755.eventLock;
  settings = other2755.settings;
  startingGameState = other2755.startingGameState;
  startingKingdomEntities = other2755.startingKingdomEntities;
  bundlesConfig = other2755.bundlesConfig;
  levelBlobs = other2755.levelBlobs;
  resolutionBundles = other2755.resolutionBundles;
  bundleManifest = other2755.bundleManifest;
  resolutionManifests = other2755.resolutionManifests;
  localizationManifests = other2755.localizationManifests;
  building = other2755.building;
  recipe = other2755.recipe;
  deco = other2755.deco;
  business = other2755.business;
  businessOrder = other2755.businessOrder;
  inventoryTab = other2755.inventoryTab;
  blockers = other2755.blockers;
  weightedLootList = other2755.weightedLootList;
  rarity = other2755.rarity;
  newRarity = other2755.newRarity;
  level = other2755.level;
  boost = other2755.boost;
  levelDot = other2755.levelDot;
  villain = other2755.villain;
  matchThreeData = other2755.matchThreeData;
  newLevel = other2755.newLevel;
  newLevelDot = other2755.newLevelDot;
  material = other2755.material;
  island = other2755.island;
  islandSettings = other2755.islandSettings;
  islandObject = other2755.islandObject;
  color = other2755.color;
  expansion = other2755.expansion;
  expansionType = other2755.expansionType;
  gachaGroup = other2755.gachaGroup;
  gachaOffer = other2755.gachaOffer;
  gachaPack = other2755.gachaPack;
  lootTable = other2755.lootTable;
  lootCurrencyGroup = other2755.lootCurrencyGroup;
  lootBuildingGroup = other2755.lootBuildingGroup;
  avatar = other2755.avatar;
  adminMessages = other2755.adminMessages;
  adminGiftMessages = other2755.adminGiftMessages;
  analyticsEvents = other2755.analyticsEvents;
  appBoyEvents = other2755.appBoyEvents;
  analyticsDimensions = other2755.analyticsDimensions;
  apsalarEvents = other2755.apsalarEvents;
  businessOrderList = other2755.businessOrderList;
  businessEvolution = other2755.businessEvolution;
  npc = other2755.npc;
  vendorProducts = other2755.vendorProducts;
  storeProducts = other2755.storeProducts;
  buyItemOrder = other2755.buyItemOrder;
  marketType = other2755.marketType;
  forcedUpgrade = other2755.forcedUpgrade;
  errorMessage = other2755.errorMessage;
  achievement = other2755.achievement;
  achievementGroup = other2755.achievementGroup;
  testBuckets = other2755.testBuckets;
  strangerSettings = other2755.strangerSettings;
  strangerMatchSettings = other2755.strangerMatchSettings;
  fakeStrangerDisplays = other2755.fakeStrangerDisplays;
  giftMessageRewards = other2755.giftMessageRewards;
  partialKingdomLikeGifts = other2755.partialKingdomLikeGifts;
  kingdomLikeGifts = other2755.kingdomLikeGifts;
  pushMessages = other2755.pushMessages;
  socialUnlockrewards = other2755.socialUnlockrewards;
  adProviders = other2755.adProviders;
  popupTemplate = other2755.popupTemplate;
  defaultTemplate = other2755.defaultTemplate;
  rushCostsByRemainingTime = other2755.rushCostsByRemainingTime;
  messageTemplateModifiers = other2755.messageTemplateModifiers;
  gachaBanner = other2755.gachaBanner;
  presetKingdoms = other2755.presetKingdoms;
  abTests = other2755.abTests;
  clientVersionTestBuckets = other2755.clientVersionTestBuckets;
  buildMenuSpecialCard = other2755.buildMenuSpecialCard;
  businessMenuSettings = other2755.businessMenuSettings;
  rewardMessages = other2755.rewardMessages;
  events = other2755.events;
  leaderboards = other2755.leaderboards;
  leaderboardSettings = other2755.leaderboardSettings;
  leaderboardLeagues = other2755.leaderboardLeagues;
  leaderboardRibbons = other2755.leaderboardRibbons;
  leaderboardRewards = other2755.leaderboardRewards;
  leaderboardPlacements = other2755.leaderboardPlacements;
  rarityEvoLevelKeyDropRates = other2755.rarityEvoLevelKeyDropRates;
  keyDropRateByOrderTime = other2755.keyDropRateByOrderTime;
  eventBusinessKeyDropRates = other2755.eventBusinessKeyDropRates;
  leaderboardTemplates = other2755.leaderboardTemplates;
  eventIslands = other2755.eventIslands;
  eventHowToPlays = other2755.eventHowToPlays;
  eventMainMenus = other2755.eventMainMenus;
  castleActivities = other2755.castleActivities;
  playerDisplaySuggestStart = other2755.playerDisplaySuggestStart;
  playerDisplaySuggestMiddle = other2755.playerDisplaySuggestMiddle;
  playerDisplaySuggestEnd = other2755.playerDisplaySuggestEnd;
  tutorialStates = other2755.tutorialStates;
  popupMessages = other2755.popupMessages;
  popupMessageSettings = other2755.popupMessageSettings;
  eventSettings = other2755.eventSettings;
  screenNameMapping = other2755.screenNameMapping;
  cellInfo = other2755.cellInfo;
  keyCostPerLevel = other2755.keyCostPerLevel;
  playerMatchRankSettings = other2755.playerMatchRankSettings;
  buildingMultipliers = other2755.buildingMultipliers;
  guildLeaderboardSettings = other2755.guildLeaderboardSettings;
  guildLeaderboards = other2755.guildLeaderboards;
  guildLeaderboardRibbons = other2755.guildLeaderboardRibbons;
  guildLeaderboardRewards = other2755.guildLeaderboardRewards;
  locations = other2755.locations;
  guildSettings = other2755.guildSettings;
  guildMemberTypeDisplays = other2755.guildMemberTypeDisplays;
  guildJoinTypeDisplays = other2755.guildJoinTypeDisplays;
  guildEmblems = other2755.guildEmblems;
  guildBoundItems = other2755.guildBoundItems;
  guildRank = other2755.guildRank;
  chatSystemMessages = other2755.chatSystemMessages;
  gifts = other2755.gifts;
  pollSettings = other2755.pollSettings;
  guildNameSuggestStart = other2755.guildNameSuggestStart;
  guildNameSuggestMiddle = other2755.guildNameSuggestMiddle;
  guildNameSuggestEnd = other2755.guildNameSuggestEnd;
  quests = other2755.quests;
  questGoals = other2755.questGoals;
  questTemplates = other2755.questTemplates;
  questGoalTemplates = other2755.questGoalTemplates;
  questNpc = other2755.questNpc;
  businessQuestNpc = other2755.businessQuestNpc;
  happinessSettings = other2755.happinessSettings;
  stores = other2755.stores;
  storeInventories = other2755.storeInventories;
  cardOffers = other2755.cardOffers;
  iapProducts = other2755.iapProducts;
  campaignSettings = other2755.campaignSettings;
  levelCampaigns = other2755.levelCampaigns;
  businessLevelIdsLookup = other2755.businessLevelIdsLookup;
  castleEventLevelIdsLookup = other2755.castleEventLevelIdsLookup;
  campaignLevelIdsLookup = other2755.campaignLevelIdsLookup;
  levelCampaignStyles = other2755.levelCampaignStyles;
  buildingTypeLocalizations = other2755.buildingTypeLocalizations;
  ftueSettings = other2755.ftueSettings;
  matchThreeCellDefinitions = other2755.matchThreeCellDefinitions;
  matchThreeBlasterDefinitions = other2755.matchThreeBlasterDefinitions;
  goalDisplayTemplates = other2755.goalDisplayTemplates;
  questTitles = other2755.questTitles;
  questSettings = other2755.questSettings;
  questRankSettings = other2755.questRankSettings;
  newBusinessOrders = other2755.newBusinessOrders;
  eventMenuWidgets = other2755.eventMenuWidgets;
  gearAvailableOnGachas = other2755.gearAvailableOnGachas;
  gearAvailableOnCardOffers = other2755.gearAvailableOnCardOffers;
  gearAvailableOnLevels = other2755.gearAvailableOnLevels;
  gearAvailableOnBusinessHarvest = other2755.gearAvailableOnBusinessHarvest;
  mainShopEntries = other2755.mainShopEntries;
  askForItems = other2755.askForItems;
  storeTabs = other2755.storeTabs;
  guildQuestRewards = other2755.guildQuestRewards;
  raidBosses = other2755.raidBosses;
  raidBossActivities = other2755.raidBossActivities;
  raidBossObjectives = other2755.raidBossObjectives;
  raidBossKarmaBrackets = other2755.raidBossKarmaBrackets;
  raidBossDifficultyBrackets = other2755.raidBossDifficultyBrackets;
  raidBossCurves = other2755.raidBossCurves;
  raidBossRewards = other2755.raidBossRewards;
  raidBossRarities = other2755.raidBossRarities;
  heroes = other2755.heroes;
  __isset = other2755.__isset;
}
Data& Data::operator=(const Data& other2756) {
  rank = other2756.rank;
  currency = other2756.currency;
  eventLock = other2756.eventLock;
  settings = other2756.settings;
  startingGameState = other2756.startingGameState;
  startingKingdomEntities = other2756.startingKingdomEntities;
  bundlesConfig = other2756.bundlesConfig;
  levelBlobs = other2756.levelBlobs;
  resolutionBundles = other2756.resolutionBundles;
  bundleManifest = other2756.bundleManifest;
  resolutionManifests = other2756.resolutionManifests;
  localizationManifests = other2756.localizationManifests;
  building = other2756.building;
  recipe = other2756.recipe;
  deco = other2756.deco;
  business = other2756.business;
  businessOrder = other2756.businessOrder;
  inventoryTab = other2756.inventoryTab;
  blockers = other2756.blockers;
  weightedLootList = other2756.weightedLootList;
  rarity = other2756.rarity;
  newRarity = other2756.newRarity;
  level = other2756.level;
  boost = other2756.boost;
  levelDot = other2756.levelDot;
  villain = other2756.villain;
  matchThreeData = other2756.matchThreeData;
  newLevel = other2756.newLevel;
  newLevelDot = other2756.newLevelDot;
  material = other2756.material;
  island = other2756.island;
  islandSettings = other2756.islandSettings;
  islandObject = other2756.islandObject;
  color = other2756.color;
  expansion = other2756.expansion;
  expansionType = other2756.expansionType;
  gachaGroup = other2756.gachaGroup;
  gachaOffer = other2756.gachaOffer;
  gachaPack = other2756.gachaPack;
  lootTable = other2756.lootTable;
  lootCurrencyGroup = other2756.lootCurrencyGroup;
  lootBuildingGroup = other2756.lootBuildingGroup;
  avatar = other2756.avatar;
  adminMessages = other2756.adminMessages;
  adminGiftMessages = other2756.adminGiftMessages;
  analyticsEvents = other2756.analyticsEvents;
  appBoyEvents = other2756.appBoyEvents;
  analyticsDimensions = other2756.analyticsDimensions;
  apsalarEvents = other2756.apsalarEvents;
  businessOrderList = other2756.businessOrderList;
  businessEvolution = other2756.businessEvolution;
  npc = other2756.npc;
  vendorProducts = other2756.vendorProducts;
  storeProducts = other2756.storeProducts;
  buyItemOrder = other2756.buyItemOrder;
  marketType = other2756.marketType;
  forcedUpgrade = other2756.forcedUpgrade;
  errorMessage = other2756.errorMessage;
  achievement = other2756.achievement;
  achievementGroup = other2756.achievementGroup;
  testBuckets = other2756.testBuckets;
  strangerSettings = other2756.strangerSettings;
  strangerMatchSettings = other2756.strangerMatchSettings;
  fakeStrangerDisplays = other2756.fakeStrangerDisplays;
  giftMessageRewards = other2756.giftMessageRewards;
  partialKingdomLikeGifts = other2756.partialKingdomLikeGifts;
  kingdomLikeGifts = other2756.kingdomLikeGifts;
  pushMessages = other2756.pushMessages;
  socialUnlockrewards = other2756.socialUnlockrewards;
  adProviders = other2756.adProviders;
  popupTemplate = other2756.popupTemplate;
  defaultTemplate = other2756.defaultTemplate;
  rushCostsByRemainingTime = other2756.rushCostsByRemainingTime;
  messageTemplateModifiers = other2756.messageTemplateModifiers;
  gachaBanner = other2756.gachaBanner;
  presetKingdoms = other2756.presetKingdoms;
  abTests = other2756.abTests;
  clientVersionTestBuckets = other2756.clientVersionTestBuckets;
  buildMenuSpecialCard = other2756.buildMenuSpecialCard;
  businessMenuSettings = other2756.businessMenuSettings;
  rewardMessages = other2756.rewardMessages;
  events = other2756.events;
  leaderboards = other2756.leaderboards;
  leaderboardSettings = other2756.leaderboardSettings;
  leaderboardLeagues = other2756.leaderboardLeagues;
  leaderboardRibbons = other2756.leaderboardRibbons;
  leaderboardRewards = other2756.leaderboardRewards;
  leaderboardPlacements = other2756.leaderboardPlacements;
  rarityEvoLevelKeyDropRates = other2756.rarityEvoLevelKeyDropRates;
  keyDropRateByOrderTime = other2756.keyDropRateByOrderTime;
  eventBusinessKeyDropRates = other2756.eventBusinessKeyDropRates;
  leaderboardTemplates = other2756.leaderboardTemplates;
  eventIslands = other2756.eventIslands;
  eventHowToPlays = other2756.eventHowToPlays;
  eventMainMenus = other2756.eventMainMenus;
  castleActivities = other2756.castleActivities;
  playerDisplaySuggestStart = other2756.playerDisplaySuggestStart;
  playerDisplaySuggestMiddle = other2756.playerDisplaySuggestMiddle;
  playerDisplaySuggestEnd = other2756.playerDisplaySuggestEnd;
  tutorialStates = other2756.tutorialStates;
  popupMessages = other2756.popupMessages;
  popupMessageSettings = other2756.popupMessageSettings;
  eventSettings = other2756.eventSettings;
  screenNameMapping = other2756.screenNameMapping;
  cellInfo = other2756.cellInfo;
  keyCostPerLevel = other2756.keyCostPerLevel;
  playerMatchRankSettings = other2756.playerMatchRankSettings;
  buildingMultipliers = other2756.buildingMultipliers;
  guildLeaderboardSettings = other2756.guildLeaderboardSettings;
  guildLeaderboards = other2756.guildLeaderboards;
  guildLeaderboardRibbons = other2756.guildLeaderboardRibbons;
  guildLeaderboardRewards = other2756.guildLeaderboardRewards;
  locations = other2756.locations;
  guildSettings = other2756.guildSettings;
  guildMemberTypeDisplays = other2756.guildMemberTypeDisplays;
  guildJoinTypeDisplays = other2756.guildJoinTypeDisplays;
  guildEmblems = other2756.guildEmblems;
  guildBoundItems = other2756.guildBoundItems;
  guildRank = other2756.guildRank;
  chatSystemMessages = other2756.chatSystemMessages;
  gifts = other2756.gifts;
  pollSettings = other2756.pollSettings;
  guildNameSuggestStart = other2756.guildNameSuggestStart;
  guildNameSuggestMiddle = other2756.guildNameSuggestMiddle;
  guildNameSuggestEnd = other2756.guildNameSuggestEnd;
  quests = other2756.quests;
  questGoals = other2756.questGoals;
  questTemplates = other2756.questTemplates;
  questGoalTemplates = other2756.questGoalTemplates;
  questNpc = other2756.questNpc;
  businessQuestNpc = other2756.businessQuestNpc;
  happinessSettings = other2756.happinessSettings;
  stores = other2756.stores;
  storeInventories = other2756.storeInventories;
  cardOffers = other2756.cardOffers;
  iapProducts = other2756.iapProducts;
  campaignSettings = other2756.campaignSettings;
  levelCampaigns = other2756.levelCampaigns;
  businessLevelIdsLookup = other2756.businessLevelIdsLookup;
  castleEventLevelIdsLookup = other2756.castleEventLevelIdsLookup;
  campaignLevelIdsLookup = other2756.campaignLevelIdsLookup;
  levelCampaignStyles = other2756.levelCampaignStyles;
  buildingTypeLocalizations = other2756.buildingTypeLocalizations;
  ftueSettings = other2756.ftueSettings;
  matchThreeCellDefinitions = other2756.matchThreeCellDefinitions;
  matchThreeBlasterDefinitions = other2756.matchThreeBlasterDefinitions;
  goalDisplayTemplates = other2756.goalDisplayTemplates;
  questTitles = other2756.questTitles;
  questSettings = other2756.questSettings;
  questRankSettings = other2756.questRankSettings;
  newBusinessOrders = other2756.newBusinessOrders;
  eventMenuWidgets = other2756.eventMenuWidgets;
  gearAvailableOnGachas = other2756.gearAvailableOnGachas;
  gearAvailableOnCardOffers = other2756.gearAvailableOnCardOffers;
  gearAvailableOnLevels = other2756.gearAvailableOnLevels;
  gearAvailableOnBusinessHarvest = other2756.gearAvailableOnBusinessHarvest;
  mainShopEntries = other2756.mainShopEntries;
  askForItems = other2756.askForItems;
  storeTabs = other2756.storeTabs;
  guildQuestRewards = other2756.guildQuestRewards;
  raidBosses = other2756.raidBosses;
  raidBossActivities = other2756.raidBossActivities;
  raidBossObjectives = other2756.raidBossObjectives;
  raidBossKarmaBrackets = other2756.raidBossKarmaBrackets;
  raidBossDifficultyBrackets = other2756.raidBossDifficultyBrackets;
  raidBossCurves = other2756.raidBossCurves;
  raidBossRewards = other2756.raidBossRewards;
  raidBossRarities = other2756.raidBossRarities;
  heroes = other2756.heroes;
  __isset = other2756.__isset;
  return *this;
}
void Data::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Data(";
  out << "rank=" << to_string(rank);
  out << ", " << "currency=" << to_string(currency);
  out << ", " << "eventLock=" << to_string(eventLock);
  out << ", " << "settings="; (__isset.settings ? (out << to_string(settings)) : (out << "<null>"));
  out << ", " << "startingGameState="; (__isset.startingGameState ? (out << to_string(startingGameState)) : (out << "<null>"));
  out << ", " << "startingKingdomEntities="; (__isset.startingKingdomEntities ? (out << to_string(startingKingdomEntities)) : (out << "<null>"));
  out << ", " << "bundlesConfig=" << to_string(bundlesConfig);
  out << ", " << "levelBlobs="; (__isset.levelBlobs ? (out << to_string(levelBlobs)) : (out << "<null>"));
  out << ", " << "resolutionBundles="; (__isset.resolutionBundles ? (out << to_string(resolutionBundles)) : (out << "<null>"));
  out << ", " << "bundleManifest="; (__isset.bundleManifest ? (out << to_string(bundleManifest)) : (out << "<null>"));
  out << ", " << "resolutionManifests="; (__isset.resolutionManifests ? (out << to_string(resolutionManifests)) : (out << "<null>"));
  out << ", " << "localizationManifests="; (__isset.localizationManifests ? (out << to_string(localizationManifests)) : (out << "<null>"));
  out << ", " << "building=" << to_string(building);
  out << ", " << "recipe=" << to_string(recipe);
  out << ", " << "deco=" << to_string(deco);
  out << ", " << "business=" << to_string(business);
  out << ", " << "businessOrder="; (__isset.businessOrder ? (out << to_string(businessOrder)) : (out << "<null>"));
  out << ", " << "inventoryTab=" << to_string(inventoryTab);
  out << ", " << "blockers=" << to_string(blockers);
  out << ", " << "weightedLootList=" << to_string(weightedLootList);
  out << ", " << "rarity=" << to_string(rarity);
  out << ", " << "newRarity="; (__isset.newRarity ? (out << to_string(newRarity)) : (out << "<null>"));
  out << ", " << "level=" << to_string(level);
  out << ", " << "boost=" << to_string(boost);
  out << ", " << "levelDot="; (__isset.levelDot ? (out << to_string(levelDot)) : (out << "<null>"));
  out << ", " << "villain="; (__isset.villain ? (out << to_string(villain)) : (out << "<null>"));
  out << ", " << "matchThreeData="; (__isset.matchThreeData ? (out << to_string(matchThreeData)) : (out << "<null>"));
  out << ", " << "newLevel="; (__isset.newLevel ? (out << to_string(newLevel)) : (out << "<null>"));
  out << ", " << "newLevelDot=" << to_string(newLevelDot);
  out << ", " << "material=" << to_string(material);
  out << ", " << "island=" << to_string(island);
  out << ", " << "islandSettings="; (__isset.islandSettings ? (out << to_string(islandSettings)) : (out << "<null>"));
  out << ", " << "islandObject="; (__isset.islandObject ? (out << to_string(islandObject)) : (out << "<null>"));
  out << ", " << "color="; (__isset.color ? (out << to_string(color)) : (out << "<null>"));
  out << ", " << "expansion=" << to_string(expansion);
  out << ", " << "expansionType=" << to_string(expansionType);
  out << ", " << "gachaGroup=" << to_string(gachaGroup);
  out << ", " << "gachaOffer=" << to_string(gachaOffer);
  out << ", " << "gachaPack=" << to_string(gachaPack);
  out << ", " << "lootTable=" << to_string(lootTable);
  out << ", " << "lootCurrencyGroup=" << to_string(lootCurrencyGroup);
  out << ", " << "lootBuildingGroup=" << to_string(lootBuildingGroup);
  out << ", " << "avatar=" << to_string(avatar);
  out << ", " << "adminMessages="; (__isset.adminMessages ? (out << to_string(adminMessages)) : (out << "<null>"));
  out << ", " << "adminGiftMessages=" << to_string(adminGiftMessages);
  out << ", " << "analyticsEvents=" << to_string(analyticsEvents);
  out << ", " << "appBoyEvents=" << to_string(appBoyEvents);
  out << ", " << "analyticsDimensions=" << to_string(analyticsDimensions);
  out << ", " << "apsalarEvents="; (__isset.apsalarEvents ? (out << to_string(apsalarEvents)) : (out << "<null>"));
  out << ", " << "businessOrderList="; (__isset.businessOrderList ? (out << to_string(businessOrderList)) : (out << "<null>"));
  out << ", " << "businessEvolution=" << to_string(businessEvolution);
  out << ", " << "npc=" << to_string(npc);
  out << ", " << "vendorProducts=" << to_string(vendorProducts);
  out << ", " << "storeProducts=" << to_string(storeProducts);
  out << ", " << "buyItemOrder=" << to_string(buyItemOrder);
  out << ", " << "marketType=" << to_string(marketType);
  out << ", " << "forcedUpgrade=" << to_string(forcedUpgrade);
  out << ", " << "errorMessage=" << to_string(errorMessage);
  out << ", " << "achievement="; (__isset.achievement ? (out << to_string(achievement)) : (out << "<null>"));
  out << ", " << "achievementGroup="; (__isset.achievementGroup ? (out << to_string(achievementGroup)) : (out << "<null>"));
  out << ", " << "testBuckets=" << to_string(testBuckets);
  out << ", " << "strangerSettings=" << to_string(strangerSettings);
  out << ", " << "strangerMatchSettings=" << to_string(strangerMatchSettings);
  out << ", " << "fakeStrangerDisplays=" << to_string(fakeStrangerDisplays);
  out << ", " << "giftMessageRewards=" << to_string(giftMessageRewards);
  out << ", " << "partialKingdomLikeGifts=" << to_string(partialKingdomLikeGifts);
  out << ", " << "kingdomLikeGifts=" << to_string(kingdomLikeGifts);
  out << ", " << "pushMessages="; (__isset.pushMessages ? (out << to_string(pushMessages)) : (out << "<null>"));
  out << ", " << "socialUnlockrewards="; (__isset.socialUnlockrewards ? (out << to_string(socialUnlockrewards)) : (out << "<null>"));
  out << ", " << "adProviders="; (__isset.adProviders ? (out << to_string(adProviders)) : (out << "<null>"));
  out << ", " << "popupTemplate=" << to_string(popupTemplate);
  out << ", " << "defaultTemplate=" << to_string(defaultTemplate);
  out << ", " << "rushCostsByRemainingTime=" << to_string(rushCostsByRemainingTime);
  out << ", " << "messageTemplateModifiers="; (__isset.messageTemplateModifiers ? (out << to_string(messageTemplateModifiers)) : (out << "<null>"));
  out << ", " << "gachaBanner="; (__isset.gachaBanner ? (out << to_string(gachaBanner)) : (out << "<null>"));
  out << ", " << "presetKingdoms="; (__isset.presetKingdoms ? (out << to_string(presetKingdoms)) : (out << "<null>"));
  out << ", " << "abTests="; (__isset.abTests ? (out << to_string(abTests)) : (out << "<null>"));
  out << ", " << "clientVersionTestBuckets="; (__isset.clientVersionTestBuckets ? (out << to_string(clientVersionTestBuckets)) : (out << "<null>"));
  out << ", " << "buildMenuSpecialCard="; (__isset.buildMenuSpecialCard ? (out << to_string(buildMenuSpecialCard)) : (out << "<null>"));
  out << ", " << "businessMenuSettings="; (__isset.businessMenuSettings ? (out << to_string(businessMenuSettings)) : (out << "<null>"));
  out << ", " << "rewardMessages=" << to_string(rewardMessages);
  out << ", " << "events=" << to_string(events);
  out << ", " << "leaderboards=" << to_string(leaderboards);
  out << ", " << "leaderboardSettings=" << to_string(leaderboardSettings);
  out << ", " << "leaderboardLeagues="; (__isset.leaderboardLeagues ? (out << to_string(leaderboardLeagues)) : (out << "<null>"));
  out << ", " << "leaderboardRibbons="; (__isset.leaderboardRibbons ? (out << to_string(leaderboardRibbons)) : (out << "<null>"));
  out << ", " << "leaderboardRewards="; (__isset.leaderboardRewards ? (out << to_string(leaderboardRewards)) : (out << "<null>"));
  out << ", " << "leaderboardPlacements=" << to_string(leaderboardPlacements);
  out << ", " << "rarityEvoLevelKeyDropRates=" << to_string(rarityEvoLevelKeyDropRates);
  out << ", " << "keyDropRateByOrderTime=" << to_string(keyDropRateByOrderTime);
  out << ", " << "eventBusinessKeyDropRates=" << to_string(eventBusinessKeyDropRates);
  out << ", " << "leaderboardTemplates="; (__isset.leaderboardTemplates ? (out << to_string(leaderboardTemplates)) : (out << "<null>"));
  out << ", " << "eventIslands=" << to_string(eventIslands);
  out << ", " << "eventHowToPlays=" << to_string(eventHowToPlays);
  out << ", " << "eventMainMenus=" << to_string(eventMainMenus);
  out << ", " << "castleActivities=" << to_string(castleActivities);
  out << ", " << "playerDisplaySuggestStart=" << to_string(playerDisplaySuggestStart);
  out << ", " << "playerDisplaySuggestMiddle=" << to_string(playerDisplaySuggestMiddle);
  out << ", " << "playerDisplaySuggestEnd=" << to_string(playerDisplaySuggestEnd);
  out << ", " << "tutorialStates=" << to_string(tutorialStates);
  out << ", " << "popupMessages=" << to_string(popupMessages);
  out << ", " << "popupMessageSettings=" << to_string(popupMessageSettings);
  out << ", " << "eventSettings="; (__isset.eventSettings ? (out << to_string(eventSettings)) : (out << "<null>"));
  out << ", " << "screenNameMapping="; (__isset.screenNameMapping ? (out << to_string(screenNameMapping)) : (out << "<null>"));
  out << ", " << "cellInfo="; (__isset.cellInfo ? (out << to_string(cellInfo)) : (out << "<null>"));
  out << ", " << "keyCostPerLevel="; (__isset.keyCostPerLevel ? (out << to_string(keyCostPerLevel)) : (out << "<null>"));
  out << ", " << "playerMatchRankSettings="; (__isset.playerMatchRankSettings ? (out << to_string(playerMatchRankSettings)) : (out << "<null>"));
  out << ", " << "buildingMultipliers=" << to_string(buildingMultipliers);
  out << ", " << "guildLeaderboardSettings=" << to_string(guildLeaderboardSettings);
  out << ", " << "guildLeaderboards="; (__isset.guildLeaderboards ? (out << to_string(guildLeaderboards)) : (out << "<null>"));
  out << ", " << "guildLeaderboardRibbons="; (__isset.guildLeaderboardRibbons ? (out << to_string(guildLeaderboardRibbons)) : (out << "<null>"));
  out << ", " << "guildLeaderboardRewards="; (__isset.guildLeaderboardRewards ? (out << to_string(guildLeaderboardRewards)) : (out << "<null>"));
  out << ", " << "locations=" << to_string(locations);
  out << ", " << "guildSettings=" << to_string(guildSettings);
  out << ", " << "guildMemberTypeDisplays=" << to_string(guildMemberTypeDisplays);
  out << ", " << "guildJoinTypeDisplays=" << to_string(guildJoinTypeDisplays);
  out << ", " << "guildEmblems=" << to_string(guildEmblems);
  out << ", " << "guildBoundItems=" << to_string(guildBoundItems);
  out << ", " << "guildRank=" << to_string(guildRank);
  out << ", " << "chatSystemMessages=" << to_string(chatSystemMessages);
  out << ", " << "gifts=" << to_string(gifts);
  out << ", " << "pollSettings="; (__isset.pollSettings ? (out << to_string(pollSettings)) : (out << "<null>"));
  out << ", " << "guildNameSuggestStart=" << to_string(guildNameSuggestStart);
  out << ", " << "guildNameSuggestMiddle=" << to_string(guildNameSuggestMiddle);
  out << ", " << "guildNameSuggestEnd=" << to_string(guildNameSuggestEnd);
  out << ", " << "quests=" << to_string(quests);
  out << ", " << "questGoals="; (__isset.questGoals ? (out << to_string(questGoals)) : (out << "<null>"));
  out << ", " << "questTemplates=" << to_string(questTemplates);
  out << ", " << "questGoalTemplates="; (__isset.questGoalTemplates ? (out << to_string(questGoalTemplates)) : (out << "<null>"));
  out << ", " << "questNpc=" << to_string(questNpc);
  out << ", " << "businessQuestNpc=" << to_string(businessQuestNpc);
  out << ", " << "happinessSettings="; (__isset.happinessSettings ? (out << to_string(happinessSettings)) : (out << "<null>"));
  out << ", " << "stores=" << to_string(stores);
  out << ", " << "storeInventories=" << to_string(storeInventories);
  out << ", " << "cardOffers=" << to_string(cardOffers);
  out << ", " << "iapProducts=" << to_string(iapProducts);
  out << ", " << "campaignSettings=" << to_string(campaignSettings);
  out << ", " << "levelCampaigns=" << to_string(levelCampaigns);
  out << ", " << "businessLevelIdsLookup="; (__isset.businessLevelIdsLookup ? (out << to_string(businessLevelIdsLookup)) : (out << "<null>"));
  out << ", " << "castleEventLevelIdsLookup="; (__isset.castleEventLevelIdsLookup ? (out << to_string(castleEventLevelIdsLookup)) : (out << "<null>"));
  out << ", " << "campaignLevelIdsLookup="; (__isset.campaignLevelIdsLookup ? (out << to_string(campaignLevelIdsLookup)) : (out << "<null>"));
  out << ", " << "levelCampaignStyles=" << to_string(levelCampaignStyles);
  out << ", " << "buildingTypeLocalizations=" << to_string(buildingTypeLocalizations);
  out << ", " << "ftueSettings="; (__isset.ftueSettings ? (out << to_string(ftueSettings)) : (out << "<null>"));
  out << ", " << "matchThreeCellDefinitions="; (__isset.matchThreeCellDefinitions ? (out << to_string(matchThreeCellDefinitions)) : (out << "<null>"));
  out << ", " << "matchThreeBlasterDefinitions="; (__isset.matchThreeBlasterDefinitions ? (out << to_string(matchThreeBlasterDefinitions)) : (out << "<null>"));
  out << ", " << "goalDisplayTemplates=" << to_string(goalDisplayTemplates);
  out << ", " << "questTitles=" << to_string(questTitles);
  out << ", " << "questSettings=" << to_string(questSettings);
  out << ", " << "questRankSettings=" << to_string(questRankSettings);
  out << ", " << "newBusinessOrders=" << to_string(newBusinessOrders);
  out << ", " << "eventMenuWidgets="; (__isset.eventMenuWidgets ? (out << to_string(eventMenuWidgets)) : (out << "<null>"));
  out << ", " << "gearAvailableOnGachas="; (__isset.gearAvailableOnGachas ? (out << to_string(gearAvailableOnGachas)) : (out << "<null>"));
  out << ", " << "gearAvailableOnCardOffers="; (__isset.gearAvailableOnCardOffers ? (out << to_string(gearAvailableOnCardOffers)) : (out << "<null>"));
  out << ", " << "gearAvailableOnLevels="; (__isset.gearAvailableOnLevels ? (out << to_string(gearAvailableOnLevels)) : (out << "<null>"));
  out << ", " << "gearAvailableOnBusinessHarvest="; (__isset.gearAvailableOnBusinessHarvest ? (out << to_string(gearAvailableOnBusinessHarvest)) : (out << "<null>"));
  out << ", " << "mainShopEntries=" << to_string(mainShopEntries);
  out << ", " << "askForItems="; (__isset.askForItems ? (out << to_string(askForItems)) : (out << "<null>"));
  out << ", " << "storeTabs="; (__isset.storeTabs ? (out << to_string(storeTabs)) : (out << "<null>"));
  out << ", " << "guildQuestRewards="; (__isset.guildQuestRewards ? (out << to_string(guildQuestRewards)) : (out << "<null>"));
  out << ", " << "raidBosses="; (__isset.raidBosses ? (out << to_string(raidBosses)) : (out << "<null>"));
  out << ", " << "raidBossActivities="; (__isset.raidBossActivities ? (out << to_string(raidBossActivities)) : (out << "<null>"));
  out << ", " << "raidBossObjectives="; (__isset.raidBossObjectives ? (out << to_string(raidBossObjectives)) : (out << "<null>"));
  out << ", " << "raidBossKarmaBrackets="; (__isset.raidBossKarmaBrackets ? (out << to_string(raidBossKarmaBrackets)) : (out << "<null>"));
  out << ", " << "raidBossDifficultyBrackets="; (__isset.raidBossDifficultyBrackets ? (out << to_string(raidBossDifficultyBrackets)) : (out << "<null>"));
  out << ", " << "raidBossCurves="; (__isset.raidBossCurves ? (out << to_string(raidBossCurves)) : (out << "<null>"));
  out << ", " << "raidBossRewards="; (__isset.raidBossRewards ? (out << to_string(raidBossRewards)) : (out << "<null>"));
  out << ", " << "raidBossRarities="; (__isset.raidBossRarities ? (out << to_string(raidBossRarities)) : (out << "<null>"));
  out << ", " << "heroes="; (__isset.heroes ? (out << to_string(heroes)) : (out << "<null>"));
  out << ")";
}

}} // namespace
