--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'tutorial_constants'

Operation = {
  ADD = 1,
  SUBTRACT = 2,
  MULTIPLY = 3,
  DIVIDE = 4
}

MyInteger = i32

Work = __TObject:new{
  num1,
  num2,
  op,
  comment
}

function Work:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.num1 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.num2 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.op = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.comment = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Work:write(oprot)
  oprot:writeStructBegin('Work')
  if self.num1 ~= nil then
    oprot:writeFieldBegin('num1', TType.I32, 1)
    oprot:writeI32(self.num1)
    oprot:writeFieldEnd()
  end
  if self.num2 ~= nil then
    oprot:writeFieldBegin('num2', TType.I32, 2)
    oprot:writeI32(self.num2)
    oprot:writeFieldEnd()
  end
  if self.op ~= nil then
    oprot:writeFieldBegin('op', TType.I32, 3)
    oprot:writeI32(self.op)
    oprot:writeFieldEnd()
  end
  if self.comment ~= nil then
    oprot:writeFieldBegin('comment', TType.STRING, 4)
    oprot:writeString(self.comment)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

InvalidOperation = TException:new{
  __type = 'InvalidOperation',
  whatOp,
  why
}

function InvalidOperation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.whatOp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.why = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function InvalidOperation:write(oprot)
  oprot:writeStructBegin('InvalidOperation')
  if self.whatOp ~= nil then
    oprot:writeFieldBegin('whatOp', TType.I32, 1)
    oprot:writeI32(self.whatOp)
    oprot:writeFieldEnd()
  end
  if self.why ~= nil then
    oprot:writeFieldBegin('why', TType.STRING, 2)
    oprot:writeString(self.why)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end