--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'Config_constants'

RaidBossObjectiveType = {
  FirstStrike = 0,
  MostDamage = 1,
  LastStrike = 2,
  Participation = 3,
  Rally = 4
}

MarketType = {
  Default = 0,
  BlackMarket = 1
}

AffinityID = {
  Chocolate = 0,
  Blue = 1,
  Green = 2,
  Orange = 3,
  Pink = 4,
  Yellow = 5
}

SpecialtyID = {
  Donut = 0,
  Sorbet = 1,
  Cake = 2,
  Cookie = 3,
  Pie = 4,
  Cannoli = 5
}

LootItemType = {
  Nothing = -1,
  Currency = 0,
  Building = 1
}

EventPhase = {
  NonEvent = 0,
  Main = 1,
  Preview = 2,
  Recap = 4
}

EventPhases = {
  PreviewMainRecap = 0,
  Main = 1,
  Preview = 2,
  PreviewMain = 3,
  Recap = 4,
  MainRecap = 5
}

GuildJoinType = {
  AutoJoin = 0,
  Request = 1,
  InviteOnly = 2
}

GuildMemberType = {
  Leader = 0,
  CoLeader = 1,
  Member1 = 2,
  Member2 = 3,
  Member3 = 4
}

GuildState = {
  Active = 0,
  Deleted = 1
}

GuildQuestRewardType = {
  AllMembers = 0,
  Leader = 1,
  Guild = 2
}

MessageButtonAction = {
  Default = 0,
  GoToBuildMenu = 1,
  GoToKingdom = 2,
  GoToGachaStore = 3,
  GoToCurrencyStore = 4,
  GoToIsland = 5,
  GoToURL = 6,
  CollectGiftMessage = 7,
  CancelFriendRequest = 8,
  AcceptFriendRequest = 9,
  SpinGacha = 10,
  GoToSocialMenu = 11,
  OpenGachaCard = 12,
  RunFTUE = 13,
  OpenGachaOffer = 14,
  GoToInbox = 15,
  GoToEventMenu = 16,
  GoToEventMenuOpenRewards = 17,
  GoToEventMenuOpenHelp = 18,
  GoToEventMenuOpenStore = 19,
  GoToEventMenuOpenLeaderboard = 20,
  GoToRewards = 21,
  GoToHelp = 22,
  GoToStore = 23,
  GoToLeaderboard = 24,
  GoToNextEvoEventLevel = 25,
  GoToGuildLeaderboard = 26
}

EventMenuWidgetType = {
  ButtonWidget = 0,
  LeaderboardWidget = 1,
  PlayButtonWidget = 2,
  ImageWidget = 3,
  TextWidget = 4,
  NPCImageWidget = 5,
  CurrencyHudWidget = 6,
  TimerWidget = 7,
  FakeLeaderboardWidget = 8,
  GuildLeaderboardPositionWidget = 9
}

BuildingType = {
  Default = 0,
  Business = 1,
  Expansion = 2,
  Market = 3,
  Deco = 4,
  Blocker = 5
}

IslandObjectType = {
  Level = 0,
  Cakebox = 1,
  Object = 2
}

LevelType = {
  Normal = 0,
  Blitz = 1,
  Illegal = 2
}

LevelParentType = {
  Default = 0,
  Business = 1,
  CastleEvent = 2,
  Campaign = 3,
  EvolutionEvent = 4
}

LevelAvailability = {
  Default = 0,
  Sequential = 1,
  All = 2,
  Loop = 3
}

GiftMessageType = {
  Default = 0,
  CustomerService = 1,
  RushOrder = 2,
  DeliverOrder = 3,
  LikeBonus = 4,
  DecoBonus = 5,
  Guild = 6,
  Gift = 7,
  AskForItems = 8
}

PopupTemplateType = {
  Default = 0,
  CustomerService = 1,
  RushOrder = 2,
  DeliverOrder = 3,
  LikeBonus = 4,
  DecoBonus = 5,
  FriendRequest = 2000
}

PurchasableOfferType = {
  Default = 0,
  Gacha = 1,
  Card = 2,
  LegacyStoreProduct = 3
}

OfferType = {
  Default = 0,
  Gacha = 1,
  Card = 2,
  LegacyStoreProduct = 3
}

StoreProductBillingType = {
  Vendor = 0,
  Currency = 1
}

AchievementType = {
  Unknown = 0,
  Bomb = 1,
  ColumnBlaster = 2,
  RowBlaster = 3,
  Colorbomb = 4,
  ScreenBlasterAColorbomb = 5,
  DoubleBlasterAColorbomb = 6,
  C2BlastersAColorbomb = 7,
  ColorbombABlaster = 8,
  ColorbombARowBlasterAColumnBlaster = 9,
  RowBlasterABlaster = 10,
  ColumnBlasterABlaster = 11,
  C2Blasters = 12,
  C3Blasters = 13,
  C2LineBlasters = 14,
  C3LineBlasters = 15,
  C4LineBlasters = 16,
  C5LineBlasters = 17,
  C6LineBlasters = 18,
  C7LineBlasters = 19,
  C8LineBlasters = 20,
  C9LineBlasters = 21,
  C10LineBlasters = 22,
  C2Colorbombs = 23,
  PlaceDeco = 24,
  GetBusiness = 25,
  EvolveBusiness = 26,
  CollectDailyBonus = 27,
  FinishIsland = 28,
  PlaceOrder = 29,
  CollectOrder = 30,
  RushOrder = 31,
  PlaceBusiness = 32,
  Rank = 33,
  LikeKingdom = 34,
  PlaceSocialOrder = 35,
  OpenGachaPack = 36,
  VisitKingdom = 37,
  FinishLevel = 38,
  MoveBusiness = 39,
  MoveDeco = 40,
  PlaceExpansion = 41,
  MoveExpansion = 42,
  CraftGear = 43,
  EquipGear = 44,
  UseLevelBox = 45,
  PlaceRoad = 46,
  PlaceDistinctDecos = 47
}

GoalType = {
  NoType = 0,
  HarvestAnyBusiness = 1,
  HarvestSpecificBusiness = 2,
  EquipAnyGearOnAnyBusiness = 3,
  EquipAnyGearOnSpecificBusiness = 4,
  EvolveAnyBusiness = 5,
  EvolveSpecificBusiness = 6,
  PlaceAnyBuilding = 7,
  PlaceSpecificBuilding = 8,
  PlaceSpecificBuildingWithRarity = 9,
  RotateAnyBuilding = 10,
  MoveAnyBuilding = 11,
  AutoPlayAnyLevel = 12,
  WinAnyLevel = 13,
  WinLevelSpecificBusiness = 14,
  WinSpecificLevel = 15,
  WinAnyEventLevel = 16,
  SocialCompleteOrder = 17,
  SocialLikeKingdom = 18,
  SocialPlaceOrderGuildMate = 19,
  SocialVisitKingdom = 20,
  EquipSpecificGearOnAnyBusiness = 21,
  EquipSpecificGearOnSpecificBusiness = 22,
  AutoPlayAnyEventLevel = 23,
  AutoPlaySpecificLevel = 24,
  JoinGuild = 25,
  MatchUseAnyBooster = 26,
  MatchUseSpecificBooster = 27,
  WinAnyLevelThreeStars = 28,
  WinLevelSpecificBusinessThreeStars = 29,
  WinSpecificLevelThreeStars = 30,
  WinEventLevelThreeStars = 31,
  MatchTiles = 32,
  CompleteLevel = 33,
  GachaSpin = 34
}

ClientPlatform = {
  iOS = 0,
  Android = 1
}

AdPlatform = {
  IOS = 1,
  Android = 2
}

AdProviders = {
  AdColony = 1,
  UnityAds = 2,
  IronSource = 3
}

AvailableOfferType = {
  Nothing = 0,
  GachaOffer = 1,
  CardOffer = 2
}

GuildLeaderboardRewardRecipient = {
  Everyone = 0,
  Leader = 1
}

Timestamp = i64

AssetPath = string

LocalizationID = string

LocalizationKey = string

BundleID = string

CurrencyID = string

CurrencyTypeID = string

RarityID = i32

ProductID = string

EvolutionID = i32

BuildingID = string

EntityID = i32

Coordinate = i32

PresetKingdomID = string

IslandID = string

IslandObjectID = string

ColorID = string

RecipeID = string

InventoryTabID = string

MaterialID = string

EvolutionMaterialID = string

BusinessOrderListID = string

BusinessID = string

BusinessOrderID = string

CharacterID = string

DecoID = string

WeightedLootListID = string

GachaGroupID = string

GachaBannerID = string

GachaOfferID = string

GachaPackID = string

LootTableID = string

LootCurrencyGroupID = string

LootBuildingGroupID = string

RankID = i32

ExpansionTypeID = string

ExpansionID = string

GuildRankID = i32

BoostID = string

BoostTypeID = string

EventLockID = string

BuildMenuSpecialCardID = string

LevelDotID = string

LevelID = string

VillainID = string

LevelName = string

LevelCampaignStyleID = string

LevelCampaignID = string

SocialUnlockRewardID = string

BlobID = string

AvatarID = string

AnalyticsEventID = string

AnalyticsDimensionID = string

TemplateID = string

AdminMessageID = string

NpcID = string

IAPProductID = string

CardOfferID = string

StoreTabID = string

StoreID = string

StoreProductID = string

AppleProductID = string

GoogleProductID = string

MarketOrderID = string

AchievementID = string

AchievementGroupID = string

QuestID = string

QuestNpcID = string

GoalID = string

GuildQuestRewardID = string

GoalDisplayTemplateID = i32

QuestDisplayTemplateID = i32

ErrorId = string

GiftMessageRewardID = string

KingdomLikeGiftID = string

PushMessageID = string

LeaderboardID = string

LeaderboardLeagueID = string

LeaderboardRibbonID = string

LeaderboardTemplateID = string

EventID = string

RewardMessageID = string

AssetID = string

EventIslandID = string

EventHowToPlayID = string

EventMainMenuID = string

CellInfoMapID = string

CellTypeID = string

Match3ThemeId = string

BlasterTypeID = string

CastleActivityID = string

KeyCostPerLevelID = string

EventMenuWidgetID = string

EventKeyDropRateFormulaID = string

TutorialID = string

AdminGiftMessageID = string

PopupMessageID = string

GuildLeaderboardID = string

GuildLeaderboardRibbonID = string

LocationID = string

GuildEmblemID = string

ChatSystemMessageID = string

GiftID = string

MainShopEntryID = string

AskForItemID = string

TestBucketID = string

ABTestID = string

HeroTypeID = i32

HeroLevelCurveID = string

RaidBossID = string

RaidBossActivityID = string

SkillID = string

HeroID = string

RaidBossCurveID = string

RaidBossObjectiveID = string

RaidBossRarityID = string

RaidBossRewardID = string

RaidBossDifficultyBracketID = string

Localization = __TObject:new{
  localizationId,
  localizationPath
}

function Localization:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.localizationId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.localizationPath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Localization:write(oprot)
  oprot:writeStructBegin('Localization')
  if self.localizationId ~= nil then
    oprot:writeFieldBegin('localizationId', TType.STRING, 1)
    oprot:writeString(self.localizationId)
    oprot:writeFieldEnd()
  end
  if self.localizationPath ~= nil then
    oprot:writeFieldBegin('localizationPath', TType.STRING, 10)
    oprot:writeString(self.localizationPath)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LocalizedString = __TObject:new{
  key,
  value
}

function LocalizedString:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LocalizedString:write(oprot)
  oprot:writeStructBegin('LocalizedString')
  if self.key ~= nil then
    oprot:writeFieldBegin('key', TType.STRING, 1)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.STRING, 2)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DateTimeUTC = __TObject:new{
  epochSeconds
}

function DateTimeUTC:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.epochSeconds = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DateTimeUTC:write(oprot)
  oprot:writeStructBegin('DateTimeUTC')
  if self.epochSeconds ~= nil then
    oprot:writeFieldBegin('epochSeconds', TType.I64, 1)
    oprot:writeI64(self.epochSeconds)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Header = __TObject:new{
  schemaVersion,
  configVersion
}

function Header:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.schemaVersion = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.configVersion = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Header:write(oprot)
  oprot:writeStructBegin('Header')
  if self.schemaVersion ~= nil then
    oprot:writeFieldBegin('schemaVersion', TType.I32, 1)
    oprot:writeI32(self.schemaVersion)
    oprot:writeFieldEnd()
  end
  if self.configVersion ~= nil then
    oprot:writeFieldBegin('configVersion', TType.I32, 2)
    oprot:writeI32(self.configVersion)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ConfigBundle = __TObject:new{
  bundleId,
  path,
  priority,
  noncompulsory,
  dependencies
}

function ConfigBundle:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.path = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.noncompulsory = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.dependencies = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = iprot:readString()
          table.insert(self.dependencies, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ConfigBundle:write(oprot)
  oprot:writeStructBegin('ConfigBundle')
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 1)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.path ~= nil then
    oprot:writeFieldBegin('path', TType.STRING, 2)
    oprot:writeString(self.path)
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 3)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  if self.noncompulsory ~= nil then
    oprot:writeFieldBegin('noncompulsory', TType.BOOL, 10)
    oprot:writeBool(self.noncompulsory)
    oprot:writeFieldEnd()
  end
  if self.dependencies ~= nil then
    oprot:writeFieldBegin('dependencies', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.dependencies)
    for _,iter5 in ipairs(self.dependencies) do
      oprot:writeString(iter5)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BundleInfo = __TObject:new{
  path,
  size,
  bundlemd5,
  zipmd5,
  url
}

function BundleInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.path = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.size = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.bundlemd5 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.zipmd5 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.url = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BundleInfo:write(oprot)
  oprot:writeStructBegin('BundleInfo')
  if self.path ~= nil then
    oprot:writeFieldBegin('path', TType.STRING, 1)
    oprot:writeString(self.path)
    oprot:writeFieldEnd()
  end
  if self.size ~= nil then
    oprot:writeFieldBegin('size', TType.I32, 2)
    oprot:writeI32(self.size)
    oprot:writeFieldEnd()
  end
  if self.bundlemd5 ~= nil then
    oprot:writeFieldBegin('bundlemd5', TType.STRING, 3)
    oprot:writeString(self.bundlemd5)
    oprot:writeFieldEnd()
  end
  if self.zipmd5 ~= nil then
    oprot:writeFieldBegin('zipmd5', TType.STRING, 4)
    oprot:writeString(self.zipmd5)
    oprot:writeFieldEnd()
  end
  if self.url ~= nil then
    oprot:writeFieldBegin('url', TType.STRING, 5)
    oprot:writeString(self.url)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Bundle = __TObject:new{
  bundleId,
  dependencies,
  bundleInfo,
  noncompulsory,
  priority
}

function Bundle:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.dependencies = {}
        local _etype9, _size6 = iprot:readListBegin()
        for _i=1,_size6 do
          local _elem10 = iprot:readString()
          table.insert(self.dependencies, _elem10)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.MAP then
        self.bundleInfo = {}
        local _ktype12, _vtype13, _size11 = iprot:readMapBegin() 
        for _i=1,_size11 do
          local _key15 = iprot:readString()
          local _val16 = BundleInfo:new{}
          _val16:read(iprot)
          self.bundleInfo[_key15] = _val16
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.BOOL then
        self.noncompulsory = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Bundle:write(oprot)
  oprot:writeStructBegin('Bundle')
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 1)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.dependencies ~= nil then
    oprot:writeFieldBegin('dependencies', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.dependencies)
    for _,iter17 in ipairs(self.dependencies) do
      oprot:writeString(iter17)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.bundleInfo ~= nil then
    oprot:writeFieldBegin('bundleInfo', TType.MAP, 12)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.bundleInfo))
    for kiter18,viter19 in pairs(self.bundleInfo) do
      oprot:writeString(kiter18)
      viter19:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.noncompulsory ~= nil then
    oprot:writeFieldBegin('noncompulsory', TType.BOOL, 15)
    oprot:writeBool(self.noncompulsory)
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 16)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BundleManifest = __TObject:new{
  baseUrl,
  bundles,
  gitCommit
}

function BundleManifest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.baseUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.bundles = {}
        local _ktype21, _vtype22, _size20 = iprot:readMapBegin() 
        for _i=1,_size20 do
          local _key24 = iprot:readString()
          local _val25 = Bundle:new{}
          _val25:read(iprot)
          self.bundles[_key24] = _val25
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.gitCommit = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BundleManifest:write(oprot)
  oprot:writeStructBegin('BundleManifest')
  if self.baseUrl ~= nil then
    oprot:writeFieldBegin('baseUrl', TType.STRING, 1)
    oprot:writeString(self.baseUrl)
    oprot:writeFieldEnd()
  end
  if self.bundles ~= nil then
    oprot:writeFieldBegin('bundles', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.bundles))
    for kiter26,viter27 in pairs(self.bundles) do
      oprot:writeString(kiter26)
      viter27:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gitCommit ~= nil then
    oprot:writeFieldBegin('gitCommit', TType.STRING, 4)
    oprot:writeString(self.gitCommit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Currency = __TObject:new{
  currencyId,
  newDisplay,
  catalogImage,
  currencyTypeId,
  bundleId,
  gachaRevealImage,
  startingValue,
  pluralDisplay
}

function Currency:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.catalogImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.currencyTypeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.gachaRevealImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.startingValue = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRUCT then
        self.pluralDisplay = LocalizedString:new{}
        self.pluralDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Currency:write(oprot)
  oprot:writeStructBegin('Currency')
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 1)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 11)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.catalogImage ~= nil then
    oprot:writeFieldBegin('catalogImage', TType.STRING, 13)
    oprot:writeString(self.catalogImage)
    oprot:writeFieldEnd()
  end
  if self.currencyTypeId ~= nil then
    oprot:writeFieldBegin('currencyTypeId', TType.STRING, 21)
    oprot:writeString(self.currencyTypeId)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 30)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.gachaRevealImage ~= nil then
    oprot:writeFieldBegin('gachaRevealImage', TType.STRING, 40)
    oprot:writeString(self.gachaRevealImage)
    oprot:writeFieldEnd()
  end
  if self.startingValue ~= nil then
    oprot:writeFieldBegin('startingValue', TType.I32, 41)
    oprot:writeI32(self.startingValue)
    oprot:writeFieldEnd()
  end
  if self.pluralDisplay ~= nil then
    oprot:writeFieldBegin('pluralDisplay', TType.STRUCT, 42)
    self.pluralDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Rarity = __TObject:new{
  rarityId,
  weight,
  newDisplay,
  cardImage,
  minBusinessOrderSlots,
  maxBusinessOrderSlots,
  slotPrices,
  gearGachaCardFrontImage,
  gearGachaCardBackImage,
  businessGachaCardFrontImage,
  businessGachaCardBackImage,
  smallCardBackground,
  gachaRibbon,
  gachaCounter,
  starBackground,
  detailGachaGearCardImage,
  detailGachaBusinessCardImage,
  buildMenuCardImageLocked,
  buildMenuCardImageUnlocked,
  buildMenuCardImageFree,
  buildMenuCardEffectColor,
  buildMenuTextColor,
  buildMenuNpcBgColor,
  buildMenuBusinessCardImage,
  buildMenuChefhatEmptyImage,
  gachaChefhatEmptyImage,
  businessOrderMenuChefhatEmptyImage,
  detailGachaDecoCardImage
}

function Rarity:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.rarityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.weight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.cardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.minBusinessOrderSlots = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.maxBusinessOrderSlots = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.slotPrices = {}
        local _etype31, _size28 = iprot:readListBegin()
        for _i=1,_size28 do
          local _elem32 = iprot:readI32()
          table.insert(self.slotPrices, _elem32)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.gearGachaCardFrontImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.gearGachaCardBackImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.businessGachaCardFrontImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.businessGachaCardBackImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.smallCardBackground = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.gachaRibbon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.STRING then
        self.gachaCounter = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.STRING then
        self.starBackground = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.detailGachaGearCardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.detailGachaBusinessCardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.buildMenuCardImageLocked = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRING then
        self.buildMenuCardImageUnlocked = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.STRING then
        self.buildMenuCardImageFree = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.STRING then
        self.buildMenuCardEffectColor = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 36 then
      if ftype == TType.STRING then
        self.buildMenuTextColor = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 37 then
      if ftype == TType.STRING then
        self.buildMenuNpcBgColor = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 38 then
      if ftype == TType.STRING then
        self.buildMenuBusinessCardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.buildMenuChefhatEmptyImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.gachaChefhatEmptyImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.businessOrderMenuChefhatEmptyImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.detailGachaDecoCardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Rarity:write(oprot)
  oprot:writeStructBegin('Rarity')
  if self.rarityId ~= nil then
    oprot:writeFieldBegin('rarityId', TType.I32, 1)
    oprot:writeI32(self.rarityId)
    oprot:writeFieldEnd()
  end
  if self.weight ~= nil then
    oprot:writeFieldBegin('weight', TType.I32, 3)
    oprot:writeI32(self.weight)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 4)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.cardImage ~= nil then
    oprot:writeFieldBegin('cardImage', TType.STRING, 10)
    oprot:writeString(self.cardImage)
    oprot:writeFieldEnd()
  end
  if self.minBusinessOrderSlots ~= nil then
    oprot:writeFieldBegin('minBusinessOrderSlots', TType.I32, 11)
    oprot:writeI32(self.minBusinessOrderSlots)
    oprot:writeFieldEnd()
  end
  if self.maxBusinessOrderSlots ~= nil then
    oprot:writeFieldBegin('maxBusinessOrderSlots', TType.I32, 12)
    oprot:writeI32(self.maxBusinessOrderSlots)
    oprot:writeFieldEnd()
  end
  if self.slotPrices ~= nil then
    oprot:writeFieldBegin('slotPrices', TType.LIST, 13)
    oprot:writeListBegin(TType.I32, #self.slotPrices)
    for _,iter33 in ipairs(self.slotPrices) do
      oprot:writeI32(iter33)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.gearGachaCardFrontImage ~= nil then
    oprot:writeFieldBegin('gearGachaCardFrontImage', TType.STRING, 20)
    oprot:writeString(self.gearGachaCardFrontImage)
    oprot:writeFieldEnd()
  end
  if self.gearGachaCardBackImage ~= nil then
    oprot:writeFieldBegin('gearGachaCardBackImage', TType.STRING, 21)
    oprot:writeString(self.gearGachaCardBackImage)
    oprot:writeFieldEnd()
  end
  if self.businessGachaCardFrontImage ~= nil then
    oprot:writeFieldBegin('businessGachaCardFrontImage', TType.STRING, 22)
    oprot:writeString(self.businessGachaCardFrontImage)
    oprot:writeFieldEnd()
  end
  if self.businessGachaCardBackImage ~= nil then
    oprot:writeFieldBegin('businessGachaCardBackImage', TType.STRING, 23)
    oprot:writeString(self.businessGachaCardBackImage)
    oprot:writeFieldEnd()
  end
  if self.smallCardBackground ~= nil then
    oprot:writeFieldBegin('smallCardBackground', TType.STRING, 24)
    oprot:writeString(self.smallCardBackground)
    oprot:writeFieldEnd()
  end
  if self.gachaRibbon ~= nil then
    oprot:writeFieldBegin('gachaRibbon', TType.STRING, 25)
    oprot:writeString(self.gachaRibbon)
    oprot:writeFieldEnd()
  end
  if self.gachaCounter ~= nil then
    oprot:writeFieldBegin('gachaCounter', TType.STRING, 26)
    oprot:writeString(self.gachaCounter)
    oprot:writeFieldEnd()
  end
  if self.starBackground ~= nil then
    oprot:writeFieldBegin('starBackground', TType.STRING, 27)
    oprot:writeString(self.starBackground)
    oprot:writeFieldEnd()
  end
  if self.detailGachaGearCardImage ~= nil then
    oprot:writeFieldBegin('detailGachaGearCardImage', TType.STRING, 30)
    oprot:writeString(self.detailGachaGearCardImage)
    oprot:writeFieldEnd()
  end
  if self.detailGachaBusinessCardImage ~= nil then
    oprot:writeFieldBegin('detailGachaBusinessCardImage', TType.STRING, 31)
    oprot:writeString(self.detailGachaBusinessCardImage)
    oprot:writeFieldEnd()
  end
  if self.buildMenuCardImageLocked ~= nil then
    oprot:writeFieldBegin('buildMenuCardImageLocked', TType.STRING, 32)
    oprot:writeString(self.buildMenuCardImageLocked)
    oprot:writeFieldEnd()
  end
  if self.buildMenuCardImageUnlocked ~= nil then
    oprot:writeFieldBegin('buildMenuCardImageUnlocked', TType.STRING, 33)
    oprot:writeString(self.buildMenuCardImageUnlocked)
    oprot:writeFieldEnd()
  end
  if self.buildMenuCardImageFree ~= nil then
    oprot:writeFieldBegin('buildMenuCardImageFree', TType.STRING, 34)
    oprot:writeString(self.buildMenuCardImageFree)
    oprot:writeFieldEnd()
  end
  if self.buildMenuCardEffectColor ~= nil then
    oprot:writeFieldBegin('buildMenuCardEffectColor', TType.STRING, 35)
    oprot:writeString(self.buildMenuCardEffectColor)
    oprot:writeFieldEnd()
  end
  if self.buildMenuTextColor ~= nil then
    oprot:writeFieldBegin('buildMenuTextColor', TType.STRING, 36)
    oprot:writeString(self.buildMenuTextColor)
    oprot:writeFieldEnd()
  end
  if self.buildMenuNpcBgColor ~= nil then
    oprot:writeFieldBegin('buildMenuNpcBgColor', TType.STRING, 37)
    oprot:writeString(self.buildMenuNpcBgColor)
    oprot:writeFieldEnd()
  end
  if self.buildMenuBusinessCardImage ~= nil then
    oprot:writeFieldBegin('buildMenuBusinessCardImage', TType.STRING, 38)
    oprot:writeString(self.buildMenuBusinessCardImage)
    oprot:writeFieldEnd()
  end
  if self.buildMenuChefhatEmptyImage ~= nil then
    oprot:writeFieldBegin('buildMenuChefhatEmptyImage', TType.STRING, 40)
    oprot:writeString(self.buildMenuChefhatEmptyImage)
    oprot:writeFieldEnd()
  end
  if self.gachaChefhatEmptyImage ~= nil then
    oprot:writeFieldBegin('gachaChefhatEmptyImage', TType.STRING, 41)
    oprot:writeString(self.gachaChefhatEmptyImage)
    oprot:writeFieldEnd()
  end
  if self.businessOrderMenuChefhatEmptyImage ~= nil then
    oprot:writeFieldBegin('businessOrderMenuChefhatEmptyImage', TType.STRING, 42)
    oprot:writeString(self.businessOrderMenuChefhatEmptyImage)
    oprot:writeFieldEnd()
  end
  if self.detailGachaDecoCardImage ~= nil then
    oprot:writeFieldBegin('detailGachaDecoCardImage', TType.STRING, 50)
    oprot:writeString(self.detailGachaDecoCardImage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Building = __TObject:new{
  buildingId,
  buildingType,
  bundleId,
  tileHeight,
  inventoryTabId,
  newDisplay,
  newDisplayPlural,
  sizeX,
  sizeY,
  canRotate,
  rarityId,
  evolutionId,
  rankMin,
  nextEvolveBuildingId,
  baseEvolveBuildingId,
  sellPrice,
  sellCurrencyId,
  sellPrices,
  sellCurrencyIds,
  costCurrencyId,
  cost,
  costGrowthFactor,
  baseCost,
  cannotMove,
  newEvolveName,
  fullDisplayName,
  realHeight,
  luaInterface,
  marketType,
  showAsGachaOfferIndex,
  placedScore,
  fountain,
  populationPlacedScore,
  hiddenFromBuildMenu,
  onOpenAction,
  onOpenActionParameter
}

function Building:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.buildingType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.tileHeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.inventoryTabId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.STRUCT then
        self.newDisplayPlural = LocalizedString:new{}
        self.newDisplayPlural:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.sizeX = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.sizeY = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.BOOL then
        self.canRotate = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.rarityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.evolutionId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.I32 then
        self.rankMin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 39 then
      if ftype == TType.STRING then
        self.nextEvolveBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.baseEvolveBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.sellPrice = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.sellCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 45 then
      if ftype == TType.LIST then
        self.sellPrices = {}
        local _etype37, _size34 = iprot:readListBegin()
        for _i=1,_size34 do
          local _elem38 = iprot:readI32()
          table.insert(self.sellPrices, _elem38)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 46 then
      if ftype == TType.LIST then
        self.sellCurrencyIds = {}
        local _etype42, _size39 = iprot:readListBegin()
        for _i=1,_size39 do
          local _elem43 = iprot:readString()
          table.insert(self.sellCurrencyIds, _elem43)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.STRING then
        self.costCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.I32 then
        self.cost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 55 then
      if ftype == TType.DOUBLE then
        self.costGrowthFactor = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 56 then
      if ftype == TType.I32 then
        self.baseCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.BOOL then
        self.cannotMove = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.STRUCT then
        self.newEvolveName = LocalizedString:new{}
        self.newEvolveName:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 72 then
      if ftype == TType.STRUCT then
        self.fullDisplayName = LocalizedString:new{}
        self.fullDisplayName:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.I32 then
        self.realHeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.STRING then
        self.luaInterface = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 101 then
      if ftype == TType.I32 then
        self.marketType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.I32 then
        self.showAsGachaOfferIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 111 then
      if ftype == TType.I32 then
        self.placedScore = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 113 then
      if ftype == TType.BOOL then
        self.fountain = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 120 then
      if ftype == TType.I32 then
        self.populationPlacedScore = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 121 then
      if ftype == TType.BOOL then
        self.hiddenFromBuildMenu = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 122 then
      if ftype == TType.I32 then
        self.onOpenAction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 123 then
      if ftype == TType.LIST then
        self.onOpenActionParameter = {}
        local _etype47, _size44 = iprot:readListBegin()
        for _i=1,_size44 do
          local _elem48 = iprot:readString()
          table.insert(self.onOpenActionParameter, _elem48)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Building:write(oprot)
  oprot:writeStructBegin('Building')
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 1)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.buildingType ~= nil then
    oprot:writeFieldBegin('buildingType', TType.I32, 10)
    oprot:writeI32(self.buildingType)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 15)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.tileHeight ~= nil then
    oprot:writeFieldBegin('tileHeight', TType.I32, 16)
    oprot:writeI32(self.tileHeight)
    oprot:writeFieldEnd()
  end
  if self.inventoryTabId ~= nil then
    oprot:writeFieldBegin('inventoryTabId', TType.STRING, 17)
    oprot:writeString(self.inventoryTabId)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 18)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.newDisplayPlural ~= nil then
    oprot:writeFieldBegin('newDisplayPlural', TType.STRUCT, 19)
    self.newDisplayPlural:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.sizeX ~= nil then
    oprot:writeFieldBegin('sizeX', TType.I32, 20)
    oprot:writeI32(self.sizeX)
    oprot:writeFieldEnd()
  end
  if self.sizeY ~= nil then
    oprot:writeFieldBegin('sizeY', TType.I32, 23)
    oprot:writeI32(self.sizeY)
    oprot:writeFieldEnd()
  end
  if self.canRotate ~= nil then
    oprot:writeFieldBegin('canRotate', TType.BOOL, 21)
    oprot:writeBool(self.canRotate)
    oprot:writeFieldEnd()
  end
  if self.rarityId ~= nil then
    oprot:writeFieldBegin('rarityId', TType.I32, 22)
    oprot:writeI32(self.rarityId)
    oprot:writeFieldEnd()
  end
  if self.evolutionId ~= nil then
    oprot:writeFieldBegin('evolutionId', TType.I32, 24)
    oprot:writeI32(self.evolutionId)
    oprot:writeFieldEnd()
  end
  if self.rankMin ~= nil then
    oprot:writeFieldBegin('rankMin', TType.I32, 32)
    oprot:writeI32(self.rankMin)
    oprot:writeFieldEnd()
  end
  if self.nextEvolveBuildingId ~= nil then
    oprot:writeFieldBegin('nextEvolveBuildingId', TType.STRING, 39)
    oprot:writeString(self.nextEvolveBuildingId)
    oprot:writeFieldEnd()
  end
  if self.baseEvolveBuildingId ~= nil then
    oprot:writeFieldBegin('baseEvolveBuildingId', TType.STRING, 40)
    oprot:writeString(self.baseEvolveBuildingId)
    oprot:writeFieldEnd()
  end
  if self.sellPrice ~= nil then
    oprot:writeFieldBegin('sellPrice', TType.I32, 41)
    oprot:writeI32(self.sellPrice)
    oprot:writeFieldEnd()
  end
  if self.sellCurrencyId ~= nil then
    oprot:writeFieldBegin('sellCurrencyId', TType.STRING, 42)
    oprot:writeString(self.sellCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.sellPrices ~= nil then
    oprot:writeFieldBegin('sellPrices', TType.LIST, 45)
    oprot:writeListBegin(TType.I32, #self.sellPrices)
    for _,iter49 in ipairs(self.sellPrices) do
      oprot:writeI32(iter49)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.sellCurrencyIds ~= nil then
    oprot:writeFieldBegin('sellCurrencyIds', TType.LIST, 46)
    oprot:writeListBegin(TType.STRING, #self.sellCurrencyIds)
    for _,iter50 in ipairs(self.sellCurrencyIds) do
      oprot:writeString(iter50)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.costCurrencyId ~= nil then
    oprot:writeFieldBegin('costCurrencyId', TType.STRING, 53)
    oprot:writeString(self.costCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.cost ~= nil then
    oprot:writeFieldBegin('cost', TType.I32, 54)
    oprot:writeI32(self.cost)
    oprot:writeFieldEnd()
  end
  if self.costGrowthFactor ~= nil then
    oprot:writeFieldBegin('costGrowthFactor', TType.DOUBLE, 55)
    oprot:writeDouble(self.costGrowthFactor)
    oprot:writeFieldEnd()
  end
  if self.baseCost ~= nil then
    oprot:writeFieldBegin('baseCost', TType.I32, 56)
    oprot:writeI32(self.baseCost)
    oprot:writeFieldEnd()
  end
  if self.cannotMove ~= nil then
    oprot:writeFieldBegin('cannotMove', TType.BOOL, 60)
    oprot:writeBool(self.cannotMove)
    oprot:writeFieldEnd()
  end
  if self.newEvolveName ~= nil then
    oprot:writeFieldBegin('newEvolveName', TType.STRUCT, 71)
    self.newEvolveName:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.fullDisplayName ~= nil then
    oprot:writeFieldBegin('fullDisplayName', TType.STRUCT, 72)
    self.fullDisplayName:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.realHeight ~= nil then
    oprot:writeFieldBegin('realHeight', TType.I32, 80)
    oprot:writeI32(self.realHeight)
    oprot:writeFieldEnd()
  end
  if self.luaInterface ~= nil then
    oprot:writeFieldBegin('luaInterface', TType.STRING, 100)
    oprot:writeString(self.luaInterface)
    oprot:writeFieldEnd()
  end
  if self.marketType ~= nil then
    oprot:writeFieldBegin('marketType', TType.I32, 101)
    oprot:writeI32(self.marketType)
    oprot:writeFieldEnd()
  end
  if self.showAsGachaOfferIndex ~= nil then
    oprot:writeFieldBegin('showAsGachaOfferIndex', TType.I32, 110)
    oprot:writeI32(self.showAsGachaOfferIndex)
    oprot:writeFieldEnd()
  end
  if self.placedScore ~= nil then
    oprot:writeFieldBegin('placedScore', TType.I32, 111)
    oprot:writeI32(self.placedScore)
    oprot:writeFieldEnd()
  end
  if self.fountain ~= nil then
    oprot:writeFieldBegin('fountain', TType.BOOL, 113)
    oprot:writeBool(self.fountain)
    oprot:writeFieldEnd()
  end
  if self.populationPlacedScore ~= nil then
    oprot:writeFieldBegin('populationPlacedScore', TType.I32, 120)
    oprot:writeI32(self.populationPlacedScore)
    oprot:writeFieldEnd()
  end
  if self.hiddenFromBuildMenu ~= nil then
    oprot:writeFieldBegin('hiddenFromBuildMenu', TType.BOOL, 121)
    oprot:writeBool(self.hiddenFromBuildMenu)
    oprot:writeFieldEnd()
  end
  if self.onOpenAction ~= nil then
    oprot:writeFieldBegin('onOpenAction', TType.I32, 122)
    oprot:writeI32(self.onOpenAction)
    oprot:writeFieldEnd()
  end
  if self.onOpenActionParameter ~= nil then
    oprot:writeFieldBegin('onOpenActionParameter', TType.LIST, 123)
    oprot:writeListBegin(TType.STRING, #self.onOpenActionParameter)
    for _,iter51 in ipairs(self.onOpenActionParameter) do
      oprot:writeString(iter51)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StartingKingdomEntity = __TObject:new{
  entityId,
  buildingId,
  x,
  y,
  rotated
}

function StartingKingdomEntity:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.entityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.x = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.y = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.rotated = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StartingKingdomEntity:write(oprot)
  oprot:writeStructBegin('StartingKingdomEntity')
  if self.entityId ~= nil then
    oprot:writeFieldBegin('entityId', TType.I32, 1)
    oprot:writeI32(self.entityId)
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 2)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.x ~= nil then
    oprot:writeFieldBegin('x', TType.I32, 3)
    oprot:writeI32(self.x)
    oprot:writeFieldEnd()
  end
  if self.y ~= nil then
    oprot:writeFieldBegin('y', TType.I32, 4)
    oprot:writeI32(self.y)
    oprot:writeFieldEnd()
  end
  if self.rotated ~= nil then
    oprot:writeFieldBegin('rotated', TType.BOOL, 5)
    oprot:writeBool(self.rotated)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PresetKingdomEntity = __TObject:new{
  presetKingdomId,
  entityId,
  buildingId,
  x,
  y,
  rotated
}

function PresetKingdomEntity:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.presetKingdomId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.entityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.x = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.y = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.rotated = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PresetKingdomEntity:write(oprot)
  oprot:writeStructBegin('PresetKingdomEntity')
  if self.presetKingdomId ~= nil then
    oprot:writeFieldBegin('presetKingdomId', TType.STRING, 1)
    oprot:writeString(self.presetKingdomId)
    oprot:writeFieldEnd()
  end
  if self.entityId ~= nil then
    oprot:writeFieldBegin('entityId', TType.I32, 2)
    oprot:writeI32(self.entityId)
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 3)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.x ~= nil then
    oprot:writeFieldBegin('x', TType.I32, 4)
    oprot:writeI32(self.x)
    oprot:writeFieldEnd()
  end
  if self.y ~= nil then
    oprot:writeFieldBegin('y', TType.I32, 5)
    oprot:writeI32(self.y)
    oprot:writeFieldEnd()
  end
  if self.rotated ~= nil then
    oprot:writeFieldBegin('rotated', TType.BOOL, 6)
    oprot:writeBool(self.rotated)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Color = __TObject:new{
  colorId,
  red,
  green,
  blue,
  alpha
}

function Color:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.colorId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.red = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.green = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.blue = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.alpha = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Color:write(oprot)
  oprot:writeStructBegin('Color')
  if self.colorId ~= nil then
    oprot:writeFieldBegin('colorId', TType.STRING, 1)
    oprot:writeString(self.colorId)
    oprot:writeFieldEnd()
  end
  if self.red ~= nil then
    oprot:writeFieldBegin('red', TType.I32, 2)
    oprot:writeI32(self.red)
    oprot:writeFieldEnd()
  end
  if self.green ~= nil then
    oprot:writeFieldBegin('green', TType.I32, 3)
    oprot:writeI32(self.green)
    oprot:writeFieldEnd()
  end
  if self.blue ~= nil then
    oprot:writeFieldBegin('blue', TType.I32, 4)
    oprot:writeI32(self.blue)
    oprot:writeFieldEnd()
  end
  if self.alpha ~= nil then
    oprot:writeFieldBegin('alpha', TType.I32, 5)
    oprot:writeI32(self.alpha)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

IslandSettings = __TObject:new{
  islandBackLayerGroup,
  islandMiddleLayerGroup
}

function IslandSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.islandBackLayerGroup = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.islandMiddleLayerGroup = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function IslandSettings:write(oprot)
  oprot:writeStructBegin('IslandSettings')
  if self.islandBackLayerGroup ~= nil then
    oprot:writeFieldBegin('islandBackLayerGroup', TType.STRING, 1)
    oprot:writeString(self.islandBackLayerGroup)
    oprot:writeFieldEnd()
  end
  if self.islandMiddleLayerGroup ~= nil then
    oprot:writeFieldBegin('islandMiddleLayerGroup', TType.STRING, 2)
    oprot:writeString(self.islandMiddleLayerGroup)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

IslandObject = __TObject:new{
  islandObjectId,
  x,
  y,
  image,
  tintColorId,
  param,
  type,
  islandGroup
}

function IslandObject:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.islandObjectId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.x = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.y = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.image = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.tintColorId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.param = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.islandGroup = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function IslandObject:write(oprot)
  oprot:writeStructBegin('IslandObject')
  if self.islandObjectId ~= nil then
    oprot:writeFieldBegin('islandObjectId', TType.STRING, 1)
    oprot:writeString(self.islandObjectId)
    oprot:writeFieldEnd()
  end
  if self.x ~= nil then
    oprot:writeFieldBegin('x', TType.I32, 2)
    oprot:writeI32(self.x)
    oprot:writeFieldEnd()
  end
  if self.y ~= nil then
    oprot:writeFieldBegin('y', TType.I32, 3)
    oprot:writeI32(self.y)
    oprot:writeFieldEnd()
  end
  if self.image ~= nil then
    oprot:writeFieldBegin('image', TType.STRING, 4)
    oprot:writeString(self.image)
    oprot:writeFieldEnd()
  end
  if self.tintColorId ~= nil then
    oprot:writeFieldBegin('tintColorId', TType.STRING, 5)
    oprot:writeString(self.tintColorId)
    oprot:writeFieldEnd()
  end
  if self.param ~= nil then
    oprot:writeFieldBegin('param', TType.STRING, 10)
    oprot:writeString(self.param)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 13)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.islandGroup ~= nil then
    oprot:writeFieldBegin('islandGroup', TType.STRING, 14)
    oprot:writeString(self.islandGroup)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Island = __TObject:new{
  islandId,
  pageNum,
  newDisplay,
  nextIslandId,
  eventId,
  tmxFilename,
  islandImage,
  islandGroup,
  x,
  y
}

function Island:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.islandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.pageNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.nextIslandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.eventId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.tmxFilename = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.islandImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.islandGroup = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.I32 then
        self.x = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.I32 then
        self.y = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Island:write(oprot)
  oprot:writeStructBegin('Island')
  if self.islandId ~= nil then
    oprot:writeFieldBegin('islandId', TType.STRING, 1)
    oprot:writeString(self.islandId)
    oprot:writeFieldEnd()
  end
  if self.pageNum ~= nil then
    oprot:writeFieldBegin('pageNum', TType.I32, 3)
    oprot:writeI32(self.pageNum)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 4)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.nextIslandId ~= nil then
    oprot:writeFieldBegin('nextIslandId', TType.STRING, 10)
    oprot:writeString(self.nextIslandId)
    oprot:writeFieldEnd()
  end
  if self.eventId ~= nil then
    oprot:writeFieldBegin('eventId', TType.STRING, 20)
    oprot:writeString(self.eventId)
    oprot:writeFieldEnd()
  end
  if self.tmxFilename ~= nil then
    oprot:writeFieldBegin('tmxFilename', TType.STRING, 30)
    oprot:writeString(self.tmxFilename)
    oprot:writeFieldEnd()
  end
  if self.islandImage ~= nil then
    oprot:writeFieldBegin('islandImage', TType.STRING, 60)
    oprot:writeString(self.islandImage)
    oprot:writeFieldEnd()
  end
  if self.islandGroup ~= nil then
    oprot:writeFieldBegin('islandGroup', TType.STRING, 70)
    oprot:writeString(self.islandGroup)
    oprot:writeFieldEnd()
  end
  if self.x ~= nil then
    oprot:writeFieldBegin('x', TType.I32, 80)
    oprot:writeI32(self.x)
    oprot:writeFieldEnd()
  end
  if self.y ~= nil then
    oprot:writeFieldBegin('y', TType.I32, 81)
    oprot:writeI32(self.y)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Recipe = __TObject:new{
  recipeId,
  catalogImage,
  newDisplay
}

function Recipe:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.recipeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.catalogImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Recipe:write(oprot)
  oprot:writeStructBegin('Recipe')
  if self.recipeId ~= nil then
    oprot:writeFieldBegin('recipeId', TType.STRING, 1)
    oprot:writeString(self.recipeId)
    oprot:writeFieldEnd()
  end
  if self.catalogImage ~= nil then
    oprot:writeFieldBegin('catalogImage', TType.STRING, 10)
    oprot:writeString(self.catalogImage)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 11)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

InventoryTab = __TObject:new{
  index,
  inventoryTabId,
  image,
  selectionSound,
  title
}

function InventoryTab:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.index = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.inventoryTabId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.image = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.selectionSound = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRUCT then
        self.title = LocalizedString:new{}
        self.title:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function InventoryTab:write(oprot)
  oprot:writeStructBegin('InventoryTab')
  if self.index ~= nil then
    oprot:writeFieldBegin('index', TType.I32, 1)
    oprot:writeI32(self.index)
    oprot:writeFieldEnd()
  end
  if self.inventoryTabId ~= nil then
    oprot:writeFieldBegin('inventoryTabId', TType.STRING, 2)
    oprot:writeString(self.inventoryTabId)
    oprot:writeFieldEnd()
  end
  if self.image ~= nil then
    oprot:writeFieldBegin('image', TType.STRING, 10)
    oprot:writeString(self.image)
    oprot:writeFieldEnd()
  end
  if self.selectionSound ~= nil then
    oprot:writeFieldBegin('selectionSound', TType.STRING, 20)
    oprot:writeString(self.selectionSound)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRUCT, 21)
    self.title:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Material = __TObject:new{
  materialID,
  rarityId,
  levelId,
  newDisplay,
  materialIds,
  materialCounts,
  craftCostCurrencyId,
  craftCost
}

function Material:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.materialID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.rarityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.levelId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.materialIds = {}
        local _etype55, _size52 = iprot:readListBegin()
        for _i=1,_size52 do
          local _elem56 = iprot:readString()
          table.insert(self.materialIds, _elem56)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.LIST then
        self.materialCounts = {}
        local _etype60, _size57 = iprot:readListBegin()
        for _i=1,_size57 do
          local _elem61 = iprot:readI32()
          table.insert(self.materialCounts, _elem61)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.craftCostCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.craftCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Material:write(oprot)
  oprot:writeStructBegin('Material')
  if self.materialID ~= nil then
    oprot:writeFieldBegin('materialID', TType.STRING, 1)
    oprot:writeString(self.materialID)
    oprot:writeFieldEnd()
  end
  if self.rarityId ~= nil then
    oprot:writeFieldBegin('rarityId', TType.I32, 11)
    oprot:writeI32(self.rarityId)
    oprot:writeFieldEnd()
  end
  if self.levelId ~= nil then
    oprot:writeFieldBegin('levelId', TType.I32, 12)
    oprot:writeI32(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 14)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.materialIds ~= nil then
    oprot:writeFieldBegin('materialIds', TType.LIST, 20)
    oprot:writeListBegin(TType.STRING, #self.materialIds)
    for _,iter62 in ipairs(self.materialIds) do
      oprot:writeString(iter62)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.materialCounts ~= nil then
    oprot:writeFieldBegin('materialCounts', TType.LIST, 21)
    oprot:writeListBegin(TType.I32, #self.materialCounts)
    for _,iter63 in ipairs(self.materialCounts) do
      oprot:writeI32(iter63)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.craftCostCurrencyId ~= nil then
    oprot:writeFieldBegin('craftCostCurrencyId', TType.STRING, 40)
    oprot:writeString(self.craftCostCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.craftCost ~= nil then
    oprot:writeFieldBegin('craftCost', TType.I32, 41)
    oprot:writeI32(self.craftCost)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BusinessEvolution = __TObject:new{
  evolutionMaterialId,
  gearList,
  materialCounts
}

function BusinessEvolution:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.evolutionMaterialId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.gearList = {}
        local _etype67, _size64 = iprot:readListBegin()
        for _i=1,_size64 do
          local _elem68 = iprot:readString()
          table.insert(self.gearList, _elem68)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.materialCounts = {}
        local _etype72, _size69 = iprot:readListBegin()
        for _i=1,_size69 do
          local _elem73 = iprot:readI32()
          table.insert(self.materialCounts, _elem73)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BusinessEvolution:write(oprot)
  oprot:writeStructBegin('BusinessEvolution')
  if self.evolutionMaterialId ~= nil then
    oprot:writeFieldBegin('evolutionMaterialId', TType.STRING, 1)
    oprot:writeString(self.evolutionMaterialId)
    oprot:writeFieldEnd()
  end
  if self.gearList ~= nil then
    oprot:writeFieldBegin('gearList', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.gearList)
    for _,iter74 in ipairs(self.gearList) do
      oprot:writeString(iter74)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.materialCounts ~= nil then
    oprot:writeFieldBegin('materialCounts', TType.LIST, 3)
    oprot:writeListBegin(TType.I32, #self.materialCounts)
    for _,iter75 in ipairs(self.materialCounts) do
      oprot:writeI32(iter75)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BusinessOrderList = __TObject:new{
  businessOrderListId,
  businessOrderIds
}

function BusinessOrderList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.businessOrderListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.businessOrderIds = {}
        local _etype79, _size76 = iprot:readListBegin()
        for _i=1,_size76 do
          local _elem80 = iprot:readString()
          table.insert(self.businessOrderIds, _elem80)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BusinessOrderList:write(oprot)
  oprot:writeStructBegin('BusinessOrderList')
  if self.businessOrderListId ~= nil then
    oprot:writeFieldBegin('businessOrderListId', TType.STRING, 1)
    oprot:writeString(self.businessOrderListId)
    oprot:writeFieldEnd()
  end
  if self.businessOrderIds ~= nil then
    oprot:writeFieldBegin('businessOrderIds', TType.LIST, 5)
    oprot:writeListBegin(TType.STRING, #self.businessOrderIds)
    for _,iter81 in ipairs(self.businessOrderIds) do
      oprot:writeString(iter81)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Business = __TObject:new{
  businessId,
  buildingId,
  evolutionMaterialId,
  evolveCostCurrencyId,
  evolveCost,
  npcId
}

function Business:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.businessId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.evolutionMaterialId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.evolveCostCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.evolveCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.npcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Business:write(oprot)
  oprot:writeStructBegin('Business')
  if self.businessId ~= nil then
    oprot:writeFieldBegin('businessId', TType.STRING, 1)
    oprot:writeString(self.businessId)
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 2)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.evolutionMaterialId ~= nil then
    oprot:writeFieldBegin('evolutionMaterialId', TType.STRING, 11)
    oprot:writeString(self.evolutionMaterialId)
    oprot:writeFieldEnd()
  end
  if self.evolveCostCurrencyId ~= nil then
    oprot:writeFieldBegin('evolveCostCurrencyId', TType.STRING, 40)
    oprot:writeString(self.evolveCostCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.evolveCost ~= nil then
    oprot:writeFieldBegin('evolveCost', TType.I32, 41)
    oprot:writeI32(self.evolveCost)
    oprot:writeFieldEnd()
  end
  if self.npcId ~= nil then
    oprot:writeFieldBegin('npcId', TType.STRING, 50)
    oprot:writeString(self.npcId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BusinessOrder = __TObject:new{
  orderId,
  sortIndex,
  recipeId,
  orderCostCurrencyId,
  orderCost,
  orderTimeBasis,
  earnedCurrencyId,
  earned,
  rushCostCurrencyId,
  rushCostBasis,
  palPointsProduced,
  rushBonusPalPoints,
  xpProduced,
  socialGoldCost,
  gemCost,
  guildMatePalPointsProduced,
  guildMatePalPointsRushBonus,
  lootListId
}

function BusinessOrder:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.orderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.sortIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.recipeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.orderCostCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.orderCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.orderTimeBasis = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.earnedCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.I32 then
        self.earned = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.rushCostCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.rushCostBasis = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.I32 then
        self.palPointsProduced = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.I32 then
        self.rushBonusPalPoints = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.I32 then
        self.xpProduced = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.I32 then
        self.socialGoldCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 36 then
      if ftype == TType.I32 then
        self.gemCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.guildMatePalPointsProduced = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.guildMatePalPointsRushBonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.lootListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BusinessOrder:write(oprot)
  oprot:writeStructBegin('BusinessOrder')
  if self.orderId ~= nil then
    oprot:writeFieldBegin('orderId', TType.STRING, 1)
    oprot:writeString(self.orderId)
    oprot:writeFieldEnd()
  end
  if self.sortIndex ~= nil then
    oprot:writeFieldBegin('sortIndex', TType.I32, 3)
    oprot:writeI32(self.sortIndex)
    oprot:writeFieldEnd()
  end
  if self.recipeId ~= nil then
    oprot:writeFieldBegin('recipeId', TType.STRING, 12)
    oprot:writeString(self.recipeId)
    oprot:writeFieldEnd()
  end
  if self.orderCostCurrencyId ~= nil then
    oprot:writeFieldBegin('orderCostCurrencyId', TType.STRING, 21)
    oprot:writeString(self.orderCostCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.orderCost ~= nil then
    oprot:writeFieldBegin('orderCost', TType.I32, 22)
    oprot:writeI32(self.orderCost)
    oprot:writeFieldEnd()
  end
  if self.orderTimeBasis ~= nil then
    oprot:writeFieldBegin('orderTimeBasis', TType.I32, 23)
    oprot:writeI32(self.orderTimeBasis)
    oprot:writeFieldEnd()
  end
  if self.earnedCurrencyId ~= nil then
    oprot:writeFieldBegin('earnedCurrencyId', TType.STRING, 24)
    oprot:writeString(self.earnedCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.earned ~= nil then
    oprot:writeFieldBegin('earned', TType.I32, 25)
    oprot:writeI32(self.earned)
    oprot:writeFieldEnd()
  end
  if self.rushCostCurrencyId ~= nil then
    oprot:writeFieldBegin('rushCostCurrencyId', TType.STRING, 30)
    oprot:writeString(self.rushCostCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.rushCostBasis ~= nil then
    oprot:writeFieldBegin('rushCostBasis', TType.I32, 31)
    oprot:writeI32(self.rushCostBasis)
    oprot:writeFieldEnd()
  end
  if self.palPointsProduced ~= nil then
    oprot:writeFieldBegin('palPointsProduced', TType.I32, 32)
    oprot:writeI32(self.palPointsProduced)
    oprot:writeFieldEnd()
  end
  if self.rushBonusPalPoints ~= nil then
    oprot:writeFieldBegin('rushBonusPalPoints', TType.I32, 33)
    oprot:writeI32(self.rushBonusPalPoints)
    oprot:writeFieldEnd()
  end
  if self.xpProduced ~= nil then
    oprot:writeFieldBegin('xpProduced', TType.I32, 34)
    oprot:writeI32(self.xpProduced)
    oprot:writeFieldEnd()
  end
  if self.socialGoldCost ~= nil then
    oprot:writeFieldBegin('socialGoldCost', TType.I32, 35)
    oprot:writeI32(self.socialGoldCost)
    oprot:writeFieldEnd()
  end
  if self.gemCost ~= nil then
    oprot:writeFieldBegin('gemCost', TType.I32, 36)
    oprot:writeI32(self.gemCost)
    oprot:writeFieldEnd()
  end
  if self.guildMatePalPointsProduced ~= nil then
    oprot:writeFieldBegin('guildMatePalPointsProduced', TType.I32, 40)
    oprot:writeI32(self.guildMatePalPointsProduced)
    oprot:writeFieldEnd()
  end
  if self.guildMatePalPointsRushBonus ~= nil then
    oprot:writeFieldBegin('guildMatePalPointsRushBonus', TType.I32, 41)
    oprot:writeI32(self.guildMatePalPointsRushBonus)
    oprot:writeFieldEnd()
  end
  if self.lootListId ~= nil then
    oprot:writeFieldBegin('lootListId', TType.STRING, 50)
    oprot:writeString(self.lootListId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NewBusinessOrder = __TObject:new{
  orderId,
  businessId,
  eventIds,
  eventPhases,
  sortIndex,
  recipeId,
  orderCostCurrencyId,
  orderCost,
  orderTimeBasis,
  earnedCurrencyId,
  earned,
  palPointsProduced,
  rushBonusPalPoints,
  xpProduced,
  guildMatePalPointsProduced,
  guildMatePalPointsRushBonus,
  lootListId
}

function NewBusinessOrder:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.orderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.businessId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype85, _size82 = iprot:readListBegin()
        for _i=1,_size82 do
          local _elem86 = iprot:readString()
          table.insert(self.eventIds, _elem86)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.sortIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.recipeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.orderCostCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.orderCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.orderTimeBasis = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.earnedCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.I32 then
        self.earned = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.I32 then
        self.palPointsProduced = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.I32 then
        self.rushBonusPalPoints = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.I32 then
        self.xpProduced = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.guildMatePalPointsProduced = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.guildMatePalPointsRushBonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.lootListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NewBusinessOrder:write(oprot)
  oprot:writeStructBegin('NewBusinessOrder')
  if self.orderId ~= nil then
    oprot:writeFieldBegin('orderId', TType.STRING, 1)
    oprot:writeString(self.orderId)
    oprot:writeFieldEnd()
  end
  if self.businessId ~= nil then
    oprot:writeFieldBegin('businessId', TType.STRING, 2)
    oprot:writeString(self.businessId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter87 in ipairs(self.eventIds) do
      oprot:writeString(iter87)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 4)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.sortIndex ~= nil then
    oprot:writeFieldBegin('sortIndex', TType.I32, 10)
    oprot:writeI32(self.sortIndex)
    oprot:writeFieldEnd()
  end
  if self.recipeId ~= nil then
    oprot:writeFieldBegin('recipeId', TType.STRING, 12)
    oprot:writeString(self.recipeId)
    oprot:writeFieldEnd()
  end
  if self.orderCostCurrencyId ~= nil then
    oprot:writeFieldBegin('orderCostCurrencyId', TType.STRING, 21)
    oprot:writeString(self.orderCostCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.orderCost ~= nil then
    oprot:writeFieldBegin('orderCost', TType.I32, 22)
    oprot:writeI32(self.orderCost)
    oprot:writeFieldEnd()
  end
  if self.orderTimeBasis ~= nil then
    oprot:writeFieldBegin('orderTimeBasis', TType.I32, 23)
    oprot:writeI32(self.orderTimeBasis)
    oprot:writeFieldEnd()
  end
  if self.earnedCurrencyId ~= nil then
    oprot:writeFieldBegin('earnedCurrencyId', TType.STRING, 24)
    oprot:writeString(self.earnedCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.earned ~= nil then
    oprot:writeFieldBegin('earned', TType.I32, 25)
    oprot:writeI32(self.earned)
    oprot:writeFieldEnd()
  end
  if self.palPointsProduced ~= nil then
    oprot:writeFieldBegin('palPointsProduced', TType.I32, 32)
    oprot:writeI32(self.palPointsProduced)
    oprot:writeFieldEnd()
  end
  if self.rushBonusPalPoints ~= nil then
    oprot:writeFieldBegin('rushBonusPalPoints', TType.I32, 33)
    oprot:writeI32(self.rushBonusPalPoints)
    oprot:writeFieldEnd()
  end
  if self.xpProduced ~= nil then
    oprot:writeFieldBegin('xpProduced', TType.I32, 34)
    oprot:writeI32(self.xpProduced)
    oprot:writeFieldEnd()
  end
  if self.guildMatePalPointsProduced ~= nil then
    oprot:writeFieldBegin('guildMatePalPointsProduced', TType.I32, 40)
    oprot:writeI32(self.guildMatePalPointsProduced)
    oprot:writeFieldEnd()
  end
  if self.guildMatePalPointsRushBonus ~= nil then
    oprot:writeFieldBegin('guildMatePalPointsRushBonus', TType.I32, 41)
    oprot:writeI32(self.guildMatePalPointsRushBonus)
    oprot:writeFieldEnd()
  end
  if self.lootListId ~= nil then
    oprot:writeFieldBegin('lootListId', TType.STRING, 50)
    oprot:writeString(self.lootListId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Deco = __TObject:new{
  decoId,
  buildingId,
  bonusCurrencyId,
  tier1,
  tier1Bonus,
  tier2,
  tier2Bonus,
  tier3,
  tier3Bonus,
  roadEditorGroup,
  isRiver
}

function Deco:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.decoId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.bonusCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.tier1 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.tier1Bonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.tier2 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.tier2Bonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.I32 then
        self.tier3 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.I32 then
        self.tier3Bonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.roadEditorGroup = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.BOOL then
        self.isRiver = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Deco:write(oprot)
  oprot:writeStructBegin('Deco')
  if self.decoId ~= nil then
    oprot:writeFieldBegin('decoId', TType.STRING, 1)
    oprot:writeString(self.decoId)
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 10)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.bonusCurrencyId ~= nil then
    oprot:writeFieldBegin('bonusCurrencyId', TType.STRING, 20)
    oprot:writeString(self.bonusCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.tier1 ~= nil then
    oprot:writeFieldBegin('tier1', TType.I32, 21)
    oprot:writeI32(self.tier1)
    oprot:writeFieldEnd()
  end
  if self.tier1Bonus ~= nil then
    oprot:writeFieldBegin('tier1Bonus', TType.I32, 22)
    oprot:writeI32(self.tier1Bonus)
    oprot:writeFieldEnd()
  end
  if self.tier2 ~= nil then
    oprot:writeFieldBegin('tier2', TType.I32, 23)
    oprot:writeI32(self.tier2)
    oprot:writeFieldEnd()
  end
  if self.tier2Bonus ~= nil then
    oprot:writeFieldBegin('tier2Bonus', TType.I32, 24)
    oprot:writeI32(self.tier2Bonus)
    oprot:writeFieldEnd()
  end
  if self.tier3 ~= nil then
    oprot:writeFieldBegin('tier3', TType.I32, 25)
    oprot:writeI32(self.tier3)
    oprot:writeFieldEnd()
  end
  if self.tier3Bonus ~= nil then
    oprot:writeFieldBegin('tier3Bonus', TType.I32, 26)
    oprot:writeI32(self.tier3Bonus)
    oprot:writeFieldEnd()
  end
  if self.roadEditorGroup ~= nil then
    oprot:writeFieldBegin('roadEditorGroup', TType.I32, 30)
    oprot:writeI32(self.roadEditorGroup)
    oprot:writeFieldEnd()
  end
  if self.isRiver ~= nil then
    oprot:writeFieldBegin('isRiver', TType.BOOL, 50)
    oprot:writeBool(self.isRiver)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Blocker = __TObject:new{
  buildingId,
  removeCurrencyId,
  removeCost
}

function Blocker:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.removeCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.removeCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Blocker:write(oprot)
  oprot:writeStructBegin('Blocker')
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 1)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.removeCurrencyId ~= nil then
    oprot:writeFieldBegin('removeCurrencyId', TType.STRING, 2)
    oprot:writeString(self.removeCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.removeCost ~= nil then
    oprot:writeFieldBegin('removeCost', TType.I32, 3)
    oprot:writeI32(self.removeCost)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

WeightedLoot = __TObject:new{
  lootListId,
  itemId,
  itemType,
  eventId,
  itemAmount,
  probability,
  bonusProbability,
  bonusMultiplier,
  probabilityMultiplier
}

function WeightedLoot:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.lootListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.itemType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.eventId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.itemAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.DOUBLE then
        self.probability = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.DOUBLE then
        self.bonusProbability = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.DOUBLE then
        self.bonusMultiplier = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.DOUBLE then
        self.probabilityMultiplier = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function WeightedLoot:write(oprot)
  oprot:writeStructBegin('WeightedLoot')
  if self.lootListId ~= nil then
    oprot:writeFieldBegin('lootListId', TType.STRING, 1)
    oprot:writeString(self.lootListId)
    oprot:writeFieldEnd()
  end
  if self.itemId ~= nil then
    oprot:writeFieldBegin('itemId', TType.STRING, 2)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  if self.itemType ~= nil then
    oprot:writeFieldBegin('itemType', TType.I32, 3)
    oprot:writeI32(self.itemType)
    oprot:writeFieldEnd()
  end
  if self.eventId ~= nil then
    oprot:writeFieldBegin('eventId', TType.STRING, 4)
    oprot:writeString(self.eventId)
    oprot:writeFieldEnd()
  end
  if self.itemAmount ~= nil then
    oprot:writeFieldBegin('itemAmount', TType.I32, 10)
    oprot:writeI32(self.itemAmount)
    oprot:writeFieldEnd()
  end
  if self.probability ~= nil then
    oprot:writeFieldBegin('probability', TType.DOUBLE, 20)
    oprot:writeDouble(self.probability)
    oprot:writeFieldEnd()
  end
  if self.bonusProbability ~= nil then
    oprot:writeFieldBegin('bonusProbability', TType.DOUBLE, 21)
    oprot:writeDouble(self.bonusProbability)
    oprot:writeFieldEnd()
  end
  if self.bonusMultiplier ~= nil then
    oprot:writeFieldBegin('bonusMultiplier', TType.DOUBLE, 22)
    oprot:writeDouble(self.bonusMultiplier)
    oprot:writeFieldEnd()
  end
  if self.probabilityMultiplier ~= nil then
    oprot:writeFieldBegin('probabilityMultiplier', TType.DOUBLE, 30)
    oprot:writeDouble(self.probabilityMultiplier)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GachaGroup = __TObject:new{
  gachaGroupId,
  index,
  gachaOffers,
  description,
  newDisplay,
  cardImage,
  badge,
  overlayImage,
  bundleId,
  newDescription,
  detailCardBg9,
  detailCardHaveRays,
  detailCardBizAreaBg,
  detailCardBizAreaTextBg,
  badge2,
  badge2Sticker,
  moduleImage,
  moduleCakeboxImage,
  moduleRewardBuildingId,
  moduleRewardImage,
  detailCardFullscreenBg,
  detailCardFullscreenBgBottom,
  cardCountTextSingular,
  cardCountTextPlural
}

function GachaGroup:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.gachaGroupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.index = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.gachaOffers = {}
        local _etype91, _size88 = iprot:readListBegin()
        for _i=1,_size88 do
          local _elem92 = iprot:readString()
          table.insert(self.gachaOffers, _elem92)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.description = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.cardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.badge = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.overlayImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRUCT then
        self.newDescription = LocalizedString:new{}
        self.newDescription:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.detailCardBg9 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.detailCardHaveRays = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.detailCardBizAreaBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRING then
        self.detailCardBizAreaTextBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRUCT then
        self.badge2 = LocalizedString:new{}
        self.badge2:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.badge2Sticker = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.moduleImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRING then
        self.moduleCakeboxImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.STRING then
        self.moduleRewardBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.STRING then
        self.moduleRewardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.STRING then
        self.detailCardFullscreenBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 55 then
      if ftype == TType.STRING then
        self.detailCardFullscreenBgBottom = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 56 then
      if ftype == TType.STRUCT then
        self.cardCountTextSingular = LocalizedString:new{}
        self.cardCountTextSingular:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 57 then
      if ftype == TType.STRUCT then
        self.cardCountTextPlural = LocalizedString:new{}
        self.cardCountTextPlural:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GachaGroup:write(oprot)
  oprot:writeStructBegin('GachaGroup')
  if self.gachaGroupId ~= nil then
    oprot:writeFieldBegin('gachaGroupId', TType.STRING, 1)
    oprot:writeString(self.gachaGroupId)
    oprot:writeFieldEnd()
  end
  if self.index ~= nil then
    oprot:writeFieldBegin('index', TType.I32, 2)
    oprot:writeI32(self.index)
    oprot:writeFieldEnd()
  end
  if self.gachaOffers ~= nil then
    oprot:writeFieldBegin('gachaOffers', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.gachaOffers)
    for _,iter93 in ipairs(self.gachaOffers) do
      oprot:writeString(iter93)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRING, 11)
    oprot:writeString(self.description)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 12)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.cardImage ~= nil then
    oprot:writeFieldBegin('cardImage', TType.STRING, 14)
    oprot:writeString(self.cardImage)
    oprot:writeFieldEnd()
  end
  if self.badge ~= nil then
    oprot:writeFieldBegin('badge', TType.STRING, 15)
    oprot:writeString(self.badge)
    oprot:writeFieldEnd()
  end
  if self.overlayImage ~= nil then
    oprot:writeFieldBegin('overlayImage', TType.STRING, 16)
    oprot:writeString(self.overlayImage)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 20)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.newDescription ~= nil then
    oprot:writeFieldBegin('newDescription', TType.STRUCT, 21)
    self.newDescription:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.detailCardBg9 ~= nil then
    oprot:writeFieldBegin('detailCardBg9', TType.STRING, 30)
    oprot:writeString(self.detailCardBg9)
    oprot:writeFieldEnd()
  end
  if self.detailCardHaveRays ~= nil then
    oprot:writeFieldBegin('detailCardHaveRays', TType.BOOL, 31)
    oprot:writeBool(self.detailCardHaveRays)
    oprot:writeFieldEnd()
  end
  if self.detailCardBizAreaBg ~= nil then
    oprot:writeFieldBegin('detailCardBizAreaBg', TType.STRING, 32)
    oprot:writeString(self.detailCardBizAreaBg)
    oprot:writeFieldEnd()
  end
  if self.detailCardBizAreaTextBg ~= nil then
    oprot:writeFieldBegin('detailCardBizAreaTextBg', TType.STRING, 33)
    oprot:writeString(self.detailCardBizAreaTextBg)
    oprot:writeFieldEnd()
  end
  if self.badge2 ~= nil then
    oprot:writeFieldBegin('badge2', TType.STRUCT, 40)
    self.badge2:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.badge2Sticker ~= nil then
    oprot:writeFieldBegin('badge2Sticker', TType.STRING, 41)
    oprot:writeString(self.badge2Sticker)
    oprot:writeFieldEnd()
  end
  if self.moduleImage ~= nil then
    oprot:writeFieldBegin('moduleImage', TType.STRING, 50)
    oprot:writeString(self.moduleImage)
    oprot:writeFieldEnd()
  end
  if self.moduleCakeboxImage ~= nil then
    oprot:writeFieldBegin('moduleCakeboxImage', TType.STRING, 51)
    oprot:writeString(self.moduleCakeboxImage)
    oprot:writeFieldEnd()
  end
  if self.moduleRewardBuildingId ~= nil then
    oprot:writeFieldBegin('moduleRewardBuildingId', TType.STRING, 52)
    oprot:writeString(self.moduleRewardBuildingId)
    oprot:writeFieldEnd()
  end
  if self.moduleRewardImage ~= nil then
    oprot:writeFieldBegin('moduleRewardImage', TType.STRING, 53)
    oprot:writeString(self.moduleRewardImage)
    oprot:writeFieldEnd()
  end
  if self.detailCardFullscreenBg ~= nil then
    oprot:writeFieldBegin('detailCardFullscreenBg', TType.STRING, 54)
    oprot:writeString(self.detailCardFullscreenBg)
    oprot:writeFieldEnd()
  end
  if self.detailCardFullscreenBgBottom ~= nil then
    oprot:writeFieldBegin('detailCardFullscreenBgBottom', TType.STRING, 55)
    oprot:writeString(self.detailCardFullscreenBgBottom)
    oprot:writeFieldEnd()
  end
  if self.cardCountTextSingular ~= nil then
    oprot:writeFieldBegin('cardCountTextSingular', TType.STRUCT, 56)
    self.cardCountTextSingular:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.cardCountTextPlural ~= nil then
    oprot:writeFieldBegin('cardCountTextPlural', TType.STRUCT, 57)
    self.cardCountTextPlural:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GachaBanner = __TObject:new{
  gachaBannerId,
  order,
  display,
  image,
  enabled,
  targetGachaGroupId,
  messageAction,
  messageActionParameter,
  bundleId,
  targetGachaOfferId,
  eventIds,
  eventPhases,
  showRank,
  hideRank
}

function GachaBanner:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.gachaBannerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.order = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.image = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.enabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.targetGachaGroupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.messageAction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.messageActionParameter = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.targetGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype97, _size94 = iprot:readListBegin()
        for _i=1,_size94 do
          local _elem98 = iprot:readString()
          table.insert(self.eventIds, _elem98)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GachaBanner:write(oprot)
  oprot:writeStructBegin('GachaBanner')
  if self.gachaBannerId ~= nil then
    oprot:writeFieldBegin('gachaBannerId', TType.STRING, 1)
    oprot:writeString(self.gachaBannerId)
    oprot:writeFieldEnd()
  end
  if self.order ~= nil then
    oprot:writeFieldBegin('order', TType.I32, 2)
    oprot:writeI32(self.order)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 3)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.image ~= nil then
    oprot:writeFieldBegin('image', TType.STRING, 4)
    oprot:writeString(self.image)
    oprot:writeFieldEnd()
  end
  if self.enabled ~= nil then
    oprot:writeFieldBegin('enabled', TType.BOOL, 5)
    oprot:writeBool(self.enabled)
    oprot:writeFieldEnd()
  end
  if self.targetGachaGroupId ~= nil then
    oprot:writeFieldBegin('targetGachaGroupId', TType.STRING, 10)
    oprot:writeString(self.targetGachaGroupId)
    oprot:writeFieldEnd()
  end
  if self.messageAction ~= nil then
    oprot:writeFieldBegin('messageAction', TType.I32, 11)
    oprot:writeI32(self.messageAction)
    oprot:writeFieldEnd()
  end
  if self.messageActionParameter ~= nil then
    oprot:writeFieldBegin('messageActionParameter', TType.STRING, 12)
    oprot:writeString(self.messageActionParameter)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 20)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.targetGachaOfferId ~= nil then
    oprot:writeFieldBegin('targetGachaOfferId', TType.STRING, 21)
    oprot:writeString(self.targetGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 30)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter99 in ipairs(self.eventIds) do
      oprot:writeString(iter99)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 31)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 32)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 33)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GachaOffer = __TObject:new{
  gachaOfferId,
  costCurrencyId,
  costAmount,
  gachaPackIds,
  gachaPackSpins,
  unlockGachaOfferIds,
  maxSpins,
  maxFreeSpinsPerDay,
  freeSpinCooldown,
  requiredLevelId,
  cakeboxLevelDotId,
  boxImage,
  openBoxImage,
  purchaseSound,
  notifyFreeSpinIndex,
  eventLockId,
  doesNotRestock,
  display,
  description,
  storeIndex,
  badge,
  badge2,
  badge2Sticker,
  storeCardImage,
  storeCakeboxImage,
  storeRewardBuildingId,
  storeRewardImage,
  detailCardFullscreenBg,
  detailCardFullscreenBgBottom,
  storeCardCountTextSingular,
  storeCardCountTextPlural,
  eventIds,
  eventPhases,
  showRank,
  hideRank,
  offerBackgroundImage,
  cardImage,
  productIcon,
  ribbonImage,
  ribbonText,
  showBuildingIds,
  showTierInfo,
  tierYouGetBuildingId,
  tierTopRewardBuildingId,
  tierYouGetText,
  tierTopRewardText,
  tierBannerText,
  tierBannerImage,
  tierRarityText,
  detailCardHaveRays,
  discountedPrice,
  upsellInBuildMenu,
  floorClearRewardCurrencyIds,
  floorClearRewardCurrencyAmounts,
  detailScreenHeader,
  eventStoreImage,
  iapProductId,
  bundleId,
  gradientColor1,
  gradientColor2,
  baseTerrainImage,
  featureImage,
  unlockRank,
  showGuildRank,
  hideGuildRank,
  unlockGuildRank
}

function GachaOffer:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.gachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.costCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.costAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.gachaPackIds = {}
        local _etype103, _size100 = iprot:readListBegin()
        for _i=1,_size100 do
          local _elem104 = iprot:readString()
          table.insert(self.gachaPackIds, _elem104)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.gachaPackSpins = {}
        local _etype108, _size105 = iprot:readListBegin()
        for _i=1,_size105 do
          local _elem109 = iprot:readI32()
          table.insert(self.gachaPackSpins, _elem109)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.LIST then
        self.unlockGachaOfferIds = {}
        local _etype113, _size110 = iprot:readListBegin()
        for _i=1,_size110 do
          local _elem114 = iprot:readString()
          table.insert(self.unlockGachaOfferIds, _elem114)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.maxSpins = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.maxFreeSpinsPerDay = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.freeSpinCooldown = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRING then
        self.requiredLevelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.cakeboxLevelDotId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.boxImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.openBoxImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.purchaseSound = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.notifyFreeSpinIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRING then
        self.eventLockId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.BOOL then
        self.doesNotRestock = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.STRUCT then
        self.description = LocalizedString:new{}
        self.description:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 55 then
      if ftype == TType.I32 then
        self.storeIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 56 then
      if ftype == TType.STRUCT then
        self.badge = LocalizedString:new{}
        self.badge:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 57 then
      if ftype == TType.STRUCT then
        self.badge2 = LocalizedString:new{}
        self.badge2:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 58 then
      if ftype == TType.STRING then
        self.badge2Sticker = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 59 then
      if ftype == TType.STRING then
        self.storeCardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.storeCakeboxImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRING then
        self.storeRewardBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.STRING then
        self.storeRewardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 63 then
      if ftype == TType.STRING then
        self.detailCardFullscreenBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 64 then
      if ftype == TType.STRING then
        self.detailCardFullscreenBgBottom = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 65 then
      if ftype == TType.STRUCT then
        self.storeCardCountTextSingular = LocalizedString:new{}
        self.storeCardCountTextSingular:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 66 then
      if ftype == TType.STRUCT then
        self.storeCardCountTextPlural = LocalizedString:new{}
        self.storeCardCountTextPlural:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype118, _size115 = iprot:readListBegin()
        for _i=1,_size115 do
          local _elem119 = iprot:readString()
          table.insert(self.eventIds, _elem119)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 72 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 73 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 74 then
      if ftype == TType.STRING then
        self.offerBackgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 75 then
      if ftype == TType.STRING then
        self.cardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 76 then
      if ftype == TType.STRING then
        self.productIcon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 77 then
      if ftype == TType.STRING then
        self.ribbonImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 78 then
      if ftype == TType.STRUCT then
        self.ribbonText = LocalizedString:new{}
        self.ribbonText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.LIST then
        self.showBuildingIds = {}
        local _etype123, _size120 = iprot:readListBegin()
        for _i=1,_size120 do
          local _elem124 = iprot:readString()
          table.insert(self.showBuildingIds, _elem124)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.BOOL then
        self.showTierInfo = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 82 then
      if ftype == TType.STRING then
        self.tierYouGetBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 83 then
      if ftype == TType.STRING then
        self.tierTopRewardBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 84 then
      if ftype == TType.STRUCT then
        self.tierYouGetText = LocalizedString:new{}
        self.tierYouGetText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 85 then
      if ftype == TType.STRUCT then
        self.tierTopRewardText = LocalizedString:new{}
        self.tierTopRewardText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 86 then
      if ftype == TType.STRUCT then
        self.tierBannerText = LocalizedString:new{}
        self.tierBannerText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 87 then
      if ftype == TType.STRING then
        self.tierBannerImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 79 then
      if ftype == TType.STRUCT then
        self.tierRarityText = LocalizedString:new{}
        self.tierRarityText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 88 then
      if ftype == TType.BOOL then
        self.detailCardHaveRays = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 89 then
      if ftype == TType.I32 then
        self.discountedPrice = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 90 then
      if ftype == TType.BOOL then
        self.upsellInBuildMenu = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.LIST then
        self.floorClearRewardCurrencyIds = {}
        local _etype128, _size125 = iprot:readListBegin()
        for _i=1,_size125 do
          local _elem129 = iprot:readString()
          table.insert(self.floorClearRewardCurrencyIds, _elem129)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 101 then
      if ftype == TType.LIST then
        self.floorClearRewardCurrencyAmounts = {}
        local _etype133, _size130 = iprot:readListBegin()
        for _i=1,_size130 do
          local _elem134 = iprot:readI32()
          table.insert(self.floorClearRewardCurrencyAmounts, _elem134)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 105 then
      if ftype == TType.STRUCT then
        self.detailScreenHeader = LocalizedString:new{}
        self.detailScreenHeader:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.STRING then
        self.eventStoreImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 200 then
      if ftype == TType.STRING then
        self.iapProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 210 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 220 then
      if ftype == TType.STRING then
        self.gradientColor1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 221 then
      if ftype == TType.STRING then
        self.gradientColor2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 222 then
      if ftype == TType.STRING then
        self.baseTerrainImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 223 then
      if ftype == TType.STRING then
        self.featureImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 300 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 301 then
      if ftype == TType.I32 then
        self.showGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 302 then
      if ftype == TType.I32 then
        self.hideGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 303 then
      if ftype == TType.I32 then
        self.unlockGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GachaOffer:write(oprot)
  oprot:writeStructBegin('GachaOffer')
  if self.gachaOfferId ~= nil then
    oprot:writeFieldBegin('gachaOfferId', TType.STRING, 1)
    oprot:writeString(self.gachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.costCurrencyId ~= nil then
    oprot:writeFieldBegin('costCurrencyId', TType.STRING, 10)
    oprot:writeString(self.costCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.costAmount ~= nil then
    oprot:writeFieldBegin('costAmount', TType.I32, 11)
    oprot:writeI32(self.costAmount)
    oprot:writeFieldEnd()
  end
  if self.gachaPackIds ~= nil then
    oprot:writeFieldBegin('gachaPackIds', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.gachaPackIds)
    for _,iter135 in ipairs(self.gachaPackIds) do
      oprot:writeString(iter135)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.gachaPackSpins ~= nil then
    oprot:writeFieldBegin('gachaPackSpins', TType.LIST, 13)
    oprot:writeListBegin(TType.I32, #self.gachaPackSpins)
    for _,iter136 in ipairs(self.gachaPackSpins) do
      oprot:writeI32(iter136)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.unlockGachaOfferIds ~= nil then
    oprot:writeFieldBegin('unlockGachaOfferIds', TType.LIST, 14)
    oprot:writeListBegin(TType.STRING, #self.unlockGachaOfferIds)
    for _,iter137 in ipairs(self.unlockGachaOfferIds) do
      oprot:writeString(iter137)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.maxSpins ~= nil then
    oprot:writeFieldBegin('maxSpins', TType.I32, 15)
    oprot:writeI32(self.maxSpins)
    oprot:writeFieldEnd()
  end
  if self.maxFreeSpinsPerDay ~= nil then
    oprot:writeFieldBegin('maxFreeSpinsPerDay', TType.I32, 16)
    oprot:writeI32(self.maxFreeSpinsPerDay)
    oprot:writeFieldEnd()
  end
  if self.freeSpinCooldown ~= nil then
    oprot:writeFieldBegin('freeSpinCooldown', TType.I32, 17)
    oprot:writeI32(self.freeSpinCooldown)
    oprot:writeFieldEnd()
  end
  if self.requiredLevelId ~= nil then
    oprot:writeFieldBegin('requiredLevelId', TType.STRING, 18)
    oprot:writeString(self.requiredLevelId)
    oprot:writeFieldEnd()
  end
  if self.cakeboxLevelDotId ~= nil then
    oprot:writeFieldBegin('cakeboxLevelDotId', TType.STRING, 20)
    oprot:writeString(self.cakeboxLevelDotId)
    oprot:writeFieldEnd()
  end
  if self.boxImage ~= nil then
    oprot:writeFieldBegin('boxImage', TType.STRING, 30)
    oprot:writeString(self.boxImage)
    oprot:writeFieldEnd()
  end
  if self.openBoxImage ~= nil then
    oprot:writeFieldBegin('openBoxImage', TType.STRING, 31)
    oprot:writeString(self.openBoxImage)
    oprot:writeFieldEnd()
  end
  if self.purchaseSound ~= nil then
    oprot:writeFieldBegin('purchaseSound', TType.STRING, 40)
    oprot:writeString(self.purchaseSound)
    oprot:writeFieldEnd()
  end
  if self.notifyFreeSpinIndex ~= nil then
    oprot:writeFieldBegin('notifyFreeSpinIndex', TType.I32, 50)
    oprot:writeI32(self.notifyFreeSpinIndex)
    oprot:writeFieldEnd()
  end
  if self.eventLockId ~= nil then
    oprot:writeFieldBegin('eventLockId', TType.STRING, 51)
    oprot:writeString(self.eventLockId)
    oprot:writeFieldEnd()
  end
  if self.doesNotRestock ~= nil then
    oprot:writeFieldBegin('doesNotRestock', TType.BOOL, 52)
    oprot:writeBool(self.doesNotRestock)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 53)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRUCT, 54)
    self.description:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.storeIndex ~= nil then
    oprot:writeFieldBegin('storeIndex', TType.I32, 55)
    oprot:writeI32(self.storeIndex)
    oprot:writeFieldEnd()
  end
  if self.badge ~= nil then
    oprot:writeFieldBegin('badge', TType.STRUCT, 56)
    self.badge:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.badge2 ~= nil then
    oprot:writeFieldBegin('badge2', TType.STRUCT, 57)
    self.badge2:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.badge2Sticker ~= nil then
    oprot:writeFieldBegin('badge2Sticker', TType.STRING, 58)
    oprot:writeString(self.badge2Sticker)
    oprot:writeFieldEnd()
  end
  if self.storeCardImage ~= nil then
    oprot:writeFieldBegin('storeCardImage', TType.STRING, 59)
    oprot:writeString(self.storeCardImage)
    oprot:writeFieldEnd()
  end
  if self.storeCakeboxImage ~= nil then
    oprot:writeFieldBegin('storeCakeboxImage', TType.STRING, 60)
    oprot:writeString(self.storeCakeboxImage)
    oprot:writeFieldEnd()
  end
  if self.storeRewardBuildingId ~= nil then
    oprot:writeFieldBegin('storeRewardBuildingId', TType.STRING, 61)
    oprot:writeString(self.storeRewardBuildingId)
    oprot:writeFieldEnd()
  end
  if self.storeRewardImage ~= nil then
    oprot:writeFieldBegin('storeRewardImage', TType.STRING, 62)
    oprot:writeString(self.storeRewardImage)
    oprot:writeFieldEnd()
  end
  if self.detailCardFullscreenBg ~= nil then
    oprot:writeFieldBegin('detailCardFullscreenBg', TType.STRING, 63)
    oprot:writeString(self.detailCardFullscreenBg)
    oprot:writeFieldEnd()
  end
  if self.detailCardFullscreenBgBottom ~= nil then
    oprot:writeFieldBegin('detailCardFullscreenBgBottom', TType.STRING, 64)
    oprot:writeString(self.detailCardFullscreenBgBottom)
    oprot:writeFieldEnd()
  end
  if self.storeCardCountTextSingular ~= nil then
    oprot:writeFieldBegin('storeCardCountTextSingular', TType.STRUCT, 65)
    self.storeCardCountTextSingular:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.storeCardCountTextPlural ~= nil then
    oprot:writeFieldBegin('storeCardCountTextPlural', TType.STRUCT, 66)
    self.storeCardCountTextPlural:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 70)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter138 in ipairs(self.eventIds) do
      oprot:writeString(iter138)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 71)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 72)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 73)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.offerBackgroundImage ~= nil then
    oprot:writeFieldBegin('offerBackgroundImage', TType.STRING, 74)
    oprot:writeString(self.offerBackgroundImage)
    oprot:writeFieldEnd()
  end
  if self.cardImage ~= nil then
    oprot:writeFieldBegin('cardImage', TType.STRING, 75)
    oprot:writeString(self.cardImage)
    oprot:writeFieldEnd()
  end
  if self.productIcon ~= nil then
    oprot:writeFieldBegin('productIcon', TType.STRING, 76)
    oprot:writeString(self.productIcon)
    oprot:writeFieldEnd()
  end
  if self.ribbonImage ~= nil then
    oprot:writeFieldBegin('ribbonImage', TType.STRING, 77)
    oprot:writeString(self.ribbonImage)
    oprot:writeFieldEnd()
  end
  if self.ribbonText ~= nil then
    oprot:writeFieldBegin('ribbonText', TType.STRUCT, 78)
    self.ribbonText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.showBuildingIds ~= nil then
    oprot:writeFieldBegin('showBuildingIds', TType.LIST, 80)
    oprot:writeListBegin(TType.STRING, #self.showBuildingIds)
    for _,iter139 in ipairs(self.showBuildingIds) do
      oprot:writeString(iter139)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.showTierInfo ~= nil then
    oprot:writeFieldBegin('showTierInfo', TType.BOOL, 81)
    oprot:writeBool(self.showTierInfo)
    oprot:writeFieldEnd()
  end
  if self.tierYouGetBuildingId ~= nil then
    oprot:writeFieldBegin('tierYouGetBuildingId', TType.STRING, 82)
    oprot:writeString(self.tierYouGetBuildingId)
    oprot:writeFieldEnd()
  end
  if self.tierTopRewardBuildingId ~= nil then
    oprot:writeFieldBegin('tierTopRewardBuildingId', TType.STRING, 83)
    oprot:writeString(self.tierTopRewardBuildingId)
    oprot:writeFieldEnd()
  end
  if self.tierYouGetText ~= nil then
    oprot:writeFieldBegin('tierYouGetText', TType.STRUCT, 84)
    self.tierYouGetText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.tierTopRewardText ~= nil then
    oprot:writeFieldBegin('tierTopRewardText', TType.STRUCT, 85)
    self.tierTopRewardText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.tierBannerText ~= nil then
    oprot:writeFieldBegin('tierBannerText', TType.STRUCT, 86)
    self.tierBannerText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.tierBannerImage ~= nil then
    oprot:writeFieldBegin('tierBannerImage', TType.STRING, 87)
    oprot:writeString(self.tierBannerImage)
    oprot:writeFieldEnd()
  end
  if self.tierRarityText ~= nil then
    oprot:writeFieldBegin('tierRarityText', TType.STRUCT, 79)
    self.tierRarityText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.detailCardHaveRays ~= nil then
    oprot:writeFieldBegin('detailCardHaveRays', TType.BOOL, 88)
    oprot:writeBool(self.detailCardHaveRays)
    oprot:writeFieldEnd()
  end
  if self.discountedPrice ~= nil then
    oprot:writeFieldBegin('discountedPrice', TType.I32, 89)
    oprot:writeI32(self.discountedPrice)
    oprot:writeFieldEnd()
  end
  if self.upsellInBuildMenu ~= nil then
    oprot:writeFieldBegin('upsellInBuildMenu', TType.BOOL, 90)
    oprot:writeBool(self.upsellInBuildMenu)
    oprot:writeFieldEnd()
  end
  if self.floorClearRewardCurrencyIds ~= nil then
    oprot:writeFieldBegin('floorClearRewardCurrencyIds', TType.LIST, 100)
    oprot:writeListBegin(TType.STRING, #self.floorClearRewardCurrencyIds)
    for _,iter140 in ipairs(self.floorClearRewardCurrencyIds) do
      oprot:writeString(iter140)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.floorClearRewardCurrencyAmounts ~= nil then
    oprot:writeFieldBegin('floorClearRewardCurrencyAmounts', TType.LIST, 101)
    oprot:writeListBegin(TType.I32, #self.floorClearRewardCurrencyAmounts)
    for _,iter141 in ipairs(self.floorClearRewardCurrencyAmounts) do
      oprot:writeI32(iter141)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.detailScreenHeader ~= nil then
    oprot:writeFieldBegin('detailScreenHeader', TType.STRUCT, 105)
    self.detailScreenHeader:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.eventStoreImage ~= nil then
    oprot:writeFieldBegin('eventStoreImage', TType.STRING, 110)
    oprot:writeString(self.eventStoreImage)
    oprot:writeFieldEnd()
  end
  if self.iapProductId ~= nil then
    oprot:writeFieldBegin('iapProductId', TType.STRING, 200)
    oprot:writeString(self.iapProductId)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 210)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.gradientColor1 ~= nil then
    oprot:writeFieldBegin('gradientColor1', TType.STRING, 220)
    oprot:writeString(self.gradientColor1)
    oprot:writeFieldEnd()
  end
  if self.gradientColor2 ~= nil then
    oprot:writeFieldBegin('gradientColor2', TType.STRING, 221)
    oprot:writeString(self.gradientColor2)
    oprot:writeFieldEnd()
  end
  if self.baseTerrainImage ~= nil then
    oprot:writeFieldBegin('baseTerrainImage', TType.STRING, 222)
    oprot:writeString(self.baseTerrainImage)
    oprot:writeFieldEnd()
  end
  if self.featureImage ~= nil then
    oprot:writeFieldBegin('featureImage', TType.STRING, 223)
    oprot:writeString(self.featureImage)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 300)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.showGuildRank ~= nil then
    oprot:writeFieldBegin('showGuildRank', TType.I32, 301)
    oprot:writeI32(self.showGuildRank)
    oprot:writeFieldEnd()
  end
  if self.hideGuildRank ~= nil then
    oprot:writeFieldBegin('hideGuildRank', TType.I32, 302)
    oprot:writeI32(self.hideGuildRank)
    oprot:writeFieldEnd()
  end
  if self.unlockGuildRank ~= nil then
    oprot:writeFieldBegin('unlockGuildRank', TType.I32, 303)
    oprot:writeI32(self.unlockGuildRank)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GachaPack = __TObject:new{
  gachaPackId,
  lootTableIds,
  lootTableSpins
}

function GachaPack:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.gachaPackId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.lootTableIds = {}
        local _etype145, _size142 = iprot:readListBegin()
        for _i=1,_size142 do
          local _elem146 = iprot:readString()
          table.insert(self.lootTableIds, _elem146)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.lootTableSpins = {}
        local _etype150, _size147 = iprot:readListBegin()
        for _i=1,_size147 do
          local _elem151 = iprot:readI32()
          table.insert(self.lootTableSpins, _elem151)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GachaPack:write(oprot)
  oprot:writeStructBegin('GachaPack')
  if self.gachaPackId ~= nil then
    oprot:writeFieldBegin('gachaPackId', TType.STRING, 1)
    oprot:writeString(self.gachaPackId)
    oprot:writeFieldEnd()
  end
  if self.lootTableIds ~= nil then
    oprot:writeFieldBegin('lootTableIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.lootTableIds)
    for _,iter152 in ipairs(self.lootTableIds) do
      oprot:writeString(iter152)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.lootTableSpins ~= nil then
    oprot:writeFieldBegin('lootTableSpins', TType.LIST, 11)
    oprot:writeListBegin(TType.I32, #self.lootTableSpins)
    for _,iter153 in ipairs(self.lootTableSpins) do
      oprot:writeI32(iter153)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LootTable = __TObject:new{
  lootTableId,
  weight,
  itemType,
  itemGroupIds,
  amount
}

function LootTable:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.lootTableId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.DOUBLE then
        self.weight = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.itemType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.itemGroupIds = {}
        local _etype157, _size154 = iprot:readListBegin()
        for _i=1,_size154 do
          local _elem158 = iprot:readString()
          table.insert(self.itemGroupIds, _elem158)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.amount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LootTable:write(oprot)
  oprot:writeStructBegin('LootTable')
  if self.lootTableId ~= nil then
    oprot:writeFieldBegin('lootTableId', TType.STRING, 1)
    oprot:writeString(self.lootTableId)
    oprot:writeFieldEnd()
  end
  if self.weight ~= nil then
    oprot:writeFieldBegin('weight', TType.DOUBLE, 10)
    oprot:writeDouble(self.weight)
    oprot:writeFieldEnd()
  end
  if self.itemType ~= nil then
    oprot:writeFieldBegin('itemType', TType.I32, 11)
    oprot:writeI32(self.itemType)
    oprot:writeFieldEnd()
  end
  if self.itemGroupIds ~= nil then
    oprot:writeFieldBegin('itemGroupIds', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.itemGroupIds)
    for _,iter159 in ipairs(self.itemGroupIds) do
      oprot:writeString(iter159)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.I32, 13)
    oprot:writeI32(self.amount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LootCurrencyGroup = __TObject:new{
  groupId,
  currencyIds
}

function LootCurrencyGroup:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.currencyIds = {}
        local _etype163, _size160 = iprot:readListBegin()
        for _i=1,_size160 do
          local _elem164 = iprot:readString()
          table.insert(self.currencyIds, _elem164)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LootCurrencyGroup:write(oprot)
  oprot:writeStructBegin('LootCurrencyGroup')
  if self.groupId ~= nil then
    oprot:writeFieldBegin('groupId', TType.STRING, 1)
    oprot:writeString(self.groupId)
    oprot:writeFieldEnd()
  end
  if self.currencyIds ~= nil then
    oprot:writeFieldBegin('currencyIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.currencyIds)
    for _,iter165 in ipairs(self.currencyIds) do
      oprot:writeString(iter165)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LootBuildingGroup = __TObject:new{
  groupId,
  buildingIds
}

function LootBuildingGroup:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.groupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.buildingIds = {}
        local _etype169, _size166 = iprot:readListBegin()
        for _i=1,_size166 do
          local _elem170 = iprot:readString()
          table.insert(self.buildingIds, _elem170)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LootBuildingGroup:write(oprot)
  oprot:writeStructBegin('LootBuildingGroup')
  if self.groupId ~= nil then
    oprot:writeFieldBegin('groupId', TType.STRING, 1)
    oprot:writeString(self.groupId)
    oprot:writeFieldEnd()
  end
  if self.buildingIds ~= nil then
    oprot:writeFieldBegin('buildingIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.buildingIds)
    for _,iter171 in ipairs(self.buildingIds) do
      oprot:writeString(iter171)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ExpansionType = __TObject:new{
  expansionTypeId,
  spritesheet,
  imagePrefix
}

function ExpansionType:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.expansionTypeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.spritesheet = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.imagePrefix = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ExpansionType:write(oprot)
  oprot:writeStructBegin('ExpansionType')
  if self.expansionTypeId ~= nil then
    oprot:writeFieldBegin('expansionTypeId', TType.STRING, 1)
    oprot:writeString(self.expansionTypeId)
    oprot:writeFieldEnd()
  end
  if self.spritesheet ~= nil then
    oprot:writeFieldBegin('spritesheet', TType.STRING, 20)
    oprot:writeString(self.spritesheet)
    oprot:writeFieldEnd()
  end
  if self.imagePrefix ~= nil then
    oprot:writeFieldBegin('imagePrefix', TType.STRING, 21)
    oprot:writeString(self.imagePrefix)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Expansion = __TObject:new{
  expansionId,
  blockerId,
  buildingId,
  costCurrencyIds,
  costCurrencyAmounts,
  expansionTypeId,
  spritesheet,
  imagePrefix
}

function Expansion:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.expansionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.blockerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.costCurrencyIds = {}
        local _etype175, _size172 = iprot:readListBegin()
        for _i=1,_size172 do
          local _elem176 = iprot:readString()
          table.insert(self.costCurrencyIds, _elem176)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.costCurrencyAmounts = {}
        local _etype180, _size177 = iprot:readListBegin()
        for _i=1,_size177 do
          local _elem181 = iprot:readI32()
          table.insert(self.costCurrencyAmounts, _elem181)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.expansionTypeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.spritesheet = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.imagePrefix = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Expansion:write(oprot)
  oprot:writeStructBegin('Expansion')
  if self.expansionId ~= nil then
    oprot:writeFieldBegin('expansionId', TType.STRING, 1)
    oprot:writeString(self.expansionId)
    oprot:writeFieldEnd()
  end
  if self.blockerId ~= nil then
    oprot:writeFieldBegin('blockerId', TType.STRING, 10)
    oprot:writeString(self.blockerId)
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 11)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.costCurrencyIds ~= nil then
    oprot:writeFieldBegin('costCurrencyIds', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.costCurrencyIds)
    for _,iter182 in ipairs(self.costCurrencyIds) do
      oprot:writeString(iter182)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.costCurrencyAmounts ~= nil then
    oprot:writeFieldBegin('costCurrencyAmounts', TType.LIST, 13)
    oprot:writeListBegin(TType.I32, #self.costCurrencyAmounts)
    for _,iter183 in ipairs(self.costCurrencyAmounts) do
      oprot:writeI32(iter183)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.expansionTypeId ~= nil then
    oprot:writeFieldBegin('expansionTypeId', TType.STRING, 15)
    oprot:writeString(self.expansionTypeId)
    oprot:writeFieldEnd()
  end
  if self.spritesheet ~= nil then
    oprot:writeFieldBegin('spritesheet', TType.STRING, 20)
    oprot:writeString(self.spritesheet)
    oprot:writeFieldEnd()
  end
  if self.imagePrefix ~= nil then
    oprot:writeFieldBegin('imagePrefix', TType.STRING, 21)
    oprot:writeString(self.imagePrefix)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Rank = __TObject:new{
  rankId,
  xp,
  maxFriends,
  maxBuildings,
  maxStamina,
  maxKingdomLikes,
  maxKingdomLikesGiftId,
  rankUpCurrencyRewardId,
  rankUpCurrencyRewardAmount,
  awardedStamina,
  xpNeeded,
  newDisplay,
  requiredPlacedBuildingScore,
  unlockedBuildingIds,
  unlockedBuildingAmounts,
  lootTableIds,
  lootTableSpins
}

function Rank:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.rankId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.xp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.maxFriends = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.maxBuildings = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.maxStamina = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.maxKingdomLikes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.maxKingdomLikesGiftId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.rankUpCurrencyRewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.rankUpCurrencyRewardAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.I32 then
        self.awardedStamina = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.xpNeeded = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.newDisplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.requiredPlacedBuildingScore = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.LIST then
        self.unlockedBuildingIds = {}
        local _etype187, _size184 = iprot:readListBegin()
        for _i=1,_size184 do
          local _elem188 = iprot:readString()
          table.insert(self.unlockedBuildingIds, _elem188)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.LIST then
        self.unlockedBuildingAmounts = {}
        local _etype192, _size189 = iprot:readListBegin()
        for _i=1,_size189 do
          local _elem193 = iprot:readI32()
          table.insert(self.unlockedBuildingAmounts, _elem193)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.LIST then
        self.lootTableIds = {}
        local _etype197, _size194 = iprot:readListBegin()
        for _i=1,_size194 do
          local _elem198 = iprot:readString()
          table.insert(self.lootTableIds, _elem198)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.LIST then
        self.lootTableSpins = {}
        local _etype202, _size199 = iprot:readListBegin()
        for _i=1,_size199 do
          local _elem203 = iprot:readI32()
          table.insert(self.lootTableSpins, _elem203)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Rank:write(oprot)
  oprot:writeStructBegin('Rank')
  if self.rankId ~= nil then
    oprot:writeFieldBegin('rankId', TType.I32, 1)
    oprot:writeI32(self.rankId)
    oprot:writeFieldEnd()
  end
  if self.xp ~= nil then
    oprot:writeFieldBegin('xp', TType.I32, 10)
    oprot:writeI32(self.xp)
    oprot:writeFieldEnd()
  end
  if self.maxFriends ~= nil then
    oprot:writeFieldBegin('maxFriends', TType.I32, 11)
    oprot:writeI32(self.maxFriends)
    oprot:writeFieldEnd()
  end
  if self.maxBuildings ~= nil then
    oprot:writeFieldBegin('maxBuildings', TType.I32, 12)
    oprot:writeI32(self.maxBuildings)
    oprot:writeFieldEnd()
  end
  if self.maxStamina ~= nil then
    oprot:writeFieldBegin('maxStamina', TType.I32, 13)
    oprot:writeI32(self.maxStamina)
    oprot:writeFieldEnd()
  end
  if self.maxKingdomLikes ~= nil then
    oprot:writeFieldBegin('maxKingdomLikes', TType.I32, 14)
    oprot:writeI32(self.maxKingdomLikes)
    oprot:writeFieldEnd()
  end
  if self.maxKingdomLikesGiftId ~= nil then
    oprot:writeFieldBegin('maxKingdomLikesGiftId', TType.STRING, 15)
    oprot:writeString(self.maxKingdomLikesGiftId)
    oprot:writeFieldEnd()
  end
  if self.rankUpCurrencyRewardId ~= nil then
    oprot:writeFieldBegin('rankUpCurrencyRewardId', TType.STRING, 16)
    oprot:writeString(self.rankUpCurrencyRewardId)
    oprot:writeFieldEnd()
  end
  if self.rankUpCurrencyRewardAmount ~= nil then
    oprot:writeFieldBegin('rankUpCurrencyRewardAmount', TType.I32, 17)
    oprot:writeI32(self.rankUpCurrencyRewardAmount)
    oprot:writeFieldEnd()
  end
  if self.awardedStamina ~= nil then
    oprot:writeFieldBegin('awardedStamina', TType.I32, 18)
    oprot:writeI32(self.awardedStamina)
    oprot:writeFieldEnd()
  end
  if self.xpNeeded ~= nil then
    oprot:writeFieldBegin('xpNeeded', TType.I32, 19)
    oprot:writeI32(self.xpNeeded)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRING, 30)
    oprot:writeString(self.newDisplay)
    oprot:writeFieldEnd()
  end
  if self.requiredPlacedBuildingScore ~= nil then
    oprot:writeFieldBegin('requiredPlacedBuildingScore', TType.I32, 40)
    oprot:writeI32(self.requiredPlacedBuildingScore)
    oprot:writeFieldEnd()
  end
  if self.unlockedBuildingIds ~= nil then
    oprot:writeFieldBegin('unlockedBuildingIds', TType.LIST, 50)
    oprot:writeListBegin(TType.STRING, #self.unlockedBuildingIds)
    for _,iter204 in ipairs(self.unlockedBuildingIds) do
      oprot:writeString(iter204)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.unlockedBuildingAmounts ~= nil then
    oprot:writeFieldBegin('unlockedBuildingAmounts', TType.LIST, 51)
    oprot:writeListBegin(TType.I32, #self.unlockedBuildingAmounts)
    for _,iter205 in ipairs(self.unlockedBuildingAmounts) do
      oprot:writeI32(iter205)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.lootTableIds ~= nil then
    oprot:writeFieldBegin('lootTableIds', TType.LIST, 60)
    oprot:writeListBegin(TType.STRING, #self.lootTableIds)
    for _,iter206 in ipairs(self.lootTableIds) do
      oprot:writeString(iter206)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.lootTableSpins ~= nil then
    oprot:writeFieldBegin('lootTableSpins', TType.LIST, 61)
    oprot:writeListBegin(TType.I32, #self.lootTableSpins)
    for _,iter207 in ipairs(self.lootTableSpins) do
      oprot:writeI32(iter207)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildRank = __TObject:new{
  rankId,
  pointsForRank,
  guildHallImage,
  realHeight
}

function GuildRank:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.rankId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.pointsForRank = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.guildHallImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.realHeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildRank:write(oprot)
  oprot:writeStructBegin('GuildRank')
  if self.rankId ~= nil then
    oprot:writeFieldBegin('rankId', TType.I32, 1)
    oprot:writeI32(self.rankId)
    oprot:writeFieldEnd()
  end
  if self.pointsForRank ~= nil then
    oprot:writeFieldBegin('pointsForRank', TType.I64, 2)
    oprot:writeI64(self.pointsForRank)
    oprot:writeFieldEnd()
  end
  if self.guildHallImage ~= nil then
    oprot:writeFieldBegin('guildHallImage', TType.STRING, 10)
    oprot:writeString(self.guildHallImage)
    oprot:writeFieldEnd()
  end
  if self.realHeight ~= nil then
    oprot:writeFieldBegin('realHeight', TType.I32, 12)
    oprot:writeI32(self.realHeight)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Boost = __TObject:new{
  boostId,
  boostTypeId,
  unlockLevelId,
  minRank,
  tutorialFlag,
  hudText,
  newDisplay,
  newDescription,
  enablePredicate,
  anim,
  blastUpgrade,
  conditional,
  priority,
  matrix,
  needsPlacement,
  predicate,
  selectionPredicate,
  immuneCellTypes,
  order,
  sealImage,
  buttonImage,
  buttonSelectedImage,
  useGetCurrencyDialog,
  animFileName,
  soundFile,
  eventIds,
  eventPhases
}

function Boost:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.boostId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.boostTypeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.unlockLevelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.minRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.tutorialFlag = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.hudText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.STRUCT then
        self.newDescription = LocalizedString:new{}
        self.newDescription:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.enablePredicate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.anim = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.blastUpgrade = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.STRING then
        self.conditional = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 45 then
      if ftype == TType.STRING then
        self.matrix = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 46 then
      if ftype == TType.BOOL then
        self.needsPlacement = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 47 then
      if ftype == TType.STRING then
        self.predicate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 48 then
      if ftype == TType.STRING then
        self.selectionPredicate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 49 then
      if ftype == TType.LIST then
        self.immuneCellTypes = {}
        local _etype211, _size208 = iprot:readListBegin()
        for _i=1,_size208 do
          local _elem212 = iprot:readString()
          table.insert(self.immuneCellTypes, _elem212)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.order = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.sealImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRING then
        self.buttonImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 64 then
      if ftype == TType.STRING then
        self.buttonSelectedImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.BOOL then
        self.useGetCurrencyDialog = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 63 then
      if ftype == TType.STRING then
        self.animFileName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 65 then
      if ftype == TType.STRING then
        self.soundFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype216, _size213 = iprot:readListBegin()
        for _i=1,_size213 do
          local _elem217 = iprot:readString()
          table.insert(self.eventIds, _elem217)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Boost:write(oprot)
  oprot:writeStructBegin('Boost')
  if self.boostId ~= nil then
    oprot:writeFieldBegin('boostId', TType.STRING, 1)
    oprot:writeString(self.boostId)
    oprot:writeFieldEnd()
  end
  if self.boostTypeId ~= nil then
    oprot:writeFieldBegin('boostTypeId', TType.STRING, 11)
    oprot:writeString(self.boostTypeId)
    oprot:writeFieldEnd()
  end
  if self.unlockLevelId ~= nil then
    oprot:writeFieldBegin('unlockLevelId', TType.STRING, 12)
    oprot:writeString(self.unlockLevelId)
    oprot:writeFieldEnd()
  end
  if self.minRank ~= nil then
    oprot:writeFieldBegin('minRank', TType.I32, 13)
    oprot:writeI32(self.minRank)
    oprot:writeFieldEnd()
  end
  if self.tutorialFlag ~= nil then
    oprot:writeFieldBegin('tutorialFlag', TType.STRING, 14)
    oprot:writeString(self.tutorialFlag)
    oprot:writeFieldEnd()
  end
  if self.hudText ~= nil then
    oprot:writeFieldBegin('hudText', TType.STRING, 31)
    oprot:writeString(self.hudText)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 33)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.newDescription ~= nil then
    oprot:writeFieldBegin('newDescription', TType.STRUCT, 34)
    self.newDescription:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.enablePredicate ~= nil then
    oprot:writeFieldBegin('enablePredicate', TType.STRING, 40)
    oprot:writeString(self.enablePredicate)
    oprot:writeFieldEnd()
  end
  if self.anim ~= nil then
    oprot:writeFieldBegin('anim', TType.STRING, 41)
    oprot:writeString(self.anim)
    oprot:writeFieldEnd()
  end
  if self.blastUpgrade ~= nil then
    oprot:writeFieldBegin('blastUpgrade', TType.STRING, 42)
    oprot:writeString(self.blastUpgrade)
    oprot:writeFieldEnd()
  end
  if self.conditional ~= nil then
    oprot:writeFieldBegin('conditional', TType.STRING, 43)
    oprot:writeString(self.conditional)
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 44)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  if self.matrix ~= nil then
    oprot:writeFieldBegin('matrix', TType.STRING, 45)
    oprot:writeString(self.matrix)
    oprot:writeFieldEnd()
  end
  if self.needsPlacement ~= nil then
    oprot:writeFieldBegin('needsPlacement', TType.BOOL, 46)
    oprot:writeBool(self.needsPlacement)
    oprot:writeFieldEnd()
  end
  if self.predicate ~= nil then
    oprot:writeFieldBegin('predicate', TType.STRING, 47)
    oprot:writeString(self.predicate)
    oprot:writeFieldEnd()
  end
  if self.selectionPredicate ~= nil then
    oprot:writeFieldBegin('selectionPredicate', TType.STRING, 48)
    oprot:writeString(self.selectionPredicate)
    oprot:writeFieldEnd()
  end
  if self.immuneCellTypes ~= nil then
    oprot:writeFieldBegin('immuneCellTypes', TType.LIST, 49)
    oprot:writeListBegin(TType.STRING, #self.immuneCellTypes)
    for _,iter218 in ipairs(self.immuneCellTypes) do
      oprot:writeString(iter218)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.order ~= nil then
    oprot:writeFieldBegin('order', TType.I32, 50)
    oprot:writeI32(self.order)
    oprot:writeFieldEnd()
  end
  if self.sealImage ~= nil then
    oprot:writeFieldBegin('sealImage', TType.STRING, 60)
    oprot:writeString(self.sealImage)
    oprot:writeFieldEnd()
  end
  if self.buttonImage ~= nil then
    oprot:writeFieldBegin('buttonImage', TType.STRING, 61)
    oprot:writeString(self.buttonImage)
    oprot:writeFieldEnd()
  end
  if self.buttonSelectedImage ~= nil then
    oprot:writeFieldBegin('buttonSelectedImage', TType.STRING, 64)
    oprot:writeString(self.buttonSelectedImage)
    oprot:writeFieldEnd()
  end
  if self.useGetCurrencyDialog ~= nil then
    oprot:writeFieldBegin('useGetCurrencyDialog', TType.BOOL, 62)
    oprot:writeBool(self.useGetCurrencyDialog)
    oprot:writeFieldEnd()
  end
  if self.animFileName ~= nil then
    oprot:writeFieldBegin('animFileName', TType.STRING, 63)
    oprot:writeString(self.animFileName)
    oprot:writeFieldEnd()
  end
  if self.soundFile ~= nil then
    oprot:writeFieldBegin('soundFile', TType.STRING, 65)
    oprot:writeString(self.soundFile)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 70)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter219 in ipairs(self.eventIds) do
      oprot:writeString(iter219)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 71)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EventLock = __TObject:new{
  eventLockId,
  override,
  enabled,
  minRank,
  maxRank,
  startTime,
  endTime,
  period,
  duration,
  gateCurrencyId,
  requiredBaseBuildingId
}

function EventLock:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.eventLockId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.override = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.enabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.minRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.maxRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.startTime = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.endTime = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.period = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.duration = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.gateCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.requiredBaseBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EventLock:write(oprot)
  oprot:writeStructBegin('EventLock')
  if self.eventLockId ~= nil then
    oprot:writeFieldBegin('eventLockId', TType.STRING, 1)
    oprot:writeString(self.eventLockId)
    oprot:writeFieldEnd()
  end
  if self.override ~= nil then
    oprot:writeFieldBegin('override', TType.BOOL, 2)
    oprot:writeBool(self.override)
    oprot:writeFieldEnd()
  end
  if self.enabled ~= nil then
    oprot:writeFieldBegin('enabled', TType.BOOL, 3)
    oprot:writeBool(self.enabled)
    oprot:writeFieldEnd()
  end
  if self.minRank ~= nil then
    oprot:writeFieldBegin('minRank', TType.I32, 12)
    oprot:writeI32(self.minRank)
    oprot:writeFieldEnd()
  end
  if self.maxRank ~= nil then
    oprot:writeFieldBegin('maxRank', TType.I32, 13)
    oprot:writeI32(self.maxRank)
    oprot:writeFieldEnd()
  end
  if self.startTime ~= nil then
    oprot:writeFieldBegin('startTime', TType.STRING, 20)
    oprot:writeString(self.startTime)
    oprot:writeFieldEnd()
  end
  if self.endTime ~= nil then
    oprot:writeFieldBegin('endTime', TType.STRING, 21)
    oprot:writeString(self.endTime)
    oprot:writeFieldEnd()
  end
  if self.period ~= nil then
    oprot:writeFieldBegin('period', TType.I32, 22)
    oprot:writeI32(self.period)
    oprot:writeFieldEnd()
  end
  if self.duration ~= nil then
    oprot:writeFieldBegin('duration', TType.I32, 23)
    oprot:writeI32(self.duration)
    oprot:writeFieldEnd()
  end
  if self.gateCurrencyId ~= nil then
    oprot:writeFieldBegin('gateCurrencyId', TType.STRING, 30)
    oprot:writeString(self.gateCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.requiredBaseBuildingId ~= nil then
    oprot:writeFieldBegin('requiredBaseBuildingId', TType.STRING, 31)
    oprot:writeString(self.requiredBaseBuildingId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuildMenuSpecialCard = __TObject:new{
  cardId,
  order,
  imageFile,
  caption,
  eventLockId,
  soundFile,
  messageAction,
  messageActionParameter,
  requiredLevelId,
  enabled,
  bundleId,
  contentImageFile,
  withSpinningRays
}

function BuildMenuSpecialCard:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.order = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.imageFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.caption = LocalizedString:new{}
        self.caption:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.eventLockId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.soundFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.messageAction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.messageActionParameter = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.requiredLevelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.enabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.contentImageFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.BOOL then
        self.withSpinningRays = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuildMenuSpecialCard:write(oprot)
  oprot:writeStructBegin('BuildMenuSpecialCard')
  if self.cardId ~= nil then
    oprot:writeFieldBegin('cardId', TType.STRING, 1)
    oprot:writeString(self.cardId)
    oprot:writeFieldEnd()
  end
  if self.order ~= nil then
    oprot:writeFieldBegin('order', TType.I32, 2)
    oprot:writeI32(self.order)
    oprot:writeFieldEnd()
  end
  if self.imageFile ~= nil then
    oprot:writeFieldBegin('imageFile', TType.STRING, 3)
    oprot:writeString(self.imageFile)
    oprot:writeFieldEnd()
  end
  if self.caption ~= nil then
    oprot:writeFieldBegin('caption', TType.STRUCT, 4)
    self.caption:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.eventLockId ~= nil then
    oprot:writeFieldBegin('eventLockId', TType.STRING, 5)
    oprot:writeString(self.eventLockId)
    oprot:writeFieldEnd()
  end
  if self.soundFile ~= nil then
    oprot:writeFieldBegin('soundFile', TType.STRING, 6)
    oprot:writeString(self.soundFile)
    oprot:writeFieldEnd()
  end
  if self.messageAction ~= nil then
    oprot:writeFieldBegin('messageAction', TType.I32, 7)
    oprot:writeI32(self.messageAction)
    oprot:writeFieldEnd()
  end
  if self.messageActionParameter ~= nil then
    oprot:writeFieldBegin('messageActionParameter', TType.STRING, 8)
    oprot:writeString(self.messageActionParameter)
    oprot:writeFieldEnd()
  end
  if self.requiredLevelId ~= nil then
    oprot:writeFieldBegin('requiredLevelId', TType.STRING, 9)
    oprot:writeString(self.requiredLevelId)
    oprot:writeFieldEnd()
  end
  if self.enabled ~= nil then
    oprot:writeFieldBegin('enabled', TType.BOOL, 10)
    oprot:writeBool(self.enabled)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 11)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.contentImageFile ~= nil then
    oprot:writeFieldBegin('contentImageFile', TType.STRING, 12)
    oprot:writeString(self.contentImageFile)
    oprot:writeFieldEnd()
  end
  if self.withSpinningRays ~= nil then
    oprot:writeFieldBegin('withSpinningRays', TType.BOOL, 13)
    oprot:writeBool(self.withSpinningRays)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LevelDot = __TObject:new{
  levelDotId,
  levelOpenImage,
  levelLockImage,
  level1StarImage,
  level2StarImage,
  level3StarImage,
  levelRankLockImage,
  levelFirstRankLockImage,
  levelFirstLockImage,
  levelCurrentLockImage
}

function LevelDot:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelDotId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.levelOpenImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.levelLockImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.level1StarImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.level2StarImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.level3StarImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.levelRankLockImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.levelFirstRankLockImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.levelFirstLockImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.levelCurrentLockImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LevelDot:write(oprot)
  oprot:writeStructBegin('LevelDot')
  if self.levelDotId ~= nil then
    oprot:writeFieldBegin('levelDotId', TType.STRING, 1)
    oprot:writeString(self.levelDotId)
    oprot:writeFieldEnd()
  end
  if self.levelOpenImage ~= nil then
    oprot:writeFieldBegin('levelOpenImage', TType.STRING, 2)
    oprot:writeString(self.levelOpenImage)
    oprot:writeFieldEnd()
  end
  if self.levelLockImage ~= nil then
    oprot:writeFieldBegin('levelLockImage', TType.STRING, 3)
    oprot:writeString(self.levelLockImage)
    oprot:writeFieldEnd()
  end
  if self.level1StarImage ~= nil then
    oprot:writeFieldBegin('level1StarImage', TType.STRING, 4)
    oprot:writeString(self.level1StarImage)
    oprot:writeFieldEnd()
  end
  if self.level2StarImage ~= nil then
    oprot:writeFieldBegin('level2StarImage', TType.STRING, 5)
    oprot:writeString(self.level2StarImage)
    oprot:writeFieldEnd()
  end
  if self.level3StarImage ~= nil then
    oprot:writeFieldBegin('level3StarImage', TType.STRING, 6)
    oprot:writeString(self.level3StarImage)
    oprot:writeFieldEnd()
  end
  if self.levelRankLockImage ~= nil then
    oprot:writeFieldBegin('levelRankLockImage', TType.STRING, 7)
    oprot:writeString(self.levelRankLockImage)
    oprot:writeFieldEnd()
  end
  if self.levelFirstRankLockImage ~= nil then
    oprot:writeFieldBegin('levelFirstRankLockImage', TType.STRING, 8)
    oprot:writeString(self.levelFirstRankLockImage)
    oprot:writeFieldEnd()
  end
  if self.levelFirstLockImage ~= nil then
    oprot:writeFieldBegin('levelFirstLockImage', TType.STRING, 10)
    oprot:writeString(self.levelFirstLockImage)
    oprot:writeFieldEnd()
  end
  if self.levelCurrentLockImage ~= nil then
    oprot:writeFieldBegin('levelCurrentLockImage', TType.STRING, 20)
    oprot:writeString(self.levelCurrentLockImage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LevelDotV2 = __TObject:new{
  levelDotId,
  unlockLevelImage,
  lockLevelImage,
  wonLevelImage,
  currentLevelImage,
  emptyStarImage,
  fullStarImage,
  postLevelDotAction,
  postLevelDotActionParameters
}

function LevelDotV2:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelDotId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.STRING then
        self.unlockLevelImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 101 then
      if ftype == TType.STRING then
        self.lockLevelImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 102 then
      if ftype == TType.STRING then
        self.wonLevelImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 103 then
      if ftype == TType.STRING then
        self.currentLevelImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 104 then
      if ftype == TType.STRING then
        self.emptyStarImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 105 then
      if ftype == TType.STRING then
        self.fullStarImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 120 then
      if ftype == TType.I32 then
        self.postLevelDotAction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 121 then
      if ftype == TType.LIST then
        self.postLevelDotActionParameters = {}
        local _etype223, _size220 = iprot:readListBegin()
        for _i=1,_size220 do
          local _elem224 = iprot:readString()
          table.insert(self.postLevelDotActionParameters, _elem224)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LevelDotV2:write(oprot)
  oprot:writeStructBegin('LevelDotV2')
  if self.levelDotId ~= nil then
    oprot:writeFieldBegin('levelDotId', TType.STRING, 1)
    oprot:writeString(self.levelDotId)
    oprot:writeFieldEnd()
  end
  if self.unlockLevelImage ~= nil then
    oprot:writeFieldBegin('unlockLevelImage', TType.STRING, 100)
    oprot:writeString(self.unlockLevelImage)
    oprot:writeFieldEnd()
  end
  if self.lockLevelImage ~= nil then
    oprot:writeFieldBegin('lockLevelImage', TType.STRING, 101)
    oprot:writeString(self.lockLevelImage)
    oprot:writeFieldEnd()
  end
  if self.wonLevelImage ~= nil then
    oprot:writeFieldBegin('wonLevelImage', TType.STRING, 102)
    oprot:writeString(self.wonLevelImage)
    oprot:writeFieldEnd()
  end
  if self.currentLevelImage ~= nil then
    oprot:writeFieldBegin('currentLevelImage', TType.STRING, 103)
    oprot:writeString(self.currentLevelImage)
    oprot:writeFieldEnd()
  end
  if self.emptyStarImage ~= nil then
    oprot:writeFieldBegin('emptyStarImage', TType.STRING, 104)
    oprot:writeString(self.emptyStarImage)
    oprot:writeFieldEnd()
  end
  if self.fullStarImage ~= nil then
    oprot:writeFieldBegin('fullStarImage', TType.STRING, 105)
    oprot:writeString(self.fullStarImage)
    oprot:writeFieldEnd()
  end
  if self.postLevelDotAction ~= nil then
    oprot:writeFieldBegin('postLevelDotAction', TType.I32, 120)
    oprot:writeI32(self.postLevelDotAction)
    oprot:writeFieldEnd()
  end
  if self.postLevelDotActionParameters ~= nil then
    oprot:writeFieldBegin('postLevelDotActionParameters', TType.LIST, 121)
    oprot:writeListBegin(TType.STRING, #self.postLevelDotActionParameters)
    for _,iter225 in ipairs(self.postLevelDotActionParameters) do
      oprot:writeString(iter225)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Level = __TObject:new{
  levelId,
  levelName,
  levelRequirements,
  buildingId,
  islandId,
  villainThrowLimit,
  levelNumber,
  eventIds,
  rankMin,
  starScores,
  tutorial,
  oneStarRewardListId,
  twoStarRewardListId,
  threeStarRewardListId,
  staminaCost,
  ticketBonusCurrencyId,
  ticketBonus,
  expansionRewardIds,
  expansionRewardAmounts,
  levelDotId,
  npcId,
  closedText,
  playText1Star,
  playText2Star,
  playText3Star,
  winText1Star,
  winText2Star,
  winText3Star,
  winText1StarReplay,
  winText2StarReplay,
  winText3StarReplay,
  newDisplay,
  startText0Star,
  startText1Star,
  startText2Star,
  startText3Star,
  successText1Star,
  successText2Star,
  successText3Star,
  firstTimeCurrencyRewardIds,
  firstTimeCurrencyRewardAmounts,
  icon
}

function Level:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.levelName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.levelRequirements = {}
        local _etype229, _size226 = iprot:readListBegin()
        for _i=1,_size226 do
          local _elem230 = iprot:readString()
          table.insert(self.levelRequirements, _elem230)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.islandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.villainThrowLimit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.levelNumber = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype234, _size231 = iprot:readListBegin()
        for _i=1,_size231 do
          local _elem235 = iprot:readString()
          table.insert(self.eventIds, _elem235)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.rankMin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.LIST then
        self.starScores = {}
        local _etype239, _size236 = iprot:readListBegin()
        for _i=1,_size236 do
          local _elem240 = iprot:readI32()
          table.insert(self.starScores, _elem240)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.BOOL then
        self.tutorial = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.oneStarRewardListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.twoStarRewardListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.threeStarRewardListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.I32 then
        self.staminaCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.ticketBonusCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.I32 then
        self.ticketBonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.LIST then
        self.expansionRewardIds = {}
        local _etype244, _size241 = iprot:readListBegin()
        for _i=1,_size241 do
          local _elem245 = iprot:readString()
          table.insert(self.expansionRewardIds, _elem245)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 63 then
      if ftype == TType.LIST then
        self.expansionRewardAmounts = {}
        local _etype249, _size246 = iprot:readListBegin()
        for _i=1,_size246 do
          local _elem250 = iprot:readI32()
          table.insert(self.expansionRewardAmounts, _elem250)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.levelDotId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.STRING then
        self.npcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.STRING then
        self.closedText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 82 then
      if ftype == TType.STRING then
        self.playText1Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 83 then
      if ftype == TType.STRING then
        self.playText2Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 84 then
      if ftype == TType.STRING then
        self.playText3Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 85 then
      if ftype == TType.STRING then
        self.winText1Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 86 then
      if ftype == TType.STRING then
        self.winText2Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 87 then
      if ftype == TType.STRING then
        self.winText3Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 88 then
      if ftype == TType.STRING then
        self.winText1StarReplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 89 then
      if ftype == TType.STRING then
        self.winText2StarReplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 90 then
      if ftype == TType.STRING then
        self.winText3StarReplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 101 then
      if ftype == TType.STRUCT then
        self.startText0Star = LocalizedString:new{}
        self.startText0Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 102 then
      if ftype == TType.STRUCT then
        self.startText1Star = LocalizedString:new{}
        self.startText1Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 103 then
      if ftype == TType.STRUCT then
        self.startText2Star = LocalizedString:new{}
        self.startText2Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 104 then
      if ftype == TType.STRUCT then
        self.startText3Star = LocalizedString:new{}
        self.startText3Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 105 then
      if ftype == TType.STRUCT then
        self.successText1Star = LocalizedString:new{}
        self.successText1Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 106 then
      if ftype == TType.STRUCT then
        self.successText2Star = LocalizedString:new{}
        self.successText2Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 107 then
      if ftype == TType.STRUCT then
        self.successText3Star = LocalizedString:new{}
        self.successText3Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 108 then
      if ftype == TType.LIST then
        self.firstTimeCurrencyRewardIds = {}
        local _etype254, _size251 = iprot:readListBegin()
        for _i=1,_size251 do
          local _elem255 = iprot:readString()
          table.insert(self.firstTimeCurrencyRewardIds, _elem255)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 109 then
      if ftype == TType.LIST then
        self.firstTimeCurrencyRewardAmounts = {}
        local _etype259, _size256 = iprot:readListBegin()
        for _i=1,_size256 do
          local _elem260 = iprot:readI32()
          table.insert(self.firstTimeCurrencyRewardAmounts, _elem260)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.STRING then
        self.icon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Level:write(oprot)
  oprot:writeStructBegin('Level')
  if self.levelId ~= nil then
    oprot:writeFieldBegin('levelId', TType.STRING, 1)
    oprot:writeString(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.levelName ~= nil then
    oprot:writeFieldBegin('levelName', TType.STRING, 2)
    oprot:writeString(self.levelName)
    oprot:writeFieldEnd()
  end
  if self.levelRequirements ~= nil then
    oprot:writeFieldBegin('levelRequirements', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.levelRequirements)
    for _,iter261 in ipairs(self.levelRequirements) do
      oprot:writeString(iter261)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 4)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.islandId ~= nil then
    oprot:writeFieldBegin('islandId', TType.STRING, 5)
    oprot:writeString(self.islandId)
    oprot:writeFieldEnd()
  end
  if self.villainThrowLimit ~= nil then
    oprot:writeFieldBegin('villainThrowLimit', TType.I32, 6)
    oprot:writeI32(self.villainThrowLimit)
    oprot:writeFieldEnd()
  end
  if self.levelNumber ~= nil then
    oprot:writeFieldBegin('levelNumber', TType.I32, 10)
    oprot:writeI32(self.levelNumber)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter262 in ipairs(self.eventIds) do
      oprot:writeString(iter262)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.rankMin ~= nil then
    oprot:writeFieldBegin('rankMin', TType.I32, 13)
    oprot:writeI32(self.rankMin)
    oprot:writeFieldEnd()
  end
  if self.starScores ~= nil then
    oprot:writeFieldBegin('starScores', TType.LIST, 22)
    oprot:writeListBegin(TType.I32, #self.starScores)
    for _,iter263 in ipairs(self.starScores) do
      oprot:writeI32(iter263)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.tutorial ~= nil then
    oprot:writeFieldBegin('tutorial', TType.BOOL, 24)
    oprot:writeBool(self.tutorial)
    oprot:writeFieldEnd()
  end
  if self.oneStarRewardListId ~= nil then
    oprot:writeFieldBegin('oneStarRewardListId', TType.STRING, 30)
    oprot:writeString(self.oneStarRewardListId)
    oprot:writeFieldEnd()
  end
  if self.twoStarRewardListId ~= nil then
    oprot:writeFieldBegin('twoStarRewardListId', TType.STRING, 31)
    oprot:writeString(self.twoStarRewardListId)
    oprot:writeFieldEnd()
  end
  if self.threeStarRewardListId ~= nil then
    oprot:writeFieldBegin('threeStarRewardListId', TType.STRING, 32)
    oprot:writeString(self.threeStarRewardListId)
    oprot:writeFieldEnd()
  end
  if self.staminaCost ~= nil then
    oprot:writeFieldBegin('staminaCost', TType.I32, 53)
    oprot:writeI32(self.staminaCost)
    oprot:writeFieldEnd()
  end
  if self.ticketBonusCurrencyId ~= nil then
    oprot:writeFieldBegin('ticketBonusCurrencyId', TType.STRING, 60)
    oprot:writeString(self.ticketBonusCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.ticketBonus ~= nil then
    oprot:writeFieldBegin('ticketBonus', TType.I32, 61)
    oprot:writeI32(self.ticketBonus)
    oprot:writeFieldEnd()
  end
  if self.expansionRewardIds ~= nil then
    oprot:writeFieldBegin('expansionRewardIds', TType.LIST, 62)
    oprot:writeListBegin(TType.STRING, #self.expansionRewardIds)
    for _,iter264 in ipairs(self.expansionRewardIds) do
      oprot:writeString(iter264)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.expansionRewardAmounts ~= nil then
    oprot:writeFieldBegin('expansionRewardAmounts', TType.LIST, 63)
    oprot:writeListBegin(TType.I32, #self.expansionRewardAmounts)
    for _,iter265 in ipairs(self.expansionRewardAmounts) do
      oprot:writeI32(iter265)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.levelDotId ~= nil then
    oprot:writeFieldBegin('levelDotId', TType.STRING, 70)
    oprot:writeString(self.levelDotId)
    oprot:writeFieldEnd()
  end
  if self.npcId ~= nil then
    oprot:writeFieldBegin('npcId', TType.STRING, 80)
    oprot:writeString(self.npcId)
    oprot:writeFieldEnd()
  end
  if self.closedText ~= nil then
    oprot:writeFieldBegin('closedText', TType.STRING, 81)
    oprot:writeString(self.closedText)
    oprot:writeFieldEnd()
  end
  if self.playText1Star ~= nil then
    oprot:writeFieldBegin('playText1Star', TType.STRING, 82)
    oprot:writeString(self.playText1Star)
    oprot:writeFieldEnd()
  end
  if self.playText2Star ~= nil then
    oprot:writeFieldBegin('playText2Star', TType.STRING, 83)
    oprot:writeString(self.playText2Star)
    oprot:writeFieldEnd()
  end
  if self.playText3Star ~= nil then
    oprot:writeFieldBegin('playText3Star', TType.STRING, 84)
    oprot:writeString(self.playText3Star)
    oprot:writeFieldEnd()
  end
  if self.winText1Star ~= nil then
    oprot:writeFieldBegin('winText1Star', TType.STRING, 85)
    oprot:writeString(self.winText1Star)
    oprot:writeFieldEnd()
  end
  if self.winText2Star ~= nil then
    oprot:writeFieldBegin('winText2Star', TType.STRING, 86)
    oprot:writeString(self.winText2Star)
    oprot:writeFieldEnd()
  end
  if self.winText3Star ~= nil then
    oprot:writeFieldBegin('winText3Star', TType.STRING, 87)
    oprot:writeString(self.winText3Star)
    oprot:writeFieldEnd()
  end
  if self.winText1StarReplay ~= nil then
    oprot:writeFieldBegin('winText1StarReplay', TType.STRING, 88)
    oprot:writeString(self.winText1StarReplay)
    oprot:writeFieldEnd()
  end
  if self.winText2StarReplay ~= nil then
    oprot:writeFieldBegin('winText2StarReplay', TType.STRING, 89)
    oprot:writeString(self.winText2StarReplay)
    oprot:writeFieldEnd()
  end
  if self.winText3StarReplay ~= nil then
    oprot:writeFieldBegin('winText3StarReplay', TType.STRING, 90)
    oprot:writeString(self.winText3StarReplay)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 100)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startText0Star ~= nil then
    oprot:writeFieldBegin('startText0Star', TType.STRUCT, 101)
    self.startText0Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startText1Star ~= nil then
    oprot:writeFieldBegin('startText1Star', TType.STRUCT, 102)
    self.startText1Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startText2Star ~= nil then
    oprot:writeFieldBegin('startText2Star', TType.STRUCT, 103)
    self.startText2Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startText3Star ~= nil then
    oprot:writeFieldBegin('startText3Star', TType.STRUCT, 104)
    self.startText3Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.successText1Star ~= nil then
    oprot:writeFieldBegin('successText1Star', TType.STRUCT, 105)
    self.successText1Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.successText2Star ~= nil then
    oprot:writeFieldBegin('successText2Star', TType.STRUCT, 106)
    self.successText2Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.successText3Star ~= nil then
    oprot:writeFieldBegin('successText3Star', TType.STRUCT, 107)
    self.successText3Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.firstTimeCurrencyRewardIds ~= nil then
    oprot:writeFieldBegin('firstTimeCurrencyRewardIds', TType.LIST, 108)
    oprot:writeListBegin(TType.STRING, #self.firstTimeCurrencyRewardIds)
    for _,iter266 in ipairs(self.firstTimeCurrencyRewardIds) do
      oprot:writeString(iter266)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.firstTimeCurrencyRewardAmounts ~= nil then
    oprot:writeFieldBegin('firstTimeCurrencyRewardAmounts', TType.LIST, 109)
    oprot:writeListBegin(TType.I32, #self.firstTimeCurrencyRewardAmounts)
    for _,iter267 in ipairs(self.firstTimeCurrencyRewardAmounts) do
      oprot:writeI32(iter267)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.icon ~= nil then
    oprot:writeFieldBegin('icon', TType.STRING, 110)
    oprot:writeString(self.icon)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NewLevel = __TObject:new{
  levelId,
  levelName,
  levelRequirements,
  buildingId,
  islandId,
  villainThrowLimit,
  levelType,
  levelNumber,
  eventIds,
  rankMin,
  newEventIds,
  eventPhases,
  starScores,
  tutorial,
  oneStarRewardListId,
  twoStarRewardListId,
  threeStarRewardListId,
  staminaCost,
  ticketBonusCurrencyId,
  ticketBonus,
  expansionRewardIds,
  expansionRewardAmounts,
  levelDotId,
  npcId,
  closedText,
  playText1Star,
  playText2Star,
  playText3Star,
  winText1Star,
  winText2Star,
  winText3Star,
  winText1StarReplay,
  winText2StarReplay,
  winText3StarReplay,
  newDisplay,
  startText0Star,
  startText1Star,
  startText2Star,
  startText3Star,
  successText1Star,
  successText2Star,
  successText3Star,
  firstTimeCurrencyRewardIds,
  firstTimeCurrencyRewardAmounts,
  icon,
  backgroundImage,
  cloudImage1,
  cloudImage2,
  cloudImage3,
  parentType,
  parentId,
  consolationPrizeCurrencyIds,
  consolationPrizeCurrencyAmounts
}

function NewLevel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.levelName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.levelRequirements = {}
        local _etype271, _size268 = iprot:readListBegin()
        for _i=1,_size268 do
          local _elem272 = iprot:readString()
          table.insert(self.levelRequirements, _elem272)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.islandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.villainThrowLimit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.levelType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.levelNumber = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype276, _size273 = iprot:readListBegin()
        for _i=1,_size273 do
          local _elem277 = iprot:readString()
          table.insert(self.eventIds, _elem277)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.rankMin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.LIST then
        self.newEventIds = {}
        local _etype281, _size278 = iprot:readListBegin()
        for _i=1,_size278 do
          local _elem282 = iprot:readString()
          table.insert(self.newEventIds, _elem282)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.LIST then
        self.starScores = {}
        local _etype286, _size283 = iprot:readListBegin()
        for _i=1,_size283 do
          local _elem287 = iprot:readI32()
          table.insert(self.starScores, _elem287)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.BOOL then
        self.tutorial = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.oneStarRewardListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.twoStarRewardListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.threeStarRewardListId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.I32 then
        self.staminaCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.ticketBonusCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.I32 then
        self.ticketBonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.LIST then
        self.expansionRewardIds = {}
        local _etype291, _size288 = iprot:readListBegin()
        for _i=1,_size288 do
          local _elem292 = iprot:readString()
          table.insert(self.expansionRewardIds, _elem292)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 63 then
      if ftype == TType.LIST then
        self.expansionRewardAmounts = {}
        local _etype296, _size293 = iprot:readListBegin()
        for _i=1,_size293 do
          local _elem297 = iprot:readI32()
          table.insert(self.expansionRewardAmounts, _elem297)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.levelDotId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.STRING then
        self.npcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.STRING then
        self.closedText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 82 then
      if ftype == TType.STRING then
        self.playText1Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 83 then
      if ftype == TType.STRING then
        self.playText2Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 84 then
      if ftype == TType.STRING then
        self.playText3Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 85 then
      if ftype == TType.STRING then
        self.winText1Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 86 then
      if ftype == TType.STRING then
        self.winText2Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 87 then
      if ftype == TType.STRING then
        self.winText3Star = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 88 then
      if ftype == TType.STRING then
        self.winText1StarReplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 89 then
      if ftype == TType.STRING then
        self.winText2StarReplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 90 then
      if ftype == TType.STRING then
        self.winText3StarReplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 101 then
      if ftype == TType.STRUCT then
        self.startText0Star = LocalizedString:new{}
        self.startText0Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 102 then
      if ftype == TType.STRUCT then
        self.startText1Star = LocalizedString:new{}
        self.startText1Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 103 then
      if ftype == TType.STRUCT then
        self.startText2Star = LocalizedString:new{}
        self.startText2Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 104 then
      if ftype == TType.STRUCT then
        self.startText3Star = LocalizedString:new{}
        self.startText3Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 105 then
      if ftype == TType.STRUCT then
        self.successText1Star = LocalizedString:new{}
        self.successText1Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 106 then
      if ftype == TType.STRUCT then
        self.successText2Star = LocalizedString:new{}
        self.successText2Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 107 then
      if ftype == TType.STRUCT then
        self.successText3Star = LocalizedString:new{}
        self.successText3Star:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 108 then
      if ftype == TType.LIST then
        self.firstTimeCurrencyRewardIds = {}
        local _etype301, _size298 = iprot:readListBegin()
        for _i=1,_size298 do
          local _elem302 = iprot:readString()
          table.insert(self.firstTimeCurrencyRewardIds, _elem302)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 109 then
      if ftype == TType.LIST then
        self.firstTimeCurrencyRewardAmounts = {}
        local _etype306, _size303 = iprot:readListBegin()
        for _i=1,_size303 do
          local _elem307 = iprot:readI32()
          table.insert(self.firstTimeCurrencyRewardAmounts, _elem307)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.STRING then
        self.icon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 120 then
      if ftype == TType.STRING then
        self.backgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 121 then
      if ftype == TType.STRING then
        self.cloudImage1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 122 then
      if ftype == TType.STRING then
        self.cloudImage2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 123 then
      if ftype == TType.STRING then
        self.cloudImage3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 124 then
      if ftype == TType.I32 then
        self.parentType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 125 then
      if ftype == TType.STRING then
        self.parentId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 126 then
      if ftype == TType.LIST then
        self.consolationPrizeCurrencyIds = {}
        local _etype311, _size308 = iprot:readListBegin()
        for _i=1,_size308 do
          local _elem312 = iprot:readString()
          table.insert(self.consolationPrizeCurrencyIds, _elem312)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 127 then
      if ftype == TType.LIST then
        self.consolationPrizeCurrencyAmounts = {}
        local _etype316, _size313 = iprot:readListBegin()
        for _i=1,_size313 do
          local _elem317 = iprot:readI32()
          table.insert(self.consolationPrizeCurrencyAmounts, _elem317)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NewLevel:write(oprot)
  oprot:writeStructBegin('NewLevel')
  if self.levelId ~= nil then
    oprot:writeFieldBegin('levelId', TType.STRING, 1)
    oprot:writeString(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.levelName ~= nil then
    oprot:writeFieldBegin('levelName', TType.STRING, 2)
    oprot:writeString(self.levelName)
    oprot:writeFieldEnd()
  end
  if self.levelRequirements ~= nil then
    oprot:writeFieldBegin('levelRequirements', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.levelRequirements)
    for _,iter318 in ipairs(self.levelRequirements) do
      oprot:writeString(iter318)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 4)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.islandId ~= nil then
    oprot:writeFieldBegin('islandId', TType.STRING, 5)
    oprot:writeString(self.islandId)
    oprot:writeFieldEnd()
  end
  if self.villainThrowLimit ~= nil then
    oprot:writeFieldBegin('villainThrowLimit', TType.I32, 6)
    oprot:writeI32(self.villainThrowLimit)
    oprot:writeFieldEnd()
  end
  if self.levelType ~= nil then
    oprot:writeFieldBegin('levelType', TType.I32, 7)
    oprot:writeI32(self.levelType)
    oprot:writeFieldEnd()
  end
  if self.levelNumber ~= nil then
    oprot:writeFieldBegin('levelNumber', TType.I32, 10)
    oprot:writeI32(self.levelNumber)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter319 in ipairs(self.eventIds) do
      oprot:writeString(iter319)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.rankMin ~= nil then
    oprot:writeFieldBegin('rankMin', TType.I32, 13)
    oprot:writeI32(self.rankMin)
    oprot:writeFieldEnd()
  end
  if self.newEventIds ~= nil then
    oprot:writeFieldBegin('newEventIds', TType.LIST, 14)
    oprot:writeListBegin(TType.STRING, #self.newEventIds)
    for _,iter320 in ipairs(self.newEventIds) do
      oprot:writeString(iter320)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 15)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.starScores ~= nil then
    oprot:writeFieldBegin('starScores', TType.LIST, 22)
    oprot:writeListBegin(TType.I32, #self.starScores)
    for _,iter321 in ipairs(self.starScores) do
      oprot:writeI32(iter321)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.tutorial ~= nil then
    oprot:writeFieldBegin('tutorial', TType.BOOL, 24)
    oprot:writeBool(self.tutorial)
    oprot:writeFieldEnd()
  end
  if self.oneStarRewardListId ~= nil then
    oprot:writeFieldBegin('oneStarRewardListId', TType.STRING, 30)
    oprot:writeString(self.oneStarRewardListId)
    oprot:writeFieldEnd()
  end
  if self.twoStarRewardListId ~= nil then
    oprot:writeFieldBegin('twoStarRewardListId', TType.STRING, 31)
    oprot:writeString(self.twoStarRewardListId)
    oprot:writeFieldEnd()
  end
  if self.threeStarRewardListId ~= nil then
    oprot:writeFieldBegin('threeStarRewardListId', TType.STRING, 32)
    oprot:writeString(self.threeStarRewardListId)
    oprot:writeFieldEnd()
  end
  if self.staminaCost ~= nil then
    oprot:writeFieldBegin('staminaCost', TType.I32, 53)
    oprot:writeI32(self.staminaCost)
    oprot:writeFieldEnd()
  end
  if self.ticketBonusCurrencyId ~= nil then
    oprot:writeFieldBegin('ticketBonusCurrencyId', TType.STRING, 60)
    oprot:writeString(self.ticketBonusCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.ticketBonus ~= nil then
    oprot:writeFieldBegin('ticketBonus', TType.I32, 61)
    oprot:writeI32(self.ticketBonus)
    oprot:writeFieldEnd()
  end
  if self.expansionRewardIds ~= nil then
    oprot:writeFieldBegin('expansionRewardIds', TType.LIST, 62)
    oprot:writeListBegin(TType.STRING, #self.expansionRewardIds)
    for _,iter322 in ipairs(self.expansionRewardIds) do
      oprot:writeString(iter322)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.expansionRewardAmounts ~= nil then
    oprot:writeFieldBegin('expansionRewardAmounts', TType.LIST, 63)
    oprot:writeListBegin(TType.I32, #self.expansionRewardAmounts)
    for _,iter323 in ipairs(self.expansionRewardAmounts) do
      oprot:writeI32(iter323)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.levelDotId ~= nil then
    oprot:writeFieldBegin('levelDotId', TType.STRING, 70)
    oprot:writeString(self.levelDotId)
    oprot:writeFieldEnd()
  end
  if self.npcId ~= nil then
    oprot:writeFieldBegin('npcId', TType.STRING, 80)
    oprot:writeString(self.npcId)
    oprot:writeFieldEnd()
  end
  if self.closedText ~= nil then
    oprot:writeFieldBegin('closedText', TType.STRING, 81)
    oprot:writeString(self.closedText)
    oprot:writeFieldEnd()
  end
  if self.playText1Star ~= nil then
    oprot:writeFieldBegin('playText1Star', TType.STRING, 82)
    oprot:writeString(self.playText1Star)
    oprot:writeFieldEnd()
  end
  if self.playText2Star ~= nil then
    oprot:writeFieldBegin('playText2Star', TType.STRING, 83)
    oprot:writeString(self.playText2Star)
    oprot:writeFieldEnd()
  end
  if self.playText3Star ~= nil then
    oprot:writeFieldBegin('playText3Star', TType.STRING, 84)
    oprot:writeString(self.playText3Star)
    oprot:writeFieldEnd()
  end
  if self.winText1Star ~= nil then
    oprot:writeFieldBegin('winText1Star', TType.STRING, 85)
    oprot:writeString(self.winText1Star)
    oprot:writeFieldEnd()
  end
  if self.winText2Star ~= nil then
    oprot:writeFieldBegin('winText2Star', TType.STRING, 86)
    oprot:writeString(self.winText2Star)
    oprot:writeFieldEnd()
  end
  if self.winText3Star ~= nil then
    oprot:writeFieldBegin('winText3Star', TType.STRING, 87)
    oprot:writeString(self.winText3Star)
    oprot:writeFieldEnd()
  end
  if self.winText1StarReplay ~= nil then
    oprot:writeFieldBegin('winText1StarReplay', TType.STRING, 88)
    oprot:writeString(self.winText1StarReplay)
    oprot:writeFieldEnd()
  end
  if self.winText2StarReplay ~= nil then
    oprot:writeFieldBegin('winText2StarReplay', TType.STRING, 89)
    oprot:writeString(self.winText2StarReplay)
    oprot:writeFieldEnd()
  end
  if self.winText3StarReplay ~= nil then
    oprot:writeFieldBegin('winText3StarReplay', TType.STRING, 90)
    oprot:writeString(self.winText3StarReplay)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 100)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startText0Star ~= nil then
    oprot:writeFieldBegin('startText0Star', TType.STRUCT, 101)
    self.startText0Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startText1Star ~= nil then
    oprot:writeFieldBegin('startText1Star', TType.STRUCT, 102)
    self.startText1Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startText2Star ~= nil then
    oprot:writeFieldBegin('startText2Star', TType.STRUCT, 103)
    self.startText2Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startText3Star ~= nil then
    oprot:writeFieldBegin('startText3Star', TType.STRUCT, 104)
    self.startText3Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.successText1Star ~= nil then
    oprot:writeFieldBegin('successText1Star', TType.STRUCT, 105)
    self.successText1Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.successText2Star ~= nil then
    oprot:writeFieldBegin('successText2Star', TType.STRUCT, 106)
    self.successText2Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.successText3Star ~= nil then
    oprot:writeFieldBegin('successText3Star', TType.STRUCT, 107)
    self.successText3Star:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.firstTimeCurrencyRewardIds ~= nil then
    oprot:writeFieldBegin('firstTimeCurrencyRewardIds', TType.LIST, 108)
    oprot:writeListBegin(TType.STRING, #self.firstTimeCurrencyRewardIds)
    for _,iter324 in ipairs(self.firstTimeCurrencyRewardIds) do
      oprot:writeString(iter324)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.firstTimeCurrencyRewardAmounts ~= nil then
    oprot:writeFieldBegin('firstTimeCurrencyRewardAmounts', TType.LIST, 109)
    oprot:writeListBegin(TType.I32, #self.firstTimeCurrencyRewardAmounts)
    for _,iter325 in ipairs(self.firstTimeCurrencyRewardAmounts) do
      oprot:writeI32(iter325)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.icon ~= nil then
    oprot:writeFieldBegin('icon', TType.STRING, 110)
    oprot:writeString(self.icon)
    oprot:writeFieldEnd()
  end
  if self.backgroundImage ~= nil then
    oprot:writeFieldBegin('backgroundImage', TType.STRING, 120)
    oprot:writeString(self.backgroundImage)
    oprot:writeFieldEnd()
  end
  if self.cloudImage1 ~= nil then
    oprot:writeFieldBegin('cloudImage1', TType.STRING, 121)
    oprot:writeString(self.cloudImage1)
    oprot:writeFieldEnd()
  end
  if self.cloudImage2 ~= nil then
    oprot:writeFieldBegin('cloudImage2', TType.STRING, 122)
    oprot:writeString(self.cloudImage2)
    oprot:writeFieldEnd()
  end
  if self.cloudImage3 ~= nil then
    oprot:writeFieldBegin('cloudImage3', TType.STRING, 123)
    oprot:writeString(self.cloudImage3)
    oprot:writeFieldEnd()
  end
  if self.parentType ~= nil then
    oprot:writeFieldBegin('parentType', TType.I32, 124)
    oprot:writeI32(self.parentType)
    oprot:writeFieldEnd()
  end
  if self.parentId ~= nil then
    oprot:writeFieldBegin('parentId', TType.STRING, 125)
    oprot:writeString(self.parentId)
    oprot:writeFieldEnd()
  end
  if self.consolationPrizeCurrencyIds ~= nil then
    oprot:writeFieldBegin('consolationPrizeCurrencyIds', TType.LIST, 126)
    oprot:writeListBegin(TType.STRING, #self.consolationPrizeCurrencyIds)
    for _,iter326 in ipairs(self.consolationPrizeCurrencyIds) do
      oprot:writeString(iter326)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.consolationPrizeCurrencyAmounts ~= nil then
    oprot:writeFieldBegin('consolationPrizeCurrencyAmounts', TType.LIST, 127)
    oprot:writeListBegin(TType.I32, #self.consolationPrizeCurrencyAmounts)
    for _,iter327 in ipairs(self.consolationPrizeCurrencyAmounts) do
      oprot:writeI32(iter327)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MatchThreeData = __TObject:new{
  levelName,
  numMoves,
  starScores,
  numRows,
  numColumns,
  numColors,
  extraCount,
  villainId,
  villainF,
  villainN,
  villainMechanicMin,
  villainMechanicMax,
  villainMargin,
  villainStartDelay,
  villainThrowZoneArt,
  extraLua,
  orderCount,
  orderCountType,
  introuced,
  hiddenCellDropsPermil,
  giftDropsPermil,
  uselessDropsPermil,
  carrotDropsPermil,
  eggplantDropsPermil,
  tomatoDropsPermil,
  eventPointDropsPermil,
  slimeArt,
  slimeString,
  conveyorart,
  bottomfenceart,
  rightfenceart,
  spriteart,
  freezeart,
  cellart,
  blueWeight,
  greenWeight,
  orangeWeight,
  chocoWeight,
  pinkWeight,
  clearWeight,
  villainThrowTypes,
  villainThrowWeights
}

function MatchThreeData:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.numMoves = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.starScores = {}
        local _etype331, _size328 = iprot:readListBegin()
        for _i=1,_size328 do
          local _elem332 = iprot:readI32()
          table.insert(self.starScores, _elem332)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.numRows = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.numColumns = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.numColors = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.extraCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.villainId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.villainF = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.villainN = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.villainMechanicMin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.villainMechanicMax = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.I32 then
        self.villainMargin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.I32 then
        self.villainStartDelay = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.STRING then
        self.villainThrowZoneArt = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.extraLua = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.LIST then
        self.orderCount = {}
        local _etype336, _size333 = iprot:readListBegin()
        for _i=1,_size333 do
          local _elem337 = iprot:readI32()
          table.insert(self.orderCount, _elem337)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.LIST then
        self.orderCountType = {}
        local _etype341, _size338 = iprot:readListBegin()
        for _i=1,_size338 do
          local _elem342 = iprot:readString()
          table.insert(self.orderCountType, _elem342)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.introuced = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.hiddenCellDropsPermil = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.I32 then
        self.giftDropsPermil = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.I32 then
        self.uselessDropsPermil = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.I32 then
        self.carrotDropsPermil = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.I32 then
        self.eggplantDropsPermil = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 55 then
      if ftype == TType.I32 then
        self.tomatoDropsPermil = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 56 then
      if ftype == TType.I32 then
        self.eventPointDropsPermil = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.STRING then
        self.slimeArt = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 72 then
      if ftype == TType.STRING then
        self.slimeString = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 73 then
      if ftype == TType.STRING then
        self.conveyorart = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 74 then
      if ftype == TType.STRING then
        self.bottomfenceart = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 75 then
      if ftype == TType.STRING then
        self.rightfenceart = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 76 then
      if ftype == TType.STRING then
        self.spriteart = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 77 then
      if ftype == TType.STRING then
        self.freezeart = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 78 then
      if ftype == TType.STRING then
        self.cellart = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.I32 then
        self.blueWeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.I32 then
        self.greenWeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 82 then
      if ftype == TType.I32 then
        self.orangeWeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 83 then
      if ftype == TType.I32 then
        self.chocoWeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 84 then
      if ftype == TType.I32 then
        self.pinkWeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 85 then
      if ftype == TType.I32 then
        self.clearWeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 86 then
      if ftype == TType.LIST then
        self.villainThrowTypes = {}
        local _etype346, _size343 = iprot:readListBegin()
        for _i=1,_size343 do
          local _elem347 = iprot:readString()
          table.insert(self.villainThrowTypes, _elem347)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 87 then
      if ftype == TType.LIST then
        self.villainThrowWeights = {}
        local _etype351, _size348 = iprot:readListBegin()
        for _i=1,_size348 do
          local _elem352 = iprot:readI32()
          table.insert(self.villainThrowWeights, _elem352)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MatchThreeData:write(oprot)
  oprot:writeStructBegin('MatchThreeData')
  if self.levelName ~= nil then
    oprot:writeFieldBegin('levelName', TType.STRING, 1)
    oprot:writeString(self.levelName)
    oprot:writeFieldEnd()
  end
  if self.numMoves ~= nil then
    oprot:writeFieldBegin('numMoves', TType.I32, 2)
    oprot:writeI32(self.numMoves)
    oprot:writeFieldEnd()
  end
  if self.starScores ~= nil then
    oprot:writeFieldBegin('starScores', TType.LIST, 3)
    oprot:writeListBegin(TType.I32, #self.starScores)
    for _,iter353 in ipairs(self.starScores) do
      oprot:writeI32(iter353)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.numRows ~= nil then
    oprot:writeFieldBegin('numRows', TType.I32, 4)
    oprot:writeI32(self.numRows)
    oprot:writeFieldEnd()
  end
  if self.numColumns ~= nil then
    oprot:writeFieldBegin('numColumns', TType.I32, 5)
    oprot:writeI32(self.numColumns)
    oprot:writeFieldEnd()
  end
  if self.numColors ~= nil then
    oprot:writeFieldBegin('numColors', TType.I32, 6)
    oprot:writeI32(self.numColors)
    oprot:writeFieldEnd()
  end
  if self.extraCount ~= nil then
    oprot:writeFieldBegin('extraCount', TType.I32, 7)
    oprot:writeI32(self.extraCount)
    oprot:writeFieldEnd()
  end
  if self.villainId ~= nil then
    oprot:writeFieldBegin('villainId', TType.STRING, 20)
    oprot:writeString(self.villainId)
    oprot:writeFieldEnd()
  end
  if self.villainF ~= nil then
    oprot:writeFieldBegin('villainF', TType.I32, 21)
    oprot:writeI32(self.villainF)
    oprot:writeFieldEnd()
  end
  if self.villainN ~= nil then
    oprot:writeFieldBegin('villainN', TType.I32, 22)
    oprot:writeI32(self.villainN)
    oprot:writeFieldEnd()
  end
  if self.villainMechanicMin ~= nil then
    oprot:writeFieldBegin('villainMechanicMin', TType.I32, 23)
    oprot:writeI32(self.villainMechanicMin)
    oprot:writeFieldEnd()
  end
  if self.villainMechanicMax ~= nil then
    oprot:writeFieldBegin('villainMechanicMax', TType.I32, 24)
    oprot:writeI32(self.villainMechanicMax)
    oprot:writeFieldEnd()
  end
  if self.villainMargin ~= nil then
    oprot:writeFieldBegin('villainMargin', TType.I32, 25)
    oprot:writeI32(self.villainMargin)
    oprot:writeFieldEnd()
  end
  if self.villainStartDelay ~= nil then
    oprot:writeFieldBegin('villainStartDelay', TType.I32, 26)
    oprot:writeI32(self.villainStartDelay)
    oprot:writeFieldEnd()
  end
  if self.villainThrowZoneArt ~= nil then
    oprot:writeFieldBegin('villainThrowZoneArt', TType.STRING, 27)
    oprot:writeString(self.villainThrowZoneArt)
    oprot:writeFieldEnd()
  end
  if self.extraLua ~= nil then
    oprot:writeFieldBegin('extraLua', TType.STRING, 30)
    oprot:writeString(self.extraLua)
    oprot:writeFieldEnd()
  end
  if self.orderCount ~= nil then
    oprot:writeFieldBegin('orderCount', TType.LIST, 31)
    oprot:writeListBegin(TType.I32, #self.orderCount)
    for _,iter354 in ipairs(self.orderCount) do
      oprot:writeI32(iter354)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.orderCountType ~= nil then
    oprot:writeFieldBegin('orderCountType', TType.LIST, 33)
    oprot:writeListBegin(TType.STRING, #self.orderCountType)
    for _,iter355 in ipairs(self.orderCountType) do
      oprot:writeString(iter355)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.introuced ~= nil then
    oprot:writeFieldBegin('introuced', TType.STRING, 32)
    oprot:writeString(self.introuced)
    oprot:writeFieldEnd()
  end
  if self.hiddenCellDropsPermil ~= nil then
    oprot:writeFieldBegin('hiddenCellDropsPermil', TType.I32, 50)
    oprot:writeI32(self.hiddenCellDropsPermil)
    oprot:writeFieldEnd()
  end
  if self.giftDropsPermil ~= nil then
    oprot:writeFieldBegin('giftDropsPermil', TType.I32, 51)
    oprot:writeI32(self.giftDropsPermil)
    oprot:writeFieldEnd()
  end
  if self.uselessDropsPermil ~= nil then
    oprot:writeFieldBegin('uselessDropsPermil', TType.I32, 52)
    oprot:writeI32(self.uselessDropsPermil)
    oprot:writeFieldEnd()
  end
  if self.carrotDropsPermil ~= nil then
    oprot:writeFieldBegin('carrotDropsPermil', TType.I32, 53)
    oprot:writeI32(self.carrotDropsPermil)
    oprot:writeFieldEnd()
  end
  if self.eggplantDropsPermil ~= nil then
    oprot:writeFieldBegin('eggplantDropsPermil', TType.I32, 54)
    oprot:writeI32(self.eggplantDropsPermil)
    oprot:writeFieldEnd()
  end
  if self.tomatoDropsPermil ~= nil then
    oprot:writeFieldBegin('tomatoDropsPermil', TType.I32, 55)
    oprot:writeI32(self.tomatoDropsPermil)
    oprot:writeFieldEnd()
  end
  if self.eventPointDropsPermil ~= nil then
    oprot:writeFieldBegin('eventPointDropsPermil', TType.I32, 56)
    oprot:writeI32(self.eventPointDropsPermil)
    oprot:writeFieldEnd()
  end
  if self.slimeArt ~= nil then
    oprot:writeFieldBegin('slimeArt', TType.STRING, 71)
    oprot:writeString(self.slimeArt)
    oprot:writeFieldEnd()
  end
  if self.slimeString ~= nil then
    oprot:writeFieldBegin('slimeString', TType.STRING, 72)
    oprot:writeString(self.slimeString)
    oprot:writeFieldEnd()
  end
  if self.conveyorart ~= nil then
    oprot:writeFieldBegin('conveyorart', TType.STRING, 73)
    oprot:writeString(self.conveyorart)
    oprot:writeFieldEnd()
  end
  if self.bottomfenceart ~= nil then
    oprot:writeFieldBegin('bottomfenceart', TType.STRING, 74)
    oprot:writeString(self.bottomfenceart)
    oprot:writeFieldEnd()
  end
  if self.rightfenceart ~= nil then
    oprot:writeFieldBegin('rightfenceart', TType.STRING, 75)
    oprot:writeString(self.rightfenceart)
    oprot:writeFieldEnd()
  end
  if self.spriteart ~= nil then
    oprot:writeFieldBegin('spriteart', TType.STRING, 76)
    oprot:writeString(self.spriteart)
    oprot:writeFieldEnd()
  end
  if self.freezeart ~= nil then
    oprot:writeFieldBegin('freezeart', TType.STRING, 77)
    oprot:writeString(self.freezeart)
    oprot:writeFieldEnd()
  end
  if self.cellart ~= nil then
    oprot:writeFieldBegin('cellart', TType.STRING, 78)
    oprot:writeString(self.cellart)
    oprot:writeFieldEnd()
  end
  if self.blueWeight ~= nil then
    oprot:writeFieldBegin('blueWeight', TType.I32, 80)
    oprot:writeI32(self.blueWeight)
    oprot:writeFieldEnd()
  end
  if self.greenWeight ~= nil then
    oprot:writeFieldBegin('greenWeight', TType.I32, 81)
    oprot:writeI32(self.greenWeight)
    oprot:writeFieldEnd()
  end
  if self.orangeWeight ~= nil then
    oprot:writeFieldBegin('orangeWeight', TType.I32, 82)
    oprot:writeI32(self.orangeWeight)
    oprot:writeFieldEnd()
  end
  if self.chocoWeight ~= nil then
    oprot:writeFieldBegin('chocoWeight', TType.I32, 83)
    oprot:writeI32(self.chocoWeight)
    oprot:writeFieldEnd()
  end
  if self.pinkWeight ~= nil then
    oprot:writeFieldBegin('pinkWeight', TType.I32, 84)
    oprot:writeI32(self.pinkWeight)
    oprot:writeFieldEnd()
  end
  if self.clearWeight ~= nil then
    oprot:writeFieldBegin('clearWeight', TType.I32, 85)
    oprot:writeI32(self.clearWeight)
    oprot:writeFieldEnd()
  end
  if self.villainThrowTypes ~= nil then
    oprot:writeFieldBegin('villainThrowTypes', TType.LIST, 86)
    oprot:writeListBegin(TType.STRING, #self.villainThrowTypes)
    for _,iter356 in ipairs(self.villainThrowTypes) do
      oprot:writeString(iter356)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.villainThrowWeights ~= nil then
    oprot:writeFieldBegin('villainThrowWeights', TType.LIST, 87)
    oprot:writeListBegin(TType.I32, #self.villainThrowWeights)
    for _,iter357 in ipairs(self.villainThrowWeights) do
      oprot:writeI32(iter357)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Villain = __TObject:new{
  villainId,
  villainImage,
  villainThrowImage,
  animationName,
  villainThrowCells,
  throwCellLoseText,
  mechanicMin,
  mechanicMax
}

function Villain:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.villainId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.villainImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.villainThrowImage = {}
        local _etype361, _size358 = iprot:readListBegin()
        for _i=1,_size358 do
          local _elem362 = iprot:readString()
          table.insert(self.villainThrowImage, _elem362)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.animationName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.villainThrowCells = {}
        local _etype366, _size363 = iprot:readListBegin()
        for _i=1,_size363 do
          local _elem367 = iprot:readString()
          table.insert(self.villainThrowCells, _elem367)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.throwCellLoseText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.mechanicMin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.mechanicMax = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Villain:write(oprot)
  oprot:writeStructBegin('Villain')
  if self.villainId ~= nil then
    oprot:writeFieldBegin('villainId', TType.STRING, 1)
    oprot:writeString(self.villainId)
    oprot:writeFieldEnd()
  end
  if self.villainImage ~= nil then
    oprot:writeFieldBegin('villainImage', TType.STRING, 2)
    oprot:writeString(self.villainImage)
    oprot:writeFieldEnd()
  end
  if self.villainThrowImage ~= nil then
    oprot:writeFieldBegin('villainThrowImage', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.villainThrowImage)
    for _,iter368 in ipairs(self.villainThrowImage) do
      oprot:writeString(iter368)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.animationName ~= nil then
    oprot:writeFieldBegin('animationName', TType.STRING, 4)
    oprot:writeString(self.animationName)
    oprot:writeFieldEnd()
  end
  if self.villainThrowCells ~= nil then
    oprot:writeFieldBegin('villainThrowCells', TType.LIST, 5)
    oprot:writeListBegin(TType.STRING, #self.villainThrowCells)
    for _,iter369 in ipairs(self.villainThrowCells) do
      oprot:writeString(iter369)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.throwCellLoseText ~= nil then
    oprot:writeFieldBegin('throwCellLoseText', TType.STRING, 6)
    oprot:writeString(self.throwCellLoseText)
    oprot:writeFieldEnd()
  end
  if self.mechanicMin ~= nil then
    oprot:writeFieldBegin('mechanicMin', TType.I32, 7)
    oprot:writeI32(self.mechanicMin)
    oprot:writeFieldEnd()
  end
  if self.mechanicMax ~= nil then
    oprot:writeFieldBegin('mechanicMax', TType.I32, 8)
    oprot:writeI32(self.mechanicMax)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LevelCampaignStyle = __TObject:new{
  levelCampaignStyleId,
  campaignTMXFile,
  characterNameBg,
  myBalloonWithAvatar,
  myBalloonWithoutAvatar,
  hudButtonImage,
  topHudBannerBg,
  campaignTitleBg9,
  campaignTimerBg9,
  leaderboardChestOnBanner,
  infoButtonImage,
  leaderboardTrophyImageOnHudButton,
  eventStoreImageOnHudButton,
  rewardChestTextBg,
  eventListBanner,
  eventListTitleTextColor,
  eventListStarTextColor,
  eventListvillainID,
  topRewardText,
  topPlayerText,
  getMoreKeyText,
  specialBoosterText,
  eventStoreText,
  campaignBackground,
  campaignMapPadding
}

function LevelCampaignStyle:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelCampaignStyleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.campaignTMXFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.characterNameBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.myBalloonWithAvatar = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.myBalloonWithoutAvatar = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.hudButtonImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.topHudBannerBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.campaignTitleBg9 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.campaignTimerBg9 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.leaderboardChestOnBanner = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.infoButtonImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.leaderboardTrophyImageOnHudButton = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.eventStoreImageOnHudButton = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.rewardChestTextBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.eventListBanner = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.eventListTitleTextColor = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.eventListStarTextColor = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRING then
        self.eventListvillainID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRUCT then
        self.topRewardText = LocalizedString:new{}
        self.topRewardText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRUCT then
        self.topPlayerText = LocalizedString:new{}
        self.topPlayerText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRUCT then
        self.getMoreKeyText = LocalizedString:new{}
        self.getMoreKeyText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.STRUCT then
        self.specialBoosterText = LocalizedString:new{}
        self.specialBoosterText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.STRUCT then
        self.eventStoreText = LocalizedString:new{}
        self.eventStoreText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.campaignBackground = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.I32 then
        self.campaignMapPadding = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LevelCampaignStyle:write(oprot)
  oprot:writeStructBegin('LevelCampaignStyle')
  if self.levelCampaignStyleId ~= nil then
    oprot:writeFieldBegin('levelCampaignStyleId', TType.STRING, 1)
    oprot:writeString(self.levelCampaignStyleId)
    oprot:writeFieldEnd()
  end
  if self.campaignTMXFile ~= nil then
    oprot:writeFieldBegin('campaignTMXFile', TType.STRING, 2)
    oprot:writeString(self.campaignTMXFile)
    oprot:writeFieldEnd()
  end
  if self.characterNameBg ~= nil then
    oprot:writeFieldBegin('characterNameBg', TType.STRING, 3)
    oprot:writeString(self.characterNameBg)
    oprot:writeFieldEnd()
  end
  if self.myBalloonWithAvatar ~= nil then
    oprot:writeFieldBegin('myBalloonWithAvatar', TType.STRING, 4)
    oprot:writeString(self.myBalloonWithAvatar)
    oprot:writeFieldEnd()
  end
  if self.myBalloonWithoutAvatar ~= nil then
    oprot:writeFieldBegin('myBalloonWithoutAvatar', TType.STRING, 5)
    oprot:writeString(self.myBalloonWithoutAvatar)
    oprot:writeFieldEnd()
  end
  if self.hudButtonImage ~= nil then
    oprot:writeFieldBegin('hudButtonImage', TType.STRING, 6)
    oprot:writeString(self.hudButtonImage)
    oprot:writeFieldEnd()
  end
  if self.topHudBannerBg ~= nil then
    oprot:writeFieldBegin('topHudBannerBg', TType.STRING, 7)
    oprot:writeString(self.topHudBannerBg)
    oprot:writeFieldEnd()
  end
  if self.campaignTitleBg9 ~= nil then
    oprot:writeFieldBegin('campaignTitleBg9', TType.STRING, 8)
    oprot:writeString(self.campaignTitleBg9)
    oprot:writeFieldEnd()
  end
  if self.campaignTimerBg9 ~= nil then
    oprot:writeFieldBegin('campaignTimerBg9', TType.STRING, 9)
    oprot:writeString(self.campaignTimerBg9)
    oprot:writeFieldEnd()
  end
  if self.leaderboardChestOnBanner ~= nil then
    oprot:writeFieldBegin('leaderboardChestOnBanner', TType.STRING, 10)
    oprot:writeString(self.leaderboardChestOnBanner)
    oprot:writeFieldEnd()
  end
  if self.infoButtonImage ~= nil then
    oprot:writeFieldBegin('infoButtonImage', TType.STRING, 11)
    oprot:writeString(self.infoButtonImage)
    oprot:writeFieldEnd()
  end
  if self.leaderboardTrophyImageOnHudButton ~= nil then
    oprot:writeFieldBegin('leaderboardTrophyImageOnHudButton', TType.STRING, 20)
    oprot:writeString(self.leaderboardTrophyImageOnHudButton)
    oprot:writeFieldEnd()
  end
  if self.eventStoreImageOnHudButton ~= nil then
    oprot:writeFieldBegin('eventStoreImageOnHudButton', TType.STRING, 21)
    oprot:writeString(self.eventStoreImageOnHudButton)
    oprot:writeFieldEnd()
  end
  if self.rewardChestTextBg ~= nil then
    oprot:writeFieldBegin('rewardChestTextBg', TType.STRING, 22)
    oprot:writeString(self.rewardChestTextBg)
    oprot:writeFieldEnd()
  end
  if self.eventListBanner ~= nil then
    oprot:writeFieldBegin('eventListBanner', TType.STRING, 30)
    oprot:writeString(self.eventListBanner)
    oprot:writeFieldEnd()
  end
  if self.eventListTitleTextColor ~= nil then
    oprot:writeFieldBegin('eventListTitleTextColor', TType.STRING, 31)
    oprot:writeString(self.eventListTitleTextColor)
    oprot:writeFieldEnd()
  end
  if self.eventListStarTextColor ~= nil then
    oprot:writeFieldBegin('eventListStarTextColor', TType.STRING, 32)
    oprot:writeString(self.eventListStarTextColor)
    oprot:writeFieldEnd()
  end
  if self.eventListvillainID ~= nil then
    oprot:writeFieldBegin('eventListvillainID', TType.STRING, 33)
    oprot:writeString(self.eventListvillainID)
    oprot:writeFieldEnd()
  end
  if self.topRewardText ~= nil then
    oprot:writeFieldBegin('topRewardText', TType.STRUCT, 40)
    self.topRewardText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.topPlayerText ~= nil then
    oprot:writeFieldBegin('topPlayerText', TType.STRUCT, 41)
    self.topPlayerText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.getMoreKeyText ~= nil then
    oprot:writeFieldBegin('getMoreKeyText', TType.STRUCT, 42)
    self.getMoreKeyText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.specialBoosterText ~= nil then
    oprot:writeFieldBegin('specialBoosterText', TType.STRUCT, 43)
    self.specialBoosterText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.eventStoreText ~= nil then
    oprot:writeFieldBegin('eventStoreText', TType.STRUCT, 44)
    self.eventStoreText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.campaignBackground ~= nil then
    oprot:writeFieldBegin('campaignBackground', TType.STRING, 50)
    oprot:writeString(self.campaignBackground)
    oprot:writeFieldEnd()
  end
  if self.campaignMapPadding ~= nil then
    oprot:writeFieldBegin('campaignMapPadding', TType.I32, 60)
    oprot:writeI32(self.campaignMapPadding)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LevelCampaign = __TObject:new{
  levelCampaignId,
  campaignType,
  displayOrder,
  eventIds,
  eventPhases,
  availability,
  showRank,
  unlockRank,
  hideRank,
  numberOfFloors,
  visibleFloors,
  hidden,
  hideWhenComplete,
  eventIslandId,
  levelCampaignStyleID,
  display,
  bundleId,
  match3ThemeId
}

function LevelCampaign:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelCampaignId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.campaignType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype373, _size370 = iprot:readListBegin()
        for _i=1,_size370 do
          local _elem374 = iprot:readString()
          table.insert(self.eventIds, _elem374)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.availability = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.numberOfFloors = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.I32 then
        self.visibleFloors = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.BOOL then
        self.hidden = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.BOOL then
        self.hideWhenComplete = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.eventIslandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.levelCampaignStyleID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.match3ThemeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LevelCampaign:write(oprot)
  oprot:writeStructBegin('LevelCampaign')
  if self.levelCampaignId ~= nil then
    oprot:writeFieldBegin('levelCampaignId', TType.STRING, 1)
    oprot:writeString(self.levelCampaignId)
    oprot:writeFieldEnd()
  end
  if self.campaignType ~= nil then
    oprot:writeFieldBegin('campaignType', TType.I32, 2)
    oprot:writeI32(self.campaignType)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 10)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter375 in ipairs(self.eventIds) do
      oprot:writeString(iter375)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 12)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.availability ~= nil then
    oprot:writeFieldBegin('availability', TType.I32, 13)
    oprot:writeI32(self.availability)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 14)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 15)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 16)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.numberOfFloors ~= nil then
    oprot:writeFieldBegin('numberOfFloors', TType.I32, 17)
    oprot:writeI32(self.numberOfFloors)
    oprot:writeFieldEnd()
  end
  if self.visibleFloors ~= nil then
    oprot:writeFieldBegin('visibleFloors', TType.I32, 18)
    oprot:writeI32(self.visibleFloors)
    oprot:writeFieldEnd()
  end
  if self.hidden ~= nil then
    oprot:writeFieldBegin('hidden', TType.BOOL, 19)
    oprot:writeBool(self.hidden)
    oprot:writeFieldEnd()
  end
  if self.hideWhenComplete ~= nil then
    oprot:writeFieldBegin('hideWhenComplete', TType.BOOL, 21)
    oprot:writeBool(self.hideWhenComplete)
    oprot:writeFieldEnd()
  end
  if self.eventIslandId ~= nil then
    oprot:writeFieldBegin('eventIslandId', TType.STRING, 22)
    oprot:writeString(self.eventIslandId)
    oprot:writeFieldEnd()
  end
  if self.levelCampaignStyleID ~= nil then
    oprot:writeFieldBegin('levelCampaignStyleID', TType.STRING, 30)
    oprot:writeString(self.levelCampaignStyleID)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 40)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 50)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.match3ThemeId ~= nil then
    oprot:writeFieldBegin('match3ThemeId', TType.STRING, 60)
    oprot:writeString(self.match3ThemeId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LevelCampaignLevelsList = __TObject:new{
  levelCampaignId,
  levelIds
}

function LevelCampaignLevelsList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelCampaignId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.levelIds = {}
        local _etype379, _size376 = iprot:readListBegin()
        for _i=1,_size376 do
          local _elem380 = iprot:readString()
          table.insert(self.levelIds, _elem380)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LevelCampaignLevelsList:write(oprot)
  oprot:writeStructBegin('LevelCampaignLevelsList')
  if self.levelCampaignId ~= nil then
    oprot:writeFieldBegin('levelCampaignId', TType.STRING, 1)
    oprot:writeString(self.levelCampaignId)
    oprot:writeFieldEnd()
  end
  if self.levelIds ~= nil then
    oprot:writeFieldBegin('levelIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.levelIds)
    for _,iter381 in ipairs(self.levelIds) do
      oprot:writeString(iter381)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BusinessLevelsList = __TObject:new{
  levelCampaignId,
  levelIds
}

function BusinessLevelsList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelCampaignId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.levelIds = {}
        local _etype385, _size382 = iprot:readListBegin()
        for _i=1,_size382 do
          local _elem386 = iprot:readString()
          table.insert(self.levelIds, _elem386)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BusinessLevelsList:write(oprot)
  oprot:writeStructBegin('BusinessLevelsList')
  if self.levelCampaignId ~= nil then
    oprot:writeFieldBegin('levelCampaignId', TType.STRING, 1)
    oprot:writeString(self.levelCampaignId)
    oprot:writeFieldEnd()
  end
  if self.levelIds ~= nil then
    oprot:writeFieldBegin('levelIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.levelIds)
    for _,iter387 in ipairs(self.levelIds) do
      oprot:writeString(iter387)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CastleEventLevelsList = __TObject:new{
  levelCampaignId,
  levelIds
}

function CastleEventLevelsList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.levelCampaignId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.levelIds = {}
        local _etype391, _size388 = iprot:readListBegin()
        for _i=1,_size388 do
          local _elem392 = iprot:readString()
          table.insert(self.levelIds, _elem392)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CastleEventLevelsList:write(oprot)
  oprot:writeStructBegin('CastleEventLevelsList')
  if self.levelCampaignId ~= nil then
    oprot:writeFieldBegin('levelCampaignId', TType.STRING, 1)
    oprot:writeString(self.levelCampaignId)
    oprot:writeFieldEnd()
  end
  if self.levelIds ~= nil then
    oprot:writeFieldBegin('levelIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.levelIds)
    for _,iter393 in ipairs(self.levelIds) do
      oprot:writeString(iter393)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CampaignSettings = __TObject:new{
  starterCampaignId,
  starterCampaignLengthDays,
  starterCampaignWidgetPrefix
}

function CampaignSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.starterCampaignId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.starterCampaignLengthDays = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.starterCampaignWidgetPrefix = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CampaignSettings:write(oprot)
  oprot:writeStructBegin('CampaignSettings')
  if self.starterCampaignId ~= nil then
    oprot:writeFieldBegin('starterCampaignId', TType.STRING, 1)
    oprot:writeString(self.starterCampaignId)
    oprot:writeFieldEnd()
  end
  if self.starterCampaignLengthDays ~= nil then
    oprot:writeFieldBegin('starterCampaignLengthDays', TType.I32, 2)
    oprot:writeI32(self.starterCampaignLengthDays)
    oprot:writeFieldEnd()
  end
  if self.starterCampaignWidgetPrefix ~= nil then
    oprot:writeFieldBegin('starterCampaignWidgetPrefix', TType.STRING, 3)
    oprot:writeString(self.starterCampaignWidgetPrefix)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FTUESettings = __TObject:new{
  donutQuestId,
  sundaeQuestId,
  starterEventQuestId,
  disableFtue,
  mainShopEntryId,
  businessBuildingId,
  decoBuildingId,
  evolveDonutStandQuestId
}

function FTUESettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.donutQuestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.sundaeQuestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.starterEventQuestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.disableFtue = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.mainShopEntryId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.businessBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.decoBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.evolveDonutStandQuestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FTUESettings:write(oprot)
  oprot:writeStructBegin('FTUESettings')
  if self.donutQuestId ~= nil then
    oprot:writeFieldBegin('donutQuestId', TType.STRING, 1)
    oprot:writeString(self.donutQuestId)
    oprot:writeFieldEnd()
  end
  if self.sundaeQuestId ~= nil then
    oprot:writeFieldBegin('sundaeQuestId', TType.STRING, 2)
    oprot:writeString(self.sundaeQuestId)
    oprot:writeFieldEnd()
  end
  if self.starterEventQuestId ~= nil then
    oprot:writeFieldBegin('starterEventQuestId', TType.STRING, 3)
    oprot:writeString(self.starterEventQuestId)
    oprot:writeFieldEnd()
  end
  if self.disableFtue ~= nil then
    oprot:writeFieldBegin('disableFtue', TType.BOOL, 10)
    oprot:writeBool(self.disableFtue)
    oprot:writeFieldEnd()
  end
  if self.mainShopEntryId ~= nil then
    oprot:writeFieldBegin('mainShopEntryId', TType.STRING, 20)
    oprot:writeString(self.mainShopEntryId)
    oprot:writeFieldEnd()
  end
  if self.businessBuildingId ~= nil then
    oprot:writeFieldBegin('businessBuildingId', TType.STRING, 21)
    oprot:writeString(self.businessBuildingId)
    oprot:writeFieldEnd()
  end
  if self.decoBuildingId ~= nil then
    oprot:writeFieldBegin('decoBuildingId', TType.STRING, 22)
    oprot:writeString(self.decoBuildingId)
    oprot:writeFieldEnd()
  end
  if self.evolveDonutStandQuestId ~= nil then
    oprot:writeFieldBegin('evolveDonutStandQuestId', TType.STRING, 23)
    oprot:writeString(self.evolveDonutStandQuestId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StartingGameState = __TObject:new{
  gems,
  gold,
  ticket,
  kingdomVersion,
  demoKingdomVersion,
  demoKingdomZoomDuration,
  freeRushOrderBusinessIds,
  freeRushOrderAmounts
}

function StartingGameState:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.gems = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.gold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.ticket = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.kingdomVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.demoKingdomVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.DOUBLE then
        self.demoKingdomZoomDuration = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.LIST then
        self.freeRushOrderBusinessIds = {}
        local _etype397, _size394 = iprot:readListBegin()
        for _i=1,_size394 do
          local _elem398 = iprot:readString()
          table.insert(self.freeRushOrderBusinessIds, _elem398)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.LIST then
        self.freeRushOrderAmounts = {}
        local _etype402, _size399 = iprot:readListBegin()
        for _i=1,_size399 do
          local _elem403 = iprot:readI32()
          table.insert(self.freeRushOrderAmounts, _elem403)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StartingGameState:write(oprot)
  oprot:writeStructBegin('StartingGameState')
  if self.gems ~= nil then
    oprot:writeFieldBegin('gems', TType.I32, 10)
    oprot:writeI32(self.gems)
    oprot:writeFieldEnd()
  end
  if self.gold ~= nil then
    oprot:writeFieldBegin('gold', TType.I32, 12)
    oprot:writeI32(self.gold)
    oprot:writeFieldEnd()
  end
  if self.ticket ~= nil then
    oprot:writeFieldBegin('ticket', TType.I32, 14)
    oprot:writeI32(self.ticket)
    oprot:writeFieldEnd()
  end
  if self.kingdomVersion ~= nil then
    oprot:writeFieldBegin('kingdomVersion', TType.STRING, 15)
    oprot:writeString(self.kingdomVersion)
    oprot:writeFieldEnd()
  end
  if self.demoKingdomVersion ~= nil then
    oprot:writeFieldBegin('demoKingdomVersion', TType.STRING, 16)
    oprot:writeString(self.demoKingdomVersion)
    oprot:writeFieldEnd()
  end
  if self.demoKingdomZoomDuration ~= nil then
    oprot:writeFieldBegin('demoKingdomZoomDuration', TType.DOUBLE, 20)
    oprot:writeDouble(self.demoKingdomZoomDuration)
    oprot:writeFieldEnd()
  end
  if self.freeRushOrderBusinessIds ~= nil then
    oprot:writeFieldBegin('freeRushOrderBusinessIds', TType.LIST, 21)
    oprot:writeListBegin(TType.STRING, #self.freeRushOrderBusinessIds)
    for _,iter404 in ipairs(self.freeRushOrderBusinessIds) do
      oprot:writeString(iter404)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.freeRushOrderAmounts ~= nil then
    oprot:writeFieldBegin('freeRushOrderAmounts', TType.LIST, 22)
    oprot:writeListBegin(TType.I32, #self.freeRushOrderAmounts)
    for _,iter405 in ipairs(self.freeRushOrderAmounts) do
      oprot:writeI32(iter405)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SocialUnlockReward = __TObject:new{
  rewardId,
  currencyId,
  currencyAmount
}

function SocialUnlockReward:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.rewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.currencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SocialUnlockReward:write(oprot)
  oprot:writeStructBegin('SocialUnlockReward')
  if self.rewardId ~= nil then
    oprot:writeFieldBegin('rewardId', TType.STRING, 1)
    oprot:writeString(self.rewardId)
    oprot:writeFieldEnd()
  end
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 2)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.currencyAmount ~= nil then
    oprot:writeFieldBegin('currencyAmount', TType.I32, 3)
    oprot:writeI32(self.currencyAmount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BusinessMenuSettings = __TObject:new{
  getGearGachaGroupId,
  getBusinessGachaGroupId,
  getGearGachaOfferId,
  getBusinessGachaOfferId,
  getGearImage,
  getGearText
}

function BusinessMenuSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.getGearGachaGroupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.getBusinessGachaGroupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.getGearGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.getBusinessGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.getGearImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.getGearText = LocalizedString:new{}
        self.getGearText:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BusinessMenuSettings:write(oprot)
  oprot:writeStructBegin('BusinessMenuSettings')
  if self.getGearGachaGroupId ~= nil then
    oprot:writeFieldBegin('getGearGachaGroupId', TType.STRING, 1)
    oprot:writeString(self.getGearGachaGroupId)
    oprot:writeFieldEnd()
  end
  if self.getBusinessGachaGroupId ~= nil then
    oprot:writeFieldBegin('getBusinessGachaGroupId', TType.STRING, 2)
    oprot:writeString(self.getBusinessGachaGroupId)
    oprot:writeFieldEnd()
  end
  if self.getGearGachaOfferId ~= nil then
    oprot:writeFieldBegin('getGearGachaOfferId', TType.STRING, 3)
    oprot:writeString(self.getGearGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.getBusinessGachaOfferId ~= nil then
    oprot:writeFieldBegin('getBusinessGachaOfferId', TType.STRING, 4)
    oprot:writeString(self.getBusinessGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.getGearImage ~= nil then
    oprot:writeFieldBegin('getGearImage', TType.STRING, 5)
    oprot:writeString(self.getGearImage)
    oprot:writeFieldEnd()
  end
  if self.getGearText ~= nil then
    oprot:writeFieldBegin('getGearText', TType.STRUCT, 6)
    self.getGearText:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Settings = __TObject:new{
  numBusinessMaterialSlots,
  staminaCurrencyId,
  goldCurrencyId,
  xpStatId,
  gemCurrencyId,
  maxFriendInvites,
  disableFtue,
  disableBusinessIdleBullets,
  palPointsCurrencyId,
  disableGoldStopgapMinRank,
  maxAllowedClockChanges,
  maxAllowedClockChangesPeriod,
  refreshMarketOrdersCurrency,
  refreshMarketOrdersCost,
  ticketCurrencyId,
  maxRarity,
  defaultRegularLevelDotID,
  defaultIngredientLevelDotID,
  defaultCakeBoxLevelDotID,
  defaultLevelDotID,
  trackedCurrencies,
  ticketsMinRank,
  defaultDimensions,
  staminaRechargeRate,
  orderBoardSize,
  kingdomAmbientSounds,
  kingdomAmbientMusic,
  localNotificationTimeSlots,
  dailyDecoBonusNotificationHour,
  dailyDecoBonusNotificationRepeatDays,
  socialMaxInactiveMinutes,
  pollIntervalSeconds,
  socialUnlockRewardId,
  maxKingdomSizeX,
  maxKingdomSizeY,
  privacyPolicyURL,
  termsOfUseURL,
  legalURL,
  iOSRateGameURL1,
  iOSRateGameURL2,
  androidRateGameURL1,
  androidRateGameURL2,
  feedbackURL,
  supportURL,
  analyticsSchemaId,
  centerKingdomEntityId,
  watchAdCooldown,
  iOSReRateGameBuildNumber,
  androidReRateGameBuildNumber,
  gachaFtueGachaGroupId,
  gachaFtueRareGachaGroupId,
  recipeIslandFirstRareCakebox,
  gachaFtueGachaOfferId,
  gachaFtueRareGachaOfferId,
  socialMenuMinRank,
  gachaStoreMinRank,
  gachaStorePopoverMinLevel,
  inboxPopoverMinRank,
  gachaBannerDuration,
  placedBuildingStatId,
  spendGemsFTUETriggerOnObjectiveId,
  lockLinearObjectiveProgressionUntilCompleteObjectiveId,
  playerDisplayMaxLength,
  playerDisplayAllowedCharacters,
  autoPopulatePlayerName,
  disableGuild,
  placedBusinessScoreStatId,
  earnedCurrencyBonus,
  keyGearGetMoreText,
  disableEvolveBullet,
  generalStoreId,
  additionalNpcsWalkingOnKingdom
}

function Settings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.numBusinessMaterialSlots = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.staminaCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.goldCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.xpStatId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.gemCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.maxFriendInvites = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.BOOL then
        self.disableFtue = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.BOOL then
        self.disableBusinessIdleBullets = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.palPointsCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.disableGoldStopgapMinRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.I32 then
        self.maxAllowedClockChanges = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.I32 then
        self.maxAllowedClockChangesPeriod = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.STRING then
        self.refreshMarketOrdersCurrency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 29 then
      if ftype == TType.I32 then
        self.refreshMarketOrdersCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.ticketCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.maxRarity = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.defaultRegularLevelDotID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.defaultIngredientLevelDotID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.STRING then
        self.defaultCakeBoxLevelDotID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.STRING then
        self.defaultLevelDotID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.LIST then
        self.trackedCurrencies = {}
        local _etype409, _size406 = iprot:readListBegin()
        for _i=1,_size406 do
          local _elem410 = iprot:readString()
          table.insert(self.trackedCurrencies, _elem410)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.I32 then
        self.ticketsMinRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.LIST then
        self.defaultDimensions = {}
        local _etype414, _size411 = iprot:readListBegin()
        for _i=1,_size411 do
          local _elem415 = iprot:readString()
          table.insert(self.defaultDimensions, _elem415)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.I32 then
        self.staminaRechargeRate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.I32 then
        self.orderBoardSize = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.LIST then
        self.kingdomAmbientSounds = {}
        local _etype419, _size416 = iprot:readListBegin()
        for _i=1,_size416 do
          local _elem420 = iprot:readString()
          table.insert(self.kingdomAmbientSounds, _elem420)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 101 then
      if ftype == TType.LIST then
        self.kingdomAmbientMusic = {}
        local _etype424, _size421 = iprot:readListBegin()
        for _i=1,_size421 do
          local _elem425 = iprot:readString()
          table.insert(self.kingdomAmbientMusic, _elem425)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.LIST then
        self.localNotificationTimeSlots = {}
        local _etype429, _size426 = iprot:readListBegin()
        for _i=1,_size426 do
          local _elem430 = iprot:readI32()
          table.insert(self.localNotificationTimeSlots, _elem430)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 120 then
      if ftype == TType.I32 then
        self.dailyDecoBonusNotificationHour = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 121 then
      if ftype == TType.I32 then
        self.dailyDecoBonusNotificationRepeatDays = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 122 then
      if ftype == TType.I32 then
        self.socialMaxInactiveMinutes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 123 then
      if ftype == TType.I32 then
        self.pollIntervalSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 124 then
      if ftype == TType.STRING then
        self.socialUnlockRewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 130 then
      if ftype == TType.I32 then
        self.maxKingdomSizeX = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 131 then
      if ftype == TType.I32 then
        self.maxKingdomSizeY = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 140 then
      if ftype == TType.STRING then
        self.privacyPolicyURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 141 then
      if ftype == TType.STRING then
        self.termsOfUseURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 142 then
      if ftype == TType.STRING then
        self.legalURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 143 then
      if ftype == TType.STRING then
        self.iOSRateGameURL1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 144 then
      if ftype == TType.STRING then
        self.iOSRateGameURL2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 145 then
      if ftype == TType.STRING then
        self.androidRateGameURL1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 146 then
      if ftype == TType.STRING then
        self.androidRateGameURL2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 147 then
      if ftype == TType.STRING then
        self.feedbackURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 148 then
      if ftype == TType.STRING then
        self.supportURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 150 then
      if ftype == TType.I32 then
        self.analyticsSchemaId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 160 then
      if ftype == TType.I32 then
        self.centerKingdomEntityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 170 then
      if ftype == TType.I32 then
        self.watchAdCooldown = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 180 then
      if ftype == TType.STRING then
        self.iOSReRateGameBuildNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 181 then
      if ftype == TType.STRING then
        self.androidReRateGameBuildNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 190 then
      if ftype == TType.STRING then
        self.gachaFtueGachaGroupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 191 then
      if ftype == TType.STRING then
        self.gachaFtueRareGachaGroupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 192 then
      if ftype == TType.STRING then
        self.recipeIslandFirstRareCakebox = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 193 then
      if ftype == TType.STRING then
        self.gachaFtueGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 194 then
      if ftype == TType.STRING then
        self.gachaFtueRareGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 200 then
      if ftype == TType.I32 then
        self.socialMenuMinRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 201 then
      if ftype == TType.I32 then
        self.gachaStoreMinRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 202 then
      if ftype == TType.STRING then
        self.gachaStorePopoverMinLevel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 203 then
      if ftype == TType.I32 then
        self.inboxPopoverMinRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 210 then
      if ftype == TType.I32 then
        self.gachaBannerDuration = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 211 then
      if ftype == TType.STRING then
        self.placedBuildingStatId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 212 then
      if ftype == TType.STRING then
        self.spendGemsFTUETriggerOnObjectiveId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 213 then
      if ftype == TType.STRING then
        self.lockLinearObjectiveProgressionUntilCompleteObjectiveId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 214 then
      if ftype == TType.I32 then
        self.playerDisplayMaxLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 215 then
      if ftype == TType.STRING then
        self.playerDisplayAllowedCharacters = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 220 then
      if ftype == TType.BOOL then
        self.autoPopulatePlayerName = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 230 then
      if ftype == TType.BOOL then
        self.disableGuild = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 240 then
      if ftype == TType.STRING then
        self.placedBusinessScoreStatId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 250 then
      if ftype == TType.I32 then
        self.earnedCurrencyBonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 260 then
      if ftype == TType.STRUCT then
        self.keyGearGetMoreText = LocalizedString:new{}
        self.keyGearGetMoreText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 261 then
      if ftype == TType.BOOL then
        self.disableEvolveBullet = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 262 then
      if ftype == TType.STRING then
        self.generalStoreId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 263 then
      if ftype == TType.LIST then
        self.additionalNpcsWalkingOnKingdom = {}
        local _etype434, _size431 = iprot:readListBegin()
        for _i=1,_size431 do
          local _elem435 = iprot:readString()
          table.insert(self.additionalNpcsWalkingOnKingdom, _elem435)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Settings:write(oprot)
  oprot:writeStructBegin('Settings')
  if self.numBusinessMaterialSlots ~= nil then
    oprot:writeFieldBegin('numBusinessMaterialSlots', TType.I32, 11)
    oprot:writeI32(self.numBusinessMaterialSlots)
    oprot:writeFieldEnd()
  end
  if self.staminaCurrencyId ~= nil then
    oprot:writeFieldBegin('staminaCurrencyId', TType.STRING, 12)
    oprot:writeString(self.staminaCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.goldCurrencyId ~= nil then
    oprot:writeFieldBegin('goldCurrencyId', TType.STRING, 13)
    oprot:writeString(self.goldCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.xpStatId ~= nil then
    oprot:writeFieldBegin('xpStatId', TType.STRING, 14)
    oprot:writeString(self.xpStatId)
    oprot:writeFieldEnd()
  end
  if self.gemCurrencyId ~= nil then
    oprot:writeFieldBegin('gemCurrencyId', TType.STRING, 15)
    oprot:writeString(self.gemCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.maxFriendInvites ~= nil then
    oprot:writeFieldBegin('maxFriendInvites', TType.I32, 17)
    oprot:writeI32(self.maxFriendInvites)
    oprot:writeFieldEnd()
  end
  if self.disableFtue ~= nil then
    oprot:writeFieldBegin('disableFtue', TType.BOOL, 18)
    oprot:writeBool(self.disableFtue)
    oprot:writeFieldEnd()
  end
  if self.disableBusinessIdleBullets ~= nil then
    oprot:writeFieldBegin('disableBusinessIdleBullets', TType.BOOL, 19)
    oprot:writeBool(self.disableBusinessIdleBullets)
    oprot:writeFieldEnd()
  end
  if self.palPointsCurrencyId ~= nil then
    oprot:writeFieldBegin('palPointsCurrencyId', TType.STRING, 20)
    oprot:writeString(self.palPointsCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.disableGoldStopgapMinRank ~= nil then
    oprot:writeFieldBegin('disableGoldStopgapMinRank', TType.I32, 21)
    oprot:writeI32(self.disableGoldStopgapMinRank)
    oprot:writeFieldEnd()
  end
  if self.maxAllowedClockChanges ~= nil then
    oprot:writeFieldBegin('maxAllowedClockChanges', TType.I32, 26)
    oprot:writeI32(self.maxAllowedClockChanges)
    oprot:writeFieldEnd()
  end
  if self.maxAllowedClockChangesPeriod ~= nil then
    oprot:writeFieldBegin('maxAllowedClockChangesPeriod', TType.I32, 27)
    oprot:writeI32(self.maxAllowedClockChangesPeriod)
    oprot:writeFieldEnd()
  end
  if self.refreshMarketOrdersCurrency ~= nil then
    oprot:writeFieldBegin('refreshMarketOrdersCurrency', TType.STRING, 28)
    oprot:writeString(self.refreshMarketOrdersCurrency)
    oprot:writeFieldEnd()
  end
  if self.refreshMarketOrdersCost ~= nil then
    oprot:writeFieldBegin('refreshMarketOrdersCost', TType.I32, 29)
    oprot:writeI32(self.refreshMarketOrdersCost)
    oprot:writeFieldEnd()
  end
  if self.ticketCurrencyId ~= nil then
    oprot:writeFieldBegin('ticketCurrencyId', TType.STRING, 30)
    oprot:writeString(self.ticketCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.maxRarity ~= nil then
    oprot:writeFieldBegin('maxRarity', TType.I32, 31)
    oprot:writeI32(self.maxRarity)
    oprot:writeFieldEnd()
  end
  if self.defaultRegularLevelDotID ~= nil then
    oprot:writeFieldBegin('defaultRegularLevelDotID', TType.STRING, 41)
    oprot:writeString(self.defaultRegularLevelDotID)
    oprot:writeFieldEnd()
  end
  if self.defaultIngredientLevelDotID ~= nil then
    oprot:writeFieldBegin('defaultIngredientLevelDotID', TType.STRING, 42)
    oprot:writeString(self.defaultIngredientLevelDotID)
    oprot:writeFieldEnd()
  end
  if self.defaultCakeBoxLevelDotID ~= nil then
    oprot:writeFieldBegin('defaultCakeBoxLevelDotID', TType.STRING, 43)
    oprot:writeString(self.defaultCakeBoxLevelDotID)
    oprot:writeFieldEnd()
  end
  if self.defaultLevelDotID ~= nil then
    oprot:writeFieldBegin('defaultLevelDotID', TType.STRING, 44)
    oprot:writeString(self.defaultLevelDotID)
    oprot:writeFieldEnd()
  end
  if self.trackedCurrencies ~= nil then
    oprot:writeFieldBegin('trackedCurrencies', TType.LIST, 60)
    oprot:writeListBegin(TType.STRING, #self.trackedCurrencies)
    for _,iter436 in ipairs(self.trackedCurrencies) do
      oprot:writeString(iter436)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.ticketsMinRank ~= nil then
    oprot:writeFieldBegin('ticketsMinRank', TType.I32, 61)
    oprot:writeI32(self.ticketsMinRank)
    oprot:writeFieldEnd()
  end
  if self.defaultDimensions ~= nil then
    oprot:writeFieldBegin('defaultDimensions', TType.LIST, 62)
    oprot:writeListBegin(TType.STRING, #self.defaultDimensions)
    for _,iter437 in ipairs(self.defaultDimensions) do
      oprot:writeString(iter437)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.staminaRechargeRate ~= nil then
    oprot:writeFieldBegin('staminaRechargeRate', TType.I32, 70)
    oprot:writeI32(self.staminaRechargeRate)
    oprot:writeFieldEnd()
  end
  if self.orderBoardSize ~= nil then
    oprot:writeFieldBegin('orderBoardSize', TType.I32, 80)
    oprot:writeI32(self.orderBoardSize)
    oprot:writeFieldEnd()
  end
  if self.kingdomAmbientSounds ~= nil then
    oprot:writeFieldBegin('kingdomAmbientSounds', TType.LIST, 100)
    oprot:writeListBegin(TType.STRING, #self.kingdomAmbientSounds)
    for _,iter438 in ipairs(self.kingdomAmbientSounds) do
      oprot:writeString(iter438)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.kingdomAmbientMusic ~= nil then
    oprot:writeFieldBegin('kingdomAmbientMusic', TType.LIST, 101)
    oprot:writeListBegin(TType.STRING, #self.kingdomAmbientMusic)
    for _,iter439 in ipairs(self.kingdomAmbientMusic) do
      oprot:writeString(iter439)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.localNotificationTimeSlots ~= nil then
    oprot:writeFieldBegin('localNotificationTimeSlots', TType.LIST, 110)
    oprot:writeListBegin(TType.I32, #self.localNotificationTimeSlots)
    for _,iter440 in ipairs(self.localNotificationTimeSlots) do
      oprot:writeI32(iter440)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.dailyDecoBonusNotificationHour ~= nil then
    oprot:writeFieldBegin('dailyDecoBonusNotificationHour', TType.I32, 120)
    oprot:writeI32(self.dailyDecoBonusNotificationHour)
    oprot:writeFieldEnd()
  end
  if self.dailyDecoBonusNotificationRepeatDays ~= nil then
    oprot:writeFieldBegin('dailyDecoBonusNotificationRepeatDays', TType.I32, 121)
    oprot:writeI32(self.dailyDecoBonusNotificationRepeatDays)
    oprot:writeFieldEnd()
  end
  if self.socialMaxInactiveMinutes ~= nil then
    oprot:writeFieldBegin('socialMaxInactiveMinutes', TType.I32, 122)
    oprot:writeI32(self.socialMaxInactiveMinutes)
    oprot:writeFieldEnd()
  end
  if self.pollIntervalSeconds ~= nil then
    oprot:writeFieldBegin('pollIntervalSeconds', TType.I32, 123)
    oprot:writeI32(self.pollIntervalSeconds)
    oprot:writeFieldEnd()
  end
  if self.socialUnlockRewardId ~= nil then
    oprot:writeFieldBegin('socialUnlockRewardId', TType.STRING, 124)
    oprot:writeString(self.socialUnlockRewardId)
    oprot:writeFieldEnd()
  end
  if self.maxKingdomSizeX ~= nil then
    oprot:writeFieldBegin('maxKingdomSizeX', TType.I32, 130)
    oprot:writeI32(self.maxKingdomSizeX)
    oprot:writeFieldEnd()
  end
  if self.maxKingdomSizeY ~= nil then
    oprot:writeFieldBegin('maxKingdomSizeY', TType.I32, 131)
    oprot:writeI32(self.maxKingdomSizeY)
    oprot:writeFieldEnd()
  end
  if self.privacyPolicyURL ~= nil then
    oprot:writeFieldBegin('privacyPolicyURL', TType.STRING, 140)
    oprot:writeString(self.privacyPolicyURL)
    oprot:writeFieldEnd()
  end
  if self.termsOfUseURL ~= nil then
    oprot:writeFieldBegin('termsOfUseURL', TType.STRING, 141)
    oprot:writeString(self.termsOfUseURL)
    oprot:writeFieldEnd()
  end
  if self.legalURL ~= nil then
    oprot:writeFieldBegin('legalURL', TType.STRING, 142)
    oprot:writeString(self.legalURL)
    oprot:writeFieldEnd()
  end
  if self.iOSRateGameURL1 ~= nil then
    oprot:writeFieldBegin('iOSRateGameURL1', TType.STRING, 143)
    oprot:writeString(self.iOSRateGameURL1)
    oprot:writeFieldEnd()
  end
  if self.iOSRateGameURL2 ~= nil then
    oprot:writeFieldBegin('iOSRateGameURL2', TType.STRING, 144)
    oprot:writeString(self.iOSRateGameURL2)
    oprot:writeFieldEnd()
  end
  if self.androidRateGameURL1 ~= nil then
    oprot:writeFieldBegin('androidRateGameURL1', TType.STRING, 145)
    oprot:writeString(self.androidRateGameURL1)
    oprot:writeFieldEnd()
  end
  if self.androidRateGameURL2 ~= nil then
    oprot:writeFieldBegin('androidRateGameURL2', TType.STRING, 146)
    oprot:writeString(self.androidRateGameURL2)
    oprot:writeFieldEnd()
  end
  if self.feedbackURL ~= nil then
    oprot:writeFieldBegin('feedbackURL', TType.STRING, 147)
    oprot:writeString(self.feedbackURL)
    oprot:writeFieldEnd()
  end
  if self.supportURL ~= nil then
    oprot:writeFieldBegin('supportURL', TType.STRING, 148)
    oprot:writeString(self.supportURL)
    oprot:writeFieldEnd()
  end
  if self.analyticsSchemaId ~= nil then
    oprot:writeFieldBegin('analyticsSchemaId', TType.I32, 150)
    oprot:writeI32(self.analyticsSchemaId)
    oprot:writeFieldEnd()
  end
  if self.centerKingdomEntityId ~= nil then
    oprot:writeFieldBegin('centerKingdomEntityId', TType.I32, 160)
    oprot:writeI32(self.centerKingdomEntityId)
    oprot:writeFieldEnd()
  end
  if self.watchAdCooldown ~= nil then
    oprot:writeFieldBegin('watchAdCooldown', TType.I32, 170)
    oprot:writeI32(self.watchAdCooldown)
    oprot:writeFieldEnd()
  end
  if self.iOSReRateGameBuildNumber ~= nil then
    oprot:writeFieldBegin('iOSReRateGameBuildNumber', TType.STRING, 180)
    oprot:writeString(self.iOSReRateGameBuildNumber)
    oprot:writeFieldEnd()
  end
  if self.androidReRateGameBuildNumber ~= nil then
    oprot:writeFieldBegin('androidReRateGameBuildNumber', TType.STRING, 181)
    oprot:writeString(self.androidReRateGameBuildNumber)
    oprot:writeFieldEnd()
  end
  if self.gachaFtueGachaGroupId ~= nil then
    oprot:writeFieldBegin('gachaFtueGachaGroupId', TType.STRING, 190)
    oprot:writeString(self.gachaFtueGachaGroupId)
    oprot:writeFieldEnd()
  end
  if self.gachaFtueRareGachaGroupId ~= nil then
    oprot:writeFieldBegin('gachaFtueRareGachaGroupId', TType.STRING, 191)
    oprot:writeString(self.gachaFtueRareGachaGroupId)
    oprot:writeFieldEnd()
  end
  if self.recipeIslandFirstRareCakebox ~= nil then
    oprot:writeFieldBegin('recipeIslandFirstRareCakebox', TType.STRING, 192)
    oprot:writeString(self.recipeIslandFirstRareCakebox)
    oprot:writeFieldEnd()
  end
  if self.gachaFtueGachaOfferId ~= nil then
    oprot:writeFieldBegin('gachaFtueGachaOfferId', TType.STRING, 193)
    oprot:writeString(self.gachaFtueGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.gachaFtueRareGachaOfferId ~= nil then
    oprot:writeFieldBegin('gachaFtueRareGachaOfferId', TType.STRING, 194)
    oprot:writeString(self.gachaFtueRareGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.socialMenuMinRank ~= nil then
    oprot:writeFieldBegin('socialMenuMinRank', TType.I32, 200)
    oprot:writeI32(self.socialMenuMinRank)
    oprot:writeFieldEnd()
  end
  if self.gachaStoreMinRank ~= nil then
    oprot:writeFieldBegin('gachaStoreMinRank', TType.I32, 201)
    oprot:writeI32(self.gachaStoreMinRank)
    oprot:writeFieldEnd()
  end
  if self.gachaStorePopoverMinLevel ~= nil then
    oprot:writeFieldBegin('gachaStorePopoverMinLevel', TType.STRING, 202)
    oprot:writeString(self.gachaStorePopoverMinLevel)
    oprot:writeFieldEnd()
  end
  if self.inboxPopoverMinRank ~= nil then
    oprot:writeFieldBegin('inboxPopoverMinRank', TType.I32, 203)
    oprot:writeI32(self.inboxPopoverMinRank)
    oprot:writeFieldEnd()
  end
  if self.gachaBannerDuration ~= nil then
    oprot:writeFieldBegin('gachaBannerDuration', TType.I32, 210)
    oprot:writeI32(self.gachaBannerDuration)
    oprot:writeFieldEnd()
  end
  if self.placedBuildingStatId ~= nil then
    oprot:writeFieldBegin('placedBuildingStatId', TType.STRING, 211)
    oprot:writeString(self.placedBuildingStatId)
    oprot:writeFieldEnd()
  end
  if self.spendGemsFTUETriggerOnObjectiveId ~= nil then
    oprot:writeFieldBegin('spendGemsFTUETriggerOnObjectiveId', TType.STRING, 212)
    oprot:writeString(self.spendGemsFTUETriggerOnObjectiveId)
    oprot:writeFieldEnd()
  end
  if self.lockLinearObjectiveProgressionUntilCompleteObjectiveId ~= nil then
    oprot:writeFieldBegin('lockLinearObjectiveProgressionUntilCompleteObjectiveId', TType.STRING, 213)
    oprot:writeString(self.lockLinearObjectiveProgressionUntilCompleteObjectiveId)
    oprot:writeFieldEnd()
  end
  if self.playerDisplayMaxLength ~= nil then
    oprot:writeFieldBegin('playerDisplayMaxLength', TType.I32, 214)
    oprot:writeI32(self.playerDisplayMaxLength)
    oprot:writeFieldEnd()
  end
  if self.playerDisplayAllowedCharacters ~= nil then
    oprot:writeFieldBegin('playerDisplayAllowedCharacters', TType.STRING, 215)
    oprot:writeString(self.playerDisplayAllowedCharacters)
    oprot:writeFieldEnd()
  end
  if self.autoPopulatePlayerName ~= nil then
    oprot:writeFieldBegin('autoPopulatePlayerName', TType.BOOL, 220)
    oprot:writeBool(self.autoPopulatePlayerName)
    oprot:writeFieldEnd()
  end
  if self.disableGuild ~= nil then
    oprot:writeFieldBegin('disableGuild', TType.BOOL, 230)
    oprot:writeBool(self.disableGuild)
    oprot:writeFieldEnd()
  end
  if self.placedBusinessScoreStatId ~= nil then
    oprot:writeFieldBegin('placedBusinessScoreStatId', TType.STRING, 240)
    oprot:writeString(self.placedBusinessScoreStatId)
    oprot:writeFieldEnd()
  end
  if self.earnedCurrencyBonus ~= nil then
    oprot:writeFieldBegin('earnedCurrencyBonus', TType.I32, 250)
    oprot:writeI32(self.earnedCurrencyBonus)
    oprot:writeFieldEnd()
  end
  if self.keyGearGetMoreText ~= nil then
    oprot:writeFieldBegin('keyGearGetMoreText', TType.STRUCT, 260)
    self.keyGearGetMoreText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.disableEvolveBullet ~= nil then
    oprot:writeFieldBegin('disableEvolveBullet', TType.BOOL, 261)
    oprot:writeBool(self.disableEvolveBullet)
    oprot:writeFieldEnd()
  end
  if self.generalStoreId ~= nil then
    oprot:writeFieldBegin('generalStoreId', TType.STRING, 262)
    oprot:writeString(self.generalStoreId)
    oprot:writeFieldEnd()
  end
  if self.additionalNpcsWalkingOnKingdom ~= nil then
    oprot:writeFieldBegin('additionalNpcsWalkingOnKingdom', TType.LIST, 263)
    oprot:writeListBegin(TType.STRING, #self.additionalNpcsWalkingOnKingdom)
    for _,iter441 in ipairs(self.additionalNpcsWalkingOnKingdom) do
      oprot:writeString(iter441)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PollSettings = __TObject:new{
  kingomIntervalSeconds,
  eventIntervalSeconds,
  gachaIntervalSeconds,
  guildIntervalSeconds,
  guildChatIntervalSeconds,
  inboxIntervalSeconds,
  questMenuIntervalSeconds
}

function PollSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.kingomIntervalSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.eventIntervalSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.gachaIntervalSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.guildIntervalSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.guildChatIntervalSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.inboxIntervalSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.I32 then
        self.questMenuIntervalSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PollSettings:write(oprot)
  oprot:writeStructBegin('PollSettings')
  if self.kingomIntervalSeconds ~= nil then
    oprot:writeFieldBegin('kingomIntervalSeconds', TType.I32, 10)
    oprot:writeI32(self.kingomIntervalSeconds)
    oprot:writeFieldEnd()
  end
  if self.eventIntervalSeconds ~= nil then
    oprot:writeFieldBegin('eventIntervalSeconds', TType.I32, 20)
    oprot:writeI32(self.eventIntervalSeconds)
    oprot:writeFieldEnd()
  end
  if self.gachaIntervalSeconds ~= nil then
    oprot:writeFieldBegin('gachaIntervalSeconds', TType.I32, 30)
    oprot:writeI32(self.gachaIntervalSeconds)
    oprot:writeFieldEnd()
  end
  if self.guildIntervalSeconds ~= nil then
    oprot:writeFieldBegin('guildIntervalSeconds', TType.I32, 40)
    oprot:writeI32(self.guildIntervalSeconds)
    oprot:writeFieldEnd()
  end
  if self.guildChatIntervalSeconds ~= nil then
    oprot:writeFieldBegin('guildChatIntervalSeconds', TType.I32, 41)
    oprot:writeI32(self.guildChatIntervalSeconds)
    oprot:writeFieldEnd()
  end
  if self.inboxIntervalSeconds ~= nil then
    oprot:writeFieldBegin('inboxIntervalSeconds', TType.I32, 50)
    oprot:writeI32(self.inboxIntervalSeconds)
    oprot:writeFieldEnd()
  end
  if self.questMenuIntervalSeconds ~= nil then
    oprot:writeFieldBegin('questMenuIntervalSeconds', TType.I32, 60)
    oprot:writeI32(self.questMenuIntervalSeconds)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

HappinessSettings = __TObject:new{
  happinessSuperHappy,
  happinessMediumHappy,
  happinessNormal
}

function HappinessSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.happinessSuperHappy = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.happinessMediumHappy = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.happinessNormal = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function HappinessSettings:write(oprot)
  oprot:writeStructBegin('HappinessSettings')
  if self.happinessSuperHappy ~= nil then
    oprot:writeFieldBegin('happinessSuperHappy', TType.I32, 1)
    oprot:writeI32(self.happinessSuperHappy)
    oprot:writeFieldEnd()
  end
  if self.happinessMediumHappy ~= nil then
    oprot:writeFieldBegin('happinessMediumHappy', TType.I32, 2)
    oprot:writeI32(self.happinessMediumHappy)
    oprot:writeFieldEnd()
  end
  if self.happinessNormal ~= nil then
    oprot:writeFieldBegin('happinessNormal', TType.I32, 3)
    oprot:writeI32(self.happinessNormal)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LevelBlob = __TObject:new{
  blobId,
  keyValuePairs
}

function LevelBlob:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.blobId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.keyValuePairs = {}
        local _ktype443, _vtype444, _size442 = iprot:readMapBegin() 
        for _i=1,_size442 do
          local _key446 = iprot:readString()
          local _val447 = iprot:readString()
          self.keyValuePairs[_key446] = _val447
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LevelBlob:write(oprot)
  oprot:writeStructBegin('LevelBlob')
  if self.blobId ~= nil then
    oprot:writeFieldBegin('blobId', TType.STRING, 1)
    oprot:writeString(self.blobId)
    oprot:writeFieldEnd()
  end
  if self.keyValuePairs ~= nil then
    oprot:writeFieldBegin('keyValuePairs', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.keyValuePairs))
    for kiter448,viter449 in pairs(self.keyValuePairs) do
      oprot:writeString(kiter448)
      oprot:writeString(viter449)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ScreenNameMapping = __TObject:new{
  luaFilenameOrCustomName,
  analyticsScreenName
}

function ScreenNameMapping:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.luaFilenameOrCustomName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.analyticsScreenName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ScreenNameMapping:write(oprot)
  oprot:writeStructBegin('ScreenNameMapping')
  if self.luaFilenameOrCustomName ~= nil then
    oprot:writeFieldBegin('luaFilenameOrCustomName', TType.STRING, 2)
    oprot:writeString(self.luaFilenameOrCustomName)
    oprot:writeFieldEnd()
  end
  if self.analyticsScreenName ~= nil then
    oprot:writeFieldBegin('analyticsScreenName', TType.STRING, 3)
    oprot:writeString(self.analyticsScreenName)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Avatar = __TObject:new{
  avatarId,
  npcId,
  emotionId,
  index,
  eventMapImage
}

function Avatar:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.avatarId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.npcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.emotionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.index = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.eventMapImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Avatar:write(oprot)
  oprot:writeStructBegin('Avatar')
  if self.avatarId ~= nil then
    oprot:writeFieldBegin('avatarId', TType.STRING, 1)
    oprot:writeString(self.avatarId)
    oprot:writeFieldEnd()
  end
  if self.npcId ~= nil then
    oprot:writeFieldBegin('npcId', TType.STRING, 20)
    oprot:writeString(self.npcId)
    oprot:writeFieldEnd()
  end
  if self.emotionId ~= nil then
    oprot:writeFieldBegin('emotionId', TType.STRING, 21)
    oprot:writeString(self.emotionId)
    oprot:writeFieldEnd()
  end
  if self.index ~= nil then
    oprot:writeFieldBegin('index', TType.I32, 30)
    oprot:writeI32(self.index)
    oprot:writeFieldEnd()
  end
  if self.eventMapImage ~= nil then
    oprot:writeFieldBegin('eventMapImage', TType.STRING, 41)
    oprot:writeString(self.eventMapImage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AnalyticsEvent = __TObject:new{
  analyticsEventId,
  category,
  label,
  value,
  payload
}

function AnalyticsEvent:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.analyticsEventId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.category = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.label = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.value = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.payload = {}
        local _etype453, _size450 = iprot:readListBegin()
        for _i=1,_size450 do
          local _elem454 = iprot:readString()
          table.insert(self.payload, _elem454)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AnalyticsEvent:write(oprot)
  oprot:writeStructBegin('AnalyticsEvent')
  if self.analyticsEventId ~= nil then
    oprot:writeFieldBegin('analyticsEventId', TType.STRING, 1)
    oprot:writeString(self.analyticsEventId)
    oprot:writeFieldEnd()
  end
  if self.category ~= nil then
    oprot:writeFieldBegin('category', TType.STRING, 2)
    oprot:writeString(self.category)
    oprot:writeFieldEnd()
  end
  if self.label ~= nil then
    oprot:writeFieldBegin('label', TType.STRING, 3)
    oprot:writeString(self.label)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.I32, 4)
    oprot:writeI32(self.value)
    oprot:writeFieldEnd()
  end
  if self.payload ~= nil then
    oprot:writeFieldBegin('payload', TType.LIST, 5)
    oprot:writeListBegin(TType.STRING, #self.payload)
    for _,iter455 in ipairs(self.payload) do
      oprot:writeString(iter455)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AnalyticsDimension = __TObject:new{
  analyticsDimensionId,
  shortName,
  googleDimensionIndex,
  pooleSchemaKey
}

function AnalyticsDimension:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.analyticsDimensionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.shortName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.googleDimensionIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.pooleSchemaKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AnalyticsDimension:write(oprot)
  oprot:writeStructBegin('AnalyticsDimension')
  if self.analyticsDimensionId ~= nil then
    oprot:writeFieldBegin('analyticsDimensionId', TType.STRING, 1)
    oprot:writeString(self.analyticsDimensionId)
    oprot:writeFieldEnd()
  end
  if self.shortName ~= nil then
    oprot:writeFieldBegin('shortName', TType.STRING, 2)
    oprot:writeString(self.shortName)
    oprot:writeFieldEnd()
  end
  if self.googleDimensionIndex ~= nil then
    oprot:writeFieldBegin('googleDimensionIndex', TType.I32, 10)
    oprot:writeI32(self.googleDimensionIndex)
    oprot:writeFieldEnd()
  end
  if self.pooleSchemaKey ~= nil then
    oprot:writeFieldBegin('pooleSchemaKey', TType.STRING, 20)
    oprot:writeString(self.pooleSchemaKey)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AppBoyEvent = __TObject:new{
  analyticsEventId
}

function AppBoyEvent:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.analyticsEventId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AppBoyEvent:write(oprot)
  oprot:writeStructBegin('AppBoyEvent')
  if self.analyticsEventId ~= nil then
    oprot:writeFieldBegin('analyticsEventId', TType.STRING, 1)
    oprot:writeString(self.analyticsEventId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ApsalarEvent = __TObject:new{
  analyticsEventId
}

function ApsalarEvent:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.analyticsEventId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ApsalarEvent:write(oprot)
  oprot:writeStructBegin('ApsalarEvent')
  if self.analyticsEventId ~= nil then
    oprot:writeFieldBegin('analyticsEventId', TType.STRING, 1)
    oprot:writeString(self.analyticsEventId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PopupTemplate = __TObject:new{
  templateId,
  background,
  overlay,
  buttonImages,
  buttonTexts,
  buttonActions,
  buttonParameters,
  bundleId,
  avatarId,
  inboxHideRewards,
  inboxMessageIcon,
  luaFile,
  showEventTimer,
  backgroundLandscape,
  overlayLandscape
}

function PopupTemplate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.templateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.background = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.overlay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.buttonImages = {}
        local _etype459, _size456 = iprot:readListBegin()
        for _i=1,_size456 do
          local _elem460 = iprot:readString()
          table.insert(self.buttonImages, _elem460)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.buttonTexts = {}
        local _etype464, _size461 = iprot:readListBegin()
        for _i=1,_size461 do
          local _elem465 = iprot:readString()
          table.insert(self.buttonTexts, _elem465)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.buttonActions = {}
        local _etype469, _size466 = iprot:readListBegin()
        for _i=1,_size466 do
          local _elem470 = iprot:readI32()
          table.insert(self.buttonActions, _elem470)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.LIST then
        self.buttonParameters = {}
        local _etype474, _size471 = iprot:readListBegin()
        for _i=1,_size471 do
          local _elem475 = iprot:readString()
          table.insert(self.buttonParameters, _elem475)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.avatarId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.BOOL then
        self.inboxHideRewards = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.inboxMessageIcon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.luaFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.showEventTimer = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.backgroundLandscape = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.overlayLandscape = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PopupTemplate:write(oprot)
  oprot:writeStructBegin('PopupTemplate')
  if self.templateId ~= nil then
    oprot:writeFieldBegin('templateId', TType.STRING, 1)
    oprot:writeString(self.templateId)
    oprot:writeFieldEnd()
  end
  if self.background ~= nil then
    oprot:writeFieldBegin('background', TType.STRING, 2)
    oprot:writeString(self.background)
    oprot:writeFieldEnd()
  end
  if self.overlay ~= nil then
    oprot:writeFieldBegin('overlay', TType.STRING, 3)
    oprot:writeString(self.overlay)
    oprot:writeFieldEnd()
  end
  if self.buttonImages ~= nil then
    oprot:writeFieldBegin('buttonImages', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.buttonImages)
    for _,iter476 in ipairs(self.buttonImages) do
      oprot:writeString(iter476)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buttonTexts ~= nil then
    oprot:writeFieldBegin('buttonTexts', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.buttonTexts)
    for _,iter477 in ipairs(self.buttonTexts) do
      oprot:writeString(iter477)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buttonActions ~= nil then
    oprot:writeFieldBegin('buttonActions', TType.LIST, 5)
    oprot:writeListBegin(TType.I32, #self.buttonActions)
    for _,iter478 in ipairs(self.buttonActions) do
      oprot:writeI32(iter478)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buttonParameters ~= nil then
    oprot:writeFieldBegin('buttonParameters', TType.LIST, 6)
    oprot:writeListBegin(TType.STRING, #self.buttonParameters)
    for _,iter479 in ipairs(self.buttonParameters) do
      oprot:writeString(iter479)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 7)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.avatarId ~= nil then
    oprot:writeFieldBegin('avatarId', TType.STRING, 8)
    oprot:writeString(self.avatarId)
    oprot:writeFieldEnd()
  end
  if self.inboxHideRewards ~= nil then
    oprot:writeFieldBegin('inboxHideRewards', TType.BOOL, 20)
    oprot:writeBool(self.inboxHideRewards)
    oprot:writeFieldEnd()
  end
  if self.inboxMessageIcon ~= nil then
    oprot:writeFieldBegin('inboxMessageIcon', TType.STRING, 21)
    oprot:writeString(self.inboxMessageIcon)
    oprot:writeFieldEnd()
  end
  if self.luaFile ~= nil then
    oprot:writeFieldBegin('luaFile', TType.STRING, 30)
    oprot:writeString(self.luaFile)
    oprot:writeFieldEnd()
  end
  if self.showEventTimer ~= nil then
    oprot:writeFieldBegin('showEventTimer', TType.BOOL, 31)
    oprot:writeBool(self.showEventTimer)
    oprot:writeFieldEnd()
  end
  if self.backgroundLandscape ~= nil then
    oprot:writeFieldBegin('backgroundLandscape', TType.STRING, 40)
    oprot:writeString(self.backgroundLandscape)
    oprot:writeFieldEnd()
  end
  if self.overlayLandscape ~= nil then
    oprot:writeFieldBegin('overlayLandscape', TType.STRING, 41)
    oprot:writeString(self.overlayLandscape)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DefaultTemplate = __TObject:new{
  popupTemplateType,
  templateId
}

function DefaultTemplate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.popupTemplateType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.templateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DefaultTemplate:write(oprot)
  oprot:writeStructBegin('DefaultTemplate')
  if self.popupTemplateType ~= nil then
    oprot:writeFieldBegin('popupTemplateType', TType.I32, 1)
    oprot:writeI32(self.popupTemplateType)
    oprot:writeFieldEnd()
  end
  if self.templateId ~= nil then
    oprot:writeFieldBegin('templateId', TType.STRING, 2)
    oprot:writeString(self.templateId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MessageTemplateModifier = __TObject:new{
  popupMessageId,
  nodeName,
  fieldName,
  value
}

function MessageTemplateModifier:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.popupMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.nodeName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.fieldName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MessageTemplateModifier:write(oprot)
  oprot:writeStructBegin('MessageTemplateModifier')
  if self.popupMessageId ~= nil then
    oprot:writeFieldBegin('popupMessageId', TType.STRING, 1)
    oprot:writeString(self.popupMessageId)
    oprot:writeFieldEnd()
  end
  if self.nodeName ~= nil then
    oprot:writeFieldBegin('nodeName', TType.STRING, 10)
    oprot:writeString(self.nodeName)
    oprot:writeFieldEnd()
  end
  if self.fieldName ~= nil then
    oprot:writeFieldBegin('fieldName', TType.STRING, 11)
    oprot:writeString(self.fieldName)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.STRING, 12)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AdminMessage = __TObject:new{
  adminMessageId,
  priority,
  eventLockId,
  title,
  body,
  openable,
  openTitle,
  openBody,
  autoOpen,
  giftCurrencyIds,
  giftCurrencyAmounts,
  startTimeOfDay,
  duration,
  enabled,
  minRank,
  templateId,
  oneTimeOnly,
  characterId,
  openCharacterImage,
  openBackground,
  openButtonAction,
  openButtonParameters,
  openOverlay,
  openButtonText,
  gachaOfferId,
  bundleId,
  giftMessageType
}

function AdminMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.adminMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.eventLockId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.body = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.openable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.openTitle = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.openBody = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.BOOL then
        self.autoOpen = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.giftCurrencyIds = {}
        local _etype483, _size480 = iprot:readListBegin()
        for _i=1,_size480 do
          local _elem484 = iprot:readString()
          table.insert(self.giftCurrencyIds, _elem484)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.LIST then
        self.giftCurrencyAmounts = {}
        local _etype488, _size485 = iprot:readListBegin()
        for _i=1,_size485 do
          local _elem489 = iprot:readI32()
          table.insert(self.giftCurrencyAmounts, _elem489)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.startTimeOfDay = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.I32 then
        self.duration = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.BOOL then
        self.enabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.I32 then
        self.minRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 64 then
      if ftype == TType.STRING then
        self.templateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 65 then
      if ftype == TType.BOOL then
        self.oneTimeOnly = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.characterId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.openCharacterImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.openBackground = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.openButtonAction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.LIST then
        self.openButtonParameters = {}
        local _etype493, _size490 = iprot:readListBegin()
        for _i=1,_size490 do
          local _elem494 = iprot:readString()
          table.insert(self.openButtonParameters, _elem494)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRING then
        self.openOverlay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.STRING then
        self.openButtonText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.gachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 63 then
      if ftype == TType.I32 then
        self.giftMessageType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AdminMessage:write(oprot)
  oprot:writeStructBegin('AdminMessage')
  if self.adminMessageId ~= nil then
    oprot:writeFieldBegin('adminMessageId', TType.STRING, 1)
    oprot:writeString(self.adminMessageId)
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 2)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  if self.eventLockId ~= nil then
    oprot:writeFieldBegin('eventLockId', TType.STRING, 3)
    oprot:writeString(self.eventLockId)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 5)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.body ~= nil then
    oprot:writeFieldBegin('body', TType.STRING, 6)
    oprot:writeString(self.body)
    oprot:writeFieldEnd()
  end
  if self.openable ~= nil then
    oprot:writeFieldBegin('openable', TType.BOOL, 10)
    oprot:writeBool(self.openable)
    oprot:writeFieldEnd()
  end
  if self.openTitle ~= nil then
    oprot:writeFieldBegin('openTitle', TType.STRING, 11)
    oprot:writeString(self.openTitle)
    oprot:writeFieldEnd()
  end
  if self.openBody ~= nil then
    oprot:writeFieldBegin('openBody', TType.STRING, 12)
    oprot:writeString(self.openBody)
    oprot:writeFieldEnd()
  end
  if self.autoOpen ~= nil then
    oprot:writeFieldBegin('autoOpen', TType.BOOL, 14)
    oprot:writeBool(self.autoOpen)
    oprot:writeFieldEnd()
  end
  if self.giftCurrencyIds ~= nil then
    oprot:writeFieldBegin('giftCurrencyIds', TType.LIST, 20)
    oprot:writeListBegin(TType.STRING, #self.giftCurrencyIds)
    for _,iter495 in ipairs(self.giftCurrencyIds) do
      oprot:writeString(iter495)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.giftCurrencyAmounts ~= nil then
    oprot:writeFieldBegin('giftCurrencyAmounts', TType.LIST, 21)
    oprot:writeListBegin(TType.I32, #self.giftCurrencyAmounts)
    for _,iter496 in ipairs(self.giftCurrencyAmounts) do
      oprot:writeI32(iter496)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.startTimeOfDay ~= nil then
    oprot:writeFieldBegin('startTimeOfDay', TType.I32, 50)
    oprot:writeI32(self.startTimeOfDay)
    oprot:writeFieldEnd()
  end
  if self.duration ~= nil then
    oprot:writeFieldBegin('duration', TType.I32, 60)
    oprot:writeI32(self.duration)
    oprot:writeFieldEnd()
  end
  if self.enabled ~= nil then
    oprot:writeFieldBegin('enabled', TType.BOOL, 61)
    oprot:writeBool(self.enabled)
    oprot:writeFieldEnd()
  end
  if self.minRank ~= nil then
    oprot:writeFieldBegin('minRank', TType.I32, 62)
    oprot:writeI32(self.minRank)
    oprot:writeFieldEnd()
  end
  if self.templateId ~= nil then
    oprot:writeFieldBegin('templateId', TType.STRING, 64)
    oprot:writeString(self.templateId)
    oprot:writeFieldEnd()
  end
  if self.oneTimeOnly ~= nil then
    oprot:writeFieldBegin('oneTimeOnly', TType.BOOL, 65)
    oprot:writeBool(self.oneTimeOnly)
    oprot:writeFieldEnd()
  end
  if self.characterId ~= nil then
    oprot:writeFieldBegin('characterId', TType.STRING, 4)
    oprot:writeString(self.characterId)
    oprot:writeFieldEnd()
  end
  if self.openCharacterImage ~= nil then
    oprot:writeFieldBegin('openCharacterImage', TType.STRING, 13)
    oprot:writeString(self.openCharacterImage)
    oprot:writeFieldEnd()
  end
  if self.openBackground ~= nil then
    oprot:writeFieldBegin('openBackground', TType.STRING, 15)
    oprot:writeString(self.openBackground)
    oprot:writeFieldEnd()
  end
  if self.openButtonAction ~= nil then
    oprot:writeFieldBegin('openButtonAction', TType.I32, 16)
    oprot:writeI32(self.openButtonAction)
    oprot:writeFieldEnd()
  end
  if self.openButtonParameters ~= nil then
    oprot:writeFieldBegin('openButtonParameters', TType.LIST, 17)
    oprot:writeListBegin(TType.STRING, #self.openButtonParameters)
    for _,iter497 in ipairs(self.openButtonParameters) do
      oprot:writeString(iter497)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.openOverlay ~= nil then
    oprot:writeFieldBegin('openOverlay', TType.STRING, 18)
    oprot:writeString(self.openOverlay)
    oprot:writeFieldEnd()
  end
  if self.openButtonText ~= nil then
    oprot:writeFieldBegin('openButtonText', TType.STRING, 19)
    oprot:writeString(self.openButtonText)
    oprot:writeFieldEnd()
  end
  if self.gachaOfferId ~= nil then
    oprot:writeFieldBegin('gachaOfferId', TType.STRING, 30)
    oprot:writeString(self.gachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 40)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.giftMessageType ~= nil then
    oprot:writeFieldBegin('giftMessageType', TType.I32, 63)
    oprot:writeI32(self.giftMessageType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Npc = __TObject:new{
  npcId,
  eyesLidBodyOffsetX,
  eyesLidBodyOffsetY,
  eyesLidLargeOffsetX,
  eyesLidLargeOffsetY,
  name,
  kingdomAnimation,
  kingdomAnimationFile,
  kingdomAnimationFile2,
  bigImage
}

function Npc:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.npcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.eyesLidBodyOffsetX = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.eyesLidBodyOffsetY = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.eyesLidLargeOffsetX = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.eyesLidLargeOffsetY = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.kingdomAnimation = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.kingdomAnimationFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.kingdomAnimationFile2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.bigImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Npc:write(oprot)
  oprot:writeStructBegin('Npc')
  if self.npcId ~= nil then
    oprot:writeFieldBegin('npcId', TType.STRING, 1)
    oprot:writeString(self.npcId)
    oprot:writeFieldEnd()
  end
  if self.eyesLidBodyOffsetX ~= nil then
    oprot:writeFieldBegin('eyesLidBodyOffsetX', TType.I32, 2)
    oprot:writeI32(self.eyesLidBodyOffsetX)
    oprot:writeFieldEnd()
  end
  if self.eyesLidBodyOffsetY ~= nil then
    oprot:writeFieldBegin('eyesLidBodyOffsetY', TType.I32, 3)
    oprot:writeI32(self.eyesLidBodyOffsetY)
    oprot:writeFieldEnd()
  end
  if self.eyesLidLargeOffsetX ~= nil then
    oprot:writeFieldBegin('eyesLidLargeOffsetX', TType.I32, 4)
    oprot:writeI32(self.eyesLidLargeOffsetX)
    oprot:writeFieldEnd()
  end
  if self.eyesLidLargeOffsetY ~= nil then
    oprot:writeFieldBegin('eyesLidLargeOffsetY', TType.I32, 5)
    oprot:writeI32(self.eyesLidLargeOffsetY)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 6)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.kingdomAnimation ~= nil then
    oprot:writeFieldBegin('kingdomAnimation', TType.STRING, 10)
    oprot:writeString(self.kingdomAnimation)
    oprot:writeFieldEnd()
  end
  if self.kingdomAnimationFile ~= nil then
    oprot:writeFieldBegin('kingdomAnimationFile', TType.STRING, 11)
    oprot:writeString(self.kingdomAnimationFile)
    oprot:writeFieldEnd()
  end
  if self.kingdomAnimationFile2 ~= nil then
    oprot:writeFieldBegin('kingdomAnimationFile2', TType.STRING, 12)
    oprot:writeString(self.kingdomAnimationFile2)
    oprot:writeFieldEnd()
  end
  if self.bigImage ~= nil then
    oprot:writeFieldBegin('bigImage', TType.STRING, 20)
    oprot:writeString(self.bigImage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PurchasableOffer = __TObject:new{
  offerType,
  offerId
}

function PurchasableOffer:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.offerType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.offerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PurchasableOffer:write(oprot)
  oprot:writeStructBegin('PurchasableOffer')
  if self.offerType ~= nil then
    oprot:writeFieldBegin('offerType', TType.I32, 10)
    oprot:writeI32(self.offerType)
    oprot:writeFieldEnd()
  end
  if self.offerId ~= nil then
    oprot:writeFieldBegin('offerId', TType.STRING, 11)
    oprot:writeString(self.offerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

IAPProduct = __TObject:new{
  iapProductId,
  appleProductId,
  googleProductId,
  offer
}

function IAPProduct:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.iapProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.appleProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.googleProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRUCT then
        self.offer = PurchasableOffer:new{}
        self.offer:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function IAPProduct:write(oprot)
  oprot:writeStructBegin('IAPProduct')
  if self.iapProductId ~= nil then
    oprot:writeFieldBegin('iapProductId', TType.STRING, 1)
    oprot:writeString(self.iapProductId)
    oprot:writeFieldEnd()
  end
  if self.appleProductId ~= nil then
    oprot:writeFieldBegin('appleProductId', TType.STRING, 10)
    oprot:writeString(self.appleProductId)
    oprot:writeFieldEnd()
  end
  if self.googleProductId ~= nil then
    oprot:writeFieldBegin('googleProductId', TType.STRING, 11)
    oprot:writeString(self.googleProductId)
    oprot:writeFieldEnd()
  end
  if self.offer ~= nil then
    oprot:writeFieldBegin('offer', TType.STRUCT, 20)
    self.offer:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CardOffer = __TObject:new{
  cardOfferId,
  currencyId,
  currencyCost,
  unlockCardOfferId,
  maxInventory,
  doesNotRestock,
  name,
  description,
  displayRewardsReceived,
  showRank,
  hideRank,
  unlockRank,
  showGuildRank,
  hideGuildRank,
  unlockGuildRank,
  productType,
  productId,
  productAmount,
  iapProductId,
  offerBackgroundImage,
  cardImage,
  productIcon,
  ribbonImage,
  ribbonText,
  titleText,
  bodyText
}

function CardOffer:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.currencyCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.unlockCardOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.maxInventory = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.BOOL then
        self.doesNotRestock = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRUCT then
        self.name = LocalizedString:new{}
        self.name:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRUCT then
        self.description = LocalizedString:new{}
        self.description:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.BOOL then
        self.displayRewardsReceived = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.I32 then
        self.showGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.I32 then
        self.hideGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 45 then
      if ftype == TType.I32 then
        self.unlockGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.productType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.I32 then
        self.productAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.iapProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.offerBackgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.STRING then
        self.cardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 72 then
      if ftype == TType.STRING then
        self.productIcon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 73 then
      if ftype == TType.STRING then
        self.ribbonImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 74 then
      if ftype == TType.STRUCT then
        self.ribbonText = LocalizedString:new{}
        self.ribbonText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 75 then
      if ftype == TType.STRUCT then
        self.titleText = LocalizedString:new{}
        self.titleText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 76 then
      if ftype == TType.STRUCT then
        self.bodyText = LocalizedString:new{}
        self.bodyText:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CardOffer:write(oprot)
  oprot:writeStructBegin('CardOffer')
  if self.cardOfferId ~= nil then
    oprot:writeFieldBegin('cardOfferId', TType.STRING, 1)
    oprot:writeString(self.cardOfferId)
    oprot:writeFieldEnd()
  end
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 10)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.currencyCost ~= nil then
    oprot:writeFieldBegin('currencyCost', TType.I32, 11)
    oprot:writeI32(self.currencyCost)
    oprot:writeFieldEnd()
  end
  if self.unlockCardOfferId ~= nil then
    oprot:writeFieldBegin('unlockCardOfferId', TType.STRING, 20)
    oprot:writeString(self.unlockCardOfferId)
    oprot:writeFieldEnd()
  end
  if self.maxInventory ~= nil then
    oprot:writeFieldBegin('maxInventory', TType.I32, 22)
    oprot:writeI32(self.maxInventory)
    oprot:writeFieldEnd()
  end
  if self.doesNotRestock ~= nil then
    oprot:writeFieldBegin('doesNotRestock', TType.BOOL, 27)
    oprot:writeBool(self.doesNotRestock)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRUCT, 32)
    self.name:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRUCT, 33)
    self.description:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.displayRewardsReceived ~= nil then
    oprot:writeFieldBegin('displayRewardsReceived', TType.BOOL, 34)
    oprot:writeBool(self.displayRewardsReceived)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 40)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 41)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 42)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.showGuildRank ~= nil then
    oprot:writeFieldBegin('showGuildRank', TType.I32, 43)
    oprot:writeI32(self.showGuildRank)
    oprot:writeFieldEnd()
  end
  if self.hideGuildRank ~= nil then
    oprot:writeFieldBegin('hideGuildRank', TType.I32, 44)
    oprot:writeI32(self.hideGuildRank)
    oprot:writeFieldEnd()
  end
  if self.unlockGuildRank ~= nil then
    oprot:writeFieldBegin('unlockGuildRank', TType.I32, 45)
    oprot:writeI32(self.unlockGuildRank)
    oprot:writeFieldEnd()
  end
  if self.productType ~= nil then
    oprot:writeFieldBegin('productType', TType.I32, 50)
    oprot:writeI32(self.productType)
    oprot:writeFieldEnd()
  end
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 51)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.productAmount ~= nil then
    oprot:writeFieldBegin('productAmount', TType.I32, 52)
    oprot:writeI32(self.productAmount)
    oprot:writeFieldEnd()
  end
  if self.iapProductId ~= nil then
    oprot:writeFieldBegin('iapProductId', TType.STRING, 60)
    oprot:writeString(self.iapProductId)
    oprot:writeFieldEnd()
  end
  if self.offerBackgroundImage ~= nil then
    oprot:writeFieldBegin('offerBackgroundImage', TType.STRING, 70)
    oprot:writeString(self.offerBackgroundImage)
    oprot:writeFieldEnd()
  end
  if self.cardImage ~= nil then
    oprot:writeFieldBegin('cardImage', TType.STRING, 71)
    oprot:writeString(self.cardImage)
    oprot:writeFieldEnd()
  end
  if self.productIcon ~= nil then
    oprot:writeFieldBegin('productIcon', TType.STRING, 72)
    oprot:writeString(self.productIcon)
    oprot:writeFieldEnd()
  end
  if self.ribbonImage ~= nil then
    oprot:writeFieldBegin('ribbonImage', TType.STRING, 73)
    oprot:writeString(self.ribbonImage)
    oprot:writeFieldEnd()
  end
  if self.ribbonText ~= nil then
    oprot:writeFieldBegin('ribbonText', TType.STRUCT, 74)
    self.ribbonText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.titleText ~= nil then
    oprot:writeFieldBegin('titleText', TType.STRUCT, 75)
    self.titleText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.bodyText ~= nil then
    oprot:writeFieldBegin('bodyText', TType.STRUCT, 76)
    self.bodyText:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StoreTab = __TObject:new{
  storeTabId,
  image,
  selectionSound,
  title
}

function StoreTab:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.storeTabId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.image = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.selectionSound = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.title = LocalizedString:new{}
        self.title:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StoreTab:write(oprot)
  oprot:writeStructBegin('StoreTab')
  if self.storeTabId ~= nil then
    oprot:writeFieldBegin('storeTabId', TType.STRING, 1)
    oprot:writeString(self.storeTabId)
    oprot:writeFieldEnd()
  end
  if self.image ~= nil then
    oprot:writeFieldBegin('image', TType.STRING, 2)
    oprot:writeString(self.image)
    oprot:writeFieldEnd()
  end
  if self.selectionSound ~= nil then
    oprot:writeFieldBegin('selectionSound', TType.STRING, 3)
    oprot:writeString(self.selectionSound)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRUCT, 4)
    self.title:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Store = __TObject:new{
  storeId,
  currencyIds,
  localizedDisplay,
  oneItemPerLine,
  display,
  eventIds,
  eventPhases,
  showRank,
  hideRank,
  restockTimerMinutes,
  restockCurrencyId,
  restockCurrencyAmount,
  unaffordableMessage,
  outOfStockMessage,
  description,
  storeCardImage,
  bundleId,
  buttonImage,
  awningImage,
  storeTabIds
}

function Store:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.storeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.currencyIds = {}
        local _etype501, _size498 = iprot:readListBegin()
        for _i=1,_size498 do
          local _elem502 = iprot:readString()
          table.insert(self.currencyIds, _elem502)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.localizedDisplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.oneItemPerLine = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype506, _size503 = iprot:readListBegin()
        for _i=1,_size503 do
          local _elem507 = iprot:readString()
          table.insert(self.eventIds, _elem507)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.restockTimerMinutes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.restockCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.restockCurrencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRUCT then
        self.unaffordableMessage = LocalizedString:new{}
        self.unaffordableMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRUCT then
        self.outOfStockMessage = LocalizedString:new{}
        self.outOfStockMessage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRUCT then
        self.description = LocalizedString:new{}
        self.description:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.storeCardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.STRING then
        self.buttonImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.STRING then
        self.awningImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 45 then
      if ftype == TType.LIST then
        self.storeTabIds = {}
        local _etype511, _size508 = iprot:readListBegin()
        for _i=1,_size508 do
          local _elem512 = iprot:readString()
          table.insert(self.storeTabIds, _elem512)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Store:write(oprot)
  oprot:writeStructBegin('Store')
  if self.storeId ~= nil then
    oprot:writeFieldBegin('storeId', TType.STRING, 1)
    oprot:writeString(self.storeId)
    oprot:writeFieldEnd()
  end
  if self.currencyIds ~= nil then
    oprot:writeFieldBegin('currencyIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.currencyIds)
    for _,iter513 in ipairs(self.currencyIds) do
      oprot:writeString(iter513)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.localizedDisplay ~= nil then
    oprot:writeFieldBegin('localizedDisplay', TType.STRING, 3)
    oprot:writeString(self.localizedDisplay)
    oprot:writeFieldEnd()
  end
  if self.oneItemPerLine ~= nil then
    oprot:writeFieldBegin('oneItemPerLine', TType.BOOL, 4)
    oprot:writeBool(self.oneItemPerLine)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 14)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter514 in ipairs(self.eventIds) do
      oprot:writeString(iter514)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 11)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 12)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 13)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.restockTimerMinutes ~= nil then
    oprot:writeFieldBegin('restockTimerMinutes', TType.I32, 20)
    oprot:writeI32(self.restockTimerMinutes)
    oprot:writeFieldEnd()
  end
  if self.restockCurrencyId ~= nil then
    oprot:writeFieldBegin('restockCurrencyId', TType.STRING, 21)
    oprot:writeString(self.restockCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.restockCurrencyAmount ~= nil then
    oprot:writeFieldBegin('restockCurrencyAmount', TType.I32, 22)
    oprot:writeI32(self.restockCurrencyAmount)
    oprot:writeFieldEnd()
  end
  if self.unaffordableMessage ~= nil then
    oprot:writeFieldBegin('unaffordableMessage', TType.STRUCT, 32)
    self.unaffordableMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.outOfStockMessage ~= nil then
    oprot:writeFieldBegin('outOfStockMessage', TType.STRUCT, 33)
    self.outOfStockMessage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRUCT, 40)
    self.description:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.storeCardImage ~= nil then
    oprot:writeFieldBegin('storeCardImage', TType.STRING, 41)
    oprot:writeString(self.storeCardImage)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 42)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.buttonImage ~= nil then
    oprot:writeFieldBegin('buttonImage', TType.STRING, 43)
    oprot:writeString(self.buttonImage)
    oprot:writeFieldEnd()
  end
  if self.awningImage ~= nil then
    oprot:writeFieldBegin('awningImage', TType.STRING, 44)
    oprot:writeString(self.awningImage)
    oprot:writeFieldEnd()
  end
  if self.storeTabIds ~= nil then
    oprot:writeFieldBegin('storeTabIds', TType.LIST, 45)
    oprot:writeListBegin(TType.STRING, #self.storeTabIds)
    for _,iter515 in ipairs(self.storeTabIds) do
      oprot:writeString(iter515)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StoreInventoryItem = __TObject:new{
  storeId,
  offerType,
  offerId,
  eventIds,
  eventPhases,
  displayOrder,
  display,
  storeTabId
}

function StoreInventoryItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.storeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.offerType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.offerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype519, _size516 = iprot:readListBegin()
        for _i=1,_size516 do
          local _elem520 = iprot:readString()
          table.insert(self.eventIds, _elem520)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.storeTabId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StoreInventoryItem:write(oprot)
  oprot:writeStructBegin('StoreInventoryItem')
  if self.storeId ~= nil then
    oprot:writeFieldBegin('storeId', TType.STRING, 1)
    oprot:writeString(self.storeId)
    oprot:writeFieldEnd()
  end
  if self.offerType ~= nil then
    oprot:writeFieldBegin('offerType', TType.I32, 2)
    oprot:writeI32(self.offerType)
    oprot:writeFieldEnd()
  end
  if self.offerId ~= nil then
    oprot:writeFieldBegin('offerId', TType.STRING, 3)
    oprot:writeString(self.offerId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 5)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter521 in ipairs(self.eventIds) do
      oprot:writeString(iter521)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 6)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 7)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 8)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.storeTabId ~= nil then
    oprot:writeFieldBegin('storeTabId', TType.STRING, 9)
    oprot:writeString(self.storeTabId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

VendorProduct = __TObject:new{
  storeProductId,
  appleProductId,
  googleProductId
}

function VendorProduct:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.storeProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.appleProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.googleProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function VendorProduct:write(oprot)
  oprot:writeStructBegin('VendorProduct')
  if self.storeProductId ~= nil then
    oprot:writeFieldBegin('storeProductId', TType.STRING, 1)
    oprot:writeString(self.storeProductId)
    oprot:writeFieldEnd()
  end
  if self.appleProductId ~= nil then
    oprot:writeFieldBegin('appleProductId', TType.STRING, 2)
    oprot:writeString(self.appleProductId)
    oprot:writeFieldEnd()
  end
  if self.googleProductId ~= nil then
    oprot:writeFieldBegin('googleProductId', TType.STRING, 3)
    oprot:writeString(self.googleProductId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StoreProduct = __TObject:new{
  storeProductId,
  itemType,
  itemId,
  amount,
  billingType,
  billingCurrencyId,
  billingPrice,
  icon,
  listOrder,
  newDisplay,
  bundleId,
  debugPrice,
  lootTableIds,
  lootTableSpins,
  details,
  disabled
}

function StoreProduct:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.storeProductId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.itemType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.amount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.billingType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.billingCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.billingPrice = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.icon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.listOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.bundleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.debugPrice = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.LIST then
        self.lootTableIds = {}
        local _etype525, _size522 = iprot:readListBegin()
        for _i=1,_size522 do
          local _elem526 = iprot:readString()
          table.insert(self.lootTableIds, _elem526)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.LIST then
        self.lootTableSpins = {}
        local _etype530, _size527 = iprot:readListBegin()
        for _i=1,_size527 do
          local _elem531 = iprot:readI32()
          table.insert(self.lootTableSpins, _elem531)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRUCT then
        self.details = LocalizedString:new{}
        self.details:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.BOOL then
        self.disabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StoreProduct:write(oprot)
  oprot:writeStructBegin('StoreProduct')
  if self.storeProductId ~= nil then
    oprot:writeFieldBegin('storeProductId', TType.STRING, 1)
    oprot:writeString(self.storeProductId)
    oprot:writeFieldEnd()
  end
  if self.itemType ~= nil then
    oprot:writeFieldBegin('itemType', TType.I32, 2)
    oprot:writeI32(self.itemType)
    oprot:writeFieldEnd()
  end
  if self.itemId ~= nil then
    oprot:writeFieldBegin('itemId', TType.STRING, 3)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.I32, 4)
    oprot:writeI32(self.amount)
    oprot:writeFieldEnd()
  end
  if self.billingType ~= nil then
    oprot:writeFieldBegin('billingType', TType.I32, 6)
    oprot:writeI32(self.billingType)
    oprot:writeFieldEnd()
  end
  if self.billingCurrencyId ~= nil then
    oprot:writeFieldBegin('billingCurrencyId', TType.STRING, 7)
    oprot:writeString(self.billingCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.billingPrice ~= nil then
    oprot:writeFieldBegin('billingPrice', TType.I32, 8)
    oprot:writeI32(self.billingPrice)
    oprot:writeFieldEnd()
  end
  if self.icon ~= nil then
    oprot:writeFieldBegin('icon', TType.STRING, 9)
    oprot:writeString(self.icon)
    oprot:writeFieldEnd()
  end
  if self.listOrder ~= nil then
    oprot:writeFieldBegin('listOrder', TType.I32, 10)
    oprot:writeI32(self.listOrder)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 11)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.bundleId ~= nil then
    oprot:writeFieldBegin('bundleId', TType.STRING, 20)
    oprot:writeString(self.bundleId)
    oprot:writeFieldEnd()
  end
  if self.debugPrice ~= nil then
    oprot:writeFieldBegin('debugPrice', TType.STRING, 30)
    oprot:writeString(self.debugPrice)
    oprot:writeFieldEnd()
  end
  if self.lootTableIds ~= nil then
    oprot:writeFieldBegin('lootTableIds', TType.LIST, 31)
    oprot:writeListBegin(TType.STRING, #self.lootTableIds)
    for _,iter532 in ipairs(self.lootTableIds) do
      oprot:writeString(iter532)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.lootTableSpins ~= nil then
    oprot:writeFieldBegin('lootTableSpins', TType.LIST, 32)
    oprot:writeListBegin(TType.I32, #self.lootTableSpins)
    for _,iter533 in ipairs(self.lootTableSpins) do
      oprot:writeI32(iter533)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.details ~= nil then
    oprot:writeFieldBegin('details', TType.STRUCT, 40)
    self.details:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.disabled ~= nil then
    oprot:writeFieldBegin('disabled', TType.BOOL, 50)
    oprot:writeBool(self.disabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuyItemOrder = __TObject:new{
  orderId,
  marketType,
  buyCurrencyId,
  buyCurrencyAmount,
  priceCurrencyId,
  price,
  eventLockId
}

function BuyItemOrder:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.orderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.marketType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.buyCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.buyCurrencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.priceCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.price = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.eventLockId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuyItemOrder:write(oprot)
  oprot:writeStructBegin('BuyItemOrder')
  if self.orderId ~= nil then
    oprot:writeFieldBegin('orderId', TType.STRING, 1)
    oprot:writeString(self.orderId)
    oprot:writeFieldEnd()
  end
  if self.marketType ~= nil then
    oprot:writeFieldBegin('marketType', TType.I32, 2)
    oprot:writeI32(self.marketType)
    oprot:writeFieldEnd()
  end
  if self.buyCurrencyId ~= nil then
    oprot:writeFieldBegin('buyCurrencyId', TType.STRING, 3)
    oprot:writeString(self.buyCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.buyCurrencyAmount ~= nil then
    oprot:writeFieldBegin('buyCurrencyAmount', TType.I32, 4)
    oprot:writeI32(self.buyCurrencyAmount)
    oprot:writeFieldEnd()
  end
  if self.priceCurrencyId ~= nil then
    oprot:writeFieldBegin('priceCurrencyId', TType.STRING, 5)
    oprot:writeString(self.priceCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.I32, 6)
    oprot:writeI32(self.price)
    oprot:writeFieldEnd()
  end
  if self.eventLockId ~= nil then
    oprot:writeFieldBegin('eventLockId', TType.STRING, 7)
    oprot:writeString(self.eventLockId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Market = __TObject:new{
  marketTypeId,
  numberOfSlots,
  openForInSecs
}

function Market:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.marketTypeId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.numberOfSlots = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.openForInSecs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Market:write(oprot)
  oprot:writeStructBegin('Market')
  if self.marketTypeId ~= nil then
    oprot:writeFieldBegin('marketTypeId', TType.I32, 1)
    oprot:writeI32(self.marketTypeId)
    oprot:writeFieldEnd()
  end
  if self.numberOfSlots ~= nil then
    oprot:writeFieldBegin('numberOfSlots', TType.I32, 2)
    oprot:writeI32(self.numberOfSlots)
    oprot:writeFieldEnd()
  end
  if self.openForInSecs ~= nil then
    oprot:writeFieldBegin('openForInSecs', TType.I32, 3)
    oprot:writeI32(self.openForInSecs)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Achievement = __TObject:new{
  achievementId,
  minRank,
  achievementType,
  requiredAmount,
  newDisplay,
  newDescription,
  param,
  rewardCurrencyIds,
  rewardAmounts,
  achievementGroupId,
  achievementGroupOrder,
  goButtonFtue,
  catalogImage,
  forceShowMe,
  noAutoPop
}

function Achievement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.achievementId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.minRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.achievementType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.requiredAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.newDisplay = LocalizedString:new{}
        self.newDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRUCT then
        self.newDescription = LocalizedString:new{}
        self.newDescription:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.param = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.rewardCurrencyIds = {}
        local _etype537, _size534 = iprot:readListBegin()
        for _i=1,_size534 do
          local _elem538 = iprot:readString()
          table.insert(self.rewardCurrencyIds, _elem538)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.LIST then
        self.rewardAmounts = {}
        local _etype542, _size539 = iprot:readListBegin()
        for _i=1,_size539 do
          local _elem543 = iprot:readI32()
          table.insert(self.rewardAmounts, _elem543)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.achievementGroupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.achievementGroupOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.goButtonFtue = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.catalogImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.BOOL then
        self.forceShowMe = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.BOOL then
        self.noAutoPop = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Achievement:write(oprot)
  oprot:writeStructBegin('Achievement')
  if self.achievementId ~= nil then
    oprot:writeFieldBegin('achievementId', TType.STRING, 1)
    oprot:writeString(self.achievementId)
    oprot:writeFieldEnd()
  end
  if self.minRank ~= nil then
    oprot:writeFieldBegin('minRank', TType.I32, 2)
    oprot:writeI32(self.minRank)
    oprot:writeFieldEnd()
  end
  if self.achievementType ~= nil then
    oprot:writeFieldBegin('achievementType', TType.I32, 4)
    oprot:writeI32(self.achievementType)
    oprot:writeFieldEnd()
  end
  if self.requiredAmount ~= nil then
    oprot:writeFieldBegin('requiredAmount', TType.I32, 5)
    oprot:writeI32(self.requiredAmount)
    oprot:writeFieldEnd()
  end
  if self.newDisplay ~= nil then
    oprot:writeFieldBegin('newDisplay', TType.STRUCT, 6)
    self.newDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.newDescription ~= nil then
    oprot:writeFieldBegin('newDescription', TType.STRUCT, 7)
    self.newDescription:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.param ~= nil then
    oprot:writeFieldBegin('param', TType.STRING, 10)
    oprot:writeString(self.param)
    oprot:writeFieldEnd()
  end
  if self.rewardCurrencyIds ~= nil then
    oprot:writeFieldBegin('rewardCurrencyIds', TType.LIST, 20)
    oprot:writeListBegin(TType.STRING, #self.rewardCurrencyIds)
    for _,iter544 in ipairs(self.rewardCurrencyIds) do
      oprot:writeString(iter544)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.rewardAmounts ~= nil then
    oprot:writeFieldBegin('rewardAmounts', TType.LIST, 21)
    oprot:writeListBegin(TType.I32, #self.rewardAmounts)
    for _,iter545 in ipairs(self.rewardAmounts) do
      oprot:writeI32(iter545)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.achievementGroupId ~= nil then
    oprot:writeFieldBegin('achievementGroupId', TType.STRING, 30)
    oprot:writeString(self.achievementGroupId)
    oprot:writeFieldEnd()
  end
  if self.achievementGroupOrder ~= nil then
    oprot:writeFieldBegin('achievementGroupOrder', TType.I32, 31)
    oprot:writeI32(self.achievementGroupOrder)
    oprot:writeFieldEnd()
  end
  if self.goButtonFtue ~= nil then
    oprot:writeFieldBegin('goButtonFtue', TType.STRING, 32)
    oprot:writeString(self.goButtonFtue)
    oprot:writeFieldEnd()
  end
  if self.catalogImage ~= nil then
    oprot:writeFieldBegin('catalogImage', TType.STRING, 40)
    oprot:writeString(self.catalogImage)
    oprot:writeFieldEnd()
  end
  if self.forceShowMe ~= nil then
    oprot:writeFieldBegin('forceShowMe', TType.BOOL, 50)
    oprot:writeBool(self.forceShowMe)
    oprot:writeFieldEnd()
  end
  if self.noAutoPop ~= nil then
    oprot:writeFieldBegin('noAutoPop', TType.BOOL, 51)
    oprot:writeBool(self.noAutoPop)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AchievementGroup = __TObject:new{
  achievementGroupId,
  eventLockId,
  order
}

function AchievementGroup:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.achievementGroupId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.eventLockId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.order = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AchievementGroup:write(oprot)
  oprot:writeStructBegin('AchievementGroup')
  if self.achievementGroupId ~= nil then
    oprot:writeFieldBegin('achievementGroupId', TType.STRING, 1)
    oprot:writeString(self.achievementGroupId)
    oprot:writeFieldEnd()
  end
  if self.eventLockId ~= nil then
    oprot:writeFieldBegin('eventLockId', TType.STRING, 20)
    oprot:writeString(self.eventLockId)
    oprot:writeFieldEnd()
  end
  if self.order ~= nil then
    oprot:writeFieldBegin('order', TType.I32, 30)
    oprot:writeI32(self.order)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Goal = __TObject:new{
  goalId,
  displayText,
  questId,
  orderIndex,
  goalType,
  requiredProgress,
  requiredRank,
  eventIds,
  eventPhases,
  levelId,
  buildingType,
  buildingId,
  rarity,
  evoLevel,
  gearId,
  boosterId,
  cellTypes,
  levelStars,
  offerId
}

function Goal:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.goalId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.displayText = LocalizedString:new{}
        self.displayText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.questId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.orderIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.goalType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.requiredProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.requiredRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype549, _size546 = iprot:readListBegin()
        for _i=1,_size546 do
          local _elem550 = iprot:readString()
          table.insert(self.eventIds, _elem550)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.levelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.I32 then
        self.buildingType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.I32 then
        self.rarity = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 36 then
      if ftype == TType.I32 then
        self.evoLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 37 then
      if ftype == TType.STRING then
        self.gearId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 38 then
      if ftype == TType.STRING then
        self.boosterId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 39 then
      if ftype == TType.LIST then
        self.cellTypes = {}
        local _etype554, _size551 = iprot:readListBegin()
        for _i=1,_size551 do
          local _elem555 = iprot:readString()
          table.insert(self.cellTypes, _elem555)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.levelStars = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.offerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Goal:write(oprot)
  oprot:writeStructBegin('Goal')
  if self.goalId ~= nil then
    oprot:writeFieldBegin('goalId', TType.STRING, 1)
    oprot:writeString(self.goalId)
    oprot:writeFieldEnd()
  end
  if self.displayText ~= nil then
    oprot:writeFieldBegin('displayText', TType.STRUCT, 2)
    self.displayText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.questId ~= nil then
    oprot:writeFieldBegin('questId', TType.STRING, 3)
    oprot:writeString(self.questId)
    oprot:writeFieldEnd()
  end
  if self.orderIndex ~= nil then
    oprot:writeFieldBegin('orderIndex', TType.I32, 5)
    oprot:writeI32(self.orderIndex)
    oprot:writeFieldEnd()
  end
  if self.goalType ~= nil then
    oprot:writeFieldBegin('goalType', TType.I32, 10)
    oprot:writeI32(self.goalType)
    oprot:writeFieldEnd()
  end
  if self.requiredProgress ~= nil then
    oprot:writeFieldBegin('requiredProgress', TType.I32, 11)
    oprot:writeI32(self.requiredProgress)
    oprot:writeFieldEnd()
  end
  if self.requiredRank ~= nil then
    oprot:writeFieldBegin('requiredRank', TType.I32, 12)
    oprot:writeI32(self.requiredRank)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 20)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter556 in ipairs(self.eventIds) do
      oprot:writeString(iter556)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 21)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.levelId ~= nil then
    oprot:writeFieldBegin('levelId', TType.STRING, 31)
    oprot:writeString(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.buildingType ~= nil then
    oprot:writeFieldBegin('buildingType', TType.I32, 32)
    oprot:writeI32(self.buildingType)
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 33)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.rarity ~= nil then
    oprot:writeFieldBegin('rarity', TType.I32, 34)
    oprot:writeI32(self.rarity)
    oprot:writeFieldEnd()
  end
  if self.evoLevel ~= nil then
    oprot:writeFieldBegin('evoLevel', TType.I32, 36)
    oprot:writeI32(self.evoLevel)
    oprot:writeFieldEnd()
  end
  if self.gearId ~= nil then
    oprot:writeFieldBegin('gearId', TType.STRING, 37)
    oprot:writeString(self.gearId)
    oprot:writeFieldEnd()
  end
  if self.boosterId ~= nil then
    oprot:writeFieldBegin('boosterId', TType.STRING, 38)
    oprot:writeString(self.boosterId)
    oprot:writeFieldEnd()
  end
  if self.cellTypes ~= nil then
    oprot:writeFieldBegin('cellTypes', TType.LIST, 39)
    oprot:writeListBegin(TType.STRING, #self.cellTypes)
    for _,iter557 in ipairs(self.cellTypes) do
      oprot:writeString(iter557)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.levelStars ~= nil then
    oprot:writeFieldBegin('levelStars', TType.I32, 40)
    oprot:writeI32(self.levelStars)
    oprot:writeFieldEnd()
  end
  if self.offerId ~= nil then
    oprot:writeFieldBegin('offerId', TType.STRING, 41)
    oprot:writeString(self.offerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

QuestNpc = __TObject:new{
  questNpcId,
  npcId,
  questDescriptionText,
  questCompletedText,
  backgroundImage
}

function QuestNpc:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.questNpcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.npcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.questDescriptionText = LocalizedString:new{}
        self.questDescriptionText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.questCompletedText = LocalizedString:new{}
        self.questCompletedText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.backgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function QuestNpc:write(oprot)
  oprot:writeStructBegin('QuestNpc')
  if self.questNpcId ~= nil then
    oprot:writeFieldBegin('questNpcId', TType.STRING, 1)
    oprot:writeString(self.questNpcId)
    oprot:writeFieldEnd()
  end
  if self.npcId ~= nil then
    oprot:writeFieldBegin('npcId', TType.STRING, 2)
    oprot:writeString(self.npcId)
    oprot:writeFieldEnd()
  end
  if self.questDescriptionText ~= nil then
    oprot:writeFieldBegin('questDescriptionText', TType.STRUCT, 3)
    self.questDescriptionText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.questCompletedText ~= nil then
    oprot:writeFieldBegin('questCompletedText', TType.STRUCT, 4)
    self.questCompletedText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.backgroundImage ~= nil then
    oprot:writeFieldBegin('backgroundImage', TType.STRING, 5)
    oprot:writeString(self.backgroundImage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BusinessQuestNpc = __TObject:new{
  baseBusinessId,
  questNpcId
}

function BusinessQuestNpc:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.baseBusinessId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.questNpcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BusinessQuestNpc:write(oprot)
  oprot:writeStructBegin('BusinessQuestNpc')
  if self.baseBusinessId ~= nil then
    oprot:writeFieldBegin('baseBusinessId', TType.STRING, 1)
    oprot:writeString(self.baseBusinessId)
    oprot:writeFieldEnd()
  end
  if self.questNpcId ~= nil then
    oprot:writeFieldBegin('questNpcId', TType.STRING, 2)
    oprot:writeString(self.questNpcId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildQuestReward = __TObject:new{
  guildQuestRewardId,
  rewardRecipientType,
  lootTableIds,
  lootTableSpins
}

function GuildQuestReward:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guildQuestRewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.rewardRecipientType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.lootTableIds = {}
        local _etype561, _size558 = iprot:readListBegin()
        for _i=1,_size558 do
          local _elem562 = iprot:readString()
          table.insert(self.lootTableIds, _elem562)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.lootTableSpins = {}
        local _etype566, _size563 = iprot:readListBegin()
        for _i=1,_size563 do
          local _elem567 = iprot:readI32()
          table.insert(self.lootTableSpins, _elem567)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildQuestReward:write(oprot)
  oprot:writeStructBegin('GuildQuestReward')
  if self.guildQuestRewardId ~= nil then
    oprot:writeFieldBegin('guildQuestRewardId', TType.STRING, 1)
    oprot:writeString(self.guildQuestRewardId)
    oprot:writeFieldEnd()
  end
  if self.rewardRecipientType ~= nil then
    oprot:writeFieldBegin('rewardRecipientType', TType.I32, 10)
    oprot:writeI32(self.rewardRecipientType)
    oprot:writeFieldEnd()
  end
  if self.lootTableIds ~= nil then
    oprot:writeFieldBegin('lootTableIds', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.lootTableIds)
    for _,iter568 in ipairs(self.lootTableIds) do
      oprot:writeString(iter568)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.lootTableSpins ~= nil then
    oprot:writeFieldBegin('lootTableSpins', TType.LIST, 12)
    oprot:writeListBegin(TType.I32, #self.lootTableSpins)
    for _,iter569 in ipairs(self.lootTableSpins) do
      oprot:writeI32(iter569)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Quest = __TObject:new{
  questId,
  orderIndex,
  questNpcId,
  eventIds,
  eventPhases,
  disabled,
  chained,
  unlockedByBusiness,
  periodic,
  showRank,
  hideRank,
  unlockRank,
  countPerPeriod,
  period,
  unlockedByQuest,
  xpReward,
  rewardCurrencyIds,
  rewardCurrencyAmounts,
  titleText,
  descriptionText,
  buildingId,
  guildQuest,
  showGuildRank,
  hideGuildRank,
  unlockGuildRank,
  guildQuestRewardId,
  displayCurrencyId,
  displayCurrencyAmount,
  goals
}

function Quest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.questId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.orderIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.questNpcId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype573, _size570 = iprot:readListBegin()
        for _i=1,_size570 do
          local _elem574 = iprot:readString()
          table.insert(self.eventIds, _elem574)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.disabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.chained = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.BOOL then
        self.unlockedByBusiness = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.BOOL then
        self.periodic = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.countPerPeriod = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.period = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.unlockedByQuest = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.xpReward = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.LIST then
        self.rewardCurrencyIds = {}
        local _etype578, _size575 = iprot:readListBegin()
        for _i=1,_size575 do
          local _elem579 = iprot:readString()
          table.insert(self.rewardCurrencyIds, _elem579)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.LIST then
        self.rewardCurrencyAmounts = {}
        local _etype583, _size580 = iprot:readListBegin()
        for _i=1,_size580 do
          local _elem584 = iprot:readI32()
          table.insert(self.rewardCurrencyAmounts, _elem584)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.STRUCT then
        self.titleText = LocalizedString:new{}
        self.titleText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRUCT then
        self.descriptionText = LocalizedString:new{}
        self.descriptionText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.BOOL then
        self.guildQuest = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.I32 then
        self.showGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.I32 then
        self.hideGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.I32 then
        self.unlockGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.STRING then
        self.guildQuestRewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 55 then
      if ftype == TType.STRING then
        self.displayCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 56 then
      if ftype == TType.I32 then
        self.displayCurrencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 200 then
      if ftype == TType.MAP then
        self.goals = {}
        local _ktype586, _vtype587, _size585 = iprot:readMapBegin() 
        for _i=1,_size585 do
          local _key589 = iprot:readString()
          local _val590 = Goal:new{}
          _val590:read(iprot)
          self.goals[_key589] = _val590
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Quest:write(oprot)
  oprot:writeStructBegin('Quest')
  if self.questId ~= nil then
    oprot:writeFieldBegin('questId', TType.STRING, 1)
    oprot:writeString(self.questId)
    oprot:writeFieldEnd()
  end
  if self.orderIndex ~= nil then
    oprot:writeFieldBegin('orderIndex', TType.I32, 2)
    oprot:writeI32(self.orderIndex)
    oprot:writeFieldEnd()
  end
  if self.questNpcId ~= nil then
    oprot:writeFieldBegin('questNpcId', TType.STRING, 3)
    oprot:writeString(self.questNpcId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter591 in ipairs(self.eventIds) do
      oprot:writeString(iter591)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 5)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.disabled ~= nil then
    oprot:writeFieldBegin('disabled', TType.BOOL, 6)
    oprot:writeBool(self.disabled)
    oprot:writeFieldEnd()
  end
  if self.chained ~= nil then
    oprot:writeFieldBegin('chained', TType.BOOL, 7)
    oprot:writeBool(self.chained)
    oprot:writeFieldEnd()
  end
  if self.unlockedByBusiness ~= nil then
    oprot:writeFieldBegin('unlockedByBusiness', TType.BOOL, 8)
    oprot:writeBool(self.unlockedByBusiness)
    oprot:writeFieldEnd()
  end
  if self.periodic ~= nil then
    oprot:writeFieldBegin('periodic', TType.BOOL, 9)
    oprot:writeBool(self.periodic)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 10)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 11)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 12)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.countPerPeriod ~= nil then
    oprot:writeFieldBegin('countPerPeriod', TType.I32, 13)
    oprot:writeI32(self.countPerPeriod)
    oprot:writeFieldEnd()
  end
  if self.period ~= nil then
    oprot:writeFieldBegin('period', TType.I64, 14)
    oprot:writeI64(self.period)
    oprot:writeFieldEnd()
  end
  if self.unlockedByQuest ~= nil then
    oprot:writeFieldBegin('unlockedByQuest', TType.STRING, 15)
    oprot:writeString(self.unlockedByQuest)
    oprot:writeFieldEnd()
  end
  if self.xpReward ~= nil then
    oprot:writeFieldBegin('xpReward', TType.I32, 16)
    oprot:writeI32(self.xpReward)
    oprot:writeFieldEnd()
  end
  if self.rewardCurrencyIds ~= nil then
    oprot:writeFieldBegin('rewardCurrencyIds', TType.LIST, 17)
    oprot:writeListBegin(TType.STRING, #self.rewardCurrencyIds)
    for _,iter592 in ipairs(self.rewardCurrencyIds) do
      oprot:writeString(iter592)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.rewardCurrencyAmounts ~= nil then
    oprot:writeFieldBegin('rewardCurrencyAmounts', TType.LIST, 18)
    oprot:writeListBegin(TType.I32, #self.rewardCurrencyAmounts)
    for _,iter593 in ipairs(self.rewardCurrencyAmounts) do
      oprot:writeI32(iter593)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.titleText ~= nil then
    oprot:writeFieldBegin('titleText', TType.STRUCT, 19)
    self.titleText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.descriptionText ~= nil then
    oprot:writeFieldBegin('descriptionText', TType.STRUCT, 20)
    self.descriptionText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 21)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.guildQuest ~= nil then
    oprot:writeFieldBegin('guildQuest', TType.BOOL, 50)
    oprot:writeBool(self.guildQuest)
    oprot:writeFieldEnd()
  end
  if self.showGuildRank ~= nil then
    oprot:writeFieldBegin('showGuildRank', TType.I32, 51)
    oprot:writeI32(self.showGuildRank)
    oprot:writeFieldEnd()
  end
  if self.hideGuildRank ~= nil then
    oprot:writeFieldBegin('hideGuildRank', TType.I32, 52)
    oprot:writeI32(self.hideGuildRank)
    oprot:writeFieldEnd()
  end
  if self.unlockGuildRank ~= nil then
    oprot:writeFieldBegin('unlockGuildRank', TType.I32, 53)
    oprot:writeI32(self.unlockGuildRank)
    oprot:writeFieldEnd()
  end
  if self.guildQuestRewardId ~= nil then
    oprot:writeFieldBegin('guildQuestRewardId', TType.STRING, 54)
    oprot:writeString(self.guildQuestRewardId)
    oprot:writeFieldEnd()
  end
  if self.displayCurrencyId ~= nil then
    oprot:writeFieldBegin('displayCurrencyId', TType.STRING, 55)
    oprot:writeString(self.displayCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.displayCurrencyAmount ~= nil then
    oprot:writeFieldBegin('displayCurrencyAmount', TType.I32, 56)
    oprot:writeI32(self.displayCurrencyAmount)
    oprot:writeFieldEnd()
  end
  if self.goals ~= nil then
    oprot:writeFieldBegin('goals', TType.MAP, 200)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.goals))
    for kiter594,viter595 in pairs(self.goals) do
      oprot:writeString(kiter594)
      viter595:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GoalDisplayTemplate = __TObject:new{
  goalType,
  text,
  textPlural
}

function GoalDisplayTemplate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.goalType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.text = LocalizedString:new{}
        self.text:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.textPlural = LocalizedString:new{}
        self.textPlural:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GoalDisplayTemplate:write(oprot)
  oprot:writeStructBegin('GoalDisplayTemplate')
  if self.goalType ~= nil then
    oprot:writeFieldBegin('goalType', TType.I32, 1)
    oprot:writeI32(self.goalType)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRUCT, 2)
    self.text:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.textPlural ~= nil then
    oprot:writeFieldBegin('textPlural', TType.STRUCT, 3)
    self.textPlural:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

QuestDisplayTemplate = __TObject:new{
  goalType,
  templateId,
  titleText
}

function QuestDisplayTemplate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.goalType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.templateId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.titleText = LocalizedString:new{}
        self.titleText:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function QuestDisplayTemplate:write(oprot)
  oprot:writeStructBegin('QuestDisplayTemplate')
  if self.goalType ~= nil then
    oprot:writeFieldBegin('goalType', TType.I32, 1)
    oprot:writeI32(self.goalType)
    oprot:writeFieldEnd()
  end
  if self.templateId ~= nil then
    oprot:writeFieldBegin('templateId', TType.I32, 2)
    oprot:writeI32(self.templateId)
    oprot:writeFieldEnd()
  end
  if self.titleText ~= nil then
    oprot:writeFieldBegin('titleText', TType.STRUCT, 3)
    self.titleText:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

QuestSettings = __TObject:new{
  refreshPeriodSeconds,
  maxAllowedHarvests,
  maxAllowedHarvestTimeSeconds,
  generatedQuestsEnabled
}

function QuestSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.refreshPeriodSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.maxAllowedHarvests = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.maxAllowedHarvestTimeSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.BOOL then
        self.generatedQuestsEnabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function QuestSettings:write(oprot)
  oprot:writeStructBegin('QuestSettings')
  if self.refreshPeriodSeconds ~= nil then
    oprot:writeFieldBegin('refreshPeriodSeconds', TType.I32, 2)
    oprot:writeI32(self.refreshPeriodSeconds)
    oprot:writeFieldEnd()
  end
  if self.maxAllowedHarvests ~= nil then
    oprot:writeFieldBegin('maxAllowedHarvests', TType.I32, 10)
    oprot:writeI32(self.maxAllowedHarvests)
    oprot:writeFieldEnd()
  end
  if self.maxAllowedHarvestTimeSeconds ~= nil then
    oprot:writeFieldBegin('maxAllowedHarvestTimeSeconds', TType.I32, 11)
    oprot:writeI32(self.maxAllowedHarvestTimeSeconds)
    oprot:writeFieldEnd()
  end
  if self.generatedQuestsEnabled ~= nil then
    oprot:writeFieldBegin('generatedQuestsEnabled', TType.BOOL, 12)
    oprot:writeBool(self.generatedQuestsEnabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

QuestRankSettings = __TObject:new{
  rankId,
  xpToGenerate,
  numberOfSlots,
  harvestSpecificBusiness,
  completeLevel,
  autoPlaySpecificLevel,
  socialLikeKingdom,
  socialVisitKingdom,
  socialPlaceOrderGuildMate,
  socialCompleteOrder,
  matchTiles,
  placeDeco,
  equipAnyGearOnAnyBusiness,
  equipSpecificGearOnSpecificBusiness,
  harvestMinTimeSeconds,
  harvestMaxTimeSeconds,
  placeDecoMin,
  placeDecoMax,
  socialLikeMinProgress,
  socialLikeMaxProgress,
  socialVisitMinProgress,
  socialVisitMaxProgress,
  socialPlaceOrderMinProgress,
  socialPlaceOrderMaxProgress,
  socialCompleteOrderMinProgress,
  socialCompleteOrderMaxProgress,
  matchTilesCells,
  matchTilesMinProgress,
  matchTilesMaxProgress
}

function QuestRankSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.rankId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.xpToGenerate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.numberOfSlots = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.harvestSpecificBusiness = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.completeLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.autoPlaySpecificLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.socialLikeKingdom = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.socialVisitKingdom = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.socialPlaceOrderGuildMate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.socialCompleteOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.I32 then
        self.matchTiles = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.placeDeco = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.equipAnyGearOnAnyBusiness = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.equipSpecificGearOnSpecificBusiness = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.harvestMinTimeSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.harvestMaxTimeSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.placeDecoMin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.I32 then
        self.placeDecoMax = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.I32 then
        self.socialLikeMinProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.I32 then
        self.socialLikeMaxProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.I32 then
        self.socialVisitMinProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.I32 then
        self.socialVisitMaxProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.I32 then
        self.socialPlaceOrderMinProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.I32 then
        self.socialPlaceOrderMaxProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 90 then
      if ftype == TType.I32 then
        self.socialCompleteOrderMinProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 91 then
      if ftype == TType.I32 then
        self.socialCompleteOrderMaxProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.STRING then
        self.matchTilesCells = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.I32 then
        self.matchTilesMinProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 111 then
      if ftype == TType.I32 then
        self.matchTilesMaxProgress = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function QuestRankSettings:write(oprot)
  oprot:writeStructBegin('QuestRankSettings')
  if self.rankId ~= nil then
    oprot:writeFieldBegin('rankId', TType.I32, 1)
    oprot:writeI32(self.rankId)
    oprot:writeFieldEnd()
  end
  if self.xpToGenerate ~= nil then
    oprot:writeFieldBegin('xpToGenerate', TType.I32, 2)
    oprot:writeI32(self.xpToGenerate)
    oprot:writeFieldEnd()
  end
  if self.numberOfSlots ~= nil then
    oprot:writeFieldBegin('numberOfSlots', TType.I32, 3)
    oprot:writeI32(self.numberOfSlots)
    oprot:writeFieldEnd()
  end
  if self.harvestSpecificBusiness ~= nil then
    oprot:writeFieldBegin('harvestSpecificBusiness', TType.I32, 10)
    oprot:writeI32(self.harvestSpecificBusiness)
    oprot:writeFieldEnd()
  end
  if self.completeLevel ~= nil then
    oprot:writeFieldBegin('completeLevel', TType.I32, 12)
    oprot:writeI32(self.completeLevel)
    oprot:writeFieldEnd()
  end
  if self.autoPlaySpecificLevel ~= nil then
    oprot:writeFieldBegin('autoPlaySpecificLevel', TType.I32, 13)
    oprot:writeI32(self.autoPlaySpecificLevel)
    oprot:writeFieldEnd()
  end
  if self.socialLikeKingdom ~= nil then
    oprot:writeFieldBegin('socialLikeKingdom', TType.I32, 14)
    oprot:writeI32(self.socialLikeKingdom)
    oprot:writeFieldEnd()
  end
  if self.socialVisitKingdom ~= nil then
    oprot:writeFieldBegin('socialVisitKingdom', TType.I32, 15)
    oprot:writeI32(self.socialVisitKingdom)
    oprot:writeFieldEnd()
  end
  if self.socialPlaceOrderGuildMate ~= nil then
    oprot:writeFieldBegin('socialPlaceOrderGuildMate', TType.I32, 16)
    oprot:writeI32(self.socialPlaceOrderGuildMate)
    oprot:writeFieldEnd()
  end
  if self.socialCompleteOrder ~= nil then
    oprot:writeFieldBegin('socialCompleteOrder', TType.I32, 17)
    oprot:writeI32(self.socialCompleteOrder)
    oprot:writeFieldEnd()
  end
  if self.matchTiles ~= nil then
    oprot:writeFieldBegin('matchTiles', TType.I32, 18)
    oprot:writeI32(self.matchTiles)
    oprot:writeFieldEnd()
  end
  if self.placeDeco ~= nil then
    oprot:writeFieldBegin('placeDeco', TType.I32, 19)
    oprot:writeI32(self.placeDeco)
    oprot:writeFieldEnd()
  end
  if self.equipAnyGearOnAnyBusiness ~= nil then
    oprot:writeFieldBegin('equipAnyGearOnAnyBusiness', TType.I32, 20)
    oprot:writeI32(self.equipAnyGearOnAnyBusiness)
    oprot:writeFieldEnd()
  end
  if self.equipSpecificGearOnSpecificBusiness ~= nil then
    oprot:writeFieldBegin('equipSpecificGearOnSpecificBusiness', TType.I32, 21)
    oprot:writeI32(self.equipSpecificGearOnSpecificBusiness)
    oprot:writeFieldEnd()
  end
  if self.harvestMinTimeSeconds ~= nil then
    oprot:writeFieldBegin('harvestMinTimeSeconds', TType.I32, 40)
    oprot:writeI32(self.harvestMinTimeSeconds)
    oprot:writeFieldEnd()
  end
  if self.harvestMaxTimeSeconds ~= nil then
    oprot:writeFieldBegin('harvestMaxTimeSeconds', TType.I32, 41)
    oprot:writeI32(self.harvestMaxTimeSeconds)
    oprot:writeFieldEnd()
  end
  if self.placeDecoMin ~= nil then
    oprot:writeFieldBegin('placeDecoMin', TType.I32, 50)
    oprot:writeI32(self.placeDecoMin)
    oprot:writeFieldEnd()
  end
  if self.placeDecoMax ~= nil then
    oprot:writeFieldBegin('placeDecoMax', TType.I32, 51)
    oprot:writeI32(self.placeDecoMax)
    oprot:writeFieldEnd()
  end
  if self.socialLikeMinProgress ~= nil then
    oprot:writeFieldBegin('socialLikeMinProgress', TType.I32, 60)
    oprot:writeI32(self.socialLikeMinProgress)
    oprot:writeFieldEnd()
  end
  if self.socialLikeMaxProgress ~= nil then
    oprot:writeFieldBegin('socialLikeMaxProgress', TType.I32, 61)
    oprot:writeI32(self.socialLikeMaxProgress)
    oprot:writeFieldEnd()
  end
  if self.socialVisitMinProgress ~= nil then
    oprot:writeFieldBegin('socialVisitMinProgress', TType.I32, 70)
    oprot:writeI32(self.socialVisitMinProgress)
    oprot:writeFieldEnd()
  end
  if self.socialVisitMaxProgress ~= nil then
    oprot:writeFieldBegin('socialVisitMaxProgress', TType.I32, 71)
    oprot:writeI32(self.socialVisitMaxProgress)
    oprot:writeFieldEnd()
  end
  if self.socialPlaceOrderMinProgress ~= nil then
    oprot:writeFieldBegin('socialPlaceOrderMinProgress', TType.I32, 80)
    oprot:writeI32(self.socialPlaceOrderMinProgress)
    oprot:writeFieldEnd()
  end
  if self.socialPlaceOrderMaxProgress ~= nil then
    oprot:writeFieldBegin('socialPlaceOrderMaxProgress', TType.I32, 81)
    oprot:writeI32(self.socialPlaceOrderMaxProgress)
    oprot:writeFieldEnd()
  end
  if self.socialCompleteOrderMinProgress ~= nil then
    oprot:writeFieldBegin('socialCompleteOrderMinProgress', TType.I32, 90)
    oprot:writeI32(self.socialCompleteOrderMinProgress)
    oprot:writeFieldEnd()
  end
  if self.socialCompleteOrderMaxProgress ~= nil then
    oprot:writeFieldBegin('socialCompleteOrderMaxProgress', TType.I32, 91)
    oprot:writeI32(self.socialCompleteOrderMaxProgress)
    oprot:writeFieldEnd()
  end
  if self.matchTilesCells ~= nil then
    oprot:writeFieldBegin('matchTilesCells', TType.STRING, 100)
    oprot:writeString(self.matchTilesCells)
    oprot:writeFieldEnd()
  end
  if self.matchTilesMinProgress ~= nil then
    oprot:writeFieldBegin('matchTilesMinProgress', TType.I32, 110)
    oprot:writeI32(self.matchTilesMinProgress)
    oprot:writeFieldEnd()
  end
  if self.matchTilesMaxProgress ~= nil then
    oprot:writeFieldBegin('matchTilesMaxProgress', TType.I32, 111)
    oprot:writeI32(self.matchTilesMaxProgress)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuildingTypeLocalization = __TObject:new{
  buildingType,
  buildingTypeNameSingular,
  buildingTypeNamePlural
}

function BuildingTypeLocalization:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.buildingType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.buildingTypeNameSingular = LocalizedString:new{}
        self.buildingTypeNameSingular:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.buildingTypeNamePlural = LocalizedString:new{}
        self.buildingTypeNamePlural:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuildingTypeLocalization:write(oprot)
  oprot:writeStructBegin('BuildingTypeLocalization')
  if self.buildingType ~= nil then
    oprot:writeFieldBegin('buildingType', TType.I32, 1)
    oprot:writeI32(self.buildingType)
    oprot:writeFieldEnd()
  end
  if self.buildingTypeNameSingular ~= nil then
    oprot:writeFieldBegin('buildingTypeNameSingular', TType.STRUCT, 2)
    self.buildingTypeNameSingular:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.buildingTypeNamePlural ~= nil then
    oprot:writeFieldBegin('buildingTypeNamePlural', TType.STRUCT, 3)
    self.buildingTypeNamePlural:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ForcedUpgrade = __TObject:new{
  clientPlatform,
  minClientVersion,
  minClientBuild,
  title,
  details,
  buttonText,
  url
}

function ForcedUpgrade:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.clientPlatform = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.minClientVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.minClientBuild = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.details = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.buttonText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.url = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ForcedUpgrade:write(oprot)
  oprot:writeStructBegin('ForcedUpgrade')
  if self.clientPlatform ~= nil then
    oprot:writeFieldBegin('clientPlatform', TType.I32, 1)
    oprot:writeI32(self.clientPlatform)
    oprot:writeFieldEnd()
  end
  if self.minClientVersion ~= nil then
    oprot:writeFieldBegin('minClientVersion', TType.STRING, 10)
    oprot:writeString(self.minClientVersion)
    oprot:writeFieldEnd()
  end
  if self.minClientBuild ~= nil then
    oprot:writeFieldBegin('minClientBuild', TType.STRING, 11)
    oprot:writeString(self.minClientBuild)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 20)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.details ~= nil then
    oprot:writeFieldBegin('details', TType.STRING, 21)
    oprot:writeString(self.details)
    oprot:writeFieldEnd()
  end
  if self.buttonText ~= nil then
    oprot:writeFieldBegin('buttonText', TType.STRING, 22)
    oprot:writeString(self.buttonText)
    oprot:writeFieldEnd()
  end
  if self.url ~= nil then
    oprot:writeFieldBegin('url', TType.STRING, 30)
    oprot:writeString(self.url)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ErrorMessage = __TObject:new{
  errorId,
  details
}

function ErrorMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.errorId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.details = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ErrorMessage:write(oprot)
  oprot:writeStructBegin('ErrorMessage')
  if self.errorId ~= nil then
    oprot:writeFieldBegin('errorId', TType.STRING, 1)
    oprot:writeString(self.errorId)
    oprot:writeFieldEnd()
  end
  if self.details ~= nil then
    oprot:writeFieldBegin('details', TType.STRING, 2)
    oprot:writeString(self.details)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StrangerSettings = __TObject:new{
  numberTotal,
  eligibleLastActiveSeconds,
  fakePlayerRankHigher,
  fakePlayerRankLower,
  maxRankForHighRankStrangerList,
  fakeRankForHighRankStrangerList,
  enableHighRankStrangerList,
  enableLastActiveRankStrangerList
}

function StrangerSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.numberTotal = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.eligibleLastActiveSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.fakePlayerRankHigher = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.fakePlayerRankLower = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.maxRankForHighRankStrangerList = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.fakeRankForHighRankStrangerList = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.BOOL then
        self.enableHighRankStrangerList = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.BOOL then
        self.enableLastActiveRankStrangerList = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StrangerSettings:write(oprot)
  oprot:writeStructBegin('StrangerSettings')
  if self.numberTotal ~= nil then
    oprot:writeFieldBegin('numberTotal', TType.I32, 10)
    oprot:writeI32(self.numberTotal)
    oprot:writeFieldEnd()
  end
  if self.eligibleLastActiveSeconds ~= nil then
    oprot:writeFieldBegin('eligibleLastActiveSeconds', TType.I32, 11)
    oprot:writeI32(self.eligibleLastActiveSeconds)
    oprot:writeFieldEnd()
  end
  if self.fakePlayerRankHigher ~= nil then
    oprot:writeFieldBegin('fakePlayerRankHigher', TType.I32, 12)
    oprot:writeI32(self.fakePlayerRankHigher)
    oprot:writeFieldEnd()
  end
  if self.fakePlayerRankLower ~= nil then
    oprot:writeFieldBegin('fakePlayerRankLower', TType.I32, 13)
    oprot:writeI32(self.fakePlayerRankLower)
    oprot:writeFieldEnd()
  end
  if self.maxRankForHighRankStrangerList ~= nil then
    oprot:writeFieldBegin('maxRankForHighRankStrangerList', TType.I32, 14)
    oprot:writeI32(self.maxRankForHighRankStrangerList)
    oprot:writeFieldEnd()
  end
  if self.fakeRankForHighRankStrangerList ~= nil then
    oprot:writeFieldBegin('fakeRankForHighRankStrangerList', TType.I32, 15)
    oprot:writeI32(self.fakeRankForHighRankStrangerList)
    oprot:writeFieldEnd()
  end
  if self.enableHighRankStrangerList ~= nil then
    oprot:writeFieldBegin('enableHighRankStrangerList', TType.BOOL, 16)
    oprot:writeBool(self.enableHighRankStrangerList)
    oprot:writeFieldEnd()
  end
  if self.enableLastActiveRankStrangerList ~= nil then
    oprot:writeFieldBegin('enableLastActiveRankStrangerList', TType.BOOL, 17)
    oprot:writeBool(self.enableLastActiveRankStrangerList)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StrangerMatchSettings = __TObject:new{
  minRank,
  maxRank,
  playersPerBucket,
  bucketsHigher,
  bucketsLower
}

function StrangerMatchSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.minRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.maxRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.playersPerBucket = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.bucketsHigher = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.bucketsLower = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StrangerMatchSettings:write(oprot)
  oprot:writeStructBegin('StrangerMatchSettings')
  if self.minRank ~= nil then
    oprot:writeFieldBegin('minRank', TType.I32, 10)
    oprot:writeI32(self.minRank)
    oprot:writeFieldEnd()
  end
  if self.maxRank ~= nil then
    oprot:writeFieldBegin('maxRank', TType.I32, 11)
    oprot:writeI32(self.maxRank)
    oprot:writeFieldEnd()
  end
  if self.playersPerBucket ~= nil then
    oprot:writeFieldBegin('playersPerBucket', TType.I32, 12)
    oprot:writeI32(self.playersPerBucket)
    oprot:writeFieldEnd()
  end
  if self.bucketsHigher ~= nil then
    oprot:writeFieldBegin('bucketsHigher', TType.I32, 13)
    oprot:writeI32(self.bucketsHigher)
    oprot:writeFieldEnd()
  end
  if self.bucketsLower ~= nil then
    oprot:writeFieldBegin('bucketsLower', TType.I32, 14)
    oprot:writeI32(self.bucketsLower)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PlayerMatchRankSettings = __TObject:new{
  currentLowerRank,
  currentUpperRank,
  numRanksUnder,
  numRanksOver
}

function PlayerMatchRankSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.currentLowerRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.currentUpperRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.numRanksUnder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.numRanksOver = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PlayerMatchRankSettings:write(oprot)
  oprot:writeStructBegin('PlayerMatchRankSettings')
  if self.currentLowerRank ~= nil then
    oprot:writeFieldBegin('currentLowerRank', TType.I32, 1)
    oprot:writeI32(self.currentLowerRank)
    oprot:writeFieldEnd()
  end
  if self.currentUpperRank ~= nil then
    oprot:writeFieldBegin('currentUpperRank', TType.I32, 2)
    oprot:writeI32(self.currentUpperRank)
    oprot:writeFieldEnd()
  end
  if self.numRanksUnder ~= nil then
    oprot:writeFieldBegin('numRanksUnder', TType.I32, 3)
    oprot:writeI32(self.numRanksUnder)
    oprot:writeFieldEnd()
  end
  if self.numRanksOver ~= nil then
    oprot:writeFieldBegin('numRanksOver', TType.I32, 4)
    oprot:writeI32(self.numRanksOver)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FakeStrangerDisplay = __TObject:new{
  display
}

function FakeStrangerDisplay:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.display = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FakeStrangerDisplay:write(oprot)
  oprot:writeStructBegin('FakeStrangerDisplay')
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRING, 10)
    oprot:writeString(self.display)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GiftMessageReward = __TObject:new{
  giftMessageRewardId,
  itemType,
  itemId,
  itemAmount
}

function GiftMessageReward:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.giftMessageRewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.itemType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.itemAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GiftMessageReward:write(oprot)
  oprot:writeStructBegin('GiftMessageReward')
  if self.giftMessageRewardId ~= nil then
    oprot:writeFieldBegin('giftMessageRewardId', TType.STRING, 1)
    oprot:writeString(self.giftMessageRewardId)
    oprot:writeFieldEnd()
  end
  if self.itemType ~= nil then
    oprot:writeFieldBegin('itemType', TType.I32, 2)
    oprot:writeI32(self.itemType)
    oprot:writeFieldEnd()
  end
  if self.itemId ~= nil then
    oprot:writeFieldBegin('itemId', TType.STRING, 3)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  if self.itemAmount ~= nil then
    oprot:writeFieldBegin('itemAmount', TType.I32, 4)
    oprot:writeI32(self.itemAmount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

KingdomLikeGift = __TObject:new{
  kingdomLikeGiftId,
  giftMessageRewardIds,
  giftTitle,
  giftBody
}

function KingdomLikeGift:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.kingdomLikeGiftId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.giftMessageRewardIds = {}
        local _etype599, _size596 = iprot:readListBegin()
        for _i=1,_size596 do
          local _elem600 = iprot:readString()
          table.insert(self.giftMessageRewardIds, _elem600)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.giftTitle = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.giftBody = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function KingdomLikeGift:write(oprot)
  oprot:writeStructBegin('KingdomLikeGift')
  if self.kingdomLikeGiftId ~= nil then
    oprot:writeFieldBegin('kingdomLikeGiftId', TType.STRING, 1)
    oprot:writeString(self.kingdomLikeGiftId)
    oprot:writeFieldEnd()
  end
  if self.giftMessageRewardIds ~= nil then
    oprot:writeFieldBegin('giftMessageRewardIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.giftMessageRewardIds)
    for _,iter601 in ipairs(self.giftMessageRewardIds) do
      oprot:writeString(iter601)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.giftTitle ~= nil then
    oprot:writeFieldBegin('giftTitle', TType.STRING, 3)
    oprot:writeString(self.giftTitle)
    oprot:writeFieldEnd()
  end
  if self.giftBody ~= nil then
    oprot:writeFieldBegin('giftBody', TType.STRING, 4)
    oprot:writeString(self.giftBody)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PartialKingdomLikeGift = __TObject:new{
  partialLikeCount,
  kingdomLikeGiftId
}

function PartialKingdomLikeGift:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.partialLikeCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.kingdomLikeGiftId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PartialKingdomLikeGift:write(oprot)
  oprot:writeStructBegin('PartialKingdomLikeGift')
  if self.partialLikeCount ~= nil then
    oprot:writeFieldBegin('partialLikeCount', TType.I32, 1)
    oprot:writeI32(self.partialLikeCount)
    oprot:writeFieldEnd()
  end
  if self.kingdomLikeGiftId ~= nil then
    oprot:writeFieldBegin('kingdomLikeGiftId', TType.STRING, 2)
    oprot:writeString(self.kingdomLikeGiftId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PushMessage = __TObject:new{
  pushMessageId,
  oldMessage,
  message
}

function PushMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.pushMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.oldMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.message = LocalizedString:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PushMessage:write(oprot)
  oprot:writeStructBegin('PushMessage')
  if self.pushMessageId ~= nil then
    oprot:writeFieldBegin('pushMessageId', TType.STRING, 1)
    oprot:writeString(self.pushMessageId)
    oprot:writeFieldEnd()
  end
  if self.oldMessage ~= nil then
    oprot:writeFieldBegin('oldMessage', TType.STRING, 2)
    oprot:writeString(self.oldMessage)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 3)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AdProvider = __TObject:new{
  adPlatform,
  adProvider,
  appId,
  customParameters,
  priority
}

function AdProvider:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.adPlatform = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.adProvider = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.appId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.customParameters = {}
        local _etype605, _size602 = iprot:readListBegin()
        for _i=1,_size602 do
          local _elem606 = iprot:readString()
          table.insert(self.customParameters, _elem606)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AdProvider:write(oprot)
  oprot:writeStructBegin('AdProvider')
  if self.adPlatform ~= nil then
    oprot:writeFieldBegin('adPlatform', TType.I32, 1)
    oprot:writeI32(self.adPlatform)
    oprot:writeFieldEnd()
  end
  if self.adProvider ~= nil then
    oprot:writeFieldBegin('adProvider', TType.I32, 2)
    oprot:writeI32(self.adProvider)
    oprot:writeFieldEnd()
  end
  if self.appId ~= nil then
    oprot:writeFieldBegin('appId', TType.STRING, 3)
    oprot:writeString(self.appId)
    oprot:writeFieldEnd()
  end
  if self.customParameters ~= nil then
    oprot:writeFieldBegin('customParameters', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.customParameters)
    for _,iter607 in ipairs(self.customParameters) do
      oprot:writeString(iter607)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 5)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RushCostByRemainingTime = __TObject:new{
  minRemainingTimeInSecs,
  maxRemainingTimeInSecs,
  gemCost
}

function RushCostByRemainingTime:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.minRemainingTimeInSecs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.maxRemainingTimeInSecs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.gemCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RushCostByRemainingTime:write(oprot)
  oprot:writeStructBegin('RushCostByRemainingTime')
  if self.minRemainingTimeInSecs ~= nil then
    oprot:writeFieldBegin('minRemainingTimeInSecs', TType.I32, 1)
    oprot:writeI32(self.minRemainingTimeInSecs)
    oprot:writeFieldEnd()
  end
  if self.maxRemainingTimeInSecs ~= nil then
    oprot:writeFieldBegin('maxRemainingTimeInSecs', TType.I32, 2)
    oprot:writeI32(self.maxRemainingTimeInSecs)
    oprot:writeFieldEnd()
  end
  if self.gemCost ~= nil then
    oprot:writeFieldBegin('gemCost', TType.I32, 3)
    oprot:writeI32(self.gemCost)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RewardMessage = __TObject:new{
  rewardMessageId,
  localizedTitle,
  localizedBody,
  title,
  body,
  priority,
  templateId
}

function RewardMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.rewardMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.localizedTitle = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.localizedBody = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.title = LocalizedString:new{}
        self.title:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.body = LocalizedString:new{}
        self.body:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.templateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RewardMessage:write(oprot)
  oprot:writeStructBegin('RewardMessage')
  if self.rewardMessageId ~= nil then
    oprot:writeFieldBegin('rewardMessageId', TType.STRING, 1)
    oprot:writeString(self.rewardMessageId)
    oprot:writeFieldEnd()
  end
  if self.localizedTitle ~= nil then
    oprot:writeFieldBegin('localizedTitle', TType.STRING, 2)
    oprot:writeString(self.localizedTitle)
    oprot:writeFieldEnd()
  end
  if self.localizedBody ~= nil then
    oprot:writeFieldBegin('localizedBody', TType.STRING, 3)
    oprot:writeString(self.localizedBody)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRUCT, 4)
    self.title:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.body ~= nil then
    oprot:writeFieldBegin('body', TType.STRUCT, 5)
    self.body:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 6)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  if self.templateId ~= nil then
    oprot:writeFieldBegin('templateId', TType.STRING, 10)
    oprot:writeString(self.templateId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Event = __TObject:new{
  eventId,
  previewStartTime,
  mainStartTime,
  mainEndTime,
  recapEndTime,
  repeatSeconds,
  parentEventId
}

function Event:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.eventId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.previewStartTime = DateTimeUTC:new{}
        self.previewStartTime:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.mainStartTime = DateTimeUTC:new{}
        self.mainStartTime:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.mainEndTime = DateTimeUTC:new{}
        self.mainEndTime:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.recapEndTime = DateTimeUTC:new{}
        self.recapEndTime:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.repeatSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.parentEventId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Event:write(oprot)
  oprot:writeStructBegin('Event')
  if self.eventId ~= nil then
    oprot:writeFieldBegin('eventId', TType.STRING, 1)
    oprot:writeString(self.eventId)
    oprot:writeFieldEnd()
  end
  if self.previewStartTime ~= nil then
    oprot:writeFieldBegin('previewStartTime', TType.STRUCT, 10)
    self.previewStartTime:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.mainStartTime ~= nil then
    oprot:writeFieldBegin('mainStartTime', TType.STRUCT, 11)
    self.mainStartTime:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.mainEndTime ~= nil then
    oprot:writeFieldBegin('mainEndTime', TType.STRUCT, 12)
    self.mainEndTime:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.recapEndTime ~= nil then
    oprot:writeFieldBegin('recapEndTime', TType.STRUCT, 13)
    self.recapEndTime:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.repeatSeconds ~= nil then
    oprot:writeFieldBegin('repeatSeconds', TType.I32, 14)
    oprot:writeI32(self.repeatSeconds)
    oprot:writeFieldEnd()
  end
  if self.parentEventId ~= nil then
    oprot:writeFieldBegin('parentEventId', TType.STRING, 15)
    oprot:writeString(self.parentEventId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CellInfo = __TObject:new{
  CellInfoMapId,
  cellTypeId,
  cellImagePath,
  specialAnimationPath
}

function CellInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.CellInfoMapId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.cellTypeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.cellImagePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.specialAnimationPath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CellInfo:write(oprot)
  oprot:writeStructBegin('CellInfo')
  if self.CellInfoMapId ~= nil then
    oprot:writeFieldBegin('CellInfoMapId', TType.STRING, 1)
    oprot:writeString(self.CellInfoMapId)
    oprot:writeFieldEnd()
  end
  if self.cellTypeId ~= nil then
    oprot:writeFieldBegin('cellTypeId', TType.STRING, 2)
    oprot:writeString(self.cellTypeId)
    oprot:writeFieldEnd()
  end
  if self.cellImagePath ~= nil then
    oprot:writeFieldBegin('cellImagePath', TType.STRING, 3)
    oprot:writeString(self.cellImagePath)
    oprot:writeFieldEnd()
  end
  if self.specialAnimationPath ~= nil then
    oprot:writeFieldBegin('specialAnimationPath', TType.STRING, 4)
    oprot:writeString(self.specialAnimationPath)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MatchThreeCellDefinition = __TObject:new{
  match3ThemeId,
  cellTypeId,
  displayName,
  cellImagePath,
  affinityId,
  specialtyId,
  blastJsonFilename,
  blastAtlasFilename,
  blastAnimationName
}

function MatchThreeCellDefinition:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.match3ThemeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.cellTypeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.displayName = LocalizedString:new{}
        self.displayName:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.cellImagePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.affinityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.specialtyId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.blastJsonFilename = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRING then
        self.blastAtlasFilename = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.STRING then
        self.blastAnimationName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MatchThreeCellDefinition:write(oprot)
  oprot:writeStructBegin('MatchThreeCellDefinition')
  if self.match3ThemeId ~= nil then
    oprot:writeFieldBegin('match3ThemeId', TType.STRING, 1)
    oprot:writeString(self.match3ThemeId)
    oprot:writeFieldEnd()
  end
  if self.cellTypeId ~= nil then
    oprot:writeFieldBegin('cellTypeId', TType.STRING, 2)
    oprot:writeString(self.cellTypeId)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRUCT, 3)
    self.displayName:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.cellImagePath ~= nil then
    oprot:writeFieldBegin('cellImagePath', TType.STRING, 10)
    oprot:writeString(self.cellImagePath)
    oprot:writeFieldEnd()
  end
  if self.affinityId ~= nil then
    oprot:writeFieldBegin('affinityId', TType.I32, 13)
    oprot:writeI32(self.affinityId)
    oprot:writeFieldEnd()
  end
  if self.specialtyId ~= nil then
    oprot:writeFieldBegin('specialtyId', TType.I32, 14)
    oprot:writeI32(self.specialtyId)
    oprot:writeFieldEnd()
  end
  if self.blastJsonFilename ~= nil then
    oprot:writeFieldBegin('blastJsonFilename', TType.STRING, 50)
    oprot:writeString(self.blastJsonFilename)
    oprot:writeFieldEnd()
  end
  if self.blastAtlasFilename ~= nil then
    oprot:writeFieldBegin('blastAtlasFilename', TType.STRING, 51)
    oprot:writeString(self.blastAtlasFilename)
    oprot:writeFieldEnd()
  end
  if self.blastAnimationName ~= nil then
    oprot:writeFieldBegin('blastAnimationName', TType.STRING, 52)
    oprot:writeString(self.blastAnimationName)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MatchThreeBlasterDefinition = __TObject:new{
  match3ThemeId,
  blasterTypeId,
  displayName,
  cellMatchCategory,
  blastJsonFilename,
  blastAtlasFilename,
  blastAnimationName
}

function MatchThreeBlasterDefinition:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.match3ThemeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.blasterTypeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.displayName = LocalizedString:new{}
        self.displayName:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.cellMatchCategory = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.blastJsonFilename = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRING then
        self.blastAtlasFilename = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.STRING then
        self.blastAnimationName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MatchThreeBlasterDefinition:write(oprot)
  oprot:writeStructBegin('MatchThreeBlasterDefinition')
  if self.match3ThemeId ~= nil then
    oprot:writeFieldBegin('match3ThemeId', TType.STRING, 1)
    oprot:writeString(self.match3ThemeId)
    oprot:writeFieldEnd()
  end
  if self.blasterTypeId ~= nil then
    oprot:writeFieldBegin('blasterTypeId', TType.STRING, 2)
    oprot:writeString(self.blasterTypeId)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRUCT, 3)
    self.displayName:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.cellMatchCategory ~= nil then
    oprot:writeFieldBegin('cellMatchCategory', TType.STRING, 4)
    oprot:writeString(self.cellMatchCategory)
    oprot:writeFieldEnd()
  end
  if self.blastJsonFilename ~= nil then
    oprot:writeFieldBegin('blastJsonFilename', TType.STRING, 50)
    oprot:writeString(self.blastJsonFilename)
    oprot:writeFieldEnd()
  end
  if self.blastAtlasFilename ~= nil then
    oprot:writeFieldBegin('blastAtlasFilename', TType.STRING, 51)
    oprot:writeString(self.blastAtlasFilename)
    oprot:writeFieldEnd()
  end
  if self.blastAnimationName ~= nil then
    oprot:writeFieldBegin('blastAnimationName', TType.STRING, 52)
    oprot:writeString(self.blastAnimationName)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CastleActivity = __TObject:new{
  activityId,
  eventIds,
  eventPhases,
  keyCurrencyId,
  showRank,
  unlockRank,
  hideRank,
  localizedDisplay,
  display,
  bundleIds,
  eventIslandId,
  eventPointCurrencyId,
  eventHowToPlayId,
  eventMainMenuId,
  keyCost1,
  keyCost2,
  keyCost3,
  eventPointMultiplier1,
  eventPointMultiplier2,
  eventPointMultiplier3,
  eventBusinessBuildingId,
  villainId,
  eventGachaOfferId,
  ticketCurrencyId,
  eventTicketGachaOfferId,
  soloLeaderboardId,
  globalLeaderboardId,
  guildLeaderboardId,
  endEventSequenceTriggerOnPopupMessageId,
  levelPerFloor,
  maxUnlockedFloor,
  cellInfoMapId,
  upsellCurrencyId,
  upsellCurrencyOpenGachaOfferId,
  upsellCurrencyNotEnoughText,
  autoPlayKeyCost,
  autoPlayEventPointMultiplier,
  keyCostPerLevelId,
  fountainBuildingId,
  fountainNotificationText,
  businessCountEventPointMultiplier,
  upsellKeyPopupMessageId,
  eventStoreId,
  eventStampStateChangeMultiplier,
  disableAutoPlay,
  hideEventPointsOnLevelDots,
  eventMainMenuWidgets,
  eventMainMenuWidgetPrefix,
  expansionId
}

function CastleActivity:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.activityId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype611, _size608 = iprot:readListBegin()
        for _i=1,_size608 do
          local _elem612 = iprot:readString()
          table.insert(self.eventIds, _elem612)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.keyCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.localizedDisplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.LIST then
        self.bundleIds = {}
        local _etype616, _size613 = iprot:readListBegin()
        for _i=1,_size613 do
          local _elem617 = iprot:readString()
          table.insert(self.bundleIds, _elem617)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.eventIslandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.eventPointCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRING then
        self.eventHowToPlayId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.STRING then
        self.eventMainMenuId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.I32 then
        self.keyCost1 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 36 then
      if ftype == TType.I32 then
        self.keyCost2 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 37 then
      if ftype == TType.I32 then
        self.keyCost3 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 38 then
      if ftype == TType.I32 then
        self.eventPointMultiplier1 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 39 then
      if ftype == TType.I32 then
        self.eventPointMultiplier2 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.eventPointMultiplier3 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.eventBusinessBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.villainId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.STRING then
        self.eventGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRING then
        self.ticketCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.STRING then
        self.eventTicketGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.soloLeaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.STRING then
        self.globalLeaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 72 then
      if ftype == TType.STRING then
        self.guildLeaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.STRING then
        self.endEventSequenceTriggerOnPopupMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.I32 then
        self.levelPerFloor = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 82 then
      if ftype == TType.I32 then
        self.maxUnlockedFloor = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 85 then
      if ftype == TType.STRING then
        self.cellInfoMapId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 90 then
      if ftype == TType.STRING then
        self.upsellCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 91 then
      if ftype == TType.STRING then
        self.upsellCurrencyOpenGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 92 then
      if ftype == TType.STRUCT then
        self.upsellCurrencyNotEnoughText = LocalizedString:new{}
        self.upsellCurrencyNotEnoughText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 93 then
      if ftype == TType.I32 then
        self.autoPlayKeyCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 94 then
      if ftype == TType.I32 then
        self.autoPlayEventPointMultiplier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 95 then
      if ftype == TType.STRING then
        self.keyCostPerLevelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 96 then
      if ftype == TType.STRING then
        self.fountainBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 97 then
      if ftype == TType.STRUCT then
        self.fountainNotificationText = LocalizedString:new{}
        self.fountainNotificationText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 99 then
      if ftype == TType.I32 then
        self.businessCountEventPointMultiplier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.STRING then
        self.upsellKeyPopupMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 101 then
      if ftype == TType.STRING then
        self.eventStoreId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.I32 then
        self.eventStampStateChangeMultiplier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 200 then
      if ftype == TType.BOOL then
        self.disableAutoPlay = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 201 then
      if ftype == TType.BOOL then
        self.hideEventPointsOnLevelDots = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 210 then
      if ftype == TType.LIST then
        self.eventMainMenuWidgets = {}
        local _etype621, _size618 = iprot:readListBegin()
        for _i=1,_size618 do
          local _elem622 = iprot:readString()
          table.insert(self.eventMainMenuWidgets, _elem622)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 211 then
      if ftype == TType.STRING then
        self.eventMainMenuWidgetPrefix = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 220 then
      if ftype == TType.STRING then
        self.expansionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CastleActivity:write(oprot)
  oprot:writeStructBegin('CastleActivity')
  if self.activityId ~= nil then
    oprot:writeFieldBegin('activityId', TType.STRING, 1)
    oprot:writeString(self.activityId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter623 in ipairs(self.eventIds) do
      oprot:writeString(iter623)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 3)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.keyCurrencyId ~= nil then
    oprot:writeFieldBegin('keyCurrencyId', TType.STRING, 4)
    oprot:writeString(self.keyCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 10)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 11)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 12)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.localizedDisplay ~= nil then
    oprot:writeFieldBegin('localizedDisplay', TType.STRING, 20)
    oprot:writeString(self.localizedDisplay)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 21)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.bundleIds ~= nil then
    oprot:writeFieldBegin('bundleIds', TType.LIST, 30)
    oprot:writeListBegin(TType.STRING, #self.bundleIds)
    for _,iter624 in ipairs(self.bundleIds) do
      oprot:writeString(iter624)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventIslandId ~= nil then
    oprot:writeFieldBegin('eventIslandId', TType.STRING, 31)
    oprot:writeString(self.eventIslandId)
    oprot:writeFieldEnd()
  end
  if self.eventPointCurrencyId ~= nil then
    oprot:writeFieldBegin('eventPointCurrencyId', TType.STRING, 32)
    oprot:writeString(self.eventPointCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.eventHowToPlayId ~= nil then
    oprot:writeFieldBegin('eventHowToPlayId', TType.STRING, 33)
    oprot:writeString(self.eventHowToPlayId)
    oprot:writeFieldEnd()
  end
  if self.eventMainMenuId ~= nil then
    oprot:writeFieldBegin('eventMainMenuId', TType.STRING, 34)
    oprot:writeString(self.eventMainMenuId)
    oprot:writeFieldEnd()
  end
  if self.keyCost1 ~= nil then
    oprot:writeFieldBegin('keyCost1', TType.I32, 35)
    oprot:writeI32(self.keyCost1)
    oprot:writeFieldEnd()
  end
  if self.keyCost2 ~= nil then
    oprot:writeFieldBegin('keyCost2', TType.I32, 36)
    oprot:writeI32(self.keyCost2)
    oprot:writeFieldEnd()
  end
  if self.keyCost3 ~= nil then
    oprot:writeFieldBegin('keyCost3', TType.I32, 37)
    oprot:writeI32(self.keyCost3)
    oprot:writeFieldEnd()
  end
  if self.eventPointMultiplier1 ~= nil then
    oprot:writeFieldBegin('eventPointMultiplier1', TType.I32, 38)
    oprot:writeI32(self.eventPointMultiplier1)
    oprot:writeFieldEnd()
  end
  if self.eventPointMultiplier2 ~= nil then
    oprot:writeFieldBegin('eventPointMultiplier2', TType.I32, 39)
    oprot:writeI32(self.eventPointMultiplier2)
    oprot:writeFieldEnd()
  end
  if self.eventPointMultiplier3 ~= nil then
    oprot:writeFieldBegin('eventPointMultiplier3', TType.I32, 40)
    oprot:writeI32(self.eventPointMultiplier3)
    oprot:writeFieldEnd()
  end
  if self.eventBusinessBuildingId ~= nil then
    oprot:writeFieldBegin('eventBusinessBuildingId', TType.STRING, 41)
    oprot:writeString(self.eventBusinessBuildingId)
    oprot:writeFieldEnd()
  end
  if self.villainId ~= nil then
    oprot:writeFieldBegin('villainId', TType.STRING, 42)
    oprot:writeString(self.villainId)
    oprot:writeFieldEnd()
  end
  if self.eventGachaOfferId ~= nil then
    oprot:writeFieldBegin('eventGachaOfferId', TType.STRING, 43)
    oprot:writeString(self.eventGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.ticketCurrencyId ~= nil then
    oprot:writeFieldBegin('ticketCurrencyId', TType.STRING, 61)
    oprot:writeString(self.ticketCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.eventTicketGachaOfferId ~= nil then
    oprot:writeFieldBegin('eventTicketGachaOfferId', TType.STRING, 62)
    oprot:writeString(self.eventTicketGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.soloLeaderboardId ~= nil then
    oprot:writeFieldBegin('soloLeaderboardId', TType.STRING, 70)
    oprot:writeString(self.soloLeaderboardId)
    oprot:writeFieldEnd()
  end
  if self.globalLeaderboardId ~= nil then
    oprot:writeFieldBegin('globalLeaderboardId', TType.STRING, 71)
    oprot:writeString(self.globalLeaderboardId)
    oprot:writeFieldEnd()
  end
  if self.guildLeaderboardId ~= nil then
    oprot:writeFieldBegin('guildLeaderboardId', TType.STRING, 72)
    oprot:writeString(self.guildLeaderboardId)
    oprot:writeFieldEnd()
  end
  if self.endEventSequenceTriggerOnPopupMessageId ~= nil then
    oprot:writeFieldBegin('endEventSequenceTriggerOnPopupMessageId', TType.STRING, 80)
    oprot:writeString(self.endEventSequenceTriggerOnPopupMessageId)
    oprot:writeFieldEnd()
  end
  if self.levelPerFloor ~= nil then
    oprot:writeFieldBegin('levelPerFloor', TType.I32, 81)
    oprot:writeI32(self.levelPerFloor)
    oprot:writeFieldEnd()
  end
  if self.maxUnlockedFloor ~= nil then
    oprot:writeFieldBegin('maxUnlockedFloor', TType.I32, 82)
    oprot:writeI32(self.maxUnlockedFloor)
    oprot:writeFieldEnd()
  end
  if self.cellInfoMapId ~= nil then
    oprot:writeFieldBegin('cellInfoMapId', TType.STRING, 85)
    oprot:writeString(self.cellInfoMapId)
    oprot:writeFieldEnd()
  end
  if self.upsellCurrencyId ~= nil then
    oprot:writeFieldBegin('upsellCurrencyId', TType.STRING, 90)
    oprot:writeString(self.upsellCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.upsellCurrencyOpenGachaOfferId ~= nil then
    oprot:writeFieldBegin('upsellCurrencyOpenGachaOfferId', TType.STRING, 91)
    oprot:writeString(self.upsellCurrencyOpenGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.upsellCurrencyNotEnoughText ~= nil then
    oprot:writeFieldBegin('upsellCurrencyNotEnoughText', TType.STRUCT, 92)
    self.upsellCurrencyNotEnoughText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.autoPlayKeyCost ~= nil then
    oprot:writeFieldBegin('autoPlayKeyCost', TType.I32, 93)
    oprot:writeI32(self.autoPlayKeyCost)
    oprot:writeFieldEnd()
  end
  if self.autoPlayEventPointMultiplier ~= nil then
    oprot:writeFieldBegin('autoPlayEventPointMultiplier', TType.I32, 94)
    oprot:writeI32(self.autoPlayEventPointMultiplier)
    oprot:writeFieldEnd()
  end
  if self.keyCostPerLevelId ~= nil then
    oprot:writeFieldBegin('keyCostPerLevelId', TType.STRING, 95)
    oprot:writeString(self.keyCostPerLevelId)
    oprot:writeFieldEnd()
  end
  if self.fountainBuildingId ~= nil then
    oprot:writeFieldBegin('fountainBuildingId', TType.STRING, 96)
    oprot:writeString(self.fountainBuildingId)
    oprot:writeFieldEnd()
  end
  if self.fountainNotificationText ~= nil then
    oprot:writeFieldBegin('fountainNotificationText', TType.STRUCT, 97)
    self.fountainNotificationText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.businessCountEventPointMultiplier ~= nil then
    oprot:writeFieldBegin('businessCountEventPointMultiplier', TType.I32, 99)
    oprot:writeI32(self.businessCountEventPointMultiplier)
    oprot:writeFieldEnd()
  end
  if self.upsellKeyPopupMessageId ~= nil then
    oprot:writeFieldBegin('upsellKeyPopupMessageId', TType.STRING, 100)
    oprot:writeString(self.upsellKeyPopupMessageId)
    oprot:writeFieldEnd()
  end
  if self.eventStoreId ~= nil then
    oprot:writeFieldBegin('eventStoreId', TType.STRING, 101)
    oprot:writeString(self.eventStoreId)
    oprot:writeFieldEnd()
  end
  if self.eventStampStateChangeMultiplier ~= nil then
    oprot:writeFieldBegin('eventStampStateChangeMultiplier', TType.I32, 110)
    oprot:writeI32(self.eventStampStateChangeMultiplier)
    oprot:writeFieldEnd()
  end
  if self.disableAutoPlay ~= nil then
    oprot:writeFieldBegin('disableAutoPlay', TType.BOOL, 200)
    oprot:writeBool(self.disableAutoPlay)
    oprot:writeFieldEnd()
  end
  if self.hideEventPointsOnLevelDots ~= nil then
    oprot:writeFieldBegin('hideEventPointsOnLevelDots', TType.BOOL, 201)
    oprot:writeBool(self.hideEventPointsOnLevelDots)
    oprot:writeFieldEnd()
  end
  if self.eventMainMenuWidgets ~= nil then
    oprot:writeFieldBegin('eventMainMenuWidgets', TType.LIST, 210)
    oprot:writeListBegin(TType.STRING, #self.eventMainMenuWidgets)
    for _,iter625 in ipairs(self.eventMainMenuWidgets) do
      oprot:writeString(iter625)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventMainMenuWidgetPrefix ~= nil then
    oprot:writeFieldBegin('eventMainMenuWidgetPrefix', TType.STRING, 211)
    oprot:writeString(self.eventMainMenuWidgetPrefix)
    oprot:writeFieldEnd()
  end
  if self.expansionId ~= nil then
    oprot:writeFieldBegin('expansionId', TType.STRING, 220)
    oprot:writeString(self.expansionId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RaidBossActivity = __TObject:new{
  activityId,
  eventIds,
  eventPhases,
  keyCurrencyId,
  showRank,
  unlockRank,
  hideRank,
  display,
  bundleIds,
  eventIslandId,
  eventPointCurrencyId,
  eventHowToPlayId,
  eventMainMenuId,
  eventBusinessBuildingId,
  eventGachaOfferId,
  affinityBonus,
  specialtyBonus,
  ticketCurrencyId,
  eventTicketGachaOfferId,
  soloLeaderboardId,
  globalLeaderboardId,
  guildLeaderboardId,
  cellInfoMapId,
  upsellCurrencyId,
  upsellCurrencyOpenGachaOfferId,
  upsellCurrencyNotEnoughText,
  keyCostPerLevelId,
  fountainBuildingId,
  fountainNotificationText,
  upsellKeyPopupMessageId,
  eventStoreId,
  eventStampStateChangeMultiplier,
  eventMainMenuWidgetPrefix,
  expansionId
}

function RaidBossActivity:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.activityId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype629, _size626 = iprot:readListBegin()
        for _i=1,_size626 do
          local _elem630 = iprot:readString()
          table.insert(self.eventIds, _elem630)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.keyCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.LIST then
        self.bundleIds = {}
        local _etype634, _size631 = iprot:readListBegin()
        for _i=1,_size631 do
          local _elem635 = iprot:readString()
          table.insert(self.bundleIds, _elem635)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.eventIslandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.eventPointCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRING then
        self.eventHowToPlayId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.STRING then
        self.eventMainMenuId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.eventBusinessBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.STRING then
        self.eventGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.LIST then
        self.affinityBonus = {}
        local _etype639, _size636 = iprot:readListBegin()
        for _i=1,_size636 do
          local _elem640 = iprot:readI32()
          table.insert(self.affinityBonus, _elem640)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.LIST then
        self.specialtyBonus = {}
        local _etype644, _size641 = iprot:readListBegin()
        for _i=1,_size641 do
          local _elem645 = iprot:readI32()
          table.insert(self.specialtyBonus, _elem645)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRING then
        self.ticketCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.STRING then
        self.eventTicketGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.soloLeaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.STRING then
        self.globalLeaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 72 then
      if ftype == TType.STRING then
        self.guildLeaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 85 then
      if ftype == TType.STRING then
        self.cellInfoMapId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 90 then
      if ftype == TType.STRING then
        self.upsellCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 91 then
      if ftype == TType.STRING then
        self.upsellCurrencyOpenGachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 92 then
      if ftype == TType.STRUCT then
        self.upsellCurrencyNotEnoughText = LocalizedString:new{}
        self.upsellCurrencyNotEnoughText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 95 then
      if ftype == TType.STRING then
        self.keyCostPerLevelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 96 then
      if ftype == TType.STRING then
        self.fountainBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 97 then
      if ftype == TType.STRUCT then
        self.fountainNotificationText = LocalizedString:new{}
        self.fountainNotificationText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.STRING then
        self.upsellKeyPopupMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 101 then
      if ftype == TType.STRING then
        self.eventStoreId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.I32 then
        self.eventStampStateChangeMultiplier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 211 then
      if ftype == TType.STRING then
        self.eventMainMenuWidgetPrefix = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 220 then
      if ftype == TType.STRING then
        self.expansionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RaidBossActivity:write(oprot)
  oprot:writeStructBegin('RaidBossActivity')
  if self.activityId ~= nil then
    oprot:writeFieldBegin('activityId', TType.STRING, 1)
    oprot:writeString(self.activityId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter646 in ipairs(self.eventIds) do
      oprot:writeString(iter646)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 3)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.keyCurrencyId ~= nil then
    oprot:writeFieldBegin('keyCurrencyId', TType.STRING, 4)
    oprot:writeString(self.keyCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 10)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 11)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 12)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 21)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.bundleIds ~= nil then
    oprot:writeFieldBegin('bundleIds', TType.LIST, 30)
    oprot:writeListBegin(TType.STRING, #self.bundleIds)
    for _,iter647 in ipairs(self.bundleIds) do
      oprot:writeString(iter647)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventIslandId ~= nil then
    oprot:writeFieldBegin('eventIslandId', TType.STRING, 31)
    oprot:writeString(self.eventIslandId)
    oprot:writeFieldEnd()
  end
  if self.eventPointCurrencyId ~= nil then
    oprot:writeFieldBegin('eventPointCurrencyId', TType.STRING, 32)
    oprot:writeString(self.eventPointCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.eventHowToPlayId ~= nil then
    oprot:writeFieldBegin('eventHowToPlayId', TType.STRING, 33)
    oprot:writeString(self.eventHowToPlayId)
    oprot:writeFieldEnd()
  end
  if self.eventMainMenuId ~= nil then
    oprot:writeFieldBegin('eventMainMenuId', TType.STRING, 34)
    oprot:writeString(self.eventMainMenuId)
    oprot:writeFieldEnd()
  end
  if self.eventBusinessBuildingId ~= nil then
    oprot:writeFieldBegin('eventBusinessBuildingId', TType.STRING, 41)
    oprot:writeString(self.eventBusinessBuildingId)
    oprot:writeFieldEnd()
  end
  if self.eventGachaOfferId ~= nil then
    oprot:writeFieldBegin('eventGachaOfferId', TType.STRING, 43)
    oprot:writeString(self.eventGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.affinityBonus ~= nil then
    oprot:writeFieldBegin('affinityBonus', TType.LIST, 50)
    oprot:writeListBegin(TType.I32, #self.affinityBonus)
    for _,iter648 in ipairs(self.affinityBonus) do
      oprot:writeI32(iter648)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.specialtyBonus ~= nil then
    oprot:writeFieldBegin('specialtyBonus', TType.LIST, 51)
    oprot:writeListBegin(TType.I32, #self.specialtyBonus)
    for _,iter649 in ipairs(self.specialtyBonus) do
      oprot:writeI32(iter649)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.ticketCurrencyId ~= nil then
    oprot:writeFieldBegin('ticketCurrencyId', TType.STRING, 61)
    oprot:writeString(self.ticketCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.eventTicketGachaOfferId ~= nil then
    oprot:writeFieldBegin('eventTicketGachaOfferId', TType.STRING, 62)
    oprot:writeString(self.eventTicketGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.soloLeaderboardId ~= nil then
    oprot:writeFieldBegin('soloLeaderboardId', TType.STRING, 70)
    oprot:writeString(self.soloLeaderboardId)
    oprot:writeFieldEnd()
  end
  if self.globalLeaderboardId ~= nil then
    oprot:writeFieldBegin('globalLeaderboardId', TType.STRING, 71)
    oprot:writeString(self.globalLeaderboardId)
    oprot:writeFieldEnd()
  end
  if self.guildLeaderboardId ~= nil then
    oprot:writeFieldBegin('guildLeaderboardId', TType.STRING, 72)
    oprot:writeString(self.guildLeaderboardId)
    oprot:writeFieldEnd()
  end
  if self.cellInfoMapId ~= nil then
    oprot:writeFieldBegin('cellInfoMapId', TType.STRING, 85)
    oprot:writeString(self.cellInfoMapId)
    oprot:writeFieldEnd()
  end
  if self.upsellCurrencyId ~= nil then
    oprot:writeFieldBegin('upsellCurrencyId', TType.STRING, 90)
    oprot:writeString(self.upsellCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.upsellCurrencyOpenGachaOfferId ~= nil then
    oprot:writeFieldBegin('upsellCurrencyOpenGachaOfferId', TType.STRING, 91)
    oprot:writeString(self.upsellCurrencyOpenGachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.upsellCurrencyNotEnoughText ~= nil then
    oprot:writeFieldBegin('upsellCurrencyNotEnoughText', TType.STRUCT, 92)
    self.upsellCurrencyNotEnoughText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.keyCostPerLevelId ~= nil then
    oprot:writeFieldBegin('keyCostPerLevelId', TType.STRING, 95)
    oprot:writeString(self.keyCostPerLevelId)
    oprot:writeFieldEnd()
  end
  if self.fountainBuildingId ~= nil then
    oprot:writeFieldBegin('fountainBuildingId', TType.STRING, 96)
    oprot:writeString(self.fountainBuildingId)
    oprot:writeFieldEnd()
  end
  if self.fountainNotificationText ~= nil then
    oprot:writeFieldBegin('fountainNotificationText', TType.STRUCT, 97)
    self.fountainNotificationText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.upsellKeyPopupMessageId ~= nil then
    oprot:writeFieldBegin('upsellKeyPopupMessageId', TType.STRING, 100)
    oprot:writeString(self.upsellKeyPopupMessageId)
    oprot:writeFieldEnd()
  end
  if self.eventStoreId ~= nil then
    oprot:writeFieldBegin('eventStoreId', TType.STRING, 101)
    oprot:writeString(self.eventStoreId)
    oprot:writeFieldEnd()
  end
  if self.eventStampStateChangeMultiplier ~= nil then
    oprot:writeFieldBegin('eventStampStateChangeMultiplier', TType.I32, 110)
    oprot:writeI32(self.eventStampStateChangeMultiplier)
    oprot:writeFieldEnd()
  end
  if self.eventMainMenuWidgetPrefix ~= nil then
    oprot:writeFieldBegin('eventMainMenuWidgetPrefix', TType.STRING, 211)
    oprot:writeString(self.eventMainMenuWidgetPrefix)
    oprot:writeFieldEnd()
  end
  if self.expansionId ~= nil then
    oprot:writeFieldBegin('expansionId', TType.STRING, 220)
    oprot:writeString(self.expansionId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

KeyCostPerLevel = __TObject:new{
  keyCostPerLevelId,
  levelId,
  keyCost1,
  keyCost2,
  keyCost3,
  eventPointMultiplier1,
  eventPointMultiplier2,
  eventPointMultiplier3,
  autoPlayKeyCost,
  autoPlayEventPointMultiplier,
  autoPlayTicketCost,
  costCurrencyId1,
  costCurrencyId2,
  costCurrencyId3
}

function KeyCostPerLevel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.keyCostPerLevelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.levelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.keyCost1 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.keyCost2 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.keyCost3 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.eventPointMultiplier1 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.eventPointMultiplier2 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.eventPointMultiplier3 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I32 then
        self.autoPlayKeyCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.autoPlayEventPointMultiplier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.autoPlayTicketCost = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.costCurrencyId1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.costCurrencyId2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.costCurrencyId3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function KeyCostPerLevel:write(oprot)
  oprot:writeStructBegin('KeyCostPerLevel')
  if self.keyCostPerLevelId ~= nil then
    oprot:writeFieldBegin('keyCostPerLevelId', TType.STRING, 1)
    oprot:writeString(self.keyCostPerLevelId)
    oprot:writeFieldEnd()
  end
  if self.levelId ~= nil then
    oprot:writeFieldBegin('levelId', TType.STRING, 2)
    oprot:writeString(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.keyCost1 ~= nil then
    oprot:writeFieldBegin('keyCost1', TType.I32, 3)
    oprot:writeI32(self.keyCost1)
    oprot:writeFieldEnd()
  end
  if self.keyCost2 ~= nil then
    oprot:writeFieldBegin('keyCost2', TType.I32, 4)
    oprot:writeI32(self.keyCost2)
    oprot:writeFieldEnd()
  end
  if self.keyCost3 ~= nil then
    oprot:writeFieldBegin('keyCost3', TType.I32, 5)
    oprot:writeI32(self.keyCost3)
    oprot:writeFieldEnd()
  end
  if self.eventPointMultiplier1 ~= nil then
    oprot:writeFieldBegin('eventPointMultiplier1', TType.I32, 6)
    oprot:writeI32(self.eventPointMultiplier1)
    oprot:writeFieldEnd()
  end
  if self.eventPointMultiplier2 ~= nil then
    oprot:writeFieldBegin('eventPointMultiplier2', TType.I32, 7)
    oprot:writeI32(self.eventPointMultiplier2)
    oprot:writeFieldEnd()
  end
  if self.eventPointMultiplier3 ~= nil then
    oprot:writeFieldBegin('eventPointMultiplier3', TType.I32, 8)
    oprot:writeI32(self.eventPointMultiplier3)
    oprot:writeFieldEnd()
  end
  if self.autoPlayKeyCost ~= nil then
    oprot:writeFieldBegin('autoPlayKeyCost', TType.I32, 9)
    oprot:writeI32(self.autoPlayKeyCost)
    oprot:writeFieldEnd()
  end
  if self.autoPlayEventPointMultiplier ~= nil then
    oprot:writeFieldBegin('autoPlayEventPointMultiplier', TType.I32, 10)
    oprot:writeI32(self.autoPlayEventPointMultiplier)
    oprot:writeFieldEnd()
  end
  if self.autoPlayTicketCost ~= nil then
    oprot:writeFieldBegin('autoPlayTicketCost', TType.I32, 11)
    oprot:writeI32(self.autoPlayTicketCost)
    oprot:writeFieldEnd()
  end
  if self.costCurrencyId1 ~= nil then
    oprot:writeFieldBegin('costCurrencyId1', TType.STRING, 20)
    oprot:writeString(self.costCurrencyId1)
    oprot:writeFieldEnd()
  end
  if self.costCurrencyId2 ~= nil then
    oprot:writeFieldBegin('costCurrencyId2', TType.STRING, 21)
    oprot:writeString(self.costCurrencyId2)
    oprot:writeFieldEnd()
  end
  if self.costCurrencyId3 ~= nil then
    oprot:writeFieldBegin('costCurrencyId3', TType.STRING, 22)
    oprot:writeString(self.costCurrencyId3)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EventIsland = __TObject:new{
  eventIslandId,
  filename,
  x,
  y,
  sizeX,
  sizeY,
  realHeight
}

function EventIsland:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.eventIslandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.filename = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.x = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.y = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.sizeX = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.sizeY = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.realHeight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EventIsland:write(oprot)
  oprot:writeStructBegin('EventIsland')
  if self.eventIslandId ~= nil then
    oprot:writeFieldBegin('eventIslandId', TType.STRING, 1)
    oprot:writeString(self.eventIslandId)
    oprot:writeFieldEnd()
  end
  if self.filename ~= nil then
    oprot:writeFieldBegin('filename', TType.STRING, 2)
    oprot:writeString(self.filename)
    oprot:writeFieldEnd()
  end
  if self.x ~= nil then
    oprot:writeFieldBegin('x', TType.I32, 3)
    oprot:writeI32(self.x)
    oprot:writeFieldEnd()
  end
  if self.y ~= nil then
    oprot:writeFieldBegin('y', TType.I32, 4)
    oprot:writeI32(self.y)
    oprot:writeFieldEnd()
  end
  if self.sizeX ~= nil then
    oprot:writeFieldBegin('sizeX', TType.I32, 5)
    oprot:writeI32(self.sizeX)
    oprot:writeFieldEnd()
  end
  if self.sizeY ~= nil then
    oprot:writeFieldBegin('sizeY', TType.I32, 6)
    oprot:writeI32(self.sizeY)
    oprot:writeFieldEnd()
  end
  if self.realHeight ~= nil then
    oprot:writeFieldBegin('realHeight', TType.I32, 7)
    oprot:writeI32(self.realHeight)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EventHowToPlay = __TObject:new{
  eventHowToPlayId,
  backgroundImage,
  templateFile,
  titleBackgroundImage,
  step1,
  step1Icon,
  step2,
  step2Icon,
  step3,
  step3Icon,
  stepBackgroundImage,
  stepBurstImage,
  businessBannerBackgroundBg9,
  businessBannerText,
  hintText,
  step1Ftue,
  step2Ftue,
  step3Ftue,
  titleIcon
}

function EventHowToPlay:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.eventHowToPlayId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.backgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.templateFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.titleBackgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.step1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.step1Icon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.step2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.step2Icon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.step3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.step3Icon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.stepBackgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.stepBurstImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRING then
        self.businessBannerBackgroundBg9 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.businessBannerText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.hintText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.step1Ftue = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.step2Ftue = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.step3Ftue = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.titleIcon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EventHowToPlay:write(oprot)
  oprot:writeStructBegin('EventHowToPlay')
  if self.eventHowToPlayId ~= nil then
    oprot:writeFieldBegin('eventHowToPlayId', TType.STRING, 1)
    oprot:writeString(self.eventHowToPlayId)
    oprot:writeFieldEnd()
  end
  if self.backgroundImage ~= nil then
    oprot:writeFieldBegin('backgroundImage', TType.STRING, 2)
    oprot:writeString(self.backgroundImage)
    oprot:writeFieldEnd()
  end
  if self.templateFile ~= nil then
    oprot:writeFieldBegin('templateFile', TType.STRING, 3)
    oprot:writeString(self.templateFile)
    oprot:writeFieldEnd()
  end
  if self.titleBackgroundImage ~= nil then
    oprot:writeFieldBegin('titleBackgroundImage', TType.STRING, 4)
    oprot:writeString(self.titleBackgroundImage)
    oprot:writeFieldEnd()
  end
  if self.step1 ~= nil then
    oprot:writeFieldBegin('step1', TType.STRING, 10)
    oprot:writeString(self.step1)
    oprot:writeFieldEnd()
  end
  if self.step1Icon ~= nil then
    oprot:writeFieldBegin('step1Icon', TType.STRING, 11)
    oprot:writeString(self.step1Icon)
    oprot:writeFieldEnd()
  end
  if self.step2 ~= nil then
    oprot:writeFieldBegin('step2', TType.STRING, 12)
    oprot:writeString(self.step2)
    oprot:writeFieldEnd()
  end
  if self.step2Icon ~= nil then
    oprot:writeFieldBegin('step2Icon', TType.STRING, 13)
    oprot:writeString(self.step2Icon)
    oprot:writeFieldEnd()
  end
  if self.step3 ~= nil then
    oprot:writeFieldBegin('step3', TType.STRING, 14)
    oprot:writeString(self.step3)
    oprot:writeFieldEnd()
  end
  if self.step3Icon ~= nil then
    oprot:writeFieldBegin('step3Icon', TType.STRING, 15)
    oprot:writeString(self.step3Icon)
    oprot:writeFieldEnd()
  end
  if self.stepBackgroundImage ~= nil then
    oprot:writeFieldBegin('stepBackgroundImage', TType.STRING, 16)
    oprot:writeString(self.stepBackgroundImage)
    oprot:writeFieldEnd()
  end
  if self.stepBurstImage ~= nil then
    oprot:writeFieldBegin('stepBurstImage', TType.STRING, 17)
    oprot:writeString(self.stepBurstImage)
    oprot:writeFieldEnd()
  end
  if self.businessBannerBackgroundBg9 ~= nil then
    oprot:writeFieldBegin('businessBannerBackgroundBg9', TType.STRING, 18)
    oprot:writeString(self.businessBannerBackgroundBg9)
    oprot:writeFieldEnd()
  end
  if self.businessBannerText ~= nil then
    oprot:writeFieldBegin('businessBannerText', TType.STRING, 20)
    oprot:writeString(self.businessBannerText)
    oprot:writeFieldEnd()
  end
  if self.hintText ~= nil then
    oprot:writeFieldBegin('hintText', TType.STRING, 21)
    oprot:writeString(self.hintText)
    oprot:writeFieldEnd()
  end
  if self.step1Ftue ~= nil then
    oprot:writeFieldBegin('step1Ftue', TType.STRING, 22)
    oprot:writeString(self.step1Ftue)
    oprot:writeFieldEnd()
  end
  if self.step2Ftue ~= nil then
    oprot:writeFieldBegin('step2Ftue', TType.STRING, 23)
    oprot:writeString(self.step2Ftue)
    oprot:writeFieldEnd()
  end
  if self.step3Ftue ~= nil then
    oprot:writeFieldBegin('step3Ftue', TType.STRING, 24)
    oprot:writeString(self.step3Ftue)
    oprot:writeFieldEnd()
  end
  if self.titleIcon ~= nil then
    oprot:writeFieldBegin('titleIcon', TType.STRING, 25)
    oprot:writeString(self.titleIcon)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EventMainMenu = __TObject:new{
  eventMainMenuId,
  floorBackgroundImage,
  topImagePortrait,
  bottomImagePortrait,
  topImageLandscape,
  bottomImageLandscape,
  timerScale9Image,
  hint,
  getBusinessText1,
  getBusinessText2,
  rankLockBackgroundImage,
  previewText1,
  previewText2,
  previewImage,
  recapText,
  recapTextNotParticipated,
  rewardButtonImage,
  floorRewardBg,
  floorRewardChestClosed,
  floorRewardChestOpen,
  bottomNavBuildingImage,
  bottomNavLeaderboardImage,
  hidePreviewPhaseGetNowButton,
  rankLockAndPreviewBackground,
  rankLockAndPreviewBackgroundLandscape,
  rankLockAndPreviewTimerBackground,
  rankLockAndPreviewTimerBackgroundLandscape,
  previewOverlay,
  previewOverlayLandscape,
  rankLockOverlay,
  rankLockOverlayLandscape,
  recapRibbonImage,
  recapTrophyTableImage
}

function EventMainMenu:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.eventMainMenuId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.floorBackgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.topImagePortrait = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.bottomImagePortrait = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.topImageLandscape = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.bottomImageLandscape = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.timerScale9Image = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRUCT then
        self.hint = LocalizedString:new{}
        self.hint:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRUCT then
        self.getBusinessText1 = LocalizedString:new{}
        self.getBusinessText1:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.getBusinessText2 = LocalizedString:new{}
        self.getBusinessText2:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.rankLockBackgroundImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.previewText1 = LocalizedString:new{}
        self.previewText1:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.previewText2 = LocalizedString:new{}
        self.previewText2:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.previewImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRUCT then
        self.recapText = LocalizedString:new{}
        self.recapText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRUCT then
        self.recapTextNotParticipated = LocalizedString:new{}
        self.recapTextNotParticipated:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.rewardButtonImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.floorRewardBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.floorRewardChestClosed = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.floorRewardChestOpen = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.bottomNavBuildingImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.bottomNavLeaderboardImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.BOOL then
        self.hidePreviewPhaseGetNowButton = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.rankLockAndPreviewBackground = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRING then
        self.rankLockAndPreviewBackgroundLandscape = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.STRING then
        self.rankLockAndPreviewTimerBackground = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.STRING then
        self.rankLockAndPreviewTimerBackgroundLandscape = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.STRING then
        self.previewOverlay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 55 then
      if ftype == TType.STRING then
        self.previewOverlayLandscape = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 56 then
      if ftype == TType.STRING then
        self.rankLockOverlay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 57 then
      if ftype == TType.STRING then
        self.rankLockOverlayLandscape = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 58 then
      if ftype == TType.STRING then
        self.recapRibbonImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 59 then
      if ftype == TType.STRING then
        self.recapTrophyTableImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EventMainMenu:write(oprot)
  oprot:writeStructBegin('EventMainMenu')
  if self.eventMainMenuId ~= nil then
    oprot:writeFieldBegin('eventMainMenuId', TType.STRING, 1)
    oprot:writeString(self.eventMainMenuId)
    oprot:writeFieldEnd()
  end
  if self.floorBackgroundImage ~= nil then
    oprot:writeFieldBegin('floorBackgroundImage', TType.STRING, 2)
    oprot:writeString(self.floorBackgroundImage)
    oprot:writeFieldEnd()
  end
  if self.topImagePortrait ~= nil then
    oprot:writeFieldBegin('topImagePortrait', TType.STRING, 3)
    oprot:writeString(self.topImagePortrait)
    oprot:writeFieldEnd()
  end
  if self.bottomImagePortrait ~= nil then
    oprot:writeFieldBegin('bottomImagePortrait', TType.STRING, 4)
    oprot:writeString(self.bottomImagePortrait)
    oprot:writeFieldEnd()
  end
  if self.topImageLandscape ~= nil then
    oprot:writeFieldBegin('topImageLandscape', TType.STRING, 5)
    oprot:writeString(self.topImageLandscape)
    oprot:writeFieldEnd()
  end
  if self.bottomImageLandscape ~= nil then
    oprot:writeFieldBegin('bottomImageLandscape', TType.STRING, 6)
    oprot:writeString(self.bottomImageLandscape)
    oprot:writeFieldEnd()
  end
  if self.timerScale9Image ~= nil then
    oprot:writeFieldBegin('timerScale9Image', TType.STRING, 7)
    oprot:writeString(self.timerScale9Image)
    oprot:writeFieldEnd()
  end
  if self.hint ~= nil then
    oprot:writeFieldBegin('hint', TType.STRUCT, 8)
    self.hint:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.getBusinessText1 ~= nil then
    oprot:writeFieldBegin('getBusinessText1', TType.STRUCT, 9)
    self.getBusinessText1:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.getBusinessText2 ~= nil then
    oprot:writeFieldBegin('getBusinessText2', TType.STRUCT, 10)
    self.getBusinessText2:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.rankLockBackgroundImage ~= nil then
    oprot:writeFieldBegin('rankLockBackgroundImage', TType.STRING, 11)
    oprot:writeString(self.rankLockBackgroundImage)
    oprot:writeFieldEnd()
  end
  if self.previewText1 ~= nil then
    oprot:writeFieldBegin('previewText1', TType.STRUCT, 12)
    self.previewText1:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.previewText2 ~= nil then
    oprot:writeFieldBegin('previewText2', TType.STRUCT, 13)
    self.previewText2:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.previewImage ~= nil then
    oprot:writeFieldBegin('previewImage', TType.STRING, 14)
    oprot:writeString(self.previewImage)
    oprot:writeFieldEnd()
  end
  if self.recapText ~= nil then
    oprot:writeFieldBegin('recapText', TType.STRUCT, 15)
    self.recapText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.recapTextNotParticipated ~= nil then
    oprot:writeFieldBegin('recapTextNotParticipated', TType.STRUCT, 16)
    self.recapTextNotParticipated:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.rewardButtonImage ~= nil then
    oprot:writeFieldBegin('rewardButtonImage', TType.STRING, 20)
    oprot:writeString(self.rewardButtonImage)
    oprot:writeFieldEnd()
  end
  if self.floorRewardBg ~= nil then
    oprot:writeFieldBegin('floorRewardBg', TType.STRING, 21)
    oprot:writeString(self.floorRewardBg)
    oprot:writeFieldEnd()
  end
  if self.floorRewardChestClosed ~= nil then
    oprot:writeFieldBegin('floorRewardChestClosed', TType.STRING, 22)
    oprot:writeString(self.floorRewardChestClosed)
    oprot:writeFieldEnd()
  end
  if self.floorRewardChestOpen ~= nil then
    oprot:writeFieldBegin('floorRewardChestOpen', TType.STRING, 23)
    oprot:writeString(self.floorRewardChestOpen)
    oprot:writeFieldEnd()
  end
  if self.bottomNavBuildingImage ~= nil then
    oprot:writeFieldBegin('bottomNavBuildingImage', TType.STRING, 30)
    oprot:writeString(self.bottomNavBuildingImage)
    oprot:writeFieldEnd()
  end
  if self.bottomNavLeaderboardImage ~= nil then
    oprot:writeFieldBegin('bottomNavLeaderboardImage', TType.STRING, 31)
    oprot:writeString(self.bottomNavLeaderboardImage)
    oprot:writeFieldEnd()
  end
  if self.hidePreviewPhaseGetNowButton ~= nil then
    oprot:writeFieldBegin('hidePreviewPhaseGetNowButton', TType.BOOL, 40)
    oprot:writeBool(self.hidePreviewPhaseGetNowButton)
    oprot:writeFieldEnd()
  end
  if self.rankLockAndPreviewBackground ~= nil then
    oprot:writeFieldBegin('rankLockAndPreviewBackground', TType.STRING, 50)
    oprot:writeString(self.rankLockAndPreviewBackground)
    oprot:writeFieldEnd()
  end
  if self.rankLockAndPreviewBackgroundLandscape ~= nil then
    oprot:writeFieldBegin('rankLockAndPreviewBackgroundLandscape', TType.STRING, 51)
    oprot:writeString(self.rankLockAndPreviewBackgroundLandscape)
    oprot:writeFieldEnd()
  end
  if self.rankLockAndPreviewTimerBackground ~= nil then
    oprot:writeFieldBegin('rankLockAndPreviewTimerBackground', TType.STRING, 52)
    oprot:writeString(self.rankLockAndPreviewTimerBackground)
    oprot:writeFieldEnd()
  end
  if self.rankLockAndPreviewTimerBackgroundLandscape ~= nil then
    oprot:writeFieldBegin('rankLockAndPreviewTimerBackgroundLandscape', TType.STRING, 53)
    oprot:writeString(self.rankLockAndPreviewTimerBackgroundLandscape)
    oprot:writeFieldEnd()
  end
  if self.previewOverlay ~= nil then
    oprot:writeFieldBegin('previewOverlay', TType.STRING, 54)
    oprot:writeString(self.previewOverlay)
    oprot:writeFieldEnd()
  end
  if self.previewOverlayLandscape ~= nil then
    oprot:writeFieldBegin('previewOverlayLandscape', TType.STRING, 55)
    oprot:writeString(self.previewOverlayLandscape)
    oprot:writeFieldEnd()
  end
  if self.rankLockOverlay ~= nil then
    oprot:writeFieldBegin('rankLockOverlay', TType.STRING, 56)
    oprot:writeString(self.rankLockOverlay)
    oprot:writeFieldEnd()
  end
  if self.rankLockOverlayLandscape ~= nil then
    oprot:writeFieldBegin('rankLockOverlayLandscape', TType.STRING, 57)
    oprot:writeString(self.rankLockOverlayLandscape)
    oprot:writeFieldEnd()
  end
  if self.recapRibbonImage ~= nil then
    oprot:writeFieldBegin('recapRibbonImage', TType.STRING, 58)
    oprot:writeString(self.recapRibbonImage)
    oprot:writeFieldEnd()
  end
  if self.recapTrophyTableImage ~= nil then
    oprot:writeFieldBegin('recapTrophyTableImage', TType.STRING, 59)
    oprot:writeString(self.recapTrophyTableImage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaderboardSettings = __TObject:new{
  leaderboardGracePeriodSeconds,
  leaderboardPageSize,
  leaderboardOverlap
}

function LeaderboardSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.leaderboardGracePeriodSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.leaderboardPageSize = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.leaderboardOverlap = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaderboardSettings:write(oprot)
  oprot:writeStructBegin('LeaderboardSettings')
  if self.leaderboardGracePeriodSeconds ~= nil then
    oprot:writeFieldBegin('leaderboardGracePeriodSeconds', TType.I32, 1)
    oprot:writeI32(self.leaderboardGracePeriodSeconds)
    oprot:writeFieldEnd()
  end
  if self.leaderboardPageSize ~= nil then
    oprot:writeFieldBegin('leaderboardPageSize', TType.I32, 2)
    oprot:writeI32(self.leaderboardPageSize)
    oprot:writeFieldEnd()
  end
  if self.leaderboardOverlap ~= nil then
    oprot:writeFieldBegin('leaderboardOverlap', TType.I32, 3)
    oprot:writeI32(self.leaderboardOverlap)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildLeaderboardSettings = __TObject:new{
  leaderboardGracePeriodSeconds,
  leaderboardPageSize,
  leaderboardOverlap
}

function GuildLeaderboardSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.leaderboardGracePeriodSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.leaderboardPageSize = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.leaderboardOverlap = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildLeaderboardSettings:write(oprot)
  oprot:writeStructBegin('GuildLeaderboardSettings')
  if self.leaderboardGracePeriodSeconds ~= nil then
    oprot:writeFieldBegin('leaderboardGracePeriodSeconds', TType.I32, 1)
    oprot:writeI32(self.leaderboardGracePeriodSeconds)
    oprot:writeFieldEnd()
  end
  if self.leaderboardPageSize ~= nil then
    oprot:writeFieldBegin('leaderboardPageSize', TType.I32, 2)
    oprot:writeI32(self.leaderboardPageSize)
    oprot:writeFieldEnd()
  end
  if self.leaderboardOverlap ~= nil then
    oprot:writeFieldBegin('leaderboardOverlap', TType.I32, 3)
    oprot:writeI32(self.leaderboardOverlap)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaderboardReward = __TObject:new{
  leaderboardId,
  leaderboardLeagueId,
  leaderboardRibbonId,
  rewardType,
  rewardId,
  rewardAmount
}

function LeaderboardReward:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.leaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.leaderboardLeagueId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.leaderboardRibbonId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.rewardType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.rewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.rewardAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaderboardReward:write(oprot)
  oprot:writeStructBegin('LeaderboardReward')
  if self.leaderboardId ~= nil then
    oprot:writeFieldBegin('leaderboardId', TType.STRING, 1)
    oprot:writeString(self.leaderboardId)
    oprot:writeFieldEnd()
  end
  if self.leaderboardLeagueId ~= nil then
    oprot:writeFieldBegin('leaderboardLeagueId', TType.STRING, 2)
    oprot:writeString(self.leaderboardLeagueId)
    oprot:writeFieldEnd()
  end
  if self.leaderboardRibbonId ~= nil then
    oprot:writeFieldBegin('leaderboardRibbonId', TType.STRING, 3)
    oprot:writeString(self.leaderboardRibbonId)
    oprot:writeFieldEnd()
  end
  if self.rewardType ~= nil then
    oprot:writeFieldBegin('rewardType', TType.I32, 13)
    oprot:writeI32(self.rewardType)
    oprot:writeFieldEnd()
  end
  if self.rewardId ~= nil then
    oprot:writeFieldBegin('rewardId', TType.STRING, 14)
    oprot:writeString(self.rewardId)
    oprot:writeFieldEnd()
  end
  if self.rewardAmount ~= nil then
    oprot:writeFieldBegin('rewardAmount', TType.I32, 15)
    oprot:writeI32(self.rewardAmount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaderboardRibbon = __TObject:new{
  leaderboardId,
  leaderboardLeagueId,
  leaderboardRibbonId,
  localizedDisplay,
  display,
  positionStart,
  positionEnd,
  trophyAssetId,
  bannerAssetId,
  rewardChestAsset,
  rewards,
  eventIslandTier
}

function LeaderboardRibbon:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.leaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.leaderboardLeagueId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.leaderboardRibbonId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.localizedDisplay = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.positionStart = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.positionEnd = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.trophyAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.bannerAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRING then
        self.rewardChestAsset = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.rewards = {}
        local _etype653, _size650 = iprot:readListBegin()
        for _i=1,_size650 do
          local _elem654 = LeaderboardReward:new{}
          _elem654:read(iprot)
          table.insert(self.rewards, _elem654)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.eventIslandTier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaderboardRibbon:write(oprot)
  oprot:writeStructBegin('LeaderboardRibbon')
  if self.leaderboardId ~= nil then
    oprot:writeFieldBegin('leaderboardId', TType.STRING, 1)
    oprot:writeString(self.leaderboardId)
    oprot:writeFieldEnd()
  end
  if self.leaderboardLeagueId ~= nil then
    oprot:writeFieldBegin('leaderboardLeagueId', TType.STRING, 2)
    oprot:writeString(self.leaderboardLeagueId)
    oprot:writeFieldEnd()
  end
  if self.leaderboardRibbonId ~= nil then
    oprot:writeFieldBegin('leaderboardRibbonId', TType.STRING, 3)
    oprot:writeString(self.leaderboardRibbonId)
    oprot:writeFieldEnd()
  end
  if self.localizedDisplay ~= nil then
    oprot:writeFieldBegin('localizedDisplay', TType.STRING, 10)
    oprot:writeString(self.localizedDisplay)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 9)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.positionStart ~= nil then
    oprot:writeFieldBegin('positionStart', TType.I32, 11)
    oprot:writeI32(self.positionStart)
    oprot:writeFieldEnd()
  end
  if self.positionEnd ~= nil then
    oprot:writeFieldBegin('positionEnd', TType.I32, 12)
    oprot:writeI32(self.positionEnd)
    oprot:writeFieldEnd()
  end
  if self.trophyAssetId ~= nil then
    oprot:writeFieldBegin('trophyAssetId', TType.STRING, 13)
    oprot:writeString(self.trophyAssetId)
    oprot:writeFieldEnd()
  end
  if self.bannerAssetId ~= nil then
    oprot:writeFieldBegin('bannerAssetId', TType.STRING, 14)
    oprot:writeString(self.bannerAssetId)
    oprot:writeFieldEnd()
  end
  if self.rewardChestAsset ~= nil then
    oprot:writeFieldBegin('rewardChestAsset', TType.STRING, 18)
    oprot:writeString(self.rewardChestAsset)
    oprot:writeFieldEnd()
  end
  if self.rewards ~= nil then
    oprot:writeFieldBegin('rewards', TType.LIST, 20)
    oprot:writeListBegin(TType.STRUCT, #self.rewards)
    for _,iter655 in ipairs(self.rewards) do
      iter655:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventIslandTier ~= nil then
    oprot:writeFieldBegin('eventIslandTier', TType.I32, 30)
    oprot:writeI32(self.eventIslandTier)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaderboardLeague = __TObject:new{
  leaderboardId,
  leaderboardLeagueId,
  ribbons,
  display,
  displayOrder,
  minPlayersPerDivision,
  maxPlayersPerDivision,
  initialDivisions,
  incrementalDivisions,
  daysLeftOverpack,
  minPlacementCurrency,
  maxPlacementCurrency,
  promoteCount,
  demoteCount,
  promoteCurrencyCredit,
  demoteCurrencyDeduction,
  promoteCounts,
  demoteCounts,
  promoteCurrencyCredits,
  demoteCurrencyDeductions,
  leagueBackground,
  leagueRibbon
}

function LeaderboardLeague:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.leaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.leaderboardLeagueId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.MAP then
        self.ribbons = {}
        local _ktype657, _vtype658, _size656 = iprot:readMapBegin() 
        for _i=1,_size656 do
          local _key660 = iprot:readString()
          local _val661 = LeaderboardRibbon:new{}
          _val661:read(iprot)
          self.ribbons[_key660] = _val661
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.minPlayersPerDivision = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.maxPlayersPerDivision = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.initialDivisions = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.incrementalDivisions = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.daysLeftOverpack = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.I32 then
        self.minPlacementCurrency = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.I32 then
        self.maxPlacementCurrency = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.I32 then
        self.promoteCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 36 then
      if ftype == TType.I32 then
        self.demoteCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 37 then
      if ftype == TType.I32 then
        self.promoteCurrencyCredit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 38 then
      if ftype == TType.I32 then
        self.demoteCurrencyDeduction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 39 then
      if ftype == TType.LIST then
        self.promoteCounts = {}
        local _etype665, _size662 = iprot:readListBegin()
        for _i=1,_size662 do
          local _elem666 = iprot:readI32()
          table.insert(self.promoteCounts, _elem666)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.LIST then
        self.demoteCounts = {}
        local _etype670, _size667 = iprot:readListBegin()
        for _i=1,_size667 do
          local _elem671 = iprot:readI32()
          table.insert(self.demoteCounts, _elem671)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.LIST then
        self.promoteCurrencyCredits = {}
        local _etype675, _size672 = iprot:readListBegin()
        for _i=1,_size672 do
          local _elem676 = iprot:readI32()
          table.insert(self.promoteCurrencyCredits, _elem676)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.LIST then
        self.demoteCurrencyDeductions = {}
        local _etype680, _size677 = iprot:readListBegin()
        for _i=1,_size677 do
          local _elem681 = iprot:readI32()
          table.insert(self.demoteCurrencyDeductions, _elem681)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.leagueBackground = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRING then
        self.leagueRibbon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaderboardLeague:write(oprot)
  oprot:writeStructBegin('LeaderboardLeague')
  if self.leaderboardId ~= nil then
    oprot:writeFieldBegin('leaderboardId', TType.STRING, 1)
    oprot:writeString(self.leaderboardId)
    oprot:writeFieldEnd()
  end
  if self.leaderboardLeagueId ~= nil then
    oprot:writeFieldBegin('leaderboardLeagueId', TType.STRING, 2)
    oprot:writeString(self.leaderboardLeagueId)
    oprot:writeFieldEnd()
  end
  if self.ribbons ~= nil then
    oprot:writeFieldBegin('ribbons', TType.MAP, 30)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.ribbons))
    for kiter682,viter683 in pairs(self.ribbons) do
      oprot:writeString(kiter682)
      viter683:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 9)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 11)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.minPlayersPerDivision ~= nil then
    oprot:writeFieldBegin('minPlayersPerDivision', TType.I32, 20)
    oprot:writeI32(self.minPlayersPerDivision)
    oprot:writeFieldEnd()
  end
  if self.maxPlayersPerDivision ~= nil then
    oprot:writeFieldBegin('maxPlayersPerDivision', TType.I32, 21)
    oprot:writeI32(self.maxPlayersPerDivision)
    oprot:writeFieldEnd()
  end
  if self.initialDivisions ~= nil then
    oprot:writeFieldBegin('initialDivisions', TType.I32, 22)
    oprot:writeI32(self.initialDivisions)
    oprot:writeFieldEnd()
  end
  if self.incrementalDivisions ~= nil then
    oprot:writeFieldBegin('incrementalDivisions', TType.I32, 23)
    oprot:writeI32(self.incrementalDivisions)
    oprot:writeFieldEnd()
  end
  if self.daysLeftOverpack ~= nil then
    oprot:writeFieldBegin('daysLeftOverpack', TType.I32, 24)
    oprot:writeI32(self.daysLeftOverpack)
    oprot:writeFieldEnd()
  end
  if self.minPlacementCurrency ~= nil then
    oprot:writeFieldBegin('minPlacementCurrency', TType.I32, 25)
    oprot:writeI32(self.minPlacementCurrency)
    oprot:writeFieldEnd()
  end
  if self.maxPlacementCurrency ~= nil then
    oprot:writeFieldBegin('maxPlacementCurrency', TType.I32, 26)
    oprot:writeI32(self.maxPlacementCurrency)
    oprot:writeFieldEnd()
  end
  if self.promoteCount ~= nil then
    oprot:writeFieldBegin('promoteCount', TType.I32, 35)
    oprot:writeI32(self.promoteCount)
    oprot:writeFieldEnd()
  end
  if self.demoteCount ~= nil then
    oprot:writeFieldBegin('demoteCount', TType.I32, 36)
    oprot:writeI32(self.demoteCount)
    oprot:writeFieldEnd()
  end
  if self.promoteCurrencyCredit ~= nil then
    oprot:writeFieldBegin('promoteCurrencyCredit', TType.I32, 37)
    oprot:writeI32(self.promoteCurrencyCredit)
    oprot:writeFieldEnd()
  end
  if self.demoteCurrencyDeduction ~= nil then
    oprot:writeFieldBegin('demoteCurrencyDeduction', TType.I32, 38)
    oprot:writeI32(self.demoteCurrencyDeduction)
    oprot:writeFieldEnd()
  end
  if self.promoteCounts ~= nil then
    oprot:writeFieldBegin('promoteCounts', TType.LIST, 39)
    oprot:writeListBegin(TType.I32, #self.promoteCounts)
    for _,iter684 in ipairs(self.promoteCounts) do
      oprot:writeI32(iter684)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.demoteCounts ~= nil then
    oprot:writeFieldBegin('demoteCounts', TType.LIST, 40)
    oprot:writeListBegin(TType.I32, #self.demoteCounts)
    for _,iter685 in ipairs(self.demoteCounts) do
      oprot:writeI32(iter685)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.promoteCurrencyCredits ~= nil then
    oprot:writeFieldBegin('promoteCurrencyCredits', TType.LIST, 41)
    oprot:writeListBegin(TType.I32, #self.promoteCurrencyCredits)
    for _,iter686 in ipairs(self.promoteCurrencyCredits) do
      oprot:writeI32(iter686)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.demoteCurrencyDeductions ~= nil then
    oprot:writeFieldBegin('demoteCurrencyDeductions', TType.LIST, 42)
    oprot:writeListBegin(TType.I32, #self.demoteCurrencyDeductions)
    for _,iter687 in ipairs(self.demoteCurrencyDeductions) do
      oprot:writeI32(iter687)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.leagueBackground ~= nil then
    oprot:writeFieldBegin('leagueBackground', TType.STRING, 50)
    oprot:writeString(self.leagueBackground)
    oprot:writeFieldEnd()
  end
  if self.leagueRibbon ~= nil then
    oprot:writeFieldBegin('leagueRibbon', TType.STRING, 51)
    oprot:writeString(self.leagueRibbon)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Leaderboard = __TObject:new{
  leaderboardId,
  eventIds,
  eventPhases,
  showRank,
  unlockRank,
  hideRank,
  pointCurrencyId,
  placementCurrencyId,
  display,
  rewardDisplay,
  topLeagueId,
  topLeaderboardId,
  topLeagueText,
  middleLeagueText,
  bottomLeagueText,
  noLeagueText,
  previewText,
  recapText,
  joinText,
  rewardMessageId,
  leagues,
  leaderboardTemplateId,
  tabIcon,
  topRewardBannerBg
}

function Leaderboard:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.leaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype691, _size688 = iprot:readListBegin()
        for _i=1,_size688 do
          local _elem692 = iprot:readString()
          table.insert(self.eventIds, _elem692)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.pointCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.placementCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 29 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRUCT then
        self.rewardDisplay = LocalizedString:new{}
        self.rewardDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.topLeagueId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.topLeaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRUCT then
        self.topLeagueText = LocalizedString:new{}
        self.topLeagueText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRUCT then
        self.middleLeagueText = LocalizedString:new{}
        self.middleLeagueText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRUCT then
        self.bottomLeagueText = LocalizedString:new{}
        self.bottomLeagueText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.STRUCT then
        self.noLeagueText = LocalizedString:new{}
        self.noLeagueText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.STRUCT then
        self.previewText = LocalizedString:new{}
        self.previewText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 45 then
      if ftype == TType.STRUCT then
        self.recapText = LocalizedString:new{}
        self.recapText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 46 then
      if ftype == TType.STRUCT then
        self.joinText = LocalizedString:new{}
        self.joinText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.rewardMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.MAP then
        self.leagues = {}
        local _ktype694, _vtype695, _size693 = iprot:readMapBegin() 
        for _i=1,_size693 do
          local _key697 = iprot:readString()
          local _val698 = LeaderboardLeague:new{}
          _val698:read(iprot)
          self.leagues[_key697] = _val698
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.leaderboardTemplateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRING then
        self.tabIcon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.topRewardBannerBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Leaderboard:write(oprot)
  oprot:writeStructBegin('Leaderboard')
  if self.leaderboardId ~= nil then
    oprot:writeFieldBegin('leaderboardId', TType.STRING, 1)
    oprot:writeString(self.leaderboardId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter699 in ipairs(self.eventIds) do
      oprot:writeString(iter699)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 11)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 12)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 13)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 14)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.pointCurrencyId ~= nil then
    oprot:writeFieldBegin('pointCurrencyId', TType.STRING, 15)
    oprot:writeString(self.pointCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.placementCurrencyId ~= nil then
    oprot:writeFieldBegin('placementCurrencyId', TType.STRING, 16)
    oprot:writeString(self.placementCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 29)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.rewardDisplay ~= nil then
    oprot:writeFieldBegin('rewardDisplay', TType.STRUCT, 30)
    self.rewardDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.topLeagueId ~= nil then
    oprot:writeFieldBegin('topLeagueId', TType.STRING, 24)
    oprot:writeString(self.topLeagueId)
    oprot:writeFieldEnd()
  end
  if self.topLeaderboardId ~= nil then
    oprot:writeFieldBegin('topLeaderboardId', TType.STRING, 25)
    oprot:writeString(self.topLeaderboardId)
    oprot:writeFieldEnd()
  end
  if self.topLeagueText ~= nil then
    oprot:writeFieldBegin('topLeagueText', TType.STRUCT, 40)
    self.topLeagueText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.middleLeagueText ~= nil then
    oprot:writeFieldBegin('middleLeagueText', TType.STRUCT, 41)
    self.middleLeagueText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.bottomLeagueText ~= nil then
    oprot:writeFieldBegin('bottomLeagueText', TType.STRUCT, 42)
    self.bottomLeagueText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.noLeagueText ~= nil then
    oprot:writeFieldBegin('noLeagueText', TType.STRUCT, 43)
    self.noLeagueText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.previewText ~= nil then
    oprot:writeFieldBegin('previewText', TType.STRUCT, 44)
    self.previewText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.recapText ~= nil then
    oprot:writeFieldBegin('recapText', TType.STRUCT, 45)
    self.recapText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.joinText ~= nil then
    oprot:writeFieldBegin('joinText', TType.STRUCT, 46)
    self.joinText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.rewardMessageId ~= nil then
    oprot:writeFieldBegin('rewardMessageId', TType.STRING, 50)
    oprot:writeString(self.rewardMessageId)
    oprot:writeFieldEnd()
  end
  if self.leagues ~= nil then
    oprot:writeFieldBegin('leagues', TType.MAP, 21)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.leagues))
    for kiter700,viter701 in pairs(self.leagues) do
      oprot:writeString(kiter700)
      viter701:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.leaderboardTemplateId ~= nil then
    oprot:writeFieldBegin('leaderboardTemplateId', TType.STRING, 60)
    oprot:writeString(self.leaderboardTemplateId)
    oprot:writeFieldEnd()
  end
  if self.tabIcon ~= nil then
    oprot:writeFieldBegin('tabIcon', TType.STRING, 61)
    oprot:writeString(self.tabIcon)
    oprot:writeFieldEnd()
  end
  if self.topRewardBannerBg ~= nil then
    oprot:writeFieldBegin('topRewardBannerBg', TType.STRING, 70)
    oprot:writeString(self.topRewardBannerBg)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaderboardPlacement = __TObject:new{
  currencyId,
  minRank,
  maxRank,
  value
}

function LeaderboardPlacement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.minRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.maxRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.value = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaderboardPlacement:write(oprot)
  oprot:writeStructBegin('LeaderboardPlacement')
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 1)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.minRank ~= nil then
    oprot:writeFieldBegin('minRank', TType.I32, 10)
    oprot:writeI32(self.minRank)
    oprot:writeFieldEnd()
  end
  if self.maxRank ~= nil then
    oprot:writeFieldBegin('maxRank', TType.I32, 11)
    oprot:writeI32(self.maxRank)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.I32, 12)
    oprot:writeI32(self.value)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EventMenuWidget = __TObject:new{
  eventMenuWidgetId,
  text,
  widgetType,
  messageAction,
  messageActionParameter,
  portraitPosition,
  landscapePosition,
  anchorPoint,
  tabletPortraitPosition,
  tabletLandscapePosition,
  tabletAnchorPoint,
  zOrder,
  parameters,
  widgetName,
  widgetParent,
  portraitSizes,
  landscapeSizes,
  tabletPortraitSizes,
  tabletLandscapeSizes
}

function EventMenuWidget:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.eventMenuWidgetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.text = LocalizedString:new{}
        self.text:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.widgetType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.messageAction = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.LIST then
        self.messageActionParameter = {}
        local _etype705, _size702 = iprot:readListBegin()
        for _i=1,_size702 do
          local _elem706 = iprot:readString()
          table.insert(self.messageActionParameter, _elem706)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.portraitPosition = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.landscapePosition = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.anchorPoint = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.tabletPortraitPosition = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.tabletLandscapePosition = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.tabletAnchorPoint = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.zOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.LIST then
        self.parameters = {}
        local _etype710, _size707 = iprot:readListBegin()
        for _i=1,_size707 do
          local _elem711 = iprot:readString()
          table.insert(self.parameters, _elem711)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.widgetName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.STRING then
        self.widgetParent = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.STRING then
        self.portraitSizes = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.STRING then
        self.landscapeSizes = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 82 then
      if ftype == TType.STRING then
        self.tabletPortraitSizes = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 83 then
      if ftype == TType.STRING then
        self.tabletLandscapeSizes = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EventMenuWidget:write(oprot)
  oprot:writeStructBegin('EventMenuWidget')
  if self.eventMenuWidgetId ~= nil then
    oprot:writeFieldBegin('eventMenuWidgetId', TType.STRING, 1)
    oprot:writeString(self.eventMenuWidgetId)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRUCT, 10)
    self.text:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.widgetType ~= nil then
    oprot:writeFieldBegin('widgetType', TType.I32, 15)
    oprot:writeI32(self.widgetType)
    oprot:writeFieldEnd()
  end
  if self.messageAction ~= nil then
    oprot:writeFieldBegin('messageAction', TType.I32, 20)
    oprot:writeI32(self.messageAction)
    oprot:writeFieldEnd()
  end
  if self.messageActionParameter ~= nil then
    oprot:writeFieldBegin('messageActionParameter', TType.LIST, 21)
    oprot:writeListBegin(TType.STRING, #self.messageActionParameter)
    for _,iter712 in ipairs(self.messageActionParameter) do
      oprot:writeString(iter712)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.portraitPosition ~= nil then
    oprot:writeFieldBegin('portraitPosition', TType.STRING, 30)
    oprot:writeString(self.portraitPosition)
    oprot:writeFieldEnd()
  end
  if self.landscapePosition ~= nil then
    oprot:writeFieldBegin('landscapePosition', TType.STRING, 31)
    oprot:writeString(self.landscapePosition)
    oprot:writeFieldEnd()
  end
  if self.anchorPoint ~= nil then
    oprot:writeFieldBegin('anchorPoint', TType.STRING, 32)
    oprot:writeString(self.anchorPoint)
    oprot:writeFieldEnd()
  end
  if self.tabletPortraitPosition ~= nil then
    oprot:writeFieldBegin('tabletPortraitPosition', TType.STRING, 40)
    oprot:writeString(self.tabletPortraitPosition)
    oprot:writeFieldEnd()
  end
  if self.tabletLandscapePosition ~= nil then
    oprot:writeFieldBegin('tabletLandscapePosition', TType.STRING, 41)
    oprot:writeString(self.tabletLandscapePosition)
    oprot:writeFieldEnd()
  end
  if self.tabletAnchorPoint ~= nil then
    oprot:writeFieldBegin('tabletAnchorPoint', TType.STRING, 42)
    oprot:writeString(self.tabletAnchorPoint)
    oprot:writeFieldEnd()
  end
  if self.zOrder ~= nil then
    oprot:writeFieldBegin('zOrder', TType.I32, 50)
    oprot:writeI32(self.zOrder)
    oprot:writeFieldEnd()
  end
  if self.parameters ~= nil then
    oprot:writeFieldBegin('parameters', TType.LIST, 60)
    oprot:writeListBegin(TType.STRING, #self.parameters)
    for _,iter713 in ipairs(self.parameters) do
      oprot:writeString(iter713)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.widgetName ~= nil then
    oprot:writeFieldBegin('widgetName', TType.STRING, 70)
    oprot:writeString(self.widgetName)
    oprot:writeFieldEnd()
  end
  if self.widgetParent ~= nil then
    oprot:writeFieldBegin('widgetParent', TType.STRING, 71)
    oprot:writeString(self.widgetParent)
    oprot:writeFieldEnd()
  end
  if self.portraitSizes ~= nil then
    oprot:writeFieldBegin('portraitSizes', TType.STRING, 80)
    oprot:writeString(self.portraitSizes)
    oprot:writeFieldEnd()
  end
  if self.landscapeSizes ~= nil then
    oprot:writeFieldBegin('landscapeSizes', TType.STRING, 81)
    oprot:writeString(self.landscapeSizes)
    oprot:writeFieldEnd()
  end
  if self.tabletPortraitSizes ~= nil then
    oprot:writeFieldBegin('tabletPortraitSizes', TType.STRING, 82)
    oprot:writeString(self.tabletPortraitSizes)
    oprot:writeFieldEnd()
  end
  if self.tabletLandscapeSizes ~= nil then
    oprot:writeFieldBegin('tabletLandscapeSizes', TType.STRING, 83)
    oprot:writeString(self.tabletLandscapeSizes)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LeaderboardTemplate = __TObject:new{
  leaderboardTemplateId,
  luaFile,
  backgroundColor,
  topBannerBg,
  rewardsTemplateFile,
  rewardsBg,
  rewardsItemBg,
  backButton,
  leaderboardYouBg,
  leaderboardYouTopBg,
  tabBg,
  tabSelectedImage,
  middleTabSelectedImage
}

function LeaderboardTemplate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.leaderboardTemplateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.luaFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.backgroundColor = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.topBannerBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.rewardsTemplateFile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.rewardsBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.rewardsItemBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.backButton = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.leaderboardYouBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.leaderboardYouTopBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.tabBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.tabSelectedImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.middleTabSelectedImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LeaderboardTemplate:write(oprot)
  oprot:writeStructBegin('LeaderboardTemplate')
  if self.leaderboardTemplateId ~= nil then
    oprot:writeFieldBegin('leaderboardTemplateId', TType.STRING, 1)
    oprot:writeString(self.leaderboardTemplateId)
    oprot:writeFieldEnd()
  end
  if self.luaFile ~= nil then
    oprot:writeFieldBegin('luaFile', TType.STRING, 2)
    oprot:writeString(self.luaFile)
    oprot:writeFieldEnd()
  end
  if self.backgroundColor ~= nil then
    oprot:writeFieldBegin('backgroundColor', TType.STRING, 3)
    oprot:writeString(self.backgroundColor)
    oprot:writeFieldEnd()
  end
  if self.topBannerBg ~= nil then
    oprot:writeFieldBegin('topBannerBg', TType.STRING, 4)
    oprot:writeString(self.topBannerBg)
    oprot:writeFieldEnd()
  end
  if self.rewardsTemplateFile ~= nil then
    oprot:writeFieldBegin('rewardsTemplateFile', TType.STRING, 5)
    oprot:writeString(self.rewardsTemplateFile)
    oprot:writeFieldEnd()
  end
  if self.rewardsBg ~= nil then
    oprot:writeFieldBegin('rewardsBg', TType.STRING, 6)
    oprot:writeString(self.rewardsBg)
    oprot:writeFieldEnd()
  end
  if self.rewardsItemBg ~= nil then
    oprot:writeFieldBegin('rewardsItemBg', TType.STRING, 7)
    oprot:writeString(self.rewardsItemBg)
    oprot:writeFieldEnd()
  end
  if self.backButton ~= nil then
    oprot:writeFieldBegin('backButton', TType.STRING, 10)
    oprot:writeString(self.backButton)
    oprot:writeFieldEnd()
  end
  if self.leaderboardYouBg ~= nil then
    oprot:writeFieldBegin('leaderboardYouBg', TType.STRING, 11)
    oprot:writeString(self.leaderboardYouBg)
    oprot:writeFieldEnd()
  end
  if self.leaderboardYouTopBg ~= nil then
    oprot:writeFieldBegin('leaderboardYouTopBg', TType.STRING, 12)
    oprot:writeString(self.leaderboardYouTopBg)
    oprot:writeFieldEnd()
  end
  if self.tabBg ~= nil then
    oprot:writeFieldBegin('tabBg', TType.STRING, 13)
    oprot:writeString(self.tabBg)
    oprot:writeFieldEnd()
  end
  if self.tabSelectedImage ~= nil then
    oprot:writeFieldBegin('tabSelectedImage', TType.STRING, 14)
    oprot:writeString(self.tabSelectedImage)
    oprot:writeFieldEnd()
  end
  if self.middleTabSelectedImage ~= nil then
    oprot:writeFieldBegin('middleTabSelectedImage', TType.STRING, 15)
    oprot:writeString(self.middleTabSelectedImage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RarityEvoLevelKeyDropRate = __TObject:new{
  eventIds,
  buildingRarity,
  buildingEvoLevel,
  formulaId,
  baseDropRate,
  currencyId,
  currencyAmount,
  socialDropRateIncrease,
  socialCurrencyAmount
}

function RarityEvoLevelKeyDropRate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype717, _size714 = iprot:readListBegin()
        for _i=1,_size714 do
          local _elem718 = iprot:readString()
          table.insert(self.eventIds, _elem718)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.buildingRarity = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.buildingEvoLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.formulaId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.DOUBLE then
        self.baseDropRate = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.currencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.DOUBLE then
        self.socialDropRateIncrease = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I32 then
        self.socialCurrencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RarityEvoLevelKeyDropRate:write(oprot)
  oprot:writeStructBegin('RarityEvoLevelKeyDropRate')
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter719 in ipairs(self.eventIds) do
      oprot:writeString(iter719)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buildingRarity ~= nil then
    oprot:writeFieldBegin('buildingRarity', TType.I32, 2)
    oprot:writeI32(self.buildingRarity)
    oprot:writeFieldEnd()
  end
  if self.buildingEvoLevel ~= nil then
    oprot:writeFieldBegin('buildingEvoLevel', TType.I32, 3)
    oprot:writeI32(self.buildingEvoLevel)
    oprot:writeFieldEnd()
  end
  if self.formulaId ~= nil then
    oprot:writeFieldBegin('formulaId', TType.STRING, 4)
    oprot:writeString(self.formulaId)
    oprot:writeFieldEnd()
  end
  if self.baseDropRate ~= nil then
    oprot:writeFieldBegin('baseDropRate', TType.DOUBLE, 5)
    oprot:writeDouble(self.baseDropRate)
    oprot:writeFieldEnd()
  end
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 6)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.currencyAmount ~= nil then
    oprot:writeFieldBegin('currencyAmount', TType.I32, 7)
    oprot:writeI32(self.currencyAmount)
    oprot:writeFieldEnd()
  end
  if self.socialDropRateIncrease ~= nil then
    oprot:writeFieldBegin('socialDropRateIncrease', TType.DOUBLE, 8)
    oprot:writeDouble(self.socialDropRateIncrease)
    oprot:writeFieldEnd()
  end
  if self.socialCurrencyAmount ~= nil then
    oprot:writeFieldBegin('socialCurrencyAmount', TType.I32, 9)
    oprot:writeI32(self.socialCurrencyAmount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

KeyDropRateByOrderTime = __TObject:new{
  formulaId,
  minOrderTimeInSecs,
  maxOrderTimeInSecs,
  dropRate
}

function KeyDropRateByOrderTime:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.formulaId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.minOrderTimeInSecs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.maxOrderTimeInSecs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.DOUBLE then
        self.dropRate = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function KeyDropRateByOrderTime:write(oprot)
  oprot:writeStructBegin('KeyDropRateByOrderTime')
  if self.formulaId ~= nil then
    oprot:writeFieldBegin('formulaId', TType.STRING, 1)
    oprot:writeString(self.formulaId)
    oprot:writeFieldEnd()
  end
  if self.minOrderTimeInSecs ~= nil then
    oprot:writeFieldBegin('minOrderTimeInSecs', TType.I32, 2)
    oprot:writeI32(self.minOrderTimeInSecs)
    oprot:writeFieldEnd()
  end
  if self.maxOrderTimeInSecs ~= nil then
    oprot:writeFieldBegin('maxOrderTimeInSecs', TType.I32, 3)
    oprot:writeI32(self.maxOrderTimeInSecs)
    oprot:writeFieldEnd()
  end
  if self.dropRate ~= nil then
    oprot:writeFieldBegin('dropRate', TType.DOUBLE, 4)
    oprot:writeDouble(self.dropRate)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EventBusinessKeyDropRate = __TObject:new{
  buildingId,
  eventIds,
  currencyId,
  currencyAmount,
  dropRateIncrease,
  socialCurrencyAmount,
  socialCurrencyId,
  currencyIds,
  currencyAmounts
}

function EventBusinessKeyDropRate:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype723, _size720 = iprot:readListBegin()
        for _i=1,_size720 do
          local _elem724 = iprot:readString()
          table.insert(self.eventIds, _elem724)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.currencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.DOUBLE then
        self.dropRateIncrease = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.socialCurrencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.socialCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.LIST then
        self.currencyIds = {}
        local _etype728, _size725 = iprot:readListBegin()
        for _i=1,_size725 do
          local _elem729 = iprot:readString()
          table.insert(self.currencyIds, _elem729)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.LIST then
        self.currencyAmounts = {}
        local _etype733, _size730 = iprot:readListBegin()
        for _i=1,_size730 do
          local _elem734 = iprot:readI32()
          table.insert(self.currencyAmounts, _elem734)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EventBusinessKeyDropRate:write(oprot)
  oprot:writeStructBegin('EventBusinessKeyDropRate')
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 1)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter735 in ipairs(self.eventIds) do
      oprot:writeString(iter735)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 3)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.currencyAmount ~= nil then
    oprot:writeFieldBegin('currencyAmount', TType.I32, 4)
    oprot:writeI32(self.currencyAmount)
    oprot:writeFieldEnd()
  end
  if self.dropRateIncrease ~= nil then
    oprot:writeFieldBegin('dropRateIncrease', TType.DOUBLE, 5)
    oprot:writeDouble(self.dropRateIncrease)
    oprot:writeFieldEnd()
  end
  if self.socialCurrencyAmount ~= nil then
    oprot:writeFieldBegin('socialCurrencyAmount', TType.I32, 6)
    oprot:writeI32(self.socialCurrencyAmount)
    oprot:writeFieldEnd()
  end
  if self.socialCurrencyId ~= nil then
    oprot:writeFieldBegin('socialCurrencyId', TType.STRING, 7)
    oprot:writeString(self.socialCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.currencyIds ~= nil then
    oprot:writeFieldBegin('currencyIds', TType.LIST, 8)
    oprot:writeListBegin(TType.STRING, #self.currencyIds)
    for _,iter736 in ipairs(self.currencyIds) do
      oprot:writeString(iter736)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.currencyAmounts ~= nil then
    oprot:writeFieldBegin('currencyAmounts', TType.LIST, 9)
    oprot:writeListBegin(TType.I32, #self.currencyAmounts)
    for _,iter737 in ipairs(self.currencyAmounts) do
      oprot:writeI32(iter737)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuildingMultiplier = __TObject:new{
  buildingId,
  eventPointMultiplier,
  eventIds,
  eventPhases
}

function BuildingMultiplier:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.DOUBLE then
        self.eventPointMultiplier = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype741, _size738 = iprot:readListBegin()
        for _i=1,_size738 do
          local _elem742 = iprot:readString()
          table.insert(self.eventIds, _elem742)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuildingMultiplier:write(oprot)
  oprot:writeStructBegin('BuildingMultiplier')
  if self.buildingId ~= nil then
    oprot:writeFieldBegin('buildingId', TType.STRING, 1)
    oprot:writeString(self.buildingId)
    oprot:writeFieldEnd()
  end
  if self.eventPointMultiplier ~= nil then
    oprot:writeFieldBegin('eventPointMultiplier', TType.DOUBLE, 2)
    oprot:writeDouble(self.eventPointMultiplier)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter743 in ipairs(self.eventIds) do
      oprot:writeString(iter743)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 4)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TutorialState = __TObject:new{
  tutorialId
}

function TutorialState:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.tutorialId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TutorialState:write(oprot)
  oprot:writeStructBegin('TutorialState')
  if self.tutorialId ~= nil then
    oprot:writeFieldBegin('tutorialId', TType.STRING, 1)
    oprot:writeString(self.tutorialId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AdminGiftMessage = __TObject:new{
  adminGiftMessageId,
  title,
  body,
  priority,
  openable,
  claimOnClaimAll,
  eventIds,
  eventPhases,
  showRank,
  hideRank,
  disabled,
  giftMessageRewardIds,
  openBody,
  templateId
}

function AdminGiftMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.adminGiftMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.title = LocalizedString:new{}
        self.title:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.body = LocalizedString:new{}
        self.body:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.BOOL then
        self.openable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.BOOL then
        self.claimOnClaimAll = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype747, _size744 = iprot:readListBegin()
        for _i=1,_size744 do
          local _elem748 = iprot:readString()
          table.insert(self.eventIds, _elem748)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.BOOL then
        self.disabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.LIST then
        self.giftMessageRewardIds = {}
        local _etype752, _size749 = iprot:readListBegin()
        for _i=1,_size749 do
          local _elem753 = iprot:readString()
          table.insert(self.giftMessageRewardIds, _elem753)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRUCT then
        self.openBody = LocalizedString:new{}
        self.openBody:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.STRING then
        self.templateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AdminGiftMessage:write(oprot)
  oprot:writeStructBegin('AdminGiftMessage')
  if self.adminGiftMessageId ~= nil then
    oprot:writeFieldBegin('adminGiftMessageId', TType.STRING, 1)
    oprot:writeString(self.adminGiftMessageId)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRUCT, 10)
    self.title:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.body ~= nil then
    oprot:writeFieldBegin('body', TType.STRUCT, 11)
    self.body:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 12)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  if self.openable ~= nil then
    oprot:writeFieldBegin('openable', TType.BOOL, 13)
    oprot:writeBool(self.openable)
    oprot:writeFieldEnd()
  end
  if self.claimOnClaimAll ~= nil then
    oprot:writeFieldBegin('claimOnClaimAll', TType.BOOL, 14)
    oprot:writeBool(self.claimOnClaimAll)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 15)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter754 in ipairs(self.eventIds) do
      oprot:writeString(iter754)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 16)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 17)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 18)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.disabled ~= nil then
    oprot:writeFieldBegin('disabled', TType.BOOL, 19)
    oprot:writeBool(self.disabled)
    oprot:writeFieldEnd()
  end
  if self.giftMessageRewardIds ~= nil then
    oprot:writeFieldBegin('giftMessageRewardIds', TType.LIST, 22)
    oprot:writeListBegin(TType.STRING, #self.giftMessageRewardIds)
    for _,iter755 in ipairs(self.giftMessageRewardIds) do
      oprot:writeString(iter755)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.openBody ~= nil then
    oprot:writeFieldBegin('openBody', TType.STRUCT, 30)
    self.openBody:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.templateId ~= nil then
    oprot:writeFieldBegin('templateId', TType.STRING, 31)
    oprot:writeString(self.templateId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PopupMessage = __TObject:new{
  popupMessageId,
  displayOrder,
  templateId,
  eventIds,
  eventPhases,
  showRank,
  hideRank,
  instant,
  repeatSeconds,
  maxShown,
  disabled,
  offerType,
  offerId,
  offerSingleStep,
  lastIAPMinutes,
  title,
  body,
  body2,
  title2,
  leftRibbon,
  rightRibbon,
  bottomLeft,
  bottomRight,
  leftUnderRibbon,
  rightUnderRibbon,
  requireOneOfCurrencyIds,
  requireOneOfCurrencyAmounts,
  markAsReadOnClosing,
  triggerButtonActionOnTappingCloseButton,
  triggerButtonActionOnTappingOutside
}

function PopupMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.popupMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.templateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype759, _size756 = iprot:readListBegin()
        for _i=1,_size756 do
          local _elem760 = iprot:readString()
          table.insert(self.eventIds, _elem760)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.BOOL then
        self.instant = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.repeatSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.maxShown = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.BOOL then
        self.disabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.offerType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRING then
        self.offerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.BOOL then
        self.offerSingleStep = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.I32 then
        self.lastIAPMinutes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRUCT then
        self.title = LocalizedString:new{}
        self.title:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRUCT then
        self.body = LocalizedString:new{}
        self.body:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRUCT then
        self.body2 = LocalizedString:new{}
        self.body2:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.STRUCT then
        self.title2 = LocalizedString:new{}
        self.title2:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.STRUCT then
        self.leftRibbon = LocalizedString:new{}
        self.leftRibbon:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.STRUCT then
        self.rightRibbon = LocalizedString:new{}
        self.rightRibbon:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 82 then
      if ftype == TType.STRUCT then
        self.bottomLeft = LocalizedString:new{}
        self.bottomLeft:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 83 then
      if ftype == TType.STRUCT then
        self.bottomRight = LocalizedString:new{}
        self.bottomRight:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 84 then
      if ftype == TType.STRUCT then
        self.leftUnderRibbon = LocalizedString:new{}
        self.leftUnderRibbon:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 85 then
      if ftype == TType.STRUCT then
        self.rightUnderRibbon = LocalizedString:new{}
        self.rightUnderRibbon:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 72 then
      if ftype == TType.LIST then
        self.requireOneOfCurrencyIds = {}
        local _etype764, _size761 = iprot:readListBegin()
        for _i=1,_size761 do
          local _elem765 = iprot:readString()
          table.insert(self.requireOneOfCurrencyIds, _elem765)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 73 then
      if ftype == TType.LIST then
        self.requireOneOfCurrencyAmounts = {}
        local _etype769, _size766 = iprot:readListBegin()
        for _i=1,_size766 do
          local _elem770 = iprot:readI32()
          table.insert(self.requireOneOfCurrencyAmounts, _elem770)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 74 then
      if ftype == TType.BOOL then
        self.markAsReadOnClosing = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 75 then
      if ftype == TType.BOOL then
        self.triggerButtonActionOnTappingCloseButton = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 76 then
      if ftype == TType.BOOL then
        self.triggerButtonActionOnTappingOutside = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PopupMessage:write(oprot)
  oprot:writeStructBegin('PopupMessage')
  if self.popupMessageId ~= nil then
    oprot:writeFieldBegin('popupMessageId', TType.STRING, 1)
    oprot:writeString(self.popupMessageId)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 10)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.templateId ~= nil then
    oprot:writeFieldBegin('templateId', TType.STRING, 12)
    oprot:writeString(self.templateId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 21)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter771 in ipairs(self.eventIds) do
      oprot:writeString(iter771)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 22)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 23)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 24)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.instant ~= nil then
    oprot:writeFieldBegin('instant', TType.BOOL, 26)
    oprot:writeBool(self.instant)
    oprot:writeFieldEnd()
  end
  if self.repeatSeconds ~= nil then
    oprot:writeFieldBegin('repeatSeconds', TType.I32, 30)
    oprot:writeI32(self.repeatSeconds)
    oprot:writeFieldEnd()
  end
  if self.maxShown ~= nil then
    oprot:writeFieldBegin('maxShown', TType.I32, 31)
    oprot:writeI32(self.maxShown)
    oprot:writeFieldEnd()
  end
  if self.disabled ~= nil then
    oprot:writeFieldBegin('disabled', TType.BOOL, 40)
    oprot:writeBool(self.disabled)
    oprot:writeFieldEnd()
  end
  if self.offerType ~= nil then
    oprot:writeFieldBegin('offerType', TType.I32, 50)
    oprot:writeI32(self.offerType)
    oprot:writeFieldEnd()
  end
  if self.offerId ~= nil then
    oprot:writeFieldBegin('offerId', TType.STRING, 51)
    oprot:writeString(self.offerId)
    oprot:writeFieldEnd()
  end
  if self.offerSingleStep ~= nil then
    oprot:writeFieldBegin('offerSingleStep', TType.BOOL, 52)
    oprot:writeBool(self.offerSingleStep)
    oprot:writeFieldEnd()
  end
  if self.lastIAPMinutes ~= nil then
    oprot:writeFieldBegin('lastIAPMinutes', TType.I32, 53)
    oprot:writeI32(self.lastIAPMinutes)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRUCT, 60)
    self.title:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.body ~= nil then
    oprot:writeFieldBegin('body', TType.STRUCT, 61)
    self.body:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.body2 ~= nil then
    oprot:writeFieldBegin('body2', TType.STRUCT, 70)
    self.body2:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.title2 ~= nil then
    oprot:writeFieldBegin('title2', TType.STRUCT, 71)
    self.title2:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.leftRibbon ~= nil then
    oprot:writeFieldBegin('leftRibbon', TType.STRUCT, 80)
    self.leftRibbon:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.rightRibbon ~= nil then
    oprot:writeFieldBegin('rightRibbon', TType.STRUCT, 81)
    self.rightRibbon:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.bottomLeft ~= nil then
    oprot:writeFieldBegin('bottomLeft', TType.STRUCT, 82)
    self.bottomLeft:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.bottomRight ~= nil then
    oprot:writeFieldBegin('bottomRight', TType.STRUCT, 83)
    self.bottomRight:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.leftUnderRibbon ~= nil then
    oprot:writeFieldBegin('leftUnderRibbon', TType.STRUCT, 84)
    self.leftUnderRibbon:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.rightUnderRibbon ~= nil then
    oprot:writeFieldBegin('rightUnderRibbon', TType.STRUCT, 85)
    self.rightUnderRibbon:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.requireOneOfCurrencyIds ~= nil then
    oprot:writeFieldBegin('requireOneOfCurrencyIds', TType.LIST, 72)
    oprot:writeListBegin(TType.STRING, #self.requireOneOfCurrencyIds)
    for _,iter772 in ipairs(self.requireOneOfCurrencyIds) do
      oprot:writeString(iter772)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.requireOneOfCurrencyAmounts ~= nil then
    oprot:writeFieldBegin('requireOneOfCurrencyAmounts', TType.LIST, 73)
    oprot:writeListBegin(TType.I32, #self.requireOneOfCurrencyAmounts)
    for _,iter773 in ipairs(self.requireOneOfCurrencyAmounts) do
      oprot:writeI32(iter773)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.markAsReadOnClosing ~= nil then
    oprot:writeFieldBegin('markAsReadOnClosing', TType.BOOL, 74)
    oprot:writeBool(self.markAsReadOnClosing)
    oprot:writeFieldEnd()
  end
  if self.triggerButtonActionOnTappingCloseButton ~= nil then
    oprot:writeFieldBegin('triggerButtonActionOnTappingCloseButton', TType.BOOL, 75)
    oprot:writeBool(self.triggerButtonActionOnTappingCloseButton)
    oprot:writeFieldEnd()
  end
  if self.triggerButtonActionOnTappingOutside ~= nil then
    oprot:writeFieldBegin('triggerButtonActionOnTappingOutside', TType.BOOL, 76)
    oprot:writeBool(self.triggerButtonActionOnTappingOutside)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PopupMessageSettings = __TObject:new{
  globalQueueMax,
  globalQueueCooldownSeconds
}

function PopupMessageSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.globalQueueMax = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.globalQueueCooldownSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PopupMessageSettings:write(oprot)
  oprot:writeStructBegin('PopupMessageSettings')
  if self.globalQueueMax ~= nil then
    oprot:writeFieldBegin('globalQueueMax', TType.I32, 10)
    oprot:writeI32(self.globalQueueMax)
    oprot:writeFieldEnd()
  end
  if self.globalQueueCooldownSeconds ~= nil then
    oprot:writeFieldBegin('globalQueueCooldownSeconds', TType.I32, 11)
    oprot:writeI32(self.globalQueueCooldownSeconds)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EventSettings = __TObject:new{
  defaultEventIslandId
}

function EventSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.defaultEventIslandId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EventSettings:write(oprot)
  oprot:writeStructBegin('EventSettings')
  if self.defaultEventIslandId ~= nil then
    oprot:writeFieldBegin('defaultEventIslandId', TType.STRING, 1)
    oprot:writeString(self.defaultEventIslandId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PlayerDisplaySuggest = __TObject:new{
  display
}

function PlayerDisplaySuggest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.display = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PlayerDisplaySuggest:write(oprot)
  oprot:writeStructBegin('PlayerDisplaySuggest')
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRING, 1)
    oprot:writeString(self.display)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildNameSuggest = __TObject:new{
  display
}

function GuildNameSuggest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.display = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildNameSuggest:write(oprot)
  oprot:writeStructBegin('GuildNameSuggest')
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRING, 1)
    oprot:writeString(self.display)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildLeaderboardReward = __TObject:new{
  leaderboardId,
  leaderboardRibbonId,
  recipient,
  rewardType,
  rewardId,
  rewardAmount
}

function GuildLeaderboardReward:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.leaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.leaderboardRibbonId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.recipient = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.rewardType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.rewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.rewardAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildLeaderboardReward:write(oprot)
  oprot:writeStructBegin('GuildLeaderboardReward')
  if self.leaderboardId ~= nil then
    oprot:writeFieldBegin('leaderboardId', TType.STRING, 1)
    oprot:writeString(self.leaderboardId)
    oprot:writeFieldEnd()
  end
  if self.leaderboardRibbonId ~= nil then
    oprot:writeFieldBegin('leaderboardRibbonId', TType.STRING, 2)
    oprot:writeString(self.leaderboardRibbonId)
    oprot:writeFieldEnd()
  end
  if self.recipient ~= nil then
    oprot:writeFieldBegin('recipient', TType.I32, 3)
    oprot:writeI32(self.recipient)
    oprot:writeFieldEnd()
  end
  if self.rewardType ~= nil then
    oprot:writeFieldBegin('rewardType', TType.I32, 13)
    oprot:writeI32(self.rewardType)
    oprot:writeFieldEnd()
  end
  if self.rewardId ~= nil then
    oprot:writeFieldBegin('rewardId', TType.STRING, 14)
    oprot:writeString(self.rewardId)
    oprot:writeFieldEnd()
  end
  if self.rewardAmount ~= nil then
    oprot:writeFieldBegin('rewardAmount', TType.I32, 15)
    oprot:writeI32(self.rewardAmount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildLeaderboardRibbon = __TObject:new{
  leaderboardId,
  leaderboardRibbonId,
  display,
  positionStart,
  positionEnd,
  trophyAssetId,
  bannerAssetId,
  rewardChestAsset,
  memberRewards,
  leaderRewards
}

function GuildLeaderboardRibbon:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.leaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.leaderboardRibbonId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.positionStart = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.positionEnd = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.trophyAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.bannerAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.rewardChestAsset = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.memberRewards = {}
        local _etype777, _size774 = iprot:readListBegin()
        for _i=1,_size774 do
          local _elem778 = GuildLeaderboardReward:new{}
          _elem778:read(iprot)
          table.insert(self.memberRewards, _elem778)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.leaderRewards = {}
        local _etype782, _size779 = iprot:readListBegin()
        for _i=1,_size779 do
          local _elem783 = GuildLeaderboardReward:new{}
          _elem783:read(iprot)
          table.insert(self.leaderRewards, _elem783)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildLeaderboardRibbon:write(oprot)
  oprot:writeStructBegin('GuildLeaderboardRibbon')
  if self.leaderboardId ~= nil then
    oprot:writeFieldBegin('leaderboardId', TType.STRING, 1)
    oprot:writeString(self.leaderboardId)
    oprot:writeFieldEnd()
  end
  if self.leaderboardRibbonId ~= nil then
    oprot:writeFieldBegin('leaderboardRibbonId', TType.STRING, 2)
    oprot:writeString(self.leaderboardRibbonId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 4)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.positionStart ~= nil then
    oprot:writeFieldBegin('positionStart', TType.I32, 5)
    oprot:writeI32(self.positionStart)
    oprot:writeFieldEnd()
  end
  if self.positionEnd ~= nil then
    oprot:writeFieldBegin('positionEnd', TType.I32, 6)
    oprot:writeI32(self.positionEnd)
    oprot:writeFieldEnd()
  end
  if self.trophyAssetId ~= nil then
    oprot:writeFieldBegin('trophyAssetId', TType.STRING, 7)
    oprot:writeString(self.trophyAssetId)
    oprot:writeFieldEnd()
  end
  if self.bannerAssetId ~= nil then
    oprot:writeFieldBegin('bannerAssetId', TType.STRING, 8)
    oprot:writeString(self.bannerAssetId)
    oprot:writeFieldEnd()
  end
  if self.rewardChestAsset ~= nil then
    oprot:writeFieldBegin('rewardChestAsset', TType.STRING, 9)
    oprot:writeString(self.rewardChestAsset)
    oprot:writeFieldEnd()
  end
  if self.memberRewards ~= nil then
    oprot:writeFieldBegin('memberRewards', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.memberRewards)
    for _,iter784 in ipairs(self.memberRewards) do
      iter784:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.leaderRewards ~= nil then
    oprot:writeFieldBegin('leaderRewards', TType.LIST, 11)
    oprot:writeListBegin(TType.STRUCT, #self.leaderRewards)
    for _,iter785 in ipairs(self.leaderRewards) do
      iter785:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildLeaderboard = __TObject:new{
  leaderboardId,
  eventIds,
  eventPhases,
  showRank,
  unlockRank,
  hideRank,
  pointCurrencyId,
  display,
  rewardDisplay,
  previewText,
  recapText,
  joinText,
  ribbons,
  rewardMessageId,
  leaderRewardMessageId,
  leaderboardTemplateId,
  tabIcon,
  topRewardBannerBg,
  myTeamMemberDisplay,
  myTeamMemberTabIcon
}

function GuildLeaderboard:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.leaderboardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype789, _size786 = iprot:readListBegin()
        for _i=1,_size786 do
          local _elem790 = iprot:readString()
          table.insert(self.eventIds, _elem790)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.pointCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 29 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRUCT then
        self.rewardDisplay = LocalizedString:new{}
        self.rewardDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.STRUCT then
        self.previewText = LocalizedString:new{}
        self.previewText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 45 then
      if ftype == TType.STRUCT then
        self.recapText = LocalizedString:new{}
        self.recapText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 46 then
      if ftype == TType.STRUCT then
        self.joinText = LocalizedString:new{}
        self.joinText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.MAP then
        self.ribbons = {}
        local _ktype792, _vtype793, _size791 = iprot:readMapBegin() 
        for _i=1,_size791 do
          local _key795 = iprot:readString()
          local _val796 = GuildLeaderboardRibbon:new{}
          _val796:read(iprot)
          self.ribbons[_key795] = _val796
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.rewardMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRING then
        self.leaderRewardMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.STRING then
        self.leaderboardTemplateId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.STRING then
        self.tabIcon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 72 then
      if ftype == TType.STRING then
        self.topRewardBannerBg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.STRUCT then
        self.myTeamMemberDisplay = LocalizedString:new{}
        self.myTeamMemberDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 81 then
      if ftype == TType.STRING then
        self.myTeamMemberTabIcon = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildLeaderboard:write(oprot)
  oprot:writeStructBegin('GuildLeaderboard')
  if self.leaderboardId ~= nil then
    oprot:writeFieldBegin('leaderboardId', TType.STRING, 1)
    oprot:writeString(self.leaderboardId)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter797 in ipairs(self.eventIds) do
      oprot:writeString(iter797)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 11)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 12)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 13)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 14)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  if self.pointCurrencyId ~= nil then
    oprot:writeFieldBegin('pointCurrencyId', TType.STRING, 15)
    oprot:writeString(self.pointCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 29)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.rewardDisplay ~= nil then
    oprot:writeFieldBegin('rewardDisplay', TType.STRUCT, 30)
    self.rewardDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.previewText ~= nil then
    oprot:writeFieldBegin('previewText', TType.STRUCT, 44)
    self.previewText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.recapText ~= nil then
    oprot:writeFieldBegin('recapText', TType.STRUCT, 45)
    self.recapText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.joinText ~= nil then
    oprot:writeFieldBegin('joinText', TType.STRUCT, 46)
    self.joinText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.ribbons ~= nil then
    oprot:writeFieldBegin('ribbons', TType.MAP, 50)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.ribbons))
    for kiter798,viter799 in pairs(self.ribbons) do
      oprot:writeString(kiter798)
      viter799:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.rewardMessageId ~= nil then
    oprot:writeFieldBegin('rewardMessageId', TType.STRING, 60)
    oprot:writeString(self.rewardMessageId)
    oprot:writeFieldEnd()
  end
  if self.leaderRewardMessageId ~= nil then
    oprot:writeFieldBegin('leaderRewardMessageId', TType.STRING, 61)
    oprot:writeString(self.leaderRewardMessageId)
    oprot:writeFieldEnd()
  end
  if self.leaderboardTemplateId ~= nil then
    oprot:writeFieldBegin('leaderboardTemplateId', TType.STRING, 70)
    oprot:writeString(self.leaderboardTemplateId)
    oprot:writeFieldEnd()
  end
  if self.tabIcon ~= nil then
    oprot:writeFieldBegin('tabIcon', TType.STRING, 71)
    oprot:writeString(self.tabIcon)
    oprot:writeFieldEnd()
  end
  if self.topRewardBannerBg ~= nil then
    oprot:writeFieldBegin('topRewardBannerBg', TType.STRING, 72)
    oprot:writeString(self.topRewardBannerBg)
    oprot:writeFieldEnd()
  end
  if self.myTeamMemberDisplay ~= nil then
    oprot:writeFieldBegin('myTeamMemberDisplay', TType.STRUCT, 80)
    self.myTeamMemberDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.myTeamMemberTabIcon ~= nil then
    oprot:writeFieldBegin('myTeamMemberTabIcon', TType.STRING, 81)
    oprot:writeString(self.myTeamMemberTabIcon)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildMemberTypeDisplay = __TObject:new{
  guildMemberType,
  display,
  displayOrder,
  displaySingular,
  iconImagePath,
  promoteFormat,
  demoteFormat,
  kickMemberFormat,
  makeLeaderFormat
}

function GuildMemberTypeDisplay:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.guildMemberType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.displaySingular = LocalizedString:new{}
        self.displaySingular:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.iconImagePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRUCT then
        self.promoteFormat = LocalizedString:new{}
        self.promoteFormat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRUCT then
        self.demoteFormat = LocalizedString:new{}
        self.demoteFormat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.STRUCT then
        self.kickMemberFormat = LocalizedString:new{}
        self.kickMemberFormat:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.STRUCT then
        self.makeLeaderFormat = LocalizedString:new{}
        self.makeLeaderFormat:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildMemberTypeDisplay:write(oprot)
  oprot:writeStructBegin('GuildMemberTypeDisplay')
  if self.guildMemberType ~= nil then
    oprot:writeFieldBegin('guildMemberType', TType.I32, 1)
    oprot:writeI32(self.guildMemberType)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 2)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 3)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.displaySingular ~= nil then
    oprot:writeFieldBegin('displaySingular', TType.STRUCT, 4)
    self.displaySingular:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.iconImagePath ~= nil then
    oprot:writeFieldBegin('iconImagePath', TType.STRING, 20)
    oprot:writeString(self.iconImagePath)
    oprot:writeFieldEnd()
  end
  if self.promoteFormat ~= nil then
    oprot:writeFieldBegin('promoteFormat', TType.STRUCT, 50)
    self.promoteFormat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.demoteFormat ~= nil then
    oprot:writeFieldBegin('demoteFormat', TType.STRUCT, 51)
    self.demoteFormat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.kickMemberFormat ~= nil then
    oprot:writeFieldBegin('kickMemberFormat', TType.STRUCT, 52)
    self.kickMemberFormat:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.makeLeaderFormat ~= nil then
    oprot:writeFieldBegin('makeLeaderFormat', TType.STRUCT, 53)
    self.makeLeaderFormat:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildJoinTypeDisplay = __TObject:new{
  guildJoinType,
  display,
  displayOrder,
  displayA,
  displayB
}

function GuildJoinTypeDisplay:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.guildJoinType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.displayA = LocalizedString:new{}
        self.displayA:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.displayB = LocalizedString:new{}
        self.displayB:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildJoinTypeDisplay:write(oprot)
  oprot:writeStructBegin('GuildJoinTypeDisplay')
  if self.guildJoinType ~= nil then
    oprot:writeFieldBegin('guildJoinType', TType.I32, 1)
    oprot:writeI32(self.guildJoinType)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 2)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 3)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.displayA ~= nil then
    oprot:writeFieldBegin('displayA', TType.STRUCT, 4)
    self.displayA:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.displayB ~= nil then
    oprot:writeFieldBegin('displayB', TType.STRUCT, 5)
    self.displayB:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildSettings = __TObject:new{
  maxMemberCount,
  maxChatHistory,
  unlockRank,
  createRank,
  guildLeaderType,
  guildCoLeaderType,
  maxInvitations,
  maxDisplayLength,
  maxDisplayTagLength,
  maxDescriptionLength,
  minDisplayLength,
  minDisplayTagLength,
  minDescriptionLength,
  onlineStatusActivityMinutes,
  maxChatDisplayHistory,
  chatAllowedCharacters,
  unknownLocationId,
  anyLocationId,
  noEmblemId,
  defaultFrameAssetId,
  noGuildDefaultFrameAssetId,
  suggestTargetGuildCount,
  suggestBucketsPerLocation,
  suggestOverfetchMultiplier,
  suggestDeadGuildInactivityMinutes,
  suggestAutoJoinRatio,
  promotionTokenCurrencyID,
  demotionTokenCurrencyID,
  leaderTokenCurrencyID,
  canSendGuildInvites,
  joinInvitationDefault,
  joinApplicationDefault,
  applicantAcceptedMessageTitle,
  applicantRejectedMessageTitle,
  cannotSendGuildInvitesText,
  cannotJoinFullGuildText,
  guildDisplayAndTagTakenText,
  guildNameTakenText,
  guildTagTakenText,
  guildDeletedText,
  guildErrorText,
  askForItemsSecondsTTL,
  guildHallBuildingId
}

function GuildSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.maxMemberCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.maxChatHistory = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.createRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.guildLeaderType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.I32 then
        self.guildCoLeaderType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.maxInvitations = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.maxDisplayLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.maxDisplayTagLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.maxDescriptionLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.minDisplayLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.minDisplayTagLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.I32 then
        self.minDescriptionLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.onlineStatusActivityMinutes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.maxChatDisplayHistory = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRING then
        self.chatAllowedCharacters = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.STRING then
        self.unknownLocationId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.anyLocationId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.STRING then
        self.noEmblemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.STRING then
        self.defaultFrameAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.STRING then
        self.noGuildDefaultFrameAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.I32 then
        self.suggestTargetGuildCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.I32 then
        self.suggestBucketsPerLocation = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.DOUBLE then
        self.suggestOverfetchMultiplier = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.I32 then
        self.suggestDeadGuildInactivityMinutes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.DOUBLE then
        self.suggestAutoJoinRatio = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.STRING then
        self.promotionTokenCurrencyID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRING then
        self.demotionTokenCurrencyID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 62 then
      if ftype == TType.STRING then
        self.leaderTokenCurrencyID = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 63 then
      if ftype == TType.LIST then
        self.canSendGuildInvites = {}
        local _etype803, _size800 = iprot:readListBegin()
        for _i=1,_size800 do
          local _elem804 = iprot:readI32()
          table.insert(self.canSendGuildInvites, _elem804)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 90 then
      if ftype == TType.STRUCT then
        self.joinInvitationDefault = LocalizedString:new{}
        self.joinInvitationDefault:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 91 then
      if ftype == TType.STRUCT then
        self.joinApplicationDefault = LocalizedString:new{}
        self.joinApplicationDefault:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 92 then
      if ftype == TType.STRUCT then
        self.applicantAcceptedMessageTitle = LocalizedString:new{}
        self.applicantAcceptedMessageTitle:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 93 then
      if ftype == TType.STRUCT then
        self.applicantRejectedMessageTitle = LocalizedString:new{}
        self.applicantRejectedMessageTitle:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 94 then
      if ftype == TType.STRUCT then
        self.cannotSendGuildInvitesText = LocalizedString:new{}
        self.cannotSendGuildInvitesText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 95 then
      if ftype == TType.STRUCT then
        self.cannotJoinFullGuildText = LocalizedString:new{}
        self.cannotJoinFullGuildText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 96 then
      if ftype == TType.STRUCT then
        self.guildDisplayAndTagTakenText = LocalizedString:new{}
        self.guildDisplayAndTagTakenText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 97 then
      if ftype == TType.STRUCT then
        self.guildNameTakenText = LocalizedString:new{}
        self.guildNameTakenText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 98 then
      if ftype == TType.STRUCT then
        self.guildTagTakenText = LocalizedString:new{}
        self.guildTagTakenText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 99 then
      if ftype == TType.STRUCT then
        self.guildDeletedText = LocalizedString:new{}
        self.guildDeletedText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.STRUCT then
        self.guildErrorText = LocalizedString:new{}
        self.guildErrorText:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 200 then
      if ftype == TType.I32 then
        self.askForItemsSecondsTTL = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 210 then
      if ftype == TType.STRING then
        self.guildHallBuildingId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildSettings:write(oprot)
  oprot:writeStructBegin('GuildSettings')
  if self.maxMemberCount ~= nil then
    oprot:writeFieldBegin('maxMemberCount', TType.I32, 10)
    oprot:writeI32(self.maxMemberCount)
    oprot:writeFieldEnd()
  end
  if self.maxChatHistory ~= nil then
    oprot:writeFieldBegin('maxChatHistory', TType.I32, 11)
    oprot:writeI32(self.maxChatHistory)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 12)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.createRank ~= nil then
    oprot:writeFieldBegin('createRank', TType.I32, 16)
    oprot:writeI32(self.createRank)
    oprot:writeFieldEnd()
  end
  if self.guildLeaderType ~= nil then
    oprot:writeFieldBegin('guildLeaderType', TType.I32, 17)
    oprot:writeI32(self.guildLeaderType)
    oprot:writeFieldEnd()
  end
  if self.guildCoLeaderType ~= nil then
    oprot:writeFieldBegin('guildCoLeaderType', TType.I32, 18)
    oprot:writeI32(self.guildCoLeaderType)
    oprot:writeFieldEnd()
  end
  if self.maxInvitations ~= nil then
    oprot:writeFieldBegin('maxInvitations', TType.I32, 19)
    oprot:writeI32(self.maxInvitations)
    oprot:writeFieldEnd()
  end
  if self.maxDisplayLength ~= nil then
    oprot:writeFieldBegin('maxDisplayLength', TType.I32, 20)
    oprot:writeI32(self.maxDisplayLength)
    oprot:writeFieldEnd()
  end
  if self.maxDisplayTagLength ~= nil then
    oprot:writeFieldBegin('maxDisplayTagLength', TType.I32, 21)
    oprot:writeI32(self.maxDisplayTagLength)
    oprot:writeFieldEnd()
  end
  if self.maxDescriptionLength ~= nil then
    oprot:writeFieldBegin('maxDescriptionLength', TType.I32, 22)
    oprot:writeI32(self.maxDescriptionLength)
    oprot:writeFieldEnd()
  end
  if self.minDisplayLength ~= nil then
    oprot:writeFieldBegin('minDisplayLength', TType.I32, 23)
    oprot:writeI32(self.minDisplayLength)
    oprot:writeFieldEnd()
  end
  if self.minDisplayTagLength ~= nil then
    oprot:writeFieldBegin('minDisplayTagLength', TType.I32, 24)
    oprot:writeI32(self.minDisplayTagLength)
    oprot:writeFieldEnd()
  end
  if self.minDescriptionLength ~= nil then
    oprot:writeFieldBegin('minDescriptionLength', TType.I32, 25)
    oprot:writeI32(self.minDescriptionLength)
    oprot:writeFieldEnd()
  end
  if self.onlineStatusActivityMinutes ~= nil then
    oprot:writeFieldBegin('onlineStatusActivityMinutes', TType.I32, 30)
    oprot:writeI32(self.onlineStatusActivityMinutes)
    oprot:writeFieldEnd()
  end
  if self.maxChatDisplayHistory ~= nil then
    oprot:writeFieldBegin('maxChatDisplayHistory', TType.I32, 31)
    oprot:writeI32(self.maxChatDisplayHistory)
    oprot:writeFieldEnd()
  end
  if self.chatAllowedCharacters ~= nil then
    oprot:writeFieldBegin('chatAllowedCharacters', TType.STRING, 32)
    oprot:writeString(self.chatAllowedCharacters)
    oprot:writeFieldEnd()
  end
  if self.unknownLocationId ~= nil then
    oprot:writeFieldBegin('unknownLocationId', TType.STRING, 40)
    oprot:writeString(self.unknownLocationId)
    oprot:writeFieldEnd()
  end
  if self.anyLocationId ~= nil then
    oprot:writeFieldBegin('anyLocationId', TType.STRING, 41)
    oprot:writeString(self.anyLocationId)
    oprot:writeFieldEnd()
  end
  if self.noEmblemId ~= nil then
    oprot:writeFieldBegin('noEmblemId', TType.STRING, 42)
    oprot:writeString(self.noEmblemId)
    oprot:writeFieldEnd()
  end
  if self.defaultFrameAssetId ~= nil then
    oprot:writeFieldBegin('defaultFrameAssetId', TType.STRING, 43)
    oprot:writeString(self.defaultFrameAssetId)
    oprot:writeFieldEnd()
  end
  if self.noGuildDefaultFrameAssetId ~= nil then
    oprot:writeFieldBegin('noGuildDefaultFrameAssetId', TType.STRING, 44)
    oprot:writeString(self.noGuildDefaultFrameAssetId)
    oprot:writeFieldEnd()
  end
  if self.suggestTargetGuildCount ~= nil then
    oprot:writeFieldBegin('suggestTargetGuildCount', TType.I32, 50)
    oprot:writeI32(self.suggestTargetGuildCount)
    oprot:writeFieldEnd()
  end
  if self.suggestBucketsPerLocation ~= nil then
    oprot:writeFieldBegin('suggestBucketsPerLocation', TType.I32, 51)
    oprot:writeI32(self.suggestBucketsPerLocation)
    oprot:writeFieldEnd()
  end
  if self.suggestOverfetchMultiplier ~= nil then
    oprot:writeFieldBegin('suggestOverfetchMultiplier', TType.DOUBLE, 52)
    oprot:writeDouble(self.suggestOverfetchMultiplier)
    oprot:writeFieldEnd()
  end
  if self.suggestDeadGuildInactivityMinutes ~= nil then
    oprot:writeFieldBegin('suggestDeadGuildInactivityMinutes', TType.I32, 53)
    oprot:writeI32(self.suggestDeadGuildInactivityMinutes)
    oprot:writeFieldEnd()
  end
  if self.suggestAutoJoinRatio ~= nil then
    oprot:writeFieldBegin('suggestAutoJoinRatio', TType.DOUBLE, 54)
    oprot:writeDouble(self.suggestAutoJoinRatio)
    oprot:writeFieldEnd()
  end
  if self.promotionTokenCurrencyID ~= nil then
    oprot:writeFieldBegin('promotionTokenCurrencyID', TType.STRING, 60)
    oprot:writeString(self.promotionTokenCurrencyID)
    oprot:writeFieldEnd()
  end
  if self.demotionTokenCurrencyID ~= nil then
    oprot:writeFieldBegin('demotionTokenCurrencyID', TType.STRING, 61)
    oprot:writeString(self.demotionTokenCurrencyID)
    oprot:writeFieldEnd()
  end
  if self.leaderTokenCurrencyID ~= nil then
    oprot:writeFieldBegin('leaderTokenCurrencyID', TType.STRING, 62)
    oprot:writeString(self.leaderTokenCurrencyID)
    oprot:writeFieldEnd()
  end
  if self.canSendGuildInvites ~= nil then
    oprot:writeFieldBegin('canSendGuildInvites', TType.LIST, 63)
    oprot:writeListBegin(TType.I32, #self.canSendGuildInvites)
    for _,iter805 in ipairs(self.canSendGuildInvites) do
      oprot:writeI32(iter805)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.joinInvitationDefault ~= nil then
    oprot:writeFieldBegin('joinInvitationDefault', TType.STRUCT, 90)
    self.joinInvitationDefault:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.joinApplicationDefault ~= nil then
    oprot:writeFieldBegin('joinApplicationDefault', TType.STRUCT, 91)
    self.joinApplicationDefault:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.applicantAcceptedMessageTitle ~= nil then
    oprot:writeFieldBegin('applicantAcceptedMessageTitle', TType.STRUCT, 92)
    self.applicantAcceptedMessageTitle:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.applicantRejectedMessageTitle ~= nil then
    oprot:writeFieldBegin('applicantRejectedMessageTitle', TType.STRUCT, 93)
    self.applicantRejectedMessageTitle:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.cannotSendGuildInvitesText ~= nil then
    oprot:writeFieldBegin('cannotSendGuildInvitesText', TType.STRUCT, 94)
    self.cannotSendGuildInvitesText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.cannotJoinFullGuildText ~= nil then
    oprot:writeFieldBegin('cannotJoinFullGuildText', TType.STRUCT, 95)
    self.cannotJoinFullGuildText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guildDisplayAndTagTakenText ~= nil then
    oprot:writeFieldBegin('guildDisplayAndTagTakenText', TType.STRUCT, 96)
    self.guildDisplayAndTagTakenText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guildNameTakenText ~= nil then
    oprot:writeFieldBegin('guildNameTakenText', TType.STRUCT, 97)
    self.guildNameTakenText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guildTagTakenText ~= nil then
    oprot:writeFieldBegin('guildTagTakenText', TType.STRUCT, 98)
    self.guildTagTakenText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guildDeletedText ~= nil then
    oprot:writeFieldBegin('guildDeletedText', TType.STRUCT, 99)
    self.guildDeletedText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guildErrorText ~= nil then
    oprot:writeFieldBegin('guildErrorText', TType.STRUCT, 100)
    self.guildErrorText:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.askForItemsSecondsTTL ~= nil then
    oprot:writeFieldBegin('askForItemsSecondsTTL', TType.I32, 200)
    oprot:writeI32(self.askForItemsSecondsTTL)
    oprot:writeFieldEnd()
  end
  if self.guildHallBuildingId ~= nil then
    oprot:writeFieldBegin('guildHallBuildingId', TType.STRING, 210)
    oprot:writeString(self.guildHallBuildingId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Location = __TObject:new{
  locationId,
  display,
  imageAssetId,
  imagePath,
  displayOrder,
  section,
  altLocationId,
  shortDisplay,
  hideInUi,
  analyticsLabel,
  languages
}

function Location:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.locationId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.imageAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.imagePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.section = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.altLocationId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRUCT then
        self.shortDisplay = LocalizedString:new{}
        self.shortDisplay:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.hideInUi = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.analyticsLabel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.languages = {}
        local _etype809, _size806 = iprot:readListBegin()
        for _i=1,_size806 do
          local _elem810 = iprot:readString()
          table.insert(self.languages, _elem810)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Location:write(oprot)
  oprot:writeStructBegin('Location')
  if self.locationId ~= nil then
    oprot:writeFieldBegin('locationId', TType.STRING, 1)
    oprot:writeString(self.locationId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 2)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.imageAssetId ~= nil then
    oprot:writeFieldBegin('imageAssetId', TType.STRING, 3)
    oprot:writeString(self.imageAssetId)
    oprot:writeFieldEnd()
  end
  if self.imagePath ~= nil then
    oprot:writeFieldBegin('imagePath', TType.STRING, 4)
    oprot:writeString(self.imagePath)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 5)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.section ~= nil then
    oprot:writeFieldBegin('section', TType.I32, 6)
    oprot:writeI32(self.section)
    oprot:writeFieldEnd()
  end
  if self.altLocationId ~= nil then
    oprot:writeFieldBegin('altLocationId', TType.STRING, 7)
    oprot:writeString(self.altLocationId)
    oprot:writeFieldEnd()
  end
  if self.shortDisplay ~= nil then
    oprot:writeFieldBegin('shortDisplay', TType.STRUCT, 8)
    self.shortDisplay:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.hideInUi ~= nil then
    oprot:writeFieldBegin('hideInUi', TType.BOOL, 10)
    oprot:writeBool(self.hideInUi)
    oprot:writeFieldEnd()
  end
  if self.analyticsLabel ~= nil then
    oprot:writeFieldBegin('analyticsLabel', TType.STRING, 11)
    oprot:writeString(self.analyticsLabel)
    oprot:writeFieldEnd()
  end
  if self.languages ~= nil then
    oprot:writeFieldBegin('languages', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.languages)
    for _,iter811 in ipairs(self.languages) do
      oprot:writeString(iter811)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildEmblem = __TObject:new{
  guildEmblemId,
  imagePath,
  displayOrder,
  hideInUi,
  minGuildRank
}

function GuildEmblem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guildEmblemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.imagePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.hideInUi = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.minGuildRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildEmblem:write(oprot)
  oprot:writeStructBegin('GuildEmblem')
  if self.guildEmblemId ~= nil then
    oprot:writeFieldBegin('guildEmblemId', TType.STRING, 1)
    oprot:writeString(self.guildEmblemId)
    oprot:writeFieldEnd()
  end
  if self.imagePath ~= nil then
    oprot:writeFieldBegin('imagePath', TType.STRING, 2)
    oprot:writeString(self.imagePath)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 3)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.hideInUi ~= nil then
    oprot:writeFieldBegin('hideInUi', TType.BOOL, 10)
    oprot:writeBool(self.hideInUi)
    oprot:writeFieldEnd()
  end
  if self.minGuildRank ~= nil then
    oprot:writeFieldBegin('minGuildRank', TType.I32, 20)
    oprot:writeI32(self.minGuildRank)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildBoundItem = __TObject:new{
  itemType,
  itemId
}

function GuildBoundItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.itemType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildBoundItem:write(oprot)
  oprot:writeStructBegin('GuildBoundItem')
  if self.itemType ~= nil then
    oprot:writeFieldBegin('itemType', TType.I32, 1)
    oprot:writeI32(self.itemType)
    oprot:writeFieldEnd()
  end
  if self.itemId ~= nil then
    oprot:writeFieldBegin('itemId', TType.STRING, 2)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChatSystemMessage = __TObject:new{
  chatSystemMessageId,
  message
}

function ChatSystemMessage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.chatSystemMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.message = LocalizedString:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChatSystemMessage:write(oprot)
  oprot:writeStructBegin('ChatSystemMessage')
  if self.chatSystemMessageId ~= nil then
    oprot:writeFieldBegin('chatSystemMessageId', TType.STRING, 1)
    oprot:writeString(self.chatSystemMessageId)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 2)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Gift = __TObject:new{
  giftId,
  display,
  iconAssetId,
  description,
  displayOrder,
  gachaRevealFXAssetId,
  lootTableIds,
  lootTableSpins,
  openable,
  claimable,
  eventIds,
  eventPhases
}

function Gift:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.giftId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.iconAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.description = LocalizedString:new{}
        self.description:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.gachaRevealFXAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.LIST then
        self.lootTableIds = {}
        local _etype815, _size812 = iprot:readListBegin()
        for _i=1,_size812 do
          local _elem816 = iprot:readString()
          table.insert(self.lootTableIds, _elem816)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.LIST then
        self.lootTableSpins = {}
        local _etype820, _size817 = iprot:readListBegin()
        for _i=1,_size817 do
          local _elem821 = iprot:readI32()
          table.insert(self.lootTableSpins, _elem821)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.BOOL then
        self.openable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.BOOL then
        self.claimable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype825, _size822 = iprot:readListBegin()
        for _i=1,_size822 do
          local _elem826 = iprot:readString()
          table.insert(self.eventIds, _elem826)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.I32 then
        self.eventPhases = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Gift:write(oprot)
  oprot:writeStructBegin('Gift')
  if self.giftId ~= nil then
    oprot:writeFieldBegin('giftId', TType.STRING, 1)
    oprot:writeString(self.giftId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 10)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.iconAssetId ~= nil then
    oprot:writeFieldBegin('iconAssetId', TType.STRING, 11)
    oprot:writeString(self.iconAssetId)
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRUCT, 12)
    self.description:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 13)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.gachaRevealFXAssetId ~= nil then
    oprot:writeFieldBegin('gachaRevealFXAssetId', TType.STRING, 30)
    oprot:writeString(self.gachaRevealFXAssetId)
    oprot:writeFieldEnd()
  end
  if self.lootTableIds ~= nil then
    oprot:writeFieldBegin('lootTableIds', TType.LIST, 40)
    oprot:writeListBegin(TType.STRING, #self.lootTableIds)
    for _,iter827 in ipairs(self.lootTableIds) do
      oprot:writeString(iter827)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.lootTableSpins ~= nil then
    oprot:writeFieldBegin('lootTableSpins', TType.LIST, 41)
    oprot:writeListBegin(TType.I32, #self.lootTableSpins)
    for _,iter828 in ipairs(self.lootTableSpins) do
      oprot:writeI32(iter828)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.openable ~= nil then
    oprot:writeFieldBegin('openable', TType.BOOL, 50)
    oprot:writeBool(self.openable)
    oprot:writeFieldEnd()
  end
  if self.claimable ~= nil then
    oprot:writeFieldBegin('claimable', TType.BOOL, 51)
    oprot:writeBool(self.claimable)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 70)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter829 in ipairs(self.eventIds) do
      oprot:writeString(iter829)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.eventPhases ~= nil then
    oprot:writeFieldBegin('eventPhases', TType.I32, 71)
    oprot:writeI32(self.eventPhases)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GearAvailableOnGachaOfferList = __TObject:new{
  currencyId,
  gachaOfferIds
}

function GearAvailableOnGachaOfferList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.gachaOfferIds = {}
        local _etype833, _size830 = iprot:readListBegin()
        for _i=1,_size830 do
          local _elem834 = iprot:readString()
          table.insert(self.gachaOfferIds, _elem834)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GearAvailableOnGachaOfferList:write(oprot)
  oprot:writeStructBegin('GearAvailableOnGachaOfferList')
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 1)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.gachaOfferIds ~= nil then
    oprot:writeFieldBegin('gachaOfferIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.gachaOfferIds)
    for _,iter835 in ipairs(self.gachaOfferIds) do
      oprot:writeString(iter835)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GearAvailableOnCardOfferList = __TObject:new{
  currencyId,
  cardOfferIds
}

function GearAvailableOnCardOfferList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.cardOfferIds = {}
        local _etype839, _size836 = iprot:readListBegin()
        for _i=1,_size836 do
          local _elem840 = iprot:readString()
          table.insert(self.cardOfferIds, _elem840)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GearAvailableOnCardOfferList:write(oprot)
  oprot:writeStructBegin('GearAvailableOnCardOfferList')
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 1)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.cardOfferIds ~= nil then
    oprot:writeFieldBegin('cardOfferIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.cardOfferIds)
    for _,iter841 in ipairs(self.cardOfferIds) do
      oprot:writeString(iter841)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GearAvailableOnLevelList = __TObject:new{
  currencyId,
  levelIds
}

function GearAvailableOnLevelList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.levelIds = {}
        local _etype845, _size842 = iprot:readListBegin()
        for _i=1,_size842 do
          local _elem846 = iprot:readString()
          table.insert(self.levelIds, _elem846)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GearAvailableOnLevelList:write(oprot)
  oprot:writeStructBegin('GearAvailableOnLevelList')
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 1)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.levelIds ~= nil then
    oprot:writeFieldBegin('levelIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.levelIds)
    for _,iter847 in ipairs(self.levelIds) do
      oprot:writeString(iter847)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GearAvailableOnBusinessHarvestList = __TObject:new{
  currencyId,
  businessIds
}

function GearAvailableOnBusinessHarvestList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.businessIds = {}
        local _etype851, _size848 = iprot:readListBegin()
        for _i=1,_size848 do
          local _elem852 = iprot:readString()
          table.insert(self.businessIds, _elem852)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GearAvailableOnBusinessHarvestList:write(oprot)
  oprot:writeStructBegin('GearAvailableOnBusinessHarvestList')
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 1)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.businessIds ~= nil then
    oprot:writeFieldBegin('businessIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.businessIds)
    for _,iter853 in ipairs(self.businessIds) do
      oprot:writeString(iter853)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MainShopEntry = __TObject:new{
  mainShopEntryId,
  gachaOfferId,
  storeId,
  orderIndex,
  showRank,
  unlockRank,
  hideRank
}

function MainShopEntry:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mainShopEntryId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.gachaOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.storeId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.orderIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.showRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.unlockRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.hideRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MainShopEntry:write(oprot)
  oprot:writeStructBegin('MainShopEntry')
  if self.mainShopEntryId ~= nil then
    oprot:writeFieldBegin('mainShopEntryId', TType.STRING, 1)
    oprot:writeString(self.mainShopEntryId)
    oprot:writeFieldEnd()
  end
  if self.gachaOfferId ~= nil then
    oprot:writeFieldBegin('gachaOfferId', TType.STRING, 10)
    oprot:writeString(self.gachaOfferId)
    oprot:writeFieldEnd()
  end
  if self.storeId ~= nil then
    oprot:writeFieldBegin('storeId', TType.STRING, 11)
    oprot:writeString(self.storeId)
    oprot:writeFieldEnd()
  end
  if self.orderIndex ~= nil then
    oprot:writeFieldBegin('orderIndex', TType.I32, 12)
    oprot:writeI32(self.orderIndex)
    oprot:writeFieldEnd()
  end
  if self.showRank ~= nil then
    oprot:writeFieldBegin('showRank', TType.I32, 13)
    oprot:writeI32(self.showRank)
    oprot:writeFieldEnd()
  end
  if self.unlockRank ~= nil then
    oprot:writeFieldBegin('unlockRank', TType.I32, 14)
    oprot:writeI32(self.unlockRank)
    oprot:writeFieldEnd()
  end
  if self.hideRank ~= nil then
    oprot:writeFieldBegin('hideRank', TType.I32, 15)
    oprot:writeI32(self.hideRank)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AskForItemEntry = __TObject:new{
  askForItemId,
  currencyId,
  currencyAmount,
  costCurrencyId,
  rewardCurrencyId,
  rewardCurrencyAmount,
  helpLimit
}

function AskForItemEntry:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.askForItemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.currencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.costCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.rewardCurrencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.rewardCurrencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.helpLimit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AskForItemEntry:write(oprot)
  oprot:writeStructBegin('AskForItemEntry')
  if self.askForItemId ~= nil then
    oprot:writeFieldBegin('askForItemId', TType.STRING, 1)
    oprot:writeString(self.askForItemId)
    oprot:writeFieldEnd()
  end
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 10)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.currencyAmount ~= nil then
    oprot:writeFieldBegin('currencyAmount', TType.I32, 11)
    oprot:writeI32(self.currencyAmount)
    oprot:writeFieldEnd()
  end
  if self.costCurrencyId ~= nil then
    oprot:writeFieldBegin('costCurrencyId', TType.STRING, 20)
    oprot:writeString(self.costCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.rewardCurrencyId ~= nil then
    oprot:writeFieldBegin('rewardCurrencyId', TType.STRING, 30)
    oprot:writeString(self.rewardCurrencyId)
    oprot:writeFieldEnd()
  end
  if self.rewardCurrencyAmount ~= nil then
    oprot:writeFieldBegin('rewardCurrencyAmount', TType.I32, 31)
    oprot:writeI32(self.rewardCurrencyAmount)
    oprot:writeFieldEnd()
  end
  if self.helpLimit ~= nil then
    oprot:writeFieldBegin('helpLimit', TType.I32, 40)
    oprot:writeI32(self.helpLimit)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TestBucket = __TObject:new{
  testBucketId,
  priority,
  conflictingTestBucketIds,
  overridesString,
  settings,
  startingGameState,
  storeProducts,
  vendorProducts,
  gachaOffer,
  rank,
  level,
  newLevel,
  boost,
  levelDot,
  villain,
  matchThreeData,
  achievement,
  achievementGroup,
  tutorialStates,
  popupMessages,
  popupMessageSettings,
  levelCampaigns,
  stores,
  storeInventories,
  cardOffers,
  iapProducts,
  quests
}

function TestBucket:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.testBucketId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.SET then
        self.conflictingTestBucketIds = {}
        local _etype857, _size854 = iprot:readSetBegin()
        for _i=1,_size854 do
          local _elem858 = iprot:readString()
          self.conflictingTestBucketIds[_elem858] = _elem858
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.overridesString = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.settings = Settings:new{}
        self.settings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.startingGameState = StartingGameState:new{}
        self.startingGameState:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 100 then
      if ftype == TType.MAP then
        self.storeProducts = {}
        local _ktype860, _vtype861, _size859 = iprot:readMapBegin() 
        for _i=1,_size859 do
          local _key863 = iprot:readString()
          local _val864 = StoreProduct:new{}
          _val864:read(iprot)
          self.storeProducts[_key863] = _val864
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 110 then
      if ftype == TType.MAP then
        self.vendorProducts = {}
        local _ktype866, _vtype867, _size865 = iprot:readMapBegin() 
        for _i=1,_size865 do
          local _key869 = iprot:readString()
          local _val870 = VendorProduct:new{}
          _val870:read(iprot)
          self.vendorProducts[_key869] = _val870
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 200 then
      if ftype == TType.MAP then
        self.gachaOffer = {}
        local _ktype872, _vtype873, _size871 = iprot:readMapBegin() 
        for _i=1,_size871 do
          local _key875 = iprot:readString()
          local _val876 = GachaOffer:new{}
          _val876:read(iprot)
          self.gachaOffer[_key875] = _val876
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 201 then
      if ftype == TType.MAP then
        self.rank = {}
        local _ktype878, _vtype879, _size877 = iprot:readMapBegin() 
        for _i=1,_size877 do
          local _key881 = iprot:readI32()
          local _val882 = Rank:new{}
          _val882:read(iprot)
          self.rank[_key881] = _val882
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 202 then
      if ftype == TType.MAP then
        self.level = {}
        local _ktype884, _vtype885, _size883 = iprot:readMapBegin() 
        for _i=1,_size883 do
          local _key887 = iprot:readString()
          local _val888 = Level:new{}
          _val888:read(iprot)
          self.level[_key887] = _val888
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 300 then
      if ftype == TType.MAP then
        self.newLevel = {}
        local _ktype890, _vtype891, _size889 = iprot:readMapBegin() 
        for _i=1,_size889 do
          local _key893 = iprot:readString()
          local _val894 = NewLevel:new{}
          _val894:read(iprot)
          self.newLevel[_key893] = _val894
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 203 then
      if ftype == TType.MAP then
        self.boost = {}
        local _ktype896, _vtype897, _size895 = iprot:readMapBegin() 
        for _i=1,_size895 do
          local _key899 = iprot:readString()
          local _val900 = Boost:new{}
          _val900:read(iprot)
          self.boost[_key899] = _val900
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 204 then
      if ftype == TType.MAP then
        self.levelDot = {}
        local _ktype902, _vtype903, _size901 = iprot:readMapBegin() 
        for _i=1,_size901 do
          local _key905 = iprot:readString()
          local _val906 = LevelDot:new{}
          _val906:read(iprot)
          self.levelDot[_key905] = _val906
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 205 then
      if ftype == TType.MAP then
        self.villain = {}
        local _ktype908, _vtype909, _size907 = iprot:readMapBegin() 
        for _i=1,_size907 do
          local _key911 = iprot:readString()
          local _val912 = Villain:new{}
          _val912:read(iprot)
          self.villain[_key911] = _val912
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 206 then
      if ftype == TType.MAP then
        self.matchThreeData = {}
        local _ktype914, _vtype915, _size913 = iprot:readMapBegin() 
        for _i=1,_size913 do
          local _key917 = iprot:readString()
          local _val918 = MatchThreeData:new{}
          _val918:read(iprot)
          self.matchThreeData[_key917] = _val918
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 207 then
      if ftype == TType.MAP then
        self.achievement = {}
        local _ktype920, _vtype921, _size919 = iprot:readMapBegin() 
        for _i=1,_size919 do
          local _key923 = iprot:readString()
          local _val924 = Achievement:new{}
          _val924:read(iprot)
          self.achievement[_key923] = _val924
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 208 then
      if ftype == TType.MAP then
        self.achievementGroup = {}
        local _ktype926, _vtype927, _size925 = iprot:readMapBegin() 
        for _i=1,_size925 do
          local _key929 = iprot:readString()
          local _val930 = AchievementGroup:new{}
          _val930:read(iprot)
          self.achievementGroup[_key929] = _val930
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 209 then
      if ftype == TType.LIST then
        self.tutorialStates = {}
        local _etype934, _size931 = iprot:readListBegin()
        for _i=1,_size931 do
          local _elem935 = TutorialState:new{}
          _elem935:read(iprot)
          table.insert(self.tutorialStates, _elem935)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 210 then
      if ftype == TType.MAP then
        self.popupMessages = {}
        local _ktype937, _vtype938, _size936 = iprot:readMapBegin() 
        for _i=1,_size936 do
          local _key940 = iprot:readString()
          local _val941 = PopupMessage:new{}
          _val941:read(iprot)
          self.popupMessages[_key940] = _val941
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 211 then
      if ftype == TType.STRUCT then
        self.popupMessageSettings = PopupMessageSettings:new{}
        self.popupMessageSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 212 then
      if ftype == TType.MAP then
        self.levelCampaigns = {}
        local _ktype943, _vtype944, _size942 = iprot:readMapBegin() 
        for _i=1,_size942 do
          local _key946 = iprot:readString()
          local _val947 = LevelCampaign:new{}
          _val947:read(iprot)
          self.levelCampaigns[_key946] = _val947
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 220 then
      if ftype == TType.MAP then
        self.stores = {}
        local _ktype949, _vtype950, _size948 = iprot:readMapBegin() 
        for _i=1,_size948 do
          local _key952 = iprot:readString()
          local _val953 = Store:new{}
          _val953:read(iprot)
          self.stores[_key952] = _val953
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 221 then
      if ftype == TType.MAP then
        self.storeInventories = {}
        local _ktype955, _vtype956, _size954 = iprot:readMapBegin() 
        for _i=1,_size954 do
          local _key958 = iprot:readString()
          local _val959 = {}
          local _etype963, _size960 = iprot:readListBegin()
          for _i=1,_size960 do
            local _elem964 = StoreInventoryItem:new{}
            _elem964:read(iprot)
            table.insert(_val959, _elem964)
          end
          iprot:readListEnd()
          self.storeInventories[_key958] = _val959
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 222 then
      if ftype == TType.MAP then
        self.cardOffers = {}
        local _ktype966, _vtype967, _size965 = iprot:readMapBegin() 
        for _i=1,_size965 do
          local _key969 = iprot:readString()
          local _val970 = CardOffer:new{}
          _val970:read(iprot)
          self.cardOffers[_key969] = _val970
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 223 then
      if ftype == TType.MAP then
        self.iapProducts = {}
        local _ktype972, _vtype973, _size971 = iprot:readMapBegin() 
        for _i=1,_size971 do
          local _key975 = iprot:readString()
          local _val976 = IAPProduct:new{}
          _val976:read(iprot)
          self.iapProducts[_key975] = _val976
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 224 then
      if ftype == TType.MAP then
        self.quests = {}
        local _ktype978, _vtype979, _size977 = iprot:readMapBegin() 
        for _i=1,_size977 do
          local _key981 = iprot:readString()
          local _val982 = Quest:new{}
          _val982:read(iprot)
          self.quests[_key981] = _val982
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TestBucket:write(oprot)
  oprot:writeStructBegin('TestBucket')
  if self.testBucketId ~= nil then
    oprot:writeFieldBegin('testBucketId', TType.STRING, 1)
    oprot:writeString(self.testBucketId)
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 2)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  if self.conflictingTestBucketIds ~= nil then
    oprot:writeFieldBegin('conflictingTestBucketIds', TType.SET, 3)
    oprot:writeSetBegin(TType.STRING, ttable_size(self.conflictingTestBucketIds))
    for iter983,_ in pairs(self.conflictingTestBucketIds) do
      oprot:writeString(iter983)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.overridesString ~= nil then
    oprot:writeFieldBegin('overridesString', TType.STRING, 4)
    oprot:writeString(self.overridesString)
    oprot:writeFieldEnd()
  end
  if self.settings ~= nil then
    oprot:writeFieldBegin('settings', TType.STRUCT, 11)
    self.settings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startingGameState ~= nil then
    oprot:writeFieldBegin('startingGameState', TType.STRUCT, 12)
    self.startingGameState:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.storeProducts ~= nil then
    oprot:writeFieldBegin('storeProducts', TType.MAP, 100)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.storeProducts))
    for kiter984,viter985 in pairs(self.storeProducts) do
      oprot:writeString(kiter984)
      viter985:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.vendorProducts ~= nil then
    oprot:writeFieldBegin('vendorProducts', TType.MAP, 110)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.vendorProducts))
    for kiter986,viter987 in pairs(self.vendorProducts) do
      oprot:writeString(kiter986)
      viter987:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gachaOffer ~= nil then
    oprot:writeFieldBegin('gachaOffer', TType.MAP, 200)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gachaOffer))
    for kiter988,viter989 in pairs(self.gachaOffer) do
      oprot:writeString(kiter988)
      viter989:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.rank ~= nil then
    oprot:writeFieldBegin('rank', TType.MAP, 201)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.rank))
    for kiter990,viter991 in pairs(self.rank) do
      oprot:writeI32(kiter990)
      viter991:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.level ~= nil then
    oprot:writeFieldBegin('level', TType.MAP, 202)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.level))
    for kiter992,viter993 in pairs(self.level) do
      oprot:writeString(kiter992)
      viter993:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.newLevel ~= nil then
    oprot:writeFieldBegin('newLevel', TType.MAP, 300)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.newLevel))
    for kiter994,viter995 in pairs(self.newLevel) do
      oprot:writeString(kiter994)
      viter995:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.boost ~= nil then
    oprot:writeFieldBegin('boost', TType.MAP, 203)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.boost))
    for kiter996,viter997 in pairs(self.boost) do
      oprot:writeString(kiter996)
      viter997:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.levelDot ~= nil then
    oprot:writeFieldBegin('levelDot', TType.MAP, 204)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.levelDot))
    for kiter998,viter999 in pairs(self.levelDot) do
      oprot:writeString(kiter998)
      viter999:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.villain ~= nil then
    oprot:writeFieldBegin('villain', TType.MAP, 205)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.villain))
    for kiter1000,viter1001 in pairs(self.villain) do
      oprot:writeString(kiter1000)
      viter1001:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.matchThreeData ~= nil then
    oprot:writeFieldBegin('matchThreeData', TType.MAP, 206)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.matchThreeData))
    for kiter1002,viter1003 in pairs(self.matchThreeData) do
      oprot:writeString(kiter1002)
      viter1003:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.achievement ~= nil then
    oprot:writeFieldBegin('achievement', TType.MAP, 207)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.achievement))
    for kiter1004,viter1005 in pairs(self.achievement) do
      oprot:writeString(kiter1004)
      viter1005:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.achievementGroup ~= nil then
    oprot:writeFieldBegin('achievementGroup', TType.MAP, 208)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.achievementGroup))
    for kiter1006,viter1007 in pairs(self.achievementGroup) do
      oprot:writeString(kiter1006)
      viter1007:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.tutorialStates ~= nil then
    oprot:writeFieldBegin('tutorialStates', TType.LIST, 209)
    oprot:writeListBegin(TType.STRUCT, #self.tutorialStates)
    for _,iter1008 in ipairs(self.tutorialStates) do
      iter1008:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.popupMessages ~= nil then
    oprot:writeFieldBegin('popupMessages', TType.MAP, 210)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.popupMessages))
    for kiter1009,viter1010 in pairs(self.popupMessages) do
      oprot:writeString(kiter1009)
      viter1010:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.popupMessageSettings ~= nil then
    oprot:writeFieldBegin('popupMessageSettings', TType.STRUCT, 211)
    self.popupMessageSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.levelCampaigns ~= nil then
    oprot:writeFieldBegin('levelCampaigns', TType.MAP, 212)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.levelCampaigns))
    for kiter1011,viter1012 in pairs(self.levelCampaigns) do
      oprot:writeString(kiter1011)
      viter1012:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.stores ~= nil then
    oprot:writeFieldBegin('stores', TType.MAP, 220)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.stores))
    for kiter1013,viter1014 in pairs(self.stores) do
      oprot:writeString(kiter1013)
      viter1014:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.storeInventories ~= nil then
    oprot:writeFieldBegin('storeInventories', TType.MAP, 221)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.storeInventories))
    for kiter1015,viter1016 in pairs(self.storeInventories) do
      oprot:writeString(kiter1015)
      oprot:writeListBegin(TType.STRUCT, #viter1016)
      for _,iter1017 in ipairs(viter1016) do
        iter1017:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.cardOffers ~= nil then
    oprot:writeFieldBegin('cardOffers', TType.MAP, 222)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.cardOffers))
    for kiter1018,viter1019 in pairs(self.cardOffers) do
      oprot:writeString(kiter1018)
      viter1019:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.iapProducts ~= nil then
    oprot:writeFieldBegin('iapProducts', TType.MAP, 223)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.iapProducts))
    for kiter1020,viter1021 in pairs(self.iapProducts) do
      oprot:writeString(kiter1020)
      viter1021:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.quests ~= nil then
    oprot:writeFieldBegin('quests', TType.MAP, 224)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.quests))
    for kiter1022,viter1023 in pairs(self.quests) do
      oprot:writeString(kiter1022)
      viter1023:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ABTest = __TObject:new{
  abTestId,
  testBucketId,
  weight,
  enabled
}

function ABTest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.abTestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.testBucketId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.weight = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.BOOL then
        self.enabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ABTest:write(oprot)
  oprot:writeStructBegin('ABTest')
  if self.abTestId ~= nil then
    oprot:writeFieldBegin('abTestId', TType.STRING, 1)
    oprot:writeString(self.abTestId)
    oprot:writeFieldEnd()
  end
  if self.testBucketId ~= nil then
    oprot:writeFieldBegin('testBucketId', TType.STRING, 2)
    oprot:writeString(self.testBucketId)
    oprot:writeFieldEnd()
  end
  if self.weight ~= nil then
    oprot:writeFieldBegin('weight', TType.I32, 10)
    oprot:writeI32(self.weight)
    oprot:writeFieldEnd()
  end
  if self.enabled ~= nil then
    oprot:writeFieldBegin('enabled', TType.BOOL, 11)
    oprot:writeBool(self.enabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ClientVersionTestBucket = __TObject:new{
  overrideId,
  testBucketIdOldVersion,
  testBucketIdNewVersion,
  enabled
}

function ClientVersionTestBucket:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.overrideId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.testBucketIdOldVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.testBucketIdNewVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.enabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ClientVersionTestBucket:write(oprot)
  oprot:writeStructBegin('ClientVersionTestBucket')
  if self.overrideId ~= nil then
    oprot:writeFieldBegin('overrideId', TType.STRING, 1)
    oprot:writeString(self.overrideId)
    oprot:writeFieldEnd()
  end
  if self.testBucketIdOldVersion ~= nil then
    oprot:writeFieldBegin('testBucketIdOldVersion', TType.STRING, 2)
    oprot:writeString(self.testBucketIdOldVersion)
    oprot:writeFieldEnd()
  end
  if self.testBucketIdNewVersion ~= nil then
    oprot:writeFieldBegin('testBucketIdNewVersion', TType.STRING, 3)
    oprot:writeString(self.testBucketIdNewVersion)
    oprot:writeFieldEnd()
  end
  if self.enabled ~= nil then
    oprot:writeFieldBegin('enabled', TType.BOOL, 10)
    oprot:writeBool(self.enabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

HeroType = __TObject:new{
  heroTypeId,
  display,
  iconAssetId,
  displayOrder,
  hideInUi
}

function HeroType:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.heroTypeId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.iconAssetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.BOOL then
        self.hideInUi = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function HeroType:write(oprot)
  oprot:writeStructBegin('HeroType')
  if self.heroTypeId ~= nil then
    oprot:writeFieldBegin('heroTypeId', TType.I32, 1)
    oprot:writeI32(self.heroTypeId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 11)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.iconAssetId ~= nil then
    oprot:writeFieldBegin('iconAssetId', TType.STRING, 12)
    oprot:writeString(self.iconAssetId)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 20)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.hideInUi ~= nil then
    oprot:writeFieldBegin('hideInUi', TType.BOOL, 21)
    oprot:writeBool(self.hideInUi)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

HeroLevelCurve = __TObject:new{
  heroLevelCurveId,
  xp,
  display
}

function HeroLevelCurve:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroLevelCurveId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.xp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.display = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function HeroLevelCurve:write(oprot)
  oprot:writeStructBegin('HeroLevelCurve')
  if self.heroLevelCurveId ~= nil then
    oprot:writeFieldBegin('heroLevelCurveId', TType.STRING, 1)
    oprot:writeString(self.heroLevelCurveId)
    oprot:writeFieldEnd()
  end
  if self.xp ~= nil then
    oprot:writeFieldBegin('xp', TType.I32, 10)
    oprot:writeI32(self.xp)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRING, 11)
    oprot:writeString(self.display)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

HeroMaxUpgrade = __TObject:new{
  amount,
  currencyId,
  currencyAmount
}

function HeroMaxUpgrade:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.amount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.currencyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.currencyAmount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function HeroMaxUpgrade:write(oprot)
  oprot:writeStructBegin('HeroMaxUpgrade')
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.I32, 1)
    oprot:writeI32(self.amount)
    oprot:writeFieldEnd()
  end
  if self.currencyId ~= nil then
    oprot:writeFieldBegin('currencyId', TType.STRING, 2)
    oprot:writeString(self.currencyId)
    oprot:writeFieldEnd()
  end
  if self.currencyAmount ~= nil then
    oprot:writeFieldBegin('currencyAmount', TType.I32, 3)
    oprot:writeI32(self.currencyAmount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Hero = __TObject:new{
  heroId,
  display,
  description,
  boardIconImage,
  boardIconImage2,
  affinityId,
  rarityId,
  specialtyId,
  leaderSkillId,
  activeSkillId,
  additionalSkillIds,
  raidBossBaseValueMultiplier
}

function Hero:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRUCT then
        self.description = LocalizedString:new{}
        self.description:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.boardIconImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRING then
        self.boardIconImage2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.affinityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.rarityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.specialtyId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.leaderSkillId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.STRING then
        self.activeSkillId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.LIST then
        self.additionalSkillIds = {}
        local _etype1027, _size1024 = iprot:readListBegin()
        for _i=1,_size1024 do
          local _elem1028 = iprot:readString()
          table.insert(self.additionalSkillIds, _elem1028)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.raidBossBaseValueMultiplier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Hero:write(oprot)
  oprot:writeStructBegin('Hero')
  if self.heroId ~= nil then
    oprot:writeFieldBegin('heroId', TType.STRING, 1)
    oprot:writeString(self.heroId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 15)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRUCT, 16)
    self.description:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.boardIconImage ~= nil then
    oprot:writeFieldBegin('boardIconImage', TType.STRING, 17)
    oprot:writeString(self.boardIconImage)
    oprot:writeFieldEnd()
  end
  if self.boardIconImage2 ~= nil then
    oprot:writeFieldBegin('boardIconImage2', TType.STRING, 18)
    oprot:writeString(self.boardIconImage2)
    oprot:writeFieldEnd()
  end
  if self.affinityId ~= nil then
    oprot:writeFieldBegin('affinityId', TType.I32, 20)
    oprot:writeI32(self.affinityId)
    oprot:writeFieldEnd()
  end
  if self.rarityId ~= nil then
    oprot:writeFieldBegin('rarityId', TType.I32, 21)
    oprot:writeI32(self.rarityId)
    oprot:writeFieldEnd()
  end
  if self.specialtyId ~= nil then
    oprot:writeFieldBegin('specialtyId', TType.I32, 22)
    oprot:writeI32(self.specialtyId)
    oprot:writeFieldEnd()
  end
  if self.leaderSkillId ~= nil then
    oprot:writeFieldBegin('leaderSkillId', TType.STRING, 25)
    oprot:writeString(self.leaderSkillId)
    oprot:writeFieldEnd()
  end
  if self.activeSkillId ~= nil then
    oprot:writeFieldBegin('activeSkillId', TType.STRING, 26)
    oprot:writeString(self.activeSkillId)
    oprot:writeFieldEnd()
  end
  if self.additionalSkillIds ~= nil then
    oprot:writeFieldBegin('additionalSkillIds', TType.LIST, 27)
    oprot:writeListBegin(TType.STRING, #self.additionalSkillIds)
    for _,iter1029 in ipairs(self.additionalSkillIds) do
      oprot:writeString(iter1029)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBossBaseValueMultiplier ~= nil then
    oprot:writeFieldBegin('raidBossBaseValueMultiplier', TType.I32, 30)
    oprot:writeI32(self.raidBossBaseValueMultiplier)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RaidBoss = __TObject:new{
  raidBossId,
  raidBossActivityId,
  display,
  eventIds,
  levelIds,
  affinityId,
  specialtyId,
  orderSize,
  maxBakers,
  maxHeroes,
  baseCollectValue,
  baseOrdersPerDonut,
  affinityBonus,
  specialtyBonus,
  orderSizeCurveId,
  battleTimerSeconds,
  levelMin,
  levelMax,
  levelForced,
  maxParticipants,
  maxImpressions,
  spawnWeight,
  guildOnly,
  battleEnergyCardOfferId
}

function RaidBoss:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.raidBossId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.raidBossActivityId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.eventIds = {}
        local _etype1033, _size1030 = iprot:readListBegin()
        for _i=1,_size1030 do
          local _elem1034 = iprot:readString()
          table.insert(self.eventIds, _elem1034)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.levelIds = {}
        local _etype1038, _size1035 = iprot:readListBegin()
        for _i=1,_size1035 do
          local _elem1039 = iprot:readString()
          table.insert(self.levelIds, _elem1039)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.affinityId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.specialtyId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.orderSize = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.maxBakers = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.maxHeroes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.baseCollectValue = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.LIST then
        self.baseOrdersPerDonut = {}
        local _etype1043, _size1040 = iprot:readListBegin()
        for _i=1,_size1040 do
          local _elem1044 = iprot:readI32()
          table.insert(self.baseOrdersPerDonut, _elem1044)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.affinityBonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.I32 then
        self.specialtyBonus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.orderSizeCurveId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.battleTimerSeconds = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.I32 then
        self.levelMin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 54 then
      if ftype == TType.I32 then
        self.levelMax = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 59 then
      if ftype == TType.I32 then
        self.levelForced = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 55 then
      if ftype == TType.I32 then
        self.maxParticipants = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 56 then
      if ftype == TType.I32 then
        self.maxImpressions = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 57 then
      if ftype == TType.DOUBLE then
        self.spawnWeight = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 58 then
      if ftype == TType.BOOL then
        self.guildOnly = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 74 then
      if ftype == TType.STRING then
        self.battleEnergyCardOfferId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RaidBoss:write(oprot)
  oprot:writeStructBegin('RaidBoss')
  if self.raidBossId ~= nil then
    oprot:writeFieldBegin('raidBossId', TType.STRING, 1)
    oprot:writeString(self.raidBossId)
    oprot:writeFieldEnd()
  end
  if self.raidBossActivityId ~= nil then
    oprot:writeFieldBegin('raidBossActivityId', TType.STRING, 2)
    oprot:writeString(self.raidBossActivityId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 5)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.eventIds ~= nil then
    oprot:writeFieldBegin('eventIds', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.eventIds)
    for _,iter1045 in ipairs(self.eventIds) do
      oprot:writeString(iter1045)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.levelIds ~= nil then
    oprot:writeFieldBegin('levelIds', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.levelIds)
    for _,iter1046 in ipairs(self.levelIds) do
      oprot:writeString(iter1046)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.affinityId ~= nil then
    oprot:writeFieldBegin('affinityId', TType.I32, 13)
    oprot:writeI32(self.affinityId)
    oprot:writeFieldEnd()
  end
  if self.specialtyId ~= nil then
    oprot:writeFieldBegin('specialtyId', TType.I32, 14)
    oprot:writeI32(self.specialtyId)
    oprot:writeFieldEnd()
  end
  if self.orderSize ~= nil then
    oprot:writeFieldBegin('orderSize', TType.I32, 15)
    oprot:writeI32(self.orderSize)
    oprot:writeFieldEnd()
  end
  if self.maxBakers ~= nil then
    oprot:writeFieldBegin('maxBakers', TType.I32, 16)
    oprot:writeI32(self.maxBakers)
    oprot:writeFieldEnd()
  end
  if self.maxHeroes ~= nil then
    oprot:writeFieldBegin('maxHeroes', TType.I32, 17)
    oprot:writeI32(self.maxHeroes)
    oprot:writeFieldEnd()
  end
  if self.baseCollectValue ~= nil then
    oprot:writeFieldBegin('baseCollectValue', TType.I32, 30)
    oprot:writeI32(self.baseCollectValue)
    oprot:writeFieldEnd()
  end
  if self.baseOrdersPerDonut ~= nil then
    oprot:writeFieldBegin('baseOrdersPerDonut', TType.LIST, 33)
    oprot:writeListBegin(TType.I32, #self.baseOrdersPerDonut)
    for _,iter1047 in ipairs(self.baseOrdersPerDonut) do
      oprot:writeI32(iter1047)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.affinityBonus ~= nil then
    oprot:writeFieldBegin('affinityBonus', TType.I32, 31)
    oprot:writeI32(self.affinityBonus)
    oprot:writeFieldEnd()
  end
  if self.specialtyBonus ~= nil then
    oprot:writeFieldBegin('specialtyBonus', TType.I32, 32)
    oprot:writeI32(self.specialtyBonus)
    oprot:writeFieldEnd()
  end
  if self.orderSizeCurveId ~= nil then
    oprot:writeFieldBegin('orderSizeCurveId', TType.STRING, 50)
    oprot:writeString(self.orderSizeCurveId)
    oprot:writeFieldEnd()
  end
  if self.battleTimerSeconds ~= nil then
    oprot:writeFieldBegin('battleTimerSeconds', TType.I32, 19)
    oprot:writeI32(self.battleTimerSeconds)
    oprot:writeFieldEnd()
  end
  if self.levelMin ~= nil then
    oprot:writeFieldBegin('levelMin', TType.I32, 53)
    oprot:writeI32(self.levelMin)
    oprot:writeFieldEnd()
  end
  if self.levelMax ~= nil then
    oprot:writeFieldBegin('levelMax', TType.I32, 54)
    oprot:writeI32(self.levelMax)
    oprot:writeFieldEnd()
  end
  if self.levelForced ~= nil then
    oprot:writeFieldBegin('levelForced', TType.I32, 59)
    oprot:writeI32(self.levelForced)
    oprot:writeFieldEnd()
  end
  if self.maxParticipants ~= nil then
    oprot:writeFieldBegin('maxParticipants', TType.I32, 55)
    oprot:writeI32(self.maxParticipants)
    oprot:writeFieldEnd()
  end
  if self.maxImpressions ~= nil then
    oprot:writeFieldBegin('maxImpressions', TType.I32, 56)
    oprot:writeI32(self.maxImpressions)
    oprot:writeFieldEnd()
  end
  if self.spawnWeight ~= nil then
    oprot:writeFieldBegin('spawnWeight', TType.DOUBLE, 57)
    oprot:writeDouble(self.spawnWeight)
    oprot:writeFieldEnd()
  end
  if self.guildOnly ~= nil then
    oprot:writeFieldBegin('guildOnly', TType.BOOL, 58)
    oprot:writeBool(self.guildOnly)
    oprot:writeFieldEnd()
  end
  if self.battleEnergyCardOfferId ~= nil then
    oprot:writeFieldBegin('battleEnergyCardOfferId', TType.STRING, 74)
    oprot:writeString(self.battleEnergyCardOfferId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RaidBossCurve = __TObject:new{
  raidBossCurveId,
  level,
  multiplier
}

function RaidBossCurve:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.raidBossCurveId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.level = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.multiplier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RaidBossCurve:write(oprot)
  oprot:writeStructBegin('RaidBossCurve')
  if self.raidBossCurveId ~= nil then
    oprot:writeFieldBegin('raidBossCurveId', TType.STRING, 1)
    oprot:writeString(self.raidBossCurveId)
    oprot:writeFieldEnd()
  end
  if self.level ~= nil then
    oprot:writeFieldBegin('level', TType.I32, 2)
    oprot:writeI32(self.level)
    oprot:writeFieldEnd()
  end
  if self.multiplier ~= nil then
    oprot:writeFieldBegin('multiplier', TType.I32, 3)
    oprot:writeI32(self.multiplier)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RaidBossObjective = __TObject:new{
  raidBossObjectiveId,
  type,
  display,
  displayOrder,
  details
}

function RaidBossObjective:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.raidBossObjectiveId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.displayOrder = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.details = LocalizedString:new{}
        self.details:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RaidBossObjective:write(oprot)
  oprot:writeStructBegin('RaidBossObjective')
  if self.raidBossObjectiveId ~= nil then
    oprot:writeFieldBegin('raidBossObjectiveId', TType.STRING, 1)
    oprot:writeString(self.raidBossObjectiveId)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 2)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 9)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.displayOrder ~= nil then
    oprot:writeFieldBegin('displayOrder', TType.I32, 11)
    oprot:writeI32(self.displayOrder)
    oprot:writeFieldEnd()
  end
  if self.details ~= nil then
    oprot:writeFieldBegin('details', TType.STRUCT, 13)
    self.details:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RaidBossRarity = __TObject:new{
  raidBossRarityId,
  display,
  chestId,
  avatarFrameId
}

function RaidBossRarity:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.raidBossRarityId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRUCT then
        self.display = LocalizedString:new{}
        self.display:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.chestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.avatarFrameId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RaidBossRarity:write(oprot)
  oprot:writeStructBegin('RaidBossRarity')
  if self.raidBossRarityId ~= nil then
    oprot:writeFieldBegin('raidBossRarityId', TType.STRING, 1)
    oprot:writeString(self.raidBossRarityId)
    oprot:writeFieldEnd()
  end
  if self.display ~= nil then
    oprot:writeFieldBegin('display', TType.STRUCT, 9)
    self.display:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.chestId ~= nil then
    oprot:writeFieldBegin('chestId', TType.STRING, 11)
    oprot:writeString(self.chestId)
    oprot:writeFieldEnd()
  end
  if self.avatarFrameId ~= nil then
    oprot:writeFieldBegin('avatarFrameId', TType.STRING, 12)
    oprot:writeString(self.avatarFrameId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RaidBossReward = __TObject:new{
  raidBossRewardId,
  rewardType,
  rewardItemId,
  rewardBase,
  rewardGrowth,
  rewardCurveId
}

function RaidBossReward:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.raidBossRewardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.rewardType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.rewardItemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.rewardBase = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.DOUBLE then
        self.rewardGrowth = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.rewardCurveId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RaidBossReward:write(oprot)
  oprot:writeStructBegin('RaidBossReward')
  if self.raidBossRewardId ~= nil then
    oprot:writeFieldBegin('raidBossRewardId', TType.STRING, 1)
    oprot:writeString(self.raidBossRewardId)
    oprot:writeFieldEnd()
  end
  if self.rewardType ~= nil then
    oprot:writeFieldBegin('rewardType', TType.I32, 2)
    oprot:writeI32(self.rewardType)
    oprot:writeFieldEnd()
  end
  if self.rewardItemId ~= nil then
    oprot:writeFieldBegin('rewardItemId', TType.STRING, 3)
    oprot:writeString(self.rewardItemId)
    oprot:writeFieldEnd()
  end
  if self.rewardBase ~= nil then
    oprot:writeFieldBegin('rewardBase', TType.I32, 4)
    oprot:writeI32(self.rewardBase)
    oprot:writeFieldEnd()
  end
  if self.rewardGrowth ~= nil then
    oprot:writeFieldBegin('rewardGrowth', TType.DOUBLE, 5)
    oprot:writeDouble(self.rewardGrowth)
    oprot:writeFieldEnd()
  end
  if self.rewardCurveId ~= nil then
    oprot:writeFieldBegin('rewardCurveId', TType.STRING, 6)
    oprot:writeString(self.rewardCurveId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RaidBossKarmaBracket = __TObject:new{
  raidBossActivityId,
  minKarma,
  maxKarma,
  minNotAttacked,
  maxNotAttacked,
  stdDev,
  stdDevCutOff,
  karmaIncrement,
  karmaDecrement,
  mvpKarmaIncrement,
  fairShareMultiplier
}

function RaidBossKarmaBracket:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.raidBossActivityId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.minKarma = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.maxKarma = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.minNotAttacked = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.maxNotAttacked = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.DOUBLE then
        self.stdDev = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.stdDevCutOff = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.karmaIncrement = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.I32 then
        self.karmaDecrement = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.I32 then
        self.mvpKarmaIncrement = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.DOUBLE then
        self.fairShareMultiplier = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RaidBossKarmaBracket:write(oprot)
  oprot:writeStructBegin('RaidBossKarmaBracket')
  if self.raidBossActivityId ~= nil then
    oprot:writeFieldBegin('raidBossActivityId', TType.STRING, 1)
    oprot:writeString(self.raidBossActivityId)
    oprot:writeFieldEnd()
  end
  if self.minKarma ~= nil then
    oprot:writeFieldBegin('minKarma', TType.I32, 10)
    oprot:writeI32(self.minKarma)
    oprot:writeFieldEnd()
  end
  if self.maxKarma ~= nil then
    oprot:writeFieldBegin('maxKarma', TType.I32, 11)
    oprot:writeI32(self.maxKarma)
    oprot:writeFieldEnd()
  end
  if self.minNotAttacked ~= nil then
    oprot:writeFieldBegin('minNotAttacked', TType.I32, 20)
    oprot:writeI32(self.minNotAttacked)
    oprot:writeFieldEnd()
  end
  if self.maxNotAttacked ~= nil then
    oprot:writeFieldBegin('maxNotAttacked', TType.I32, 21)
    oprot:writeI32(self.maxNotAttacked)
    oprot:writeFieldEnd()
  end
  if self.stdDev ~= nil then
    oprot:writeFieldBegin('stdDev', TType.DOUBLE, 22)
    oprot:writeDouble(self.stdDev)
    oprot:writeFieldEnd()
  end
  if self.stdDevCutOff ~= nil then
    oprot:writeFieldBegin('stdDevCutOff', TType.I32, 23)
    oprot:writeI32(self.stdDevCutOff)
    oprot:writeFieldEnd()
  end
  if self.karmaIncrement ~= nil then
    oprot:writeFieldBegin('karmaIncrement', TType.I32, 24)
    oprot:writeI32(self.karmaIncrement)
    oprot:writeFieldEnd()
  end
  if self.karmaDecrement ~= nil then
    oprot:writeFieldBegin('karmaDecrement', TType.I32, 25)
    oprot:writeI32(self.karmaDecrement)
    oprot:writeFieldEnd()
  end
  if self.mvpKarmaIncrement ~= nil then
    oprot:writeFieldBegin('mvpKarmaIncrement', TType.I32, 26)
    oprot:writeI32(self.mvpKarmaIncrement)
    oprot:writeFieldEnd()
  end
  if self.fairShareMultiplier ~= nil then
    oprot:writeFieldBegin('fairShareMultiplier', TType.DOUBLE, 27)
    oprot:writeDouble(self.fairShareMultiplier)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RaidBossDifficultyBracket = __TObject:new{
  raidBossActivityId,
  raidBossDifficultyBracketId,
  minDifficulty,
  maxDifficulty
}

function RaidBossDifficultyBracket:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.raidBossActivityId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.raidBossDifficultyBracketId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.minDifficulty = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.maxDifficulty = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RaidBossDifficultyBracket:write(oprot)
  oprot:writeStructBegin('RaidBossDifficultyBracket')
  if self.raidBossActivityId ~= nil then
    oprot:writeFieldBegin('raidBossActivityId', TType.STRING, 1)
    oprot:writeString(self.raidBossActivityId)
    oprot:writeFieldEnd()
  end
  if self.raidBossDifficultyBracketId ~= nil then
    oprot:writeFieldBegin('raidBossDifficultyBracketId', TType.STRING, 2)
    oprot:writeString(self.raidBossDifficultyBracketId)
    oprot:writeFieldEnd()
  end
  if self.minDifficulty ~= nil then
    oprot:writeFieldBegin('minDifficulty', TType.I32, 10)
    oprot:writeI32(self.minDifficulty)
    oprot:writeFieldEnd()
  end
  if self.maxDifficulty ~= nil then
    oprot:writeFieldBegin('maxDifficulty', TType.I32, 11)
    oprot:writeI32(self.maxDifficulty)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Data = __TObject:new{
  rank,
  currency,
  eventLock,
  settings,
  startingGameState,
  startingKingdomEntities,
  bundlesConfig,
  levelBlobs,
  resolutionBundles,
  bundleManifest,
  resolutionManifests,
  localizationManifests,
  building,
  recipe,
  deco,
  business,
  businessOrder,
  inventoryTab,
  blockers,
  weightedLootList,
  rarity,
  newRarity,
  level,
  boost,
  levelDot,
  villain,
  matchThreeData,
  newLevel,
  newLevelDot,
  material,
  island,
  islandSettings,
  islandObject,
  color,
  expansion,
  expansionType,
  gachaGroup,
  gachaOffer,
  gachaPack,
  lootTable,
  lootCurrencyGroup,
  lootBuildingGroup,
  avatar,
  adminMessages,
  adminGiftMessages,
  analyticsEvents,
  appBoyEvents,
  analyticsDimensions,
  apsalarEvents,
  businessOrderList,
  businessEvolution,
  npc,
  vendorProducts,
  storeProducts,
  buyItemOrder,
  marketType,
  forcedUpgrade,
  errorMessage,
  achievement,
  achievementGroup,
  testBuckets,
  strangerSettings,
  strangerMatchSettings,
  fakeStrangerDisplays,
  giftMessageRewards,
  partialKingdomLikeGifts,
  kingdomLikeGifts,
  pushMessages,
  socialUnlockrewards,
  adProviders,
  popupTemplate,
  defaultTemplate,
  rushCostsByRemainingTime,
  messageTemplateModifiers,
  gachaBanner,
  presetKingdoms,
  abTests,
  clientVersionTestBuckets,
  buildMenuSpecialCard,
  businessMenuSettings,
  rewardMessages,
  events,
  leaderboards,
  leaderboardSettings,
  leaderboardLeagues,
  leaderboardRibbons,
  leaderboardRewards,
  leaderboardPlacements,
  rarityEvoLevelKeyDropRates,
  keyDropRateByOrderTime,
  eventBusinessKeyDropRates,
  leaderboardTemplates,
  eventIslands,
  eventHowToPlays,
  eventMainMenus,
  castleActivities,
  playerDisplaySuggestStart,
  playerDisplaySuggestMiddle,
  playerDisplaySuggestEnd,
  tutorialStates,
  popupMessages,
  popupMessageSettings,
  eventSettings,
  screenNameMapping,
  cellInfo,
  keyCostPerLevel,
  playerMatchRankSettings,
  buildingMultipliers,
  guildLeaderboardSettings,
  guildLeaderboards,
  guildLeaderboardRibbons,
  guildLeaderboardRewards,
  locations,
  guildSettings,
  guildMemberTypeDisplays,
  guildJoinTypeDisplays,
  guildEmblems,
  guildBoundItems,
  guildRank,
  chatSystemMessages,
  gifts,
  pollSettings,
  guildNameSuggestStart,
  guildNameSuggestMiddle,
  guildNameSuggestEnd,
  quests,
  questGoals,
  questTemplates,
  questGoalTemplates,
  questNpc,
  businessQuestNpc,
  happinessSettings,
  stores,
  storeInventories,
  cardOffers,
  iapProducts,
  campaignSettings,
  levelCampaigns,
  businessLevelIdsLookup,
  castleEventLevelIdsLookup,
  campaignLevelIdsLookup,
  levelCampaignStyles,
  buildingTypeLocalizations,
  ftueSettings,
  matchThreeCellDefinitions,
  matchThreeBlasterDefinitions,
  goalDisplayTemplates,
  questTitles,
  questSettings,
  questRankSettings,
  newBusinessOrders,
  eventMenuWidgets,
  gearAvailableOnGachas,
  gearAvailableOnCardOffers,
  gearAvailableOnLevels,
  gearAvailableOnBusinessHarvest,
  mainShopEntries,
  askForItems,
  storeTabs,
  guildQuestRewards,
  raidBosses,
  raidBossActivities,
  raidBossObjectives,
  raidBossKarmaBrackets,
  raidBossDifficultyBrackets,
  raidBossCurves,
  raidBossRewards,
  raidBossRarities,
  heroes
}

function Data:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.MAP then
        self.rank = {}
        local _ktype1049, _vtype1050, _size1048 = iprot:readMapBegin() 
        for _i=1,_size1048 do
          local _key1052 = iprot:readI32()
          local _val1053 = Rank:new{}
          _val1053:read(iprot)
          self.rank[_key1052] = _val1053
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.currency = {}
        local _ktype1055, _vtype1056, _size1054 = iprot:readMapBegin() 
        for _i=1,_size1054 do
          local _key1058 = iprot:readString()
          local _val1059 = Currency:new{}
          _val1059:read(iprot)
          self.currency[_key1058] = _val1059
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.MAP then
        self.eventLock = {}
        local _ktype1061, _vtype1062, _size1060 = iprot:readMapBegin() 
        for _i=1,_size1060 do
          local _key1064 = iprot:readString()
          local _val1065 = EventLock:new{}
          _val1065:read(iprot)
          self.eventLock[_key1064] = _val1065
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.settings = Settings:new{}
        self.settings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRUCT then
        self.startingGameState = StartingGameState:new{}
        self.startingGameState:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 93 then
      if ftype == TType.MAP then
        self.startingKingdomEntities = {}
        local _ktype1067, _vtype1068, _size1066 = iprot:readMapBegin() 
        for _i=1,_size1066 do
          local _key1070 = iprot:readI32()
          local _val1071 = StartingKingdomEntity:new{}
          _val1071:read(iprot)
          self.startingKingdomEntities[_key1070] = _val1071
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.MAP then
        self.bundlesConfig = {}
        local _ktype1073, _vtype1074, _size1072 = iprot:readMapBegin() 
        for _i=1,_size1072 do
          local _key1076 = iprot:readString()
          local _val1077 = {}
          local _etype1081, _size1078 = iprot:readListBegin()
          for _i=1,_size1078 do
            local _elem1082 = ConfigBundle:new{}
            _elem1082:read(iprot)
            table.insert(_val1077, _elem1082)
          end
          iprot:readListEnd()
          self.bundlesConfig[_key1076] = _val1077
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.MAP then
        self.levelBlobs = {}
        local _ktype1084, _vtype1085, _size1083 = iprot:readMapBegin() 
        for _i=1,_size1083 do
          local _key1087 = iprot:readString()
          local _val1088 = LevelBlob:new{}
          _val1088:read(iprot)
          self.levelBlobs[_key1087] = _val1088
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 300 then
      if ftype == TType.MAP then
        self.resolutionBundles = {}
        local _ktype1090, _vtype1091, _size1089 = iprot:readMapBegin() 
        for _i=1,_size1089 do
          local _key1093 = iprot:readString()
          local _val1094 = {}
          local _etype1098, _size1095 = iprot:readListBegin()
          for _i=1,_size1095 do
            local _elem1099 = ConfigBundle:new{}
            _elem1099:read(iprot)
            table.insert(_val1094, _elem1099)
          end
          iprot:readListEnd()
          self.resolutionBundles[_key1093] = _val1094
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 310 then
      if ftype == TType.STRUCT then
        self.bundleManifest = BundleManifest:new{}
        self.bundleManifest:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 320 then
      if ftype == TType.STRUCT then
        self.resolutionManifests = BundleManifest:new{}
        self.resolutionManifests:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 330 then
      if ftype == TType.STRUCT then
        self.localizationManifests = BundleManifest:new{}
        self.localizationManifests:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.MAP then
        self.building = {}
        local _ktype1101, _vtype1102, _size1100 = iprot:readMapBegin() 
        for _i=1,_size1100 do
          local _key1104 = iprot:readString()
          local _val1105 = Building:new{}
          _val1105:read(iprot)
          self.building[_key1104] = _val1105
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.MAP then
        self.recipe = {}
        local _ktype1107, _vtype1108, _size1106 = iprot:readMapBegin() 
        for _i=1,_size1106 do
          local _key1110 = iprot:readString()
          local _val1111 = Recipe:new{}
          _val1111:read(iprot)
          self.recipe[_key1110] = _val1111
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.MAP then
        self.deco = {}
        local _ktype1113, _vtype1114, _size1112 = iprot:readMapBegin() 
        for _i=1,_size1112 do
          local _key1116 = iprot:readString()
          local _val1117 = Deco:new{}
          _val1117:read(iprot)
          self.deco[_key1116] = _val1117
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.MAP then
        self.business = {}
        local _ktype1119, _vtype1120, _size1118 = iprot:readMapBegin() 
        for _i=1,_size1118 do
          local _key1122 = iprot:readString()
          local _val1123 = Business:new{}
          _val1123:read(iprot)
          self.business[_key1122] = _val1123
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.MAP then
        self.businessOrder = {}
        local _ktype1125, _vtype1126, _size1124 = iprot:readMapBegin() 
        for _i=1,_size1124 do
          local _key1128 = iprot:readString()
          local _val1129 = BusinessOrder:new{}
          _val1129:read(iprot)
          self.businessOrder[_key1128] = _val1129
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.MAP then
        self.inventoryTab = {}
        local _ktype1131, _vtype1132, _size1130 = iprot:readMapBegin() 
        for _i=1,_size1130 do
          local _key1134 = iprot:readI32()
          local _val1135 = InventoryTab:new{}
          _val1135:read(iprot)
          self.inventoryTab[_key1134] = _val1135
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.MAP then
        self.blockers = {}
        local _ktype1137, _vtype1138, _size1136 = iprot:readMapBegin() 
        for _i=1,_size1136 do
          local _key1140 = iprot:readString()
          local _val1141 = Blocker:new{}
          _val1141:read(iprot)
          self.blockers[_key1140] = _val1141
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.MAP then
        self.weightedLootList = {}
        local _ktype1143, _vtype1144, _size1142 = iprot:readMapBegin() 
        for _i=1,_size1142 do
          local _key1146 = iprot:readString()
          local _val1147 = {}
          local _etype1151, _size1148 = iprot:readListBegin()
          for _i=1,_size1148 do
            local _elem1152 = WeightedLoot:new{}
            _elem1152:read(iprot)
            table.insert(_val1147, _elem1152)
          end
          iprot:readListEnd()
          self.weightedLootList[_key1146] = _val1147
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.MAP then
        self.rarity = {}
        local _ktype1154, _vtype1155, _size1153 = iprot:readMapBegin() 
        for _i=1,_size1153 do
          local _key1157 = iprot:readI32()
          local _val1158 = Rarity:new{}
          _val1158:read(iprot)
          self.rarity[_key1157] = _val1158
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.MAP then
        self.newRarity = {}
        local _ktype1160, _vtype1161, _size1159 = iprot:readMapBegin() 
        for _i=1,_size1159 do
          local _key1163 = iprot:readI32()
          local _val1164 = Rarity:new{}
          _val1164:read(iprot)
          self.newRarity[_key1163] = _val1164
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.MAP then
        self.level = {}
        local _ktype1166, _vtype1167, _size1165 = iprot:readMapBegin() 
        for _i=1,_size1165 do
          local _key1169 = iprot:readString()
          local _val1170 = Level:new{}
          _val1170:read(iprot)
          self.level[_key1169] = _val1170
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.MAP then
        self.boost = {}
        local _ktype1172, _vtype1173, _size1171 = iprot:readMapBegin() 
        for _i=1,_size1171 do
          local _key1175 = iprot:readString()
          local _val1176 = Boost:new{}
          _val1176:read(iprot)
          self.boost[_key1175] = _val1176
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.MAP then
        self.levelDot = {}
        local _ktype1178, _vtype1179, _size1177 = iprot:readMapBegin() 
        for _i=1,_size1177 do
          local _key1181 = iprot:readString()
          local _val1182 = LevelDot:new{}
          _val1182:read(iprot)
          self.levelDot[_key1181] = _val1182
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.MAP then
        self.villain = {}
        local _ktype1184, _vtype1185, _size1183 = iprot:readMapBegin() 
        for _i=1,_size1183 do
          local _key1187 = iprot:readString()
          local _val1188 = Villain:new{}
          _val1188:read(iprot)
          self.villain[_key1187] = _val1188
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.MAP then
        self.matchThreeData = {}
        local _ktype1190, _vtype1191, _size1189 = iprot:readMapBegin() 
        for _i=1,_size1189 do
          local _key1193 = iprot:readString()
          local _val1194 = MatchThreeData:new{}
          _val1194:read(iprot)
          self.matchThreeData[_key1193] = _val1194
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 45 then
      if ftype == TType.MAP then
        self.newLevel = {}
        local _ktype1196, _vtype1197, _size1195 = iprot:readMapBegin() 
        for _i=1,_size1195 do
          local _key1199 = iprot:readString()
          local _val1200 = NewLevel:new{}
          _val1200:read(iprot)
          self.newLevel[_key1199] = _val1200
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 46 then
      if ftype == TType.MAP then
        self.newLevelDot = {}
        local _ktype1202, _vtype1203, _size1201 = iprot:readMapBegin() 
        for _i=1,_size1201 do
          local _key1205 = iprot:readString()
          local _val1206 = LevelDotV2:new{}
          _val1206:read(iprot)
          self.newLevelDot[_key1205] = _val1206
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 55 then
      if ftype == TType.MAP then
        self.material = {}
        local _ktype1208, _vtype1209, _size1207 = iprot:readMapBegin() 
        for _i=1,_size1207 do
          local _key1211 = iprot:readString()
          local _val1212 = Material:new{}
          _val1212:read(iprot)
          self.material[_key1211] = _val1212
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.MAP then
        self.island = {}
        local _ktype1214, _vtype1215, _size1213 = iprot:readMapBegin() 
        for _i=1,_size1213 do
          local _key1217 = iprot:readString()
          local _val1218 = Island:new{}
          _val1218:read(iprot)
          self.island[_key1217] = _val1218
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 61 then
      if ftype == TType.STRUCT then
        self.islandSettings = IslandSettings:new{}
        self.islandSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 63 then
      if ftype == TType.MAP then
        self.islandObject = {}
        local _ktype1220, _vtype1221, _size1219 = iprot:readMapBegin() 
        for _i=1,_size1219 do
          local _key1223 = iprot:readString()
          local _val1224 = IslandObject:new{}
          _val1224:read(iprot)
          self.islandObject[_key1223] = _val1224
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 64 then
      if ftype == TType.MAP then
        self.color = {}
        local _ktype1226, _vtype1227, _size1225 = iprot:readMapBegin() 
        for _i=1,_size1225 do
          local _key1229 = iprot:readString()
          local _val1230 = Color:new{}
          _val1230:read(iprot)
          self.color[_key1229] = _val1230
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 70 then
      if ftype == TType.MAP then
        self.expansion = {}
        local _ktype1232, _vtype1233, _size1231 = iprot:readMapBegin() 
        for _i=1,_size1231 do
          local _key1235 = iprot:readString()
          local _val1236 = Expansion:new{}
          _val1236:read(iprot)
          self.expansion[_key1235] = _val1236
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 71 then
      if ftype == TType.MAP then
        self.expansionType = {}
        local _ktype1238, _vtype1239, _size1237 = iprot:readMapBegin() 
        for _i=1,_size1237 do
          local _key1241 = iprot:readString()
          local _val1242 = ExpansionType:new{}
          _val1242:read(iprot)
          self.expansionType[_key1241] = _val1242
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 74 then
      if ftype == TType.MAP then
        self.gachaGroup = {}
        local _ktype1244, _vtype1245, _size1243 = iprot:readMapBegin() 
        for _i=1,_size1243 do
          local _key1247 = iprot:readString()
          local _val1248 = GachaGroup:new{}
          _val1248:read(iprot)
          self.gachaGroup[_key1247] = _val1248
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 75 then
      if ftype == TType.MAP then
        self.gachaOffer = {}
        local _ktype1250, _vtype1251, _size1249 = iprot:readMapBegin() 
        for _i=1,_size1249 do
          local _key1253 = iprot:readString()
          local _val1254 = GachaOffer:new{}
          _val1254:read(iprot)
          self.gachaOffer[_key1253] = _val1254
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 76 then
      if ftype == TType.MAP then
        self.gachaPack = {}
        local _ktype1256, _vtype1257, _size1255 = iprot:readMapBegin() 
        for _i=1,_size1255 do
          local _key1259 = iprot:readString()
          local _val1260 = GachaPack:new{}
          _val1260:read(iprot)
          self.gachaPack[_key1259] = _val1260
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 77 then
      if ftype == TType.MAP then
        self.lootTable = {}
        local _ktype1262, _vtype1263, _size1261 = iprot:readMapBegin() 
        for _i=1,_size1261 do
          local _key1265 = iprot:readString()
          local _val1266 = {}
          local _etype1270, _size1267 = iprot:readListBegin()
          for _i=1,_size1267 do
            local _elem1271 = LootTable:new{}
            _elem1271:read(iprot)
            table.insert(_val1266, _elem1271)
          end
          iprot:readListEnd()
          self.lootTable[_key1265] = _val1266
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 78 then
      if ftype == TType.MAP then
        self.lootCurrencyGroup = {}
        local _ktype1273, _vtype1274, _size1272 = iprot:readMapBegin() 
        for _i=1,_size1272 do
          local _key1276 = iprot:readString()
          local _val1277 = {}
          local _etype1281, _size1278 = iprot:readListBegin()
          for _i=1,_size1278 do
            local _elem1282 = LootCurrencyGroup:new{}
            _elem1282:read(iprot)
            table.insert(_val1277, _elem1282)
          end
          iprot:readListEnd()
          self.lootCurrencyGroup[_key1276] = _val1277
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 79 then
      if ftype == TType.MAP then
        self.lootBuildingGroup = {}
        local _ktype1284, _vtype1285, _size1283 = iprot:readMapBegin() 
        for _i=1,_size1283 do
          local _key1287 = iprot:readString()
          local _val1288 = {}
          local _etype1292, _size1289 = iprot:readListBegin()
          for _i=1,_size1289 do
            local _elem1293 = LootBuildingGroup:new{}
            _elem1293:read(iprot)
            table.insert(_val1288, _elem1293)
          end
          iprot:readListEnd()
          self.lootBuildingGroup[_key1287] = _val1288
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 80 then
      if ftype == TType.MAP then
        self.avatar = {}
        local _ktype1295, _vtype1296, _size1294 = iprot:readMapBegin() 
        for _i=1,_size1294 do
          local _key1298 = iprot:readString()
          local _val1299 = Avatar:new{}
          _val1299:read(iprot)
          self.avatar[_key1298] = _val1299
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 130 then
      if ftype == TType.MAP then
        self.adminMessages = {}
        local _ktype1301, _vtype1302, _size1300 = iprot:readMapBegin() 
        for _i=1,_size1300 do
          local _key1304 = iprot:readString()
          local _val1305 = AdminMessage:new{}
          _val1305:read(iprot)
          self.adminMessages[_key1304] = _val1305
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 131 then
      if ftype == TType.LIST then
        self.adminGiftMessages = {}
        local _etype1309, _size1306 = iprot:readListBegin()
        for _i=1,_size1306 do
          local _elem1310 = AdminGiftMessage:new{}
          _elem1310:read(iprot)
          table.insert(self.adminGiftMessages, _elem1310)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 140 then
      if ftype == TType.MAP then
        self.analyticsEvents = {}
        local _ktype1312, _vtype1313, _size1311 = iprot:readMapBegin() 
        for _i=1,_size1311 do
          local _key1315 = iprot:readString()
          local _val1316 = AnalyticsEvent:new{}
          _val1316:read(iprot)
          self.analyticsEvents[_key1315] = _val1316
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 141 then
      if ftype == TType.MAP then
        self.appBoyEvents = {}
        local _ktype1318, _vtype1319, _size1317 = iprot:readMapBegin() 
        for _i=1,_size1317 do
          local _key1321 = iprot:readString()
          local _val1322 = AppBoyEvent:new{}
          _val1322:read(iprot)
          self.appBoyEvents[_key1321] = _val1322
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 142 then
      if ftype == TType.MAP then
        self.analyticsDimensions = {}
        local _ktype1324, _vtype1325, _size1323 = iprot:readMapBegin() 
        for _i=1,_size1323 do
          local _key1327 = iprot:readString()
          local _val1328 = AnalyticsDimension:new{}
          _val1328:read(iprot)
          self.analyticsDimensions[_key1327] = _val1328
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 143 then
      if ftype == TType.MAP then
        self.apsalarEvents = {}
        local _ktype1330, _vtype1331, _size1329 = iprot:readMapBegin() 
        for _i=1,_size1329 do
          local _key1333 = iprot:readString()
          local _val1334 = ApsalarEvent:new{}
          _val1334:read(iprot)
          self.apsalarEvents[_key1333] = _val1334
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 150 then
      if ftype == TType.MAP then
        self.businessOrderList = {}
        local _ktype1336, _vtype1337, _size1335 = iprot:readMapBegin() 
        for _i=1,_size1335 do
          local _key1339 = iprot:readString()
          local _val1340 = BusinessOrderList:new{}
          _val1340:read(iprot)
          self.businessOrderList[_key1339] = _val1340
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 152 then
      if ftype == TType.MAP then
        self.businessEvolution = {}
        local _ktype1342, _vtype1343, _size1341 = iprot:readMapBegin() 
        for _i=1,_size1341 do
          local _key1345 = iprot:readString()
          local _val1346 = BusinessEvolution:new{}
          _val1346:read(iprot)
          self.businessEvolution[_key1345] = _val1346
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 160 then
      if ftype == TType.MAP then
        self.npc = {}
        local _ktype1348, _vtype1349, _size1347 = iprot:readMapBegin() 
        for _i=1,_size1347 do
          local _key1351 = iprot:readString()
          local _val1352 = Npc:new{}
          _val1352:read(iprot)
          self.npc[_key1351] = _val1352
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 170 then
      if ftype == TType.MAP then
        self.vendorProducts = {}
        local _ktype1354, _vtype1355, _size1353 = iprot:readMapBegin() 
        for _i=1,_size1353 do
          local _key1357 = iprot:readString()
          local _val1358 = VendorProduct:new{}
          _val1358:read(iprot)
          self.vendorProducts[_key1357] = _val1358
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 180 then
      if ftype == TType.MAP then
        self.storeProducts = {}
        local _ktype1360, _vtype1361, _size1359 = iprot:readMapBegin() 
        for _i=1,_size1359 do
          local _key1363 = iprot:readString()
          local _val1364 = StoreProduct:new{}
          _val1364:read(iprot)
          self.storeProducts[_key1363] = _val1364
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 200 then
      if ftype == TType.MAP then
        self.buyItemOrder = {}
        local _ktype1366, _vtype1367, _size1365 = iprot:readMapBegin() 
        for _i=1,_size1365 do
          local _key1369 = iprot:readString()
          local _val1370 = BuyItemOrder:new{}
          _val1370:read(iprot)
          self.buyItemOrder[_key1369] = _val1370
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 201 then
      if ftype == TType.MAP then
        self.marketType = {}
        local _ktype1372, _vtype1373, _size1371 = iprot:readMapBegin() 
        for _i=1,_size1371 do
          local _key1375 = iprot:readI32()
          local _val1376 = Market:new{}
          _val1376:read(iprot)
          self.marketType[_key1375] = _val1376
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 202 then
      if ftype == TType.MAP then
        self.forcedUpgrade = {}
        local _ktype1378, _vtype1379, _size1377 = iprot:readMapBegin() 
        for _i=1,_size1377 do
          local _key1381 = iprot:readI32()
          local _val1382 = ForcedUpgrade:new{}
          _val1382:read(iprot)
          self.forcedUpgrade[_key1381] = _val1382
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 203 then
      if ftype == TType.MAP then
        self.errorMessage = {}
        local _ktype1384, _vtype1385, _size1383 = iprot:readMapBegin() 
        for _i=1,_size1383 do
          local _key1387 = iprot:readString()
          local _val1388 = ErrorMessage:new{}
          _val1388:read(iprot)
          self.errorMessage[_key1387] = _val1388
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 204 then
      if ftype == TType.MAP then
        self.achievement = {}
        local _ktype1390, _vtype1391, _size1389 = iprot:readMapBegin() 
        for _i=1,_size1389 do
          local _key1393 = iprot:readString()
          local _val1394 = Achievement:new{}
          _val1394:read(iprot)
          self.achievement[_key1393] = _val1394
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 205 then
      if ftype == TType.MAP then
        self.achievementGroup = {}
        local _ktype1396, _vtype1397, _size1395 = iprot:readMapBegin() 
        for _i=1,_size1395 do
          local _key1399 = iprot:readString()
          local _val1400 = AchievementGroup:new{}
          _val1400:read(iprot)
          self.achievementGroup[_key1399] = _val1400
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 210 then
      if ftype == TType.MAP then
        self.testBuckets = {}
        local _ktype1402, _vtype1403, _size1401 = iprot:readMapBegin() 
        for _i=1,_size1401 do
          local _key1405 = iprot:readString()
          local _val1406 = TestBucket:new{}
          _val1406:read(iprot)
          self.testBuckets[_key1405] = _val1406
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 220 then
      if ftype == TType.STRUCT then
        self.strangerSettings = StrangerSettings:new{}
        self.strangerSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 221 then
      if ftype == TType.LIST then
        self.strangerMatchSettings = {}
        local _etype1410, _size1407 = iprot:readListBegin()
        for _i=1,_size1407 do
          local _elem1411 = StrangerMatchSettings:new{}
          _elem1411:read(iprot)
          table.insert(self.strangerMatchSettings, _elem1411)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 222 then
      if ftype == TType.LIST then
        self.fakeStrangerDisplays = {}
        local _etype1415, _size1412 = iprot:readListBegin()
        for _i=1,_size1412 do
          local _elem1416 = FakeStrangerDisplay:new{}
          _elem1416:read(iprot)
          table.insert(self.fakeStrangerDisplays, _elem1416)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 223 then
      if ftype == TType.MAP then
        self.giftMessageRewards = {}
        local _ktype1418, _vtype1419, _size1417 = iprot:readMapBegin() 
        for _i=1,_size1417 do
          local _key1421 = iprot:readString()
          local _val1422 = GiftMessageReward:new{}
          _val1422:read(iprot)
          self.giftMessageRewards[_key1421] = _val1422
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 224 then
      if ftype == TType.LIST then
        self.partialKingdomLikeGifts = {}
        local _etype1426, _size1423 = iprot:readListBegin()
        for _i=1,_size1423 do
          local _elem1427 = PartialKingdomLikeGift:new{}
          _elem1427:read(iprot)
          table.insert(self.partialKingdomLikeGifts, _elem1427)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 225 then
      if ftype == TType.MAP then
        self.kingdomLikeGifts = {}
        local _ktype1429, _vtype1430, _size1428 = iprot:readMapBegin() 
        for _i=1,_size1428 do
          local _key1432 = iprot:readString()
          local _val1433 = KingdomLikeGift:new{}
          _val1433:read(iprot)
          self.kingdomLikeGifts[_key1432] = _val1433
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 226 then
      if ftype == TType.MAP then
        self.pushMessages = {}
        local _ktype1435, _vtype1436, _size1434 = iprot:readMapBegin() 
        for _i=1,_size1434 do
          local _key1438 = iprot:readString()
          local _val1439 = PushMessage:new{}
          _val1439:read(iprot)
          self.pushMessages[_key1438] = _val1439
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 229 then
      if ftype == TType.MAP then
        self.socialUnlockrewards = {}
        local _ktype1441, _vtype1442, _size1440 = iprot:readMapBegin() 
        for _i=1,_size1440 do
          local _key1444 = iprot:readString()
          local _val1445 = SocialUnlockReward:new{}
          _val1445:read(iprot)
          self.socialUnlockrewards[_key1444] = _val1445
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 400 then
      if ftype == TType.LIST then
        self.adProviders = {}
        local _etype1449, _size1446 = iprot:readListBegin()
        for _i=1,_size1446 do
          local _elem1450 = AdProvider:new{}
          _elem1450:read(iprot)
          table.insert(self.adProviders, _elem1450)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 500 then
      if ftype == TType.LIST then
        self.popupTemplate = {}
        local _etype1454, _size1451 = iprot:readListBegin()
        for _i=1,_size1451 do
          local _elem1455 = PopupTemplate:new{}
          _elem1455:read(iprot)
          table.insert(self.popupTemplate, _elem1455)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 501 then
      if ftype == TType.MAP then
        self.defaultTemplate = {}
        local _ktype1457, _vtype1458, _size1456 = iprot:readMapBegin() 
        for _i=1,_size1456 do
          local _key1460 = iprot:readI32()
          local _val1461 = DefaultTemplate:new{}
          _val1461:read(iprot)
          self.defaultTemplate[_key1460] = _val1461
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 502 then
      if ftype == TType.LIST then
        self.rushCostsByRemainingTime = {}
        local _etype1465, _size1462 = iprot:readListBegin()
        for _i=1,_size1462 do
          local _elem1466 = RushCostByRemainingTime:new{}
          _elem1466:read(iprot)
          table.insert(self.rushCostsByRemainingTime, _elem1466)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 503 then
      if ftype == TType.MAP then
        self.messageTemplateModifiers = {}
        local _ktype1468, _vtype1469, _size1467 = iprot:readMapBegin() 
        for _i=1,_size1467 do
          local _key1471 = iprot:readString()
          local _val1472 = {}
          local _etype1476, _size1473 = iprot:readListBegin()
          for _i=1,_size1473 do
            local _elem1477 = MessageTemplateModifier:new{}
            _elem1477:read(iprot)
            table.insert(_val1472, _elem1477)
          end
          iprot:readListEnd()
          self.messageTemplateModifiers[_key1471] = _val1472
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 600 then
      if ftype == TType.MAP then
        self.gachaBanner = {}
        local _ktype1479, _vtype1480, _size1478 = iprot:readMapBegin() 
        for _i=1,_size1478 do
          local _key1482 = iprot:readString()
          local _val1483 = GachaBanner:new{}
          _val1483:read(iprot)
          self.gachaBanner[_key1482] = _val1483
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 601 then
      if ftype == TType.MAP then
        self.presetKingdoms = {}
        local _ktype1485, _vtype1486, _size1484 = iprot:readMapBegin() 
        for _i=1,_size1484 do
          local _key1488 = iprot:readString()
          local _val1489 = {}
          local _etype1493, _size1490 = iprot:readListBegin()
          for _i=1,_size1490 do
            local _elem1494 = PresetKingdomEntity:new{}
            _elem1494:read(iprot)
            table.insert(_val1489, _elem1494)
          end
          iprot:readListEnd()
          self.presetKingdoms[_key1488] = _val1489
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 602 then
      if ftype == TType.MAP then
        self.abTests = {}
        local _ktype1496, _vtype1497, _size1495 = iprot:readMapBegin() 
        for _i=1,_size1495 do
          local _key1499 = iprot:readString()
          local _val1500 = {}
          local _etype1504, _size1501 = iprot:readListBegin()
          for _i=1,_size1501 do
            local _elem1505 = ABTest:new{}
            _elem1505:read(iprot)
            table.insert(_val1500, _elem1505)
          end
          iprot:readListEnd()
          self.abTests[_key1499] = _val1500
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 603 then
      if ftype == TType.MAP then
        self.clientVersionTestBuckets = {}
        local _ktype1507, _vtype1508, _size1506 = iprot:readMapBegin() 
        for _i=1,_size1506 do
          local _key1510 = iprot:readString()
          local _val1511 = ClientVersionTestBucket:new{}
          _val1511:read(iprot)
          self.clientVersionTestBuckets[_key1510] = _val1511
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 610 then
      if ftype == TType.MAP then
        self.buildMenuSpecialCard = {}
        local _ktype1513, _vtype1514, _size1512 = iprot:readMapBegin() 
        for _i=1,_size1512 do
          local _key1516 = iprot:readString()
          local _val1517 = BuildMenuSpecialCard:new{}
          _val1517:read(iprot)
          self.buildMenuSpecialCard[_key1516] = _val1517
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 700 then
      if ftype == TType.STRUCT then
        self.businessMenuSettings = BusinessMenuSettings:new{}
        self.businessMenuSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 790 then
      if ftype == TType.MAP then
        self.rewardMessages = {}
        local _ktype1519, _vtype1520, _size1518 = iprot:readMapBegin() 
        for _i=1,_size1518 do
          local _key1522 = iprot:readString()
          local _val1523 = RewardMessage:new{}
          _val1523:read(iprot)
          self.rewardMessages[_key1522] = _val1523
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 800 then
      if ftype == TType.MAP then
        self.events = {}
        local _ktype1525, _vtype1526, _size1524 = iprot:readMapBegin() 
        for _i=1,_size1524 do
          local _key1528 = iprot:readString()
          local _val1529 = Event:new{}
          _val1529:read(iprot)
          self.events[_key1528] = _val1529
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 810 then
      if ftype == TType.MAP then
        self.leaderboards = {}
        local _ktype1531, _vtype1532, _size1530 = iprot:readMapBegin() 
        for _i=1,_size1530 do
          local _key1534 = iprot:readString()
          local _val1535 = Leaderboard:new{}
          _val1535:read(iprot)
          self.leaderboards[_key1534] = _val1535
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 811 then
      if ftype == TType.STRUCT then
        self.leaderboardSettings = LeaderboardSettings:new{}
        self.leaderboardSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 812 then
      if ftype == TType.LIST then
        self.leaderboardLeagues = {}
        local _etype1539, _size1536 = iprot:readListBegin()
        for _i=1,_size1536 do
          local _elem1540 = LeaderboardLeague:new{}
          _elem1540:read(iprot)
          table.insert(self.leaderboardLeagues, _elem1540)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 813 then
      if ftype == TType.LIST then
        self.leaderboardRibbons = {}
        local _etype1544, _size1541 = iprot:readListBegin()
        for _i=1,_size1541 do
          local _elem1545 = LeaderboardRibbon:new{}
          _elem1545:read(iprot)
          table.insert(self.leaderboardRibbons, _elem1545)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 814 then
      if ftype == TType.LIST then
        self.leaderboardRewards = {}
        local _etype1549, _size1546 = iprot:readListBegin()
        for _i=1,_size1546 do
          local _elem1550 = LeaderboardReward:new{}
          _elem1550:read(iprot)
          table.insert(self.leaderboardRewards, _elem1550)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 815 then
      if ftype == TType.MAP then
        self.leaderboardPlacements = {}
        local _ktype1552, _vtype1553, _size1551 = iprot:readMapBegin() 
        for _i=1,_size1551 do
          local _key1555 = iprot:readString()
          local _val1556 = {}
          local _etype1560, _size1557 = iprot:readListBegin()
          for _i=1,_size1557 do
            local _elem1561 = LeaderboardPlacement:new{}
            _elem1561:read(iprot)
            table.insert(_val1556, _elem1561)
          end
          iprot:readListEnd()
          self.leaderboardPlacements[_key1555] = _val1556
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 816 then
      if ftype == TType.LIST then
        self.rarityEvoLevelKeyDropRates = {}
        local _etype1565, _size1562 = iprot:readListBegin()
        for _i=1,_size1562 do
          local _elem1566 = RarityEvoLevelKeyDropRate:new{}
          _elem1566:read(iprot)
          table.insert(self.rarityEvoLevelKeyDropRates, _elem1566)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 817 then
      if ftype == TType.MAP then
        self.keyDropRateByOrderTime = {}
        local _ktype1568, _vtype1569, _size1567 = iprot:readMapBegin() 
        for _i=1,_size1567 do
          local _key1571 = iprot:readString()
          local _val1572 = {}
          local _etype1576, _size1573 = iprot:readListBegin()
          for _i=1,_size1573 do
            local _elem1577 = KeyDropRateByOrderTime:new{}
            _elem1577:read(iprot)
            table.insert(_val1572, _elem1577)
          end
          iprot:readListEnd()
          self.keyDropRateByOrderTime[_key1571] = _val1572
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 818 then
      if ftype == TType.MAP then
        self.eventBusinessKeyDropRates = {}
        local _ktype1579, _vtype1580, _size1578 = iprot:readMapBegin() 
        for _i=1,_size1578 do
          local _key1582 = iprot:readString()
          local _val1583 = EventBusinessKeyDropRate:new{}
          _val1583:read(iprot)
          self.eventBusinessKeyDropRates[_key1582] = _val1583
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 820 then
      if ftype == TType.MAP then
        self.leaderboardTemplates = {}
        local _ktype1585, _vtype1586, _size1584 = iprot:readMapBegin() 
        for _i=1,_size1584 do
          local _key1588 = iprot:readString()
          local _val1589 = LeaderboardTemplate:new{}
          _val1589:read(iprot)
          self.leaderboardTemplates[_key1588] = _val1589
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 850 then
      if ftype == TType.MAP then
        self.eventIslands = {}
        local _ktype1591, _vtype1592, _size1590 = iprot:readMapBegin() 
        for _i=1,_size1590 do
          local _key1594 = iprot:readString()
          local _val1595 = EventIsland:new{}
          _val1595:read(iprot)
          self.eventIslands[_key1594] = _val1595
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 851 then
      if ftype == TType.MAP then
        self.eventHowToPlays = {}
        local _ktype1597, _vtype1598, _size1596 = iprot:readMapBegin() 
        for _i=1,_size1596 do
          local _key1600 = iprot:readString()
          local _val1601 = EventHowToPlay:new{}
          _val1601:read(iprot)
          self.eventHowToPlays[_key1600] = _val1601
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 852 then
      if ftype == TType.MAP then
        self.eventMainMenus = {}
        local _ktype1603, _vtype1604, _size1602 = iprot:readMapBegin() 
        for _i=1,_size1602 do
          local _key1606 = iprot:readString()
          local _val1607 = EventMainMenu:new{}
          _val1607:read(iprot)
          self.eventMainMenus[_key1606] = _val1607
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 900 then
      if ftype == TType.MAP then
        self.castleActivities = {}
        local _ktype1609, _vtype1610, _size1608 = iprot:readMapBegin() 
        for _i=1,_size1608 do
          local _key1612 = iprot:readString()
          local _val1613 = CastleActivity:new{}
          _val1613:read(iprot)
          self.castleActivities[_key1612] = _val1613
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 901 then
      if ftype == TType.LIST then
        self.playerDisplaySuggestStart = {}
        local _etype1617, _size1614 = iprot:readListBegin()
        for _i=1,_size1614 do
          local _elem1618 = PlayerDisplaySuggest:new{}
          _elem1618:read(iprot)
          table.insert(self.playerDisplaySuggestStart, _elem1618)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 902 then
      if ftype == TType.LIST then
        self.playerDisplaySuggestMiddle = {}
        local _etype1622, _size1619 = iprot:readListBegin()
        for _i=1,_size1619 do
          local _elem1623 = PlayerDisplaySuggest:new{}
          _elem1623:read(iprot)
          table.insert(self.playerDisplaySuggestMiddle, _elem1623)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 903 then
      if ftype == TType.LIST then
        self.playerDisplaySuggestEnd = {}
        local _etype1627, _size1624 = iprot:readListBegin()
        for _i=1,_size1624 do
          local _elem1628 = PlayerDisplaySuggest:new{}
          _elem1628:read(iprot)
          table.insert(self.playerDisplaySuggestEnd, _elem1628)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 910 then
      if ftype == TType.LIST then
        self.tutorialStates = {}
        local _etype1632, _size1629 = iprot:readListBegin()
        for _i=1,_size1629 do
          local _elem1633 = TutorialState:new{}
          _elem1633:read(iprot)
          table.insert(self.tutorialStates, _elem1633)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 911 then
      if ftype == TType.MAP then
        self.popupMessages = {}
        local _ktype1635, _vtype1636, _size1634 = iprot:readMapBegin() 
        for _i=1,_size1634 do
          local _key1638 = iprot:readString()
          local _val1639 = PopupMessage:new{}
          _val1639:read(iprot)
          self.popupMessages[_key1638] = _val1639
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 912 then
      if ftype == TType.STRUCT then
        self.popupMessageSettings = PopupMessageSettings:new{}
        self.popupMessageSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1000 then
      if ftype == TType.STRUCT then
        self.eventSettings = EventSettings:new{}
        self.eventSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1100 then
      if ftype == TType.LIST then
        self.screenNameMapping = {}
        local _etype1643, _size1640 = iprot:readListBegin()
        for _i=1,_size1640 do
          local _elem1644 = ScreenNameMapping:new{}
          _elem1644:read(iprot)
          table.insert(self.screenNameMapping, _elem1644)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1101 then
      if ftype == TType.MAP then
        self.cellInfo = {}
        local _ktype1646, _vtype1647, _size1645 = iprot:readMapBegin() 
        for _i=1,_size1645 do
          local _key1649 = iprot:readString()
          local _val1650 = {}
          local _etype1654, _size1651 = iprot:readListBegin()
          for _i=1,_size1651 do
            local _elem1655 = CellInfo:new{}
            _elem1655:read(iprot)
            table.insert(_val1650, _elem1655)
          end
          iprot:readListEnd()
          self.cellInfo[_key1649] = _val1650
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1200 then
      if ftype == TType.MAP then
        self.keyCostPerLevel = {}
        local _ktype1657, _vtype1658, _size1656 = iprot:readMapBegin() 
        for _i=1,_size1656 do
          local _key1660 = iprot:readString()
          local _val1661 = {}
          local _etype1665, _size1662 = iprot:readListBegin()
          for _i=1,_size1662 do
            local _elem1666 = KeyCostPerLevel:new{}
            _elem1666:read(iprot)
            table.insert(_val1661, _elem1666)
          end
          iprot:readListEnd()
          self.keyCostPerLevel[_key1660] = _val1661
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1201 then
      if ftype == TType.LIST then
        self.playerMatchRankSettings = {}
        local _etype1670, _size1667 = iprot:readListBegin()
        for _i=1,_size1667 do
          local _elem1671 = PlayerMatchRankSettings:new{}
          _elem1671:read(iprot)
          table.insert(self.playerMatchRankSettings, _elem1671)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1202 then
      if ftype == TType.MAP then
        self.buildingMultipliers = {}
        local _ktype1673, _vtype1674, _size1672 = iprot:readMapBegin() 
        for _i=1,_size1672 do
          local _key1676 = iprot:readString()
          local _val1677 = BuildingMultiplier:new{}
          _val1677:read(iprot)
          self.buildingMultipliers[_key1676] = _val1677
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1300 then
      if ftype == TType.STRUCT then
        self.guildLeaderboardSettings = GuildLeaderboardSettings:new{}
        self.guildLeaderboardSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1301 then
      if ftype == TType.MAP then
        self.guildLeaderboards = {}
        local _ktype1679, _vtype1680, _size1678 = iprot:readMapBegin() 
        for _i=1,_size1678 do
          local _key1682 = iprot:readString()
          local _val1683 = GuildLeaderboard:new{}
          _val1683:read(iprot)
          self.guildLeaderboards[_key1682] = _val1683
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1302 then
      if ftype == TType.LIST then
        self.guildLeaderboardRibbons = {}
        local _etype1687, _size1684 = iprot:readListBegin()
        for _i=1,_size1684 do
          local _elem1688 = GuildLeaderboardRibbon:new{}
          _elem1688:read(iprot)
          table.insert(self.guildLeaderboardRibbons, _elem1688)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1303 then
      if ftype == TType.LIST then
        self.guildLeaderboardRewards = {}
        local _etype1692, _size1689 = iprot:readListBegin()
        for _i=1,_size1689 do
          local _elem1693 = GuildLeaderboardReward:new{}
          _elem1693:read(iprot)
          table.insert(self.guildLeaderboardRewards, _elem1693)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1311 then
      if ftype == TType.MAP then
        self.locations = {}
        local _ktype1695, _vtype1696, _size1694 = iprot:readMapBegin() 
        for _i=1,_size1694 do
          local _key1698 = iprot:readString()
          local _val1699 = Location:new{}
          _val1699:read(iprot)
          self.locations[_key1698] = _val1699
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1312 then
      if ftype == TType.STRUCT then
        self.guildSettings = GuildSettings:new{}
        self.guildSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1313 then
      if ftype == TType.MAP then
        self.guildMemberTypeDisplays = {}
        local _ktype1701, _vtype1702, _size1700 = iprot:readMapBegin() 
        for _i=1,_size1700 do
          local _key1704 = iprot:readI32()
          local _val1705 = GuildMemberTypeDisplay:new{}
          _val1705:read(iprot)
          self.guildMemberTypeDisplays[_key1704] = _val1705
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1314 then
      if ftype == TType.MAP then
        self.guildJoinTypeDisplays = {}
        local _ktype1707, _vtype1708, _size1706 = iprot:readMapBegin() 
        for _i=1,_size1706 do
          local _key1710 = iprot:readI32()
          local _val1711 = GuildJoinTypeDisplay:new{}
          _val1711:read(iprot)
          self.guildJoinTypeDisplays[_key1710] = _val1711
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1315 then
      if ftype == TType.MAP then
        self.guildEmblems = {}
        local _ktype1713, _vtype1714, _size1712 = iprot:readMapBegin() 
        for _i=1,_size1712 do
          local _key1716 = iprot:readString()
          local _val1717 = GuildEmblem:new{}
          _val1717:read(iprot)
          self.guildEmblems[_key1716] = _val1717
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1316 then
      if ftype == TType.LIST then
        self.guildBoundItems = {}
        local _etype1721, _size1718 = iprot:readListBegin()
        for _i=1,_size1718 do
          local _elem1722 = GuildBoundItem:new{}
          _elem1722:read(iprot)
          table.insert(self.guildBoundItems, _elem1722)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1317 then
      if ftype == TType.MAP then
        self.guildRank = {}
        local _ktype1724, _vtype1725, _size1723 = iprot:readMapBegin() 
        for _i=1,_size1723 do
          local _key1727 = iprot:readI32()
          local _val1728 = GuildRank:new{}
          _val1728:read(iprot)
          self.guildRank[_key1727] = _val1728
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1330 then
      if ftype == TType.MAP then
        self.chatSystemMessages = {}
        local _ktype1730, _vtype1731, _size1729 = iprot:readMapBegin() 
        for _i=1,_size1729 do
          local _key1733 = iprot:readString()
          local _val1734 = ChatSystemMessage:new{}
          _val1734:read(iprot)
          self.chatSystemMessages[_key1733] = _val1734
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1400 then
      if ftype == TType.MAP then
        self.gifts = {}
        local _ktype1736, _vtype1737, _size1735 = iprot:readMapBegin() 
        for _i=1,_size1735 do
          local _key1739 = iprot:readString()
          local _val1740 = Gift:new{}
          _val1740:read(iprot)
          self.gifts[_key1739] = _val1740
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1410 then
      if ftype == TType.STRUCT then
        self.pollSettings = PollSettings:new{}
        self.pollSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1500 then
      if ftype == TType.LIST then
        self.guildNameSuggestStart = {}
        local _etype1744, _size1741 = iprot:readListBegin()
        for _i=1,_size1741 do
          local _elem1745 = GuildNameSuggest:new{}
          _elem1745:read(iprot)
          table.insert(self.guildNameSuggestStart, _elem1745)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1501 then
      if ftype == TType.LIST then
        self.guildNameSuggestMiddle = {}
        local _etype1749, _size1746 = iprot:readListBegin()
        for _i=1,_size1746 do
          local _elem1750 = GuildNameSuggest:new{}
          _elem1750:read(iprot)
          table.insert(self.guildNameSuggestMiddle, _elem1750)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1502 then
      if ftype == TType.LIST then
        self.guildNameSuggestEnd = {}
        local _etype1754, _size1751 = iprot:readListBegin()
        for _i=1,_size1751 do
          local _elem1755 = GuildNameSuggest:new{}
          _elem1755:read(iprot)
          table.insert(self.guildNameSuggestEnd, _elem1755)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1600 then
      if ftype == TType.MAP then
        self.quests = {}
        local _ktype1757, _vtype1758, _size1756 = iprot:readMapBegin() 
        for _i=1,_size1756 do
          local _key1760 = iprot:readString()
          local _val1761 = Quest:new{}
          _val1761:read(iprot)
          self.quests[_key1760] = _val1761
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1601 then
      if ftype == TType.LIST then
        self.questGoals = {}
        local _etype1765, _size1762 = iprot:readListBegin()
        for _i=1,_size1762 do
          local _elem1766 = Goal:new{}
          _elem1766:read(iprot)
          table.insert(self.questGoals, _elem1766)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1610 then
      if ftype == TType.MAP then
        self.questTemplates = {}
        local _ktype1768, _vtype1769, _size1767 = iprot:readMapBegin() 
        for _i=1,_size1767 do
          local _key1771 = iprot:readString()
          local _val1772 = Quest:new{}
          _val1772:read(iprot)
          self.questTemplates[_key1771] = _val1772
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1611 then
      if ftype == TType.LIST then
        self.questGoalTemplates = {}
        local _etype1776, _size1773 = iprot:readListBegin()
        for _i=1,_size1773 do
          local _elem1777 = Goal:new{}
          _elem1777:read(iprot)
          table.insert(self.questGoalTemplates, _elem1777)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1602 then
      if ftype == TType.MAP then
        self.questNpc = {}
        local _ktype1779, _vtype1780, _size1778 = iprot:readMapBegin() 
        for _i=1,_size1778 do
          local _key1782 = iprot:readString()
          local _val1783 = QuestNpc:new{}
          _val1783:read(iprot)
          self.questNpc[_key1782] = _val1783
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1603 then
      if ftype == TType.MAP then
        self.businessQuestNpc = {}
        local _ktype1785, _vtype1786, _size1784 = iprot:readMapBegin() 
        for _i=1,_size1784 do
          local _key1788 = iprot:readString()
          local _val1789 = BusinessQuestNpc:new{}
          _val1789:read(iprot)
          self.businessQuestNpc[_key1788] = _val1789
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1700 then
      if ftype == TType.STRUCT then
        self.happinessSettings = HappinessSettings:new{}
        self.happinessSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1710 then
      if ftype == TType.MAP then
        self.stores = {}
        local _ktype1791, _vtype1792, _size1790 = iprot:readMapBegin() 
        for _i=1,_size1790 do
          local _key1794 = iprot:readString()
          local _val1795 = Store:new{}
          _val1795:read(iprot)
          self.stores[_key1794] = _val1795
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1711 then
      if ftype == TType.MAP then
        self.storeInventories = {}
        local _ktype1797, _vtype1798, _size1796 = iprot:readMapBegin() 
        for _i=1,_size1796 do
          local _key1800 = iprot:readString()
          local _val1801 = {}
          local _etype1805, _size1802 = iprot:readListBegin()
          for _i=1,_size1802 do
            local _elem1806 = StoreInventoryItem:new{}
            _elem1806:read(iprot)
            table.insert(_val1801, _elem1806)
          end
          iprot:readListEnd()
          self.storeInventories[_key1800] = _val1801
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1712 then
      if ftype == TType.MAP then
        self.cardOffers = {}
        local _ktype1808, _vtype1809, _size1807 = iprot:readMapBegin() 
        for _i=1,_size1807 do
          local _key1811 = iprot:readString()
          local _val1812 = CardOffer:new{}
          _val1812:read(iprot)
          self.cardOffers[_key1811] = _val1812
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1713 then
      if ftype == TType.MAP then
        self.iapProducts = {}
        local _ktype1814, _vtype1815, _size1813 = iprot:readMapBegin() 
        for _i=1,_size1813 do
          local _key1817 = iprot:readString()
          local _val1818 = IAPProduct:new{}
          _val1818:read(iprot)
          self.iapProducts[_key1817] = _val1818
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1899 then
      if ftype == TType.STRUCT then
        self.campaignSettings = CampaignSettings:new{}
        self.campaignSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1900 then
      if ftype == TType.MAP then
        self.levelCampaigns = {}
        local _ktype1820, _vtype1821, _size1819 = iprot:readMapBegin() 
        for _i=1,_size1819 do
          local _key1823 = iprot:readString()
          local _val1824 = LevelCampaign:new{}
          _val1824:read(iprot)
          self.levelCampaigns[_key1823] = _val1824
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1901 then
      if ftype == TType.MAP then
        self.businessLevelIdsLookup = {}
        local _ktype1826, _vtype1827, _size1825 = iprot:readMapBegin() 
        for _i=1,_size1825 do
          local _key1829 = iprot:readString()
          local _val1830 = BusinessLevelsList:new{}
          _val1830:read(iprot)
          self.businessLevelIdsLookup[_key1829] = _val1830
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1902 then
      if ftype == TType.MAP then
        self.castleEventLevelIdsLookup = {}
        local _ktype1832, _vtype1833, _size1831 = iprot:readMapBegin() 
        for _i=1,_size1831 do
          local _key1835 = iprot:readString()
          local _val1836 = CastleEventLevelsList:new{}
          _val1836:read(iprot)
          self.castleEventLevelIdsLookup[_key1835] = _val1836
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1903 then
      if ftype == TType.MAP then
        self.campaignLevelIdsLookup = {}
        local _ktype1838, _vtype1839, _size1837 = iprot:readMapBegin() 
        for _i=1,_size1837 do
          local _key1841 = iprot:readString()
          local _val1842 = LevelCampaignLevelsList:new{}
          _val1842:read(iprot)
          self.campaignLevelIdsLookup[_key1841] = _val1842
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1904 then
      if ftype == TType.MAP then
        self.levelCampaignStyles = {}
        local _ktype1844, _vtype1845, _size1843 = iprot:readMapBegin() 
        for _i=1,_size1843 do
          local _key1847 = iprot:readString()
          local _val1848 = LevelCampaignStyle:new{}
          _val1848:read(iprot)
          self.levelCampaignStyles[_key1847] = _val1848
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2014 then
      if ftype == TType.MAP then
        self.buildingTypeLocalizations = {}
        local _ktype1850, _vtype1851, _size1849 = iprot:readMapBegin() 
        for _i=1,_size1849 do
          local _key1853 = iprot:readI32()
          local _val1854 = BuildingTypeLocalization:new{}
          _val1854:read(iprot)
          self.buildingTypeLocalizations[_key1853] = _val1854
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3000 then
      if ftype == TType.STRUCT then
        self.ftueSettings = FTUESettings:new{}
        self.ftueSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3301 then
      if ftype == TType.MAP then
        self.matchThreeCellDefinitions = {}
        local _ktype1856, _vtype1857, _size1855 = iprot:readMapBegin() 
        for _i=1,_size1855 do
          local _key1859 = iprot:readString()
          local _val1860 = {}
          local _etype1864, _size1861 = iprot:readListBegin()
          for _i=1,_size1861 do
            local _elem1865 = MatchThreeCellDefinition:new{}
            _elem1865:read(iprot)
            table.insert(_val1860, _elem1865)
          end
          iprot:readListEnd()
          self.matchThreeCellDefinitions[_key1859] = _val1860
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3302 then
      if ftype == TType.MAP then
        self.matchThreeBlasterDefinitions = {}
        local _ktype1867, _vtype1868, _size1866 = iprot:readMapBegin() 
        for _i=1,_size1866 do
          local _key1870 = iprot:readString()
          local _val1871 = {}
          local _etype1875, _size1872 = iprot:readListBegin()
          for _i=1,_size1872 do
            local _elem1876 = MatchThreeBlasterDefinition:new{}
            _elem1876:read(iprot)
            table.insert(_val1871, _elem1876)
          end
          iprot:readListEnd()
          self.matchThreeBlasterDefinitions[_key1870] = _val1871
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2000 then
      if ftype == TType.LIST then
        self.goalDisplayTemplates = {}
        local _etype1880, _size1877 = iprot:readListBegin()
        for _i=1,_size1877 do
          local _elem1881 = GoalDisplayTemplate:new{}
          _elem1881:read(iprot)
          table.insert(self.goalDisplayTemplates, _elem1881)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2001 then
      if ftype == TType.MAP then
        self.questTitles = {}
        local _ktype1883, _vtype1884, _size1882 = iprot:readMapBegin() 
        for _i=1,_size1882 do
          local _key1886 = iprot:readI32()
          local _val1887 = {}
          local _etype1891, _size1888 = iprot:readListBegin()
          for _i=1,_size1888 do
            local _elem1892 = QuestDisplayTemplate:new{}
            _elem1892:read(iprot)
            table.insert(_val1887, _elem1892)
          end
          iprot:readListEnd()
          self.questTitles[_key1886] = _val1887
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2006 then
      if ftype == TType.STRUCT then
        self.questSettings = QuestSettings:new{}
        self.questSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2015 then
      if ftype == TType.MAP then
        self.questRankSettings = {}
        local _ktype1894, _vtype1895, _size1893 = iprot:readMapBegin() 
        for _i=1,_size1893 do
          local _key1897 = iprot:readI32()
          local _val1898 = QuestRankSettings:new{}
          _val1898:read(iprot)
          self.questRankSettings[_key1897] = _val1898
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2016 then
      if ftype == TType.MAP then
        self.newBusinessOrders = {}
        local _ktype1900, _vtype1901, _size1899 = iprot:readMapBegin() 
        for _i=1,_size1899 do
          local _key1903 = iprot:readString()
          local _val1904 = NewBusinessOrder:new{}
          _val1904:read(iprot)
          self.newBusinessOrders[_key1903] = _val1904
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2100 then
      if ftype == TType.MAP then
        self.eventMenuWidgets = {}
        local _ktype1906, _vtype1907, _size1905 = iprot:readMapBegin() 
        for _i=1,_size1905 do
          local _key1909 = iprot:readString()
          local _val1910 = EventMenuWidget:new{}
          _val1910:read(iprot)
          self.eventMenuWidgets[_key1909] = _val1910
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6100 then
      if ftype == TType.MAP then
        self.gearAvailableOnGachas = {}
        local _ktype1912, _vtype1913, _size1911 = iprot:readMapBegin() 
        for _i=1,_size1911 do
          local _key1915 = iprot:readString()
          local _val1916 = GearAvailableOnGachaOfferList:new{}
          _val1916:read(iprot)
          self.gearAvailableOnGachas[_key1915] = _val1916
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6101 then
      if ftype == TType.MAP then
        self.gearAvailableOnCardOffers = {}
        local _ktype1918, _vtype1919, _size1917 = iprot:readMapBegin() 
        for _i=1,_size1917 do
          local _key1921 = iprot:readString()
          local _val1922 = GearAvailableOnCardOfferList:new{}
          _val1922:read(iprot)
          self.gearAvailableOnCardOffers[_key1921] = _val1922
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6102 then
      if ftype == TType.MAP then
        self.gearAvailableOnLevels = {}
        local _ktype1924, _vtype1925, _size1923 = iprot:readMapBegin() 
        for _i=1,_size1923 do
          local _key1927 = iprot:readString()
          local _val1928 = GearAvailableOnLevelList:new{}
          _val1928:read(iprot)
          self.gearAvailableOnLevels[_key1927] = _val1928
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6103 then
      if ftype == TType.MAP then
        self.gearAvailableOnBusinessHarvest = {}
        local _ktype1930, _vtype1931, _size1929 = iprot:readMapBegin() 
        for _i=1,_size1929 do
          local _key1933 = iprot:readString()
          local _val1934 = GearAvailableOnBusinessHarvestList:new{}
          _val1934:read(iprot)
          self.gearAvailableOnBusinessHarvest[_key1933] = _val1934
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7100 then
      if ftype == TType.MAP then
        self.mainShopEntries = {}
        local _ktype1936, _vtype1937, _size1935 = iprot:readMapBegin() 
        for _i=1,_size1935 do
          local _key1939 = iprot:readString()
          local _val1940 = MainShopEntry:new{}
          _val1940:read(iprot)
          self.mainShopEntries[_key1939] = _val1940
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8000 then
      if ftype == TType.MAP then
        self.askForItems = {}
        local _ktype1942, _vtype1943, _size1941 = iprot:readMapBegin() 
        for _i=1,_size1941 do
          local _key1945 = iprot:readString()
          local _val1946 = AskForItemEntry:new{}
          _val1946:read(iprot)
          self.askForItems[_key1945] = _val1946
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8001 then
      if ftype == TType.MAP then
        self.storeTabs = {}
        local _ktype1948, _vtype1949, _size1947 = iprot:readMapBegin() 
        for _i=1,_size1947 do
          local _key1951 = iprot:readString()
          local _val1952 = StoreTab:new{}
          _val1952:read(iprot)
          self.storeTabs[_key1951] = _val1952
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8100 then
      if ftype == TType.MAP then
        self.guildQuestRewards = {}
        local _ktype1954, _vtype1955, _size1953 = iprot:readMapBegin() 
        for _i=1,_size1953 do
          local _key1957 = iprot:readString()
          local _val1958 = {}
          local _etype1962, _size1959 = iprot:readListBegin()
          for _i=1,_size1959 do
            local _elem1963 = GuildQuestReward:new{}
            _elem1963:read(iprot)
            table.insert(_val1958, _elem1963)
          end
          iprot:readListEnd()
          self.guildQuestRewards[_key1957] = _val1958
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2200 then
      if ftype == TType.MAP then
        self.raidBosses = {}
        local _ktype1965, _vtype1966, _size1964 = iprot:readMapBegin() 
        for _i=1,_size1964 do
          local _key1968 = iprot:readString()
          local _val1969 = RaidBoss:new{}
          _val1969:read(iprot)
          self.raidBosses[_key1968] = _val1969
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2201 then
      if ftype == TType.MAP then
        self.raidBossActivities = {}
        local _ktype1971, _vtype1972, _size1970 = iprot:readMapBegin() 
        for _i=1,_size1970 do
          local _key1974 = iprot:readString()
          local _val1975 = RaidBossActivity:new{}
          _val1975:read(iprot)
          self.raidBossActivities[_key1974] = _val1975
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2202 then
      if ftype == TType.MAP then
        self.raidBossObjectives = {}
        local _ktype1977, _vtype1978, _size1976 = iprot:readMapBegin() 
        for _i=1,_size1976 do
          local _key1980 = iprot:readString()
          local _val1981 = RaidBossObjective:new{}
          _val1981:read(iprot)
          self.raidBossObjectives[_key1980] = _val1981
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2203 then
      if ftype == TType.MAP then
        self.raidBossKarmaBrackets = {}
        local _ktype1983, _vtype1984, _size1982 = iprot:readMapBegin() 
        for _i=1,_size1982 do
          local _key1986 = iprot:readString()
          local _val1987 = {}
          local _etype1991, _size1988 = iprot:readListBegin()
          for _i=1,_size1988 do
            local _elem1992 = RaidBossKarmaBracket:new{}
            _elem1992:read(iprot)
            table.insert(_val1987, _elem1992)
          end
          iprot:readListEnd()
          self.raidBossKarmaBrackets[_key1986] = _val1987
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2204 then
      if ftype == TType.MAP then
        self.raidBossDifficultyBrackets = {}
        local _ktype1994, _vtype1995, _size1993 = iprot:readMapBegin() 
        for _i=1,_size1993 do
          local _key1997 = iprot:readString()
          local _val1998 = {}
          local _etype2002, _size1999 = iprot:readListBegin()
          for _i=1,_size1999 do
            local _elem2003 = RaidBossDifficultyBracket:new{}
            _elem2003:read(iprot)
            table.insert(_val1998, _elem2003)
          end
          iprot:readListEnd()
          self.raidBossDifficultyBrackets[_key1997] = _val1998
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2205 then
      if ftype == TType.MAP then
        self.raidBossCurves = {}
        local _ktype2005, _vtype2006, _size2004 = iprot:readMapBegin() 
        for _i=1,_size2004 do
          local _key2008 = iprot:readString()
          local _val2009 = {}
          local _etype2013, _size2010 = iprot:readListBegin()
          for _i=1,_size2010 do
            local _elem2014 = RaidBossCurve:new{}
            _elem2014:read(iprot)
            table.insert(_val2009, _elem2014)
          end
          iprot:readListEnd()
          self.raidBossCurves[_key2008] = _val2009
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2206 then
      if ftype == TType.MAP then
        self.raidBossRewards = {}
        local _ktype2016, _vtype2017, _size2015 = iprot:readMapBegin() 
        for _i=1,_size2015 do
          local _key2019 = iprot:readString()
          local _val2020 = {}
          local _etype2024, _size2021 = iprot:readListBegin()
          for _i=1,_size2021 do
            local _elem2025 = RaidBossReward:new{}
            _elem2025:read(iprot)
            table.insert(_val2020, _elem2025)
          end
          iprot:readListEnd()
          self.raidBossRewards[_key2019] = _val2020
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2207 then
      if ftype == TType.MAP then
        self.raidBossRarities = {}
        local _ktype2027, _vtype2028, _size2026 = iprot:readMapBegin() 
        for _i=1,_size2026 do
          local _key2030 = iprot:readString()
          local _val2031 = RaidBossRarity:new{}
          _val2031:read(iprot)
          self.raidBossRarities[_key2030] = _val2031
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2220 then
      if ftype == TType.MAP then
        self.heroes = {}
        local _ktype2033, _vtype2034, _size2032 = iprot:readMapBegin() 
        for _i=1,_size2032 do
          local _key2036 = iprot:readString()
          local _val2037 = Hero:new{}
          _val2037:read(iprot)
          self.heroes[_key2036] = _val2037
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Data:write(oprot)
  oprot:writeStructBegin('Data')
  if self.rank ~= nil then
    oprot:writeFieldBegin('rank', TType.MAP, 1)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.rank))
    for kiter2038,viter2039 in pairs(self.rank) do
      oprot:writeI32(kiter2038)
      viter2039:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.currency))
    for kiter2040,viter2041 in pairs(self.currency) do
      oprot:writeString(kiter2040)
      viter2041:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.eventLock ~= nil then
    oprot:writeFieldBegin('eventLock', TType.MAP, 11)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.eventLock))
    for kiter2042,viter2043 in pairs(self.eventLock) do
      oprot:writeString(kiter2042)
      viter2043:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.settings ~= nil then
    oprot:writeFieldBegin('settings', TType.STRUCT, 13)
    self.settings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startingGameState ~= nil then
    oprot:writeFieldBegin('startingGameState', TType.STRUCT, 14)
    self.startingGameState:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.startingKingdomEntities ~= nil then
    oprot:writeFieldBegin('startingKingdomEntities', TType.MAP, 93)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.startingKingdomEntities))
    for kiter2044,viter2045 in pairs(self.startingKingdomEntities) do
      oprot:writeI32(kiter2044)
      viter2045:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.bundlesConfig ~= nil then
    oprot:writeFieldBegin('bundlesConfig', TType.MAP, 17)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.bundlesConfig))
    for kiter2046,viter2047 in pairs(self.bundlesConfig) do
      oprot:writeString(kiter2046)
      oprot:writeListBegin(TType.STRUCT, #viter2047)
      for _,iter2048 in ipairs(viter2047) do
        iter2048:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.levelBlobs ~= nil then
    oprot:writeFieldBegin('levelBlobs', TType.MAP, 19)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.levelBlobs))
    for kiter2049,viter2050 in pairs(self.levelBlobs) do
      oprot:writeString(kiter2049)
      viter2050:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.resolutionBundles ~= nil then
    oprot:writeFieldBegin('resolutionBundles', TType.MAP, 300)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.resolutionBundles))
    for kiter2051,viter2052 in pairs(self.resolutionBundles) do
      oprot:writeString(kiter2051)
      oprot:writeListBegin(TType.STRUCT, #viter2052)
      for _,iter2053 in ipairs(viter2052) do
        iter2053:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.bundleManifest ~= nil then
    oprot:writeFieldBegin('bundleManifest', TType.STRUCT, 310)
    self.bundleManifest:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.resolutionManifests ~= nil then
    oprot:writeFieldBegin('resolutionManifests', TType.STRUCT, 320)
    self.resolutionManifests:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.localizationManifests ~= nil then
    oprot:writeFieldBegin('localizationManifests', TType.STRUCT, 330)
    self.localizationManifests:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.building ~= nil then
    oprot:writeFieldBegin('building', TType.MAP, 20)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.building))
    for kiter2054,viter2055 in pairs(self.building) do
      oprot:writeString(kiter2054)
      viter2055:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.recipe ~= nil then
    oprot:writeFieldBegin('recipe', TType.MAP, 21)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.recipe))
    for kiter2056,viter2057 in pairs(self.recipe) do
      oprot:writeString(kiter2056)
      viter2057:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.deco ~= nil then
    oprot:writeFieldBegin('deco', TType.MAP, 24)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.deco))
    for kiter2058,viter2059 in pairs(self.deco) do
      oprot:writeString(kiter2058)
      viter2059:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.business ~= nil then
    oprot:writeFieldBegin('business', TType.MAP, 25)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.business))
    for kiter2060,viter2061 in pairs(self.business) do
      oprot:writeString(kiter2060)
      viter2061:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.businessOrder ~= nil then
    oprot:writeFieldBegin('businessOrder', TType.MAP, 26)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.businessOrder))
    for kiter2062,viter2063 in pairs(self.businessOrder) do
      oprot:writeString(kiter2062)
      viter2063:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.inventoryTab ~= nil then
    oprot:writeFieldBegin('inventoryTab', TType.MAP, 27)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.inventoryTab))
    for kiter2064,viter2065 in pairs(self.inventoryTab) do
      oprot:writeI32(kiter2064)
      viter2065:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.blockers ~= nil then
    oprot:writeFieldBegin('blockers', TType.MAP, 28)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.blockers))
    for kiter2066,viter2067 in pairs(self.blockers) do
      oprot:writeString(kiter2066)
      viter2067:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.weightedLootList ~= nil then
    oprot:writeFieldBegin('weightedLootList', TType.MAP, 32)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.weightedLootList))
    for kiter2068,viter2069 in pairs(self.weightedLootList) do
      oprot:writeString(kiter2068)
      oprot:writeListBegin(TType.STRUCT, #viter2069)
      for _,iter2070 in ipairs(viter2069) do
        iter2070:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.rarity ~= nil then
    oprot:writeFieldBegin('rarity', TType.MAP, 34)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.rarity))
    for kiter2071,viter2072 in pairs(self.rarity) do
      oprot:writeI32(kiter2071)
      viter2072:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.newRarity ~= nil then
    oprot:writeFieldBegin('newRarity', TType.MAP, 35)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.newRarity))
    for kiter2073,viter2074 in pairs(self.newRarity) do
      oprot:writeI32(kiter2073)
      viter2074:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.level ~= nil then
    oprot:writeFieldBegin('level', TType.MAP, 40)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.level))
    for kiter2075,viter2076 in pairs(self.level) do
      oprot:writeString(kiter2075)
      viter2076:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.boost ~= nil then
    oprot:writeFieldBegin('boost', TType.MAP, 41)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.boost))
    for kiter2077,viter2078 in pairs(self.boost) do
      oprot:writeString(kiter2077)
      viter2078:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.levelDot ~= nil then
    oprot:writeFieldBegin('levelDot', TType.MAP, 42)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.levelDot))
    for kiter2079,viter2080 in pairs(self.levelDot) do
      oprot:writeString(kiter2079)
      viter2080:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.villain ~= nil then
    oprot:writeFieldBegin('villain', TType.MAP, 43)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.villain))
    for kiter2081,viter2082 in pairs(self.villain) do
      oprot:writeString(kiter2081)
      viter2082:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.matchThreeData ~= nil then
    oprot:writeFieldBegin('matchThreeData', TType.MAP, 44)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.matchThreeData))
    for kiter2083,viter2084 in pairs(self.matchThreeData) do
      oprot:writeString(kiter2083)
      viter2084:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.newLevel ~= nil then
    oprot:writeFieldBegin('newLevel', TType.MAP, 45)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.newLevel))
    for kiter2085,viter2086 in pairs(self.newLevel) do
      oprot:writeString(kiter2085)
      viter2086:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.newLevelDot ~= nil then
    oprot:writeFieldBegin('newLevelDot', TType.MAP, 46)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.newLevelDot))
    for kiter2087,viter2088 in pairs(self.newLevelDot) do
      oprot:writeString(kiter2087)
      viter2088:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.material ~= nil then
    oprot:writeFieldBegin('material', TType.MAP, 55)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.material))
    for kiter2089,viter2090 in pairs(self.material) do
      oprot:writeString(kiter2089)
      viter2090:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.island ~= nil then
    oprot:writeFieldBegin('island', TType.MAP, 60)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.island))
    for kiter2091,viter2092 in pairs(self.island) do
      oprot:writeString(kiter2091)
      viter2092:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.islandSettings ~= nil then
    oprot:writeFieldBegin('islandSettings', TType.STRUCT, 61)
    self.islandSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.islandObject ~= nil then
    oprot:writeFieldBegin('islandObject', TType.MAP, 63)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.islandObject))
    for kiter2093,viter2094 in pairs(self.islandObject) do
      oprot:writeString(kiter2093)
      viter2094:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.color ~= nil then
    oprot:writeFieldBegin('color', TType.MAP, 64)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.color))
    for kiter2095,viter2096 in pairs(self.color) do
      oprot:writeString(kiter2095)
      viter2096:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.expansion ~= nil then
    oprot:writeFieldBegin('expansion', TType.MAP, 70)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.expansion))
    for kiter2097,viter2098 in pairs(self.expansion) do
      oprot:writeString(kiter2097)
      viter2098:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.expansionType ~= nil then
    oprot:writeFieldBegin('expansionType', TType.MAP, 71)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.expansionType))
    for kiter2099,viter2100 in pairs(self.expansionType) do
      oprot:writeString(kiter2099)
      viter2100:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gachaGroup ~= nil then
    oprot:writeFieldBegin('gachaGroup', TType.MAP, 74)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gachaGroup))
    for kiter2101,viter2102 in pairs(self.gachaGroup) do
      oprot:writeString(kiter2101)
      viter2102:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gachaOffer ~= nil then
    oprot:writeFieldBegin('gachaOffer', TType.MAP, 75)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gachaOffer))
    for kiter2103,viter2104 in pairs(self.gachaOffer) do
      oprot:writeString(kiter2103)
      viter2104:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gachaPack ~= nil then
    oprot:writeFieldBegin('gachaPack', TType.MAP, 76)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gachaPack))
    for kiter2105,viter2106 in pairs(self.gachaPack) do
      oprot:writeString(kiter2105)
      viter2106:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.lootTable ~= nil then
    oprot:writeFieldBegin('lootTable', TType.MAP, 77)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.lootTable))
    for kiter2107,viter2108 in pairs(self.lootTable) do
      oprot:writeString(kiter2107)
      oprot:writeListBegin(TType.STRUCT, #viter2108)
      for _,iter2109 in ipairs(viter2108) do
        iter2109:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.lootCurrencyGroup ~= nil then
    oprot:writeFieldBegin('lootCurrencyGroup', TType.MAP, 78)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.lootCurrencyGroup))
    for kiter2110,viter2111 in pairs(self.lootCurrencyGroup) do
      oprot:writeString(kiter2110)
      oprot:writeListBegin(TType.STRUCT, #viter2111)
      for _,iter2112 in ipairs(viter2111) do
        iter2112:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.lootBuildingGroup ~= nil then
    oprot:writeFieldBegin('lootBuildingGroup', TType.MAP, 79)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.lootBuildingGroup))
    for kiter2113,viter2114 in pairs(self.lootBuildingGroup) do
      oprot:writeString(kiter2113)
      oprot:writeListBegin(TType.STRUCT, #viter2114)
      for _,iter2115 in ipairs(viter2114) do
        iter2115:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.avatar ~= nil then
    oprot:writeFieldBegin('avatar', TType.MAP, 80)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.avatar))
    for kiter2116,viter2117 in pairs(self.avatar) do
      oprot:writeString(kiter2116)
      viter2117:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.adminMessages ~= nil then
    oprot:writeFieldBegin('adminMessages', TType.MAP, 130)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.adminMessages))
    for kiter2118,viter2119 in pairs(self.adminMessages) do
      oprot:writeString(kiter2118)
      viter2119:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.adminGiftMessages ~= nil then
    oprot:writeFieldBegin('adminGiftMessages', TType.LIST, 131)
    oprot:writeListBegin(TType.STRUCT, #self.adminGiftMessages)
    for _,iter2120 in ipairs(self.adminGiftMessages) do
      iter2120:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.analyticsEvents ~= nil then
    oprot:writeFieldBegin('analyticsEvents', TType.MAP, 140)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.analyticsEvents))
    for kiter2121,viter2122 in pairs(self.analyticsEvents) do
      oprot:writeString(kiter2121)
      viter2122:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.appBoyEvents ~= nil then
    oprot:writeFieldBegin('appBoyEvents', TType.MAP, 141)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.appBoyEvents))
    for kiter2123,viter2124 in pairs(self.appBoyEvents) do
      oprot:writeString(kiter2123)
      viter2124:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.analyticsDimensions ~= nil then
    oprot:writeFieldBegin('analyticsDimensions', TType.MAP, 142)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.analyticsDimensions))
    for kiter2125,viter2126 in pairs(self.analyticsDimensions) do
      oprot:writeString(kiter2125)
      viter2126:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.apsalarEvents ~= nil then
    oprot:writeFieldBegin('apsalarEvents', TType.MAP, 143)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.apsalarEvents))
    for kiter2127,viter2128 in pairs(self.apsalarEvents) do
      oprot:writeString(kiter2127)
      viter2128:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.businessOrderList ~= nil then
    oprot:writeFieldBegin('businessOrderList', TType.MAP, 150)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.businessOrderList))
    for kiter2129,viter2130 in pairs(self.businessOrderList) do
      oprot:writeString(kiter2129)
      viter2130:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.businessEvolution ~= nil then
    oprot:writeFieldBegin('businessEvolution', TType.MAP, 152)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.businessEvolution))
    for kiter2131,viter2132 in pairs(self.businessEvolution) do
      oprot:writeString(kiter2131)
      viter2132:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.npc ~= nil then
    oprot:writeFieldBegin('npc', TType.MAP, 160)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.npc))
    for kiter2133,viter2134 in pairs(self.npc) do
      oprot:writeString(kiter2133)
      viter2134:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.vendorProducts ~= nil then
    oprot:writeFieldBegin('vendorProducts', TType.MAP, 170)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.vendorProducts))
    for kiter2135,viter2136 in pairs(self.vendorProducts) do
      oprot:writeString(kiter2135)
      viter2136:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.storeProducts ~= nil then
    oprot:writeFieldBegin('storeProducts', TType.MAP, 180)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.storeProducts))
    for kiter2137,viter2138 in pairs(self.storeProducts) do
      oprot:writeString(kiter2137)
      viter2138:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.buyItemOrder ~= nil then
    oprot:writeFieldBegin('buyItemOrder', TType.MAP, 200)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.buyItemOrder))
    for kiter2139,viter2140 in pairs(self.buyItemOrder) do
      oprot:writeString(kiter2139)
      viter2140:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.marketType ~= nil then
    oprot:writeFieldBegin('marketType', TType.MAP, 201)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.marketType))
    for kiter2141,viter2142 in pairs(self.marketType) do
      oprot:writeI32(kiter2141)
      viter2142:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.forcedUpgrade ~= nil then
    oprot:writeFieldBegin('forcedUpgrade', TType.MAP, 202)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.forcedUpgrade))
    for kiter2143,viter2144 in pairs(self.forcedUpgrade) do
      oprot:writeI32(kiter2143)
      viter2144:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.errorMessage ~= nil then
    oprot:writeFieldBegin('errorMessage', TType.MAP, 203)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.errorMessage))
    for kiter2145,viter2146 in pairs(self.errorMessage) do
      oprot:writeString(kiter2145)
      viter2146:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.achievement ~= nil then
    oprot:writeFieldBegin('achievement', TType.MAP, 204)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.achievement))
    for kiter2147,viter2148 in pairs(self.achievement) do
      oprot:writeString(kiter2147)
      viter2148:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.achievementGroup ~= nil then
    oprot:writeFieldBegin('achievementGroup', TType.MAP, 205)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.achievementGroup))
    for kiter2149,viter2150 in pairs(self.achievementGroup) do
      oprot:writeString(kiter2149)
      viter2150:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.testBuckets ~= nil then
    oprot:writeFieldBegin('testBuckets', TType.MAP, 210)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.testBuckets))
    for kiter2151,viter2152 in pairs(self.testBuckets) do
      oprot:writeString(kiter2151)
      viter2152:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.strangerSettings ~= nil then
    oprot:writeFieldBegin('strangerSettings', TType.STRUCT, 220)
    self.strangerSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.strangerMatchSettings ~= nil then
    oprot:writeFieldBegin('strangerMatchSettings', TType.LIST, 221)
    oprot:writeListBegin(TType.STRUCT, #self.strangerMatchSettings)
    for _,iter2153 in ipairs(self.strangerMatchSettings) do
      iter2153:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.fakeStrangerDisplays ~= nil then
    oprot:writeFieldBegin('fakeStrangerDisplays', TType.LIST, 222)
    oprot:writeListBegin(TType.STRUCT, #self.fakeStrangerDisplays)
    for _,iter2154 in ipairs(self.fakeStrangerDisplays) do
      iter2154:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.giftMessageRewards ~= nil then
    oprot:writeFieldBegin('giftMessageRewards', TType.MAP, 223)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.giftMessageRewards))
    for kiter2155,viter2156 in pairs(self.giftMessageRewards) do
      oprot:writeString(kiter2155)
      viter2156:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.partialKingdomLikeGifts ~= nil then
    oprot:writeFieldBegin('partialKingdomLikeGifts', TType.LIST, 224)
    oprot:writeListBegin(TType.STRUCT, #self.partialKingdomLikeGifts)
    for _,iter2157 in ipairs(self.partialKingdomLikeGifts) do
      iter2157:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.kingdomLikeGifts ~= nil then
    oprot:writeFieldBegin('kingdomLikeGifts', TType.MAP, 225)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.kingdomLikeGifts))
    for kiter2158,viter2159 in pairs(self.kingdomLikeGifts) do
      oprot:writeString(kiter2158)
      viter2159:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.pushMessages ~= nil then
    oprot:writeFieldBegin('pushMessages', TType.MAP, 226)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.pushMessages))
    for kiter2160,viter2161 in pairs(self.pushMessages) do
      oprot:writeString(kiter2160)
      viter2161:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.socialUnlockrewards ~= nil then
    oprot:writeFieldBegin('socialUnlockrewards', TType.MAP, 229)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.socialUnlockrewards))
    for kiter2162,viter2163 in pairs(self.socialUnlockrewards) do
      oprot:writeString(kiter2162)
      viter2163:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.adProviders ~= nil then
    oprot:writeFieldBegin('adProviders', TType.LIST, 400)
    oprot:writeListBegin(TType.STRUCT, #self.adProviders)
    for _,iter2164 in ipairs(self.adProviders) do
      iter2164:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.popupTemplate ~= nil then
    oprot:writeFieldBegin('popupTemplate', TType.LIST, 500)
    oprot:writeListBegin(TType.STRUCT, #self.popupTemplate)
    for _,iter2165 in ipairs(self.popupTemplate) do
      iter2165:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.defaultTemplate ~= nil then
    oprot:writeFieldBegin('defaultTemplate', TType.MAP, 501)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.defaultTemplate))
    for kiter2166,viter2167 in pairs(self.defaultTemplate) do
      oprot:writeI32(kiter2166)
      viter2167:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.rushCostsByRemainingTime ~= nil then
    oprot:writeFieldBegin('rushCostsByRemainingTime', TType.LIST, 502)
    oprot:writeListBegin(TType.STRUCT, #self.rushCostsByRemainingTime)
    for _,iter2168 in ipairs(self.rushCostsByRemainingTime) do
      iter2168:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.messageTemplateModifiers ~= nil then
    oprot:writeFieldBegin('messageTemplateModifiers', TType.MAP, 503)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.messageTemplateModifiers))
    for kiter2169,viter2170 in pairs(self.messageTemplateModifiers) do
      oprot:writeString(kiter2169)
      oprot:writeListBegin(TType.STRUCT, #viter2170)
      for _,iter2171 in ipairs(viter2170) do
        iter2171:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gachaBanner ~= nil then
    oprot:writeFieldBegin('gachaBanner', TType.MAP, 600)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gachaBanner))
    for kiter2172,viter2173 in pairs(self.gachaBanner) do
      oprot:writeString(kiter2172)
      viter2173:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.presetKingdoms ~= nil then
    oprot:writeFieldBegin('presetKingdoms', TType.MAP, 601)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.presetKingdoms))
    for kiter2174,viter2175 in pairs(self.presetKingdoms) do
      oprot:writeString(kiter2174)
      oprot:writeListBegin(TType.STRUCT, #viter2175)
      for _,iter2176 in ipairs(viter2175) do
        iter2176:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.abTests ~= nil then
    oprot:writeFieldBegin('abTests', TType.MAP, 602)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.abTests))
    for kiter2177,viter2178 in pairs(self.abTests) do
      oprot:writeString(kiter2177)
      oprot:writeListBegin(TType.STRUCT, #viter2178)
      for _,iter2179 in ipairs(viter2178) do
        iter2179:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.clientVersionTestBuckets ~= nil then
    oprot:writeFieldBegin('clientVersionTestBuckets', TType.MAP, 603)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.clientVersionTestBuckets))
    for kiter2180,viter2181 in pairs(self.clientVersionTestBuckets) do
      oprot:writeString(kiter2180)
      viter2181:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.buildMenuSpecialCard ~= nil then
    oprot:writeFieldBegin('buildMenuSpecialCard', TType.MAP, 610)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.buildMenuSpecialCard))
    for kiter2182,viter2183 in pairs(self.buildMenuSpecialCard) do
      oprot:writeString(kiter2182)
      viter2183:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.businessMenuSettings ~= nil then
    oprot:writeFieldBegin('businessMenuSettings', TType.STRUCT, 700)
    self.businessMenuSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.rewardMessages ~= nil then
    oprot:writeFieldBegin('rewardMessages', TType.MAP, 790)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.rewardMessages))
    for kiter2184,viter2185 in pairs(self.rewardMessages) do
      oprot:writeString(kiter2184)
      viter2185:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.events ~= nil then
    oprot:writeFieldBegin('events', TType.MAP, 800)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.events))
    for kiter2186,viter2187 in pairs(self.events) do
      oprot:writeString(kiter2186)
      viter2187:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.leaderboards ~= nil then
    oprot:writeFieldBegin('leaderboards', TType.MAP, 810)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.leaderboards))
    for kiter2188,viter2189 in pairs(self.leaderboards) do
      oprot:writeString(kiter2188)
      viter2189:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.leaderboardSettings ~= nil then
    oprot:writeFieldBegin('leaderboardSettings', TType.STRUCT, 811)
    self.leaderboardSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.leaderboardLeagues ~= nil then
    oprot:writeFieldBegin('leaderboardLeagues', TType.LIST, 812)
    oprot:writeListBegin(TType.STRUCT, #self.leaderboardLeagues)
    for _,iter2190 in ipairs(self.leaderboardLeagues) do
      iter2190:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.leaderboardRibbons ~= nil then
    oprot:writeFieldBegin('leaderboardRibbons', TType.LIST, 813)
    oprot:writeListBegin(TType.STRUCT, #self.leaderboardRibbons)
    for _,iter2191 in ipairs(self.leaderboardRibbons) do
      iter2191:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.leaderboardRewards ~= nil then
    oprot:writeFieldBegin('leaderboardRewards', TType.LIST, 814)
    oprot:writeListBegin(TType.STRUCT, #self.leaderboardRewards)
    for _,iter2192 in ipairs(self.leaderboardRewards) do
      iter2192:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.leaderboardPlacements ~= nil then
    oprot:writeFieldBegin('leaderboardPlacements', TType.MAP, 815)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.leaderboardPlacements))
    for kiter2193,viter2194 in pairs(self.leaderboardPlacements) do
      oprot:writeString(kiter2193)
      oprot:writeListBegin(TType.STRUCT, #viter2194)
      for _,iter2195 in ipairs(viter2194) do
        iter2195:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.rarityEvoLevelKeyDropRates ~= nil then
    oprot:writeFieldBegin('rarityEvoLevelKeyDropRates', TType.LIST, 816)
    oprot:writeListBegin(TType.STRUCT, #self.rarityEvoLevelKeyDropRates)
    for _,iter2196 in ipairs(self.rarityEvoLevelKeyDropRates) do
      iter2196:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.keyDropRateByOrderTime ~= nil then
    oprot:writeFieldBegin('keyDropRateByOrderTime', TType.MAP, 817)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.keyDropRateByOrderTime))
    for kiter2197,viter2198 in pairs(self.keyDropRateByOrderTime) do
      oprot:writeString(kiter2197)
      oprot:writeListBegin(TType.STRUCT, #viter2198)
      for _,iter2199 in ipairs(viter2198) do
        iter2199:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.eventBusinessKeyDropRates ~= nil then
    oprot:writeFieldBegin('eventBusinessKeyDropRates', TType.MAP, 818)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.eventBusinessKeyDropRates))
    for kiter2200,viter2201 in pairs(self.eventBusinessKeyDropRates) do
      oprot:writeString(kiter2200)
      viter2201:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.leaderboardTemplates ~= nil then
    oprot:writeFieldBegin('leaderboardTemplates', TType.MAP, 820)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.leaderboardTemplates))
    for kiter2202,viter2203 in pairs(self.leaderboardTemplates) do
      oprot:writeString(kiter2202)
      viter2203:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.eventIslands ~= nil then
    oprot:writeFieldBegin('eventIslands', TType.MAP, 850)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.eventIslands))
    for kiter2204,viter2205 in pairs(self.eventIslands) do
      oprot:writeString(kiter2204)
      viter2205:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.eventHowToPlays ~= nil then
    oprot:writeFieldBegin('eventHowToPlays', TType.MAP, 851)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.eventHowToPlays))
    for kiter2206,viter2207 in pairs(self.eventHowToPlays) do
      oprot:writeString(kiter2206)
      viter2207:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.eventMainMenus ~= nil then
    oprot:writeFieldBegin('eventMainMenus', TType.MAP, 852)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.eventMainMenus))
    for kiter2208,viter2209 in pairs(self.eventMainMenus) do
      oprot:writeString(kiter2208)
      viter2209:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.castleActivities ~= nil then
    oprot:writeFieldBegin('castleActivities', TType.MAP, 900)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.castleActivities))
    for kiter2210,viter2211 in pairs(self.castleActivities) do
      oprot:writeString(kiter2210)
      viter2211:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.playerDisplaySuggestStart ~= nil then
    oprot:writeFieldBegin('playerDisplaySuggestStart', TType.LIST, 901)
    oprot:writeListBegin(TType.STRUCT, #self.playerDisplaySuggestStart)
    for _,iter2212 in ipairs(self.playerDisplaySuggestStart) do
      iter2212:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.playerDisplaySuggestMiddle ~= nil then
    oprot:writeFieldBegin('playerDisplaySuggestMiddle', TType.LIST, 902)
    oprot:writeListBegin(TType.STRUCT, #self.playerDisplaySuggestMiddle)
    for _,iter2213 in ipairs(self.playerDisplaySuggestMiddle) do
      iter2213:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.playerDisplaySuggestEnd ~= nil then
    oprot:writeFieldBegin('playerDisplaySuggestEnd', TType.LIST, 903)
    oprot:writeListBegin(TType.STRUCT, #self.playerDisplaySuggestEnd)
    for _,iter2214 in ipairs(self.playerDisplaySuggestEnd) do
      iter2214:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.tutorialStates ~= nil then
    oprot:writeFieldBegin('tutorialStates', TType.LIST, 910)
    oprot:writeListBegin(TType.STRUCT, #self.tutorialStates)
    for _,iter2215 in ipairs(self.tutorialStates) do
      iter2215:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.popupMessages ~= nil then
    oprot:writeFieldBegin('popupMessages', TType.MAP, 911)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.popupMessages))
    for kiter2216,viter2217 in pairs(self.popupMessages) do
      oprot:writeString(kiter2216)
      viter2217:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.popupMessageSettings ~= nil then
    oprot:writeFieldBegin('popupMessageSettings', TType.STRUCT, 912)
    self.popupMessageSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.eventSettings ~= nil then
    oprot:writeFieldBegin('eventSettings', TType.STRUCT, 1000)
    self.eventSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.screenNameMapping ~= nil then
    oprot:writeFieldBegin('screenNameMapping', TType.LIST, 1100)
    oprot:writeListBegin(TType.STRUCT, #self.screenNameMapping)
    for _,iter2218 in ipairs(self.screenNameMapping) do
      iter2218:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.cellInfo ~= nil then
    oprot:writeFieldBegin('cellInfo', TType.MAP, 1101)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.cellInfo))
    for kiter2219,viter2220 in pairs(self.cellInfo) do
      oprot:writeString(kiter2219)
      oprot:writeListBegin(TType.STRUCT, #viter2220)
      for _,iter2221 in ipairs(viter2220) do
        iter2221:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.keyCostPerLevel ~= nil then
    oprot:writeFieldBegin('keyCostPerLevel', TType.MAP, 1200)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.keyCostPerLevel))
    for kiter2222,viter2223 in pairs(self.keyCostPerLevel) do
      oprot:writeString(kiter2222)
      oprot:writeListBegin(TType.STRUCT, #viter2223)
      for _,iter2224 in ipairs(viter2223) do
        iter2224:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.playerMatchRankSettings ~= nil then
    oprot:writeFieldBegin('playerMatchRankSettings', TType.LIST, 1201)
    oprot:writeListBegin(TType.STRUCT, #self.playerMatchRankSettings)
    for _,iter2225 in ipairs(self.playerMatchRankSettings) do
      iter2225:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buildingMultipliers ~= nil then
    oprot:writeFieldBegin('buildingMultipliers', TType.MAP, 1202)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.buildingMultipliers))
    for kiter2226,viter2227 in pairs(self.buildingMultipliers) do
      oprot:writeString(kiter2226)
      viter2227:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.guildLeaderboardSettings ~= nil then
    oprot:writeFieldBegin('guildLeaderboardSettings', TType.STRUCT, 1300)
    self.guildLeaderboardSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guildLeaderboards ~= nil then
    oprot:writeFieldBegin('guildLeaderboards', TType.MAP, 1301)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.guildLeaderboards))
    for kiter2228,viter2229 in pairs(self.guildLeaderboards) do
      oprot:writeString(kiter2228)
      viter2229:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.guildLeaderboardRibbons ~= nil then
    oprot:writeFieldBegin('guildLeaderboardRibbons', TType.LIST, 1302)
    oprot:writeListBegin(TType.STRUCT, #self.guildLeaderboardRibbons)
    for _,iter2230 in ipairs(self.guildLeaderboardRibbons) do
      iter2230:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.guildLeaderboardRewards ~= nil then
    oprot:writeFieldBegin('guildLeaderboardRewards', TType.LIST, 1303)
    oprot:writeListBegin(TType.STRUCT, #self.guildLeaderboardRewards)
    for _,iter2231 in ipairs(self.guildLeaderboardRewards) do
      iter2231:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.locations ~= nil then
    oprot:writeFieldBegin('locations', TType.MAP, 1311)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.locations))
    for kiter2232,viter2233 in pairs(self.locations) do
      oprot:writeString(kiter2232)
      viter2233:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.guildSettings ~= nil then
    oprot:writeFieldBegin('guildSettings', TType.STRUCT, 1312)
    self.guildSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guildMemberTypeDisplays ~= nil then
    oprot:writeFieldBegin('guildMemberTypeDisplays', TType.MAP, 1313)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.guildMemberTypeDisplays))
    for kiter2234,viter2235 in pairs(self.guildMemberTypeDisplays) do
      oprot:writeI32(kiter2234)
      viter2235:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.guildJoinTypeDisplays ~= nil then
    oprot:writeFieldBegin('guildJoinTypeDisplays', TType.MAP, 1314)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.guildJoinTypeDisplays))
    for kiter2236,viter2237 in pairs(self.guildJoinTypeDisplays) do
      oprot:writeI32(kiter2236)
      viter2237:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.guildEmblems ~= nil then
    oprot:writeFieldBegin('guildEmblems', TType.MAP, 1315)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.guildEmblems))
    for kiter2238,viter2239 in pairs(self.guildEmblems) do
      oprot:writeString(kiter2238)
      viter2239:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.guildBoundItems ~= nil then
    oprot:writeFieldBegin('guildBoundItems', TType.LIST, 1316)
    oprot:writeListBegin(TType.STRUCT, #self.guildBoundItems)
    for _,iter2240 in ipairs(self.guildBoundItems) do
      iter2240:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.guildRank ~= nil then
    oprot:writeFieldBegin('guildRank', TType.MAP, 1317)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.guildRank))
    for kiter2241,viter2242 in pairs(self.guildRank) do
      oprot:writeI32(kiter2241)
      viter2242:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.chatSystemMessages ~= nil then
    oprot:writeFieldBegin('chatSystemMessages', TType.MAP, 1330)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.chatSystemMessages))
    for kiter2243,viter2244 in pairs(self.chatSystemMessages) do
      oprot:writeString(kiter2243)
      viter2244:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gifts ~= nil then
    oprot:writeFieldBegin('gifts', TType.MAP, 1400)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gifts))
    for kiter2245,viter2246 in pairs(self.gifts) do
      oprot:writeString(kiter2245)
      viter2246:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.pollSettings ~= nil then
    oprot:writeFieldBegin('pollSettings', TType.STRUCT, 1410)
    self.pollSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guildNameSuggestStart ~= nil then
    oprot:writeFieldBegin('guildNameSuggestStart', TType.LIST, 1500)
    oprot:writeListBegin(TType.STRUCT, #self.guildNameSuggestStart)
    for _,iter2247 in ipairs(self.guildNameSuggestStart) do
      iter2247:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.guildNameSuggestMiddle ~= nil then
    oprot:writeFieldBegin('guildNameSuggestMiddle', TType.LIST, 1501)
    oprot:writeListBegin(TType.STRUCT, #self.guildNameSuggestMiddle)
    for _,iter2248 in ipairs(self.guildNameSuggestMiddle) do
      iter2248:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.guildNameSuggestEnd ~= nil then
    oprot:writeFieldBegin('guildNameSuggestEnd', TType.LIST, 1502)
    oprot:writeListBegin(TType.STRUCT, #self.guildNameSuggestEnd)
    for _,iter2249 in ipairs(self.guildNameSuggestEnd) do
      iter2249:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.quests ~= nil then
    oprot:writeFieldBegin('quests', TType.MAP, 1600)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.quests))
    for kiter2250,viter2251 in pairs(self.quests) do
      oprot:writeString(kiter2250)
      viter2251:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.questGoals ~= nil then
    oprot:writeFieldBegin('questGoals', TType.LIST, 1601)
    oprot:writeListBegin(TType.STRUCT, #self.questGoals)
    for _,iter2252 in ipairs(self.questGoals) do
      iter2252:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.questTemplates ~= nil then
    oprot:writeFieldBegin('questTemplates', TType.MAP, 1610)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.questTemplates))
    for kiter2253,viter2254 in pairs(self.questTemplates) do
      oprot:writeString(kiter2253)
      viter2254:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.questGoalTemplates ~= nil then
    oprot:writeFieldBegin('questGoalTemplates', TType.LIST, 1611)
    oprot:writeListBegin(TType.STRUCT, #self.questGoalTemplates)
    for _,iter2255 in ipairs(self.questGoalTemplates) do
      iter2255:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.questNpc ~= nil then
    oprot:writeFieldBegin('questNpc', TType.MAP, 1602)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.questNpc))
    for kiter2256,viter2257 in pairs(self.questNpc) do
      oprot:writeString(kiter2256)
      viter2257:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.businessQuestNpc ~= nil then
    oprot:writeFieldBegin('businessQuestNpc', TType.MAP, 1603)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.businessQuestNpc))
    for kiter2258,viter2259 in pairs(self.businessQuestNpc) do
      oprot:writeString(kiter2258)
      viter2259:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.happinessSettings ~= nil then
    oprot:writeFieldBegin('happinessSettings', TType.STRUCT, 1700)
    self.happinessSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.stores ~= nil then
    oprot:writeFieldBegin('stores', TType.MAP, 1710)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.stores))
    for kiter2260,viter2261 in pairs(self.stores) do
      oprot:writeString(kiter2260)
      viter2261:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.storeInventories ~= nil then
    oprot:writeFieldBegin('storeInventories', TType.MAP, 1711)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.storeInventories))
    for kiter2262,viter2263 in pairs(self.storeInventories) do
      oprot:writeString(kiter2262)
      oprot:writeListBegin(TType.STRUCT, #viter2263)
      for _,iter2264 in ipairs(viter2263) do
        iter2264:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.cardOffers ~= nil then
    oprot:writeFieldBegin('cardOffers', TType.MAP, 1712)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.cardOffers))
    for kiter2265,viter2266 in pairs(self.cardOffers) do
      oprot:writeString(kiter2265)
      viter2266:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.iapProducts ~= nil then
    oprot:writeFieldBegin('iapProducts', TType.MAP, 1713)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.iapProducts))
    for kiter2267,viter2268 in pairs(self.iapProducts) do
      oprot:writeString(kiter2267)
      viter2268:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.campaignSettings ~= nil then
    oprot:writeFieldBegin('campaignSettings', TType.STRUCT, 1899)
    self.campaignSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.levelCampaigns ~= nil then
    oprot:writeFieldBegin('levelCampaigns', TType.MAP, 1900)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.levelCampaigns))
    for kiter2269,viter2270 in pairs(self.levelCampaigns) do
      oprot:writeString(kiter2269)
      viter2270:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.businessLevelIdsLookup ~= nil then
    oprot:writeFieldBegin('businessLevelIdsLookup', TType.MAP, 1901)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.businessLevelIdsLookup))
    for kiter2271,viter2272 in pairs(self.businessLevelIdsLookup) do
      oprot:writeString(kiter2271)
      viter2272:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.castleEventLevelIdsLookup ~= nil then
    oprot:writeFieldBegin('castleEventLevelIdsLookup', TType.MAP, 1902)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.castleEventLevelIdsLookup))
    for kiter2273,viter2274 in pairs(self.castleEventLevelIdsLookup) do
      oprot:writeString(kiter2273)
      viter2274:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.campaignLevelIdsLookup ~= nil then
    oprot:writeFieldBegin('campaignLevelIdsLookup', TType.MAP, 1903)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.campaignLevelIdsLookup))
    for kiter2275,viter2276 in pairs(self.campaignLevelIdsLookup) do
      oprot:writeString(kiter2275)
      viter2276:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.levelCampaignStyles ~= nil then
    oprot:writeFieldBegin('levelCampaignStyles', TType.MAP, 1904)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.levelCampaignStyles))
    for kiter2277,viter2278 in pairs(self.levelCampaignStyles) do
      oprot:writeString(kiter2277)
      viter2278:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.buildingTypeLocalizations ~= nil then
    oprot:writeFieldBegin('buildingTypeLocalizations', TType.MAP, 2014)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.buildingTypeLocalizations))
    for kiter2279,viter2280 in pairs(self.buildingTypeLocalizations) do
      oprot:writeI32(kiter2279)
      viter2280:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.ftueSettings ~= nil then
    oprot:writeFieldBegin('ftueSettings', TType.STRUCT, 3000)
    self.ftueSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.matchThreeCellDefinitions ~= nil then
    oprot:writeFieldBegin('matchThreeCellDefinitions', TType.MAP, 3301)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.matchThreeCellDefinitions))
    for kiter2281,viter2282 in pairs(self.matchThreeCellDefinitions) do
      oprot:writeString(kiter2281)
      oprot:writeListBegin(TType.STRUCT, #viter2282)
      for _,iter2283 in ipairs(viter2282) do
        iter2283:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.matchThreeBlasterDefinitions ~= nil then
    oprot:writeFieldBegin('matchThreeBlasterDefinitions', TType.MAP, 3302)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.matchThreeBlasterDefinitions))
    for kiter2284,viter2285 in pairs(self.matchThreeBlasterDefinitions) do
      oprot:writeString(kiter2284)
      oprot:writeListBegin(TType.STRUCT, #viter2285)
      for _,iter2286 in ipairs(viter2285) do
        iter2286:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.goalDisplayTemplates ~= nil then
    oprot:writeFieldBegin('goalDisplayTemplates', TType.LIST, 2000)
    oprot:writeListBegin(TType.STRUCT, #self.goalDisplayTemplates)
    for _,iter2287 in ipairs(self.goalDisplayTemplates) do
      iter2287:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.questTitles ~= nil then
    oprot:writeFieldBegin('questTitles', TType.MAP, 2001)
    oprot:writeMapBegin(TType.I32, TType.LIST, ttable_size(self.questTitles))
    for kiter2288,viter2289 in pairs(self.questTitles) do
      oprot:writeI32(kiter2288)
      oprot:writeListBegin(TType.STRUCT, #viter2289)
      for _,iter2290 in ipairs(viter2289) do
        iter2290:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.questSettings ~= nil then
    oprot:writeFieldBegin('questSettings', TType.STRUCT, 2006)
    self.questSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.questRankSettings ~= nil then
    oprot:writeFieldBegin('questRankSettings', TType.MAP, 2015)
    oprot:writeMapBegin(TType.I32, TType.STRUCT, ttable_size(self.questRankSettings))
    for kiter2291,viter2292 in pairs(self.questRankSettings) do
      oprot:writeI32(kiter2291)
      viter2292:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.newBusinessOrders ~= nil then
    oprot:writeFieldBegin('newBusinessOrders', TType.MAP, 2016)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.newBusinessOrders))
    for kiter2293,viter2294 in pairs(self.newBusinessOrders) do
      oprot:writeString(kiter2293)
      viter2294:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.eventMenuWidgets ~= nil then
    oprot:writeFieldBegin('eventMenuWidgets', TType.MAP, 2100)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.eventMenuWidgets))
    for kiter2295,viter2296 in pairs(self.eventMenuWidgets) do
      oprot:writeString(kiter2295)
      viter2296:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gearAvailableOnGachas ~= nil then
    oprot:writeFieldBegin('gearAvailableOnGachas', TType.MAP, 6100)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gearAvailableOnGachas))
    for kiter2297,viter2298 in pairs(self.gearAvailableOnGachas) do
      oprot:writeString(kiter2297)
      viter2298:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gearAvailableOnCardOffers ~= nil then
    oprot:writeFieldBegin('gearAvailableOnCardOffers', TType.MAP, 6101)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gearAvailableOnCardOffers))
    for kiter2299,viter2300 in pairs(self.gearAvailableOnCardOffers) do
      oprot:writeString(kiter2299)
      viter2300:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gearAvailableOnLevels ~= nil then
    oprot:writeFieldBegin('gearAvailableOnLevels', TType.MAP, 6102)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gearAvailableOnLevels))
    for kiter2301,viter2302 in pairs(self.gearAvailableOnLevels) do
      oprot:writeString(kiter2301)
      viter2302:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.gearAvailableOnBusinessHarvest ~= nil then
    oprot:writeFieldBegin('gearAvailableOnBusinessHarvest', TType.MAP, 6103)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.gearAvailableOnBusinessHarvest))
    for kiter2303,viter2304 in pairs(self.gearAvailableOnBusinessHarvest) do
      oprot:writeString(kiter2303)
      viter2304:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.mainShopEntries ~= nil then
    oprot:writeFieldBegin('mainShopEntries', TType.MAP, 7100)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.mainShopEntries))
    for kiter2305,viter2306 in pairs(self.mainShopEntries) do
      oprot:writeString(kiter2305)
      viter2306:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.askForItems ~= nil then
    oprot:writeFieldBegin('askForItems', TType.MAP, 8000)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.askForItems))
    for kiter2307,viter2308 in pairs(self.askForItems) do
      oprot:writeString(kiter2307)
      viter2308:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.storeTabs ~= nil then
    oprot:writeFieldBegin('storeTabs', TType.MAP, 8001)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.storeTabs))
    for kiter2309,viter2310 in pairs(self.storeTabs) do
      oprot:writeString(kiter2309)
      viter2310:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.guildQuestRewards ~= nil then
    oprot:writeFieldBegin('guildQuestRewards', TType.MAP, 8100)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.guildQuestRewards))
    for kiter2311,viter2312 in pairs(self.guildQuestRewards) do
      oprot:writeString(kiter2311)
      oprot:writeListBegin(TType.STRUCT, #viter2312)
      for _,iter2313 in ipairs(viter2312) do
        iter2313:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBosses ~= nil then
    oprot:writeFieldBegin('raidBosses', TType.MAP, 2200)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.raidBosses))
    for kiter2314,viter2315 in pairs(self.raidBosses) do
      oprot:writeString(kiter2314)
      viter2315:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBossActivities ~= nil then
    oprot:writeFieldBegin('raidBossActivities', TType.MAP, 2201)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.raidBossActivities))
    for kiter2316,viter2317 in pairs(self.raidBossActivities) do
      oprot:writeString(kiter2316)
      viter2317:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBossObjectives ~= nil then
    oprot:writeFieldBegin('raidBossObjectives', TType.MAP, 2202)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.raidBossObjectives))
    for kiter2318,viter2319 in pairs(self.raidBossObjectives) do
      oprot:writeString(kiter2318)
      viter2319:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBossKarmaBrackets ~= nil then
    oprot:writeFieldBegin('raidBossKarmaBrackets', TType.MAP, 2203)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.raidBossKarmaBrackets))
    for kiter2320,viter2321 in pairs(self.raidBossKarmaBrackets) do
      oprot:writeString(kiter2320)
      oprot:writeListBegin(TType.STRUCT, #viter2321)
      for _,iter2322 in ipairs(viter2321) do
        iter2322:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBossDifficultyBrackets ~= nil then
    oprot:writeFieldBegin('raidBossDifficultyBrackets', TType.MAP, 2204)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.raidBossDifficultyBrackets))
    for kiter2323,viter2324 in pairs(self.raidBossDifficultyBrackets) do
      oprot:writeString(kiter2323)
      oprot:writeListBegin(TType.STRUCT, #viter2324)
      for _,iter2325 in ipairs(viter2324) do
        iter2325:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBossCurves ~= nil then
    oprot:writeFieldBegin('raidBossCurves', TType.MAP, 2205)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.raidBossCurves))
    for kiter2326,viter2327 in pairs(self.raidBossCurves) do
      oprot:writeString(kiter2326)
      oprot:writeListBegin(TType.STRUCT, #viter2327)
      for _,iter2328 in ipairs(viter2327) do
        iter2328:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBossRewards ~= nil then
    oprot:writeFieldBegin('raidBossRewards', TType.MAP, 2206)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.raidBossRewards))
    for kiter2329,viter2330 in pairs(self.raidBossRewards) do
      oprot:writeString(kiter2329)
      oprot:writeListBegin(TType.STRUCT, #viter2330)
      for _,iter2331 in ipairs(viter2330) do
        iter2331:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.raidBossRarities ~= nil then
    oprot:writeFieldBegin('raidBossRarities', TType.MAP, 2207)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.raidBossRarities))
    for kiter2332,viter2333 in pairs(self.raidBossRarities) do
      oprot:writeString(kiter2332)
      viter2333:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.heroes ~= nil then
    oprot:writeFieldBegin('heroes', TType.MAP, 2220)
    oprot:writeMapBegin(TType.STRING, TType.STRUCT, ttable_size(self.heroes))
    for kiter2334,viter2335 in pairs(self.heroes) do
      oprot:writeString(kiter2334)
      viter2335:write(oprot)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end