--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'tutorial_ttypes'
require 'shared_SharedService'

CalculatorClient = __TObject.new(SharedServiceClient, {
  __type = 'CalculatorClient'
})

function CalculatorClient:ping()
  self:send_ping()
  self:recv_ping()
end

function CalculatorClient:send_ping()
  self.oprot:writeMessageBegin('ping', TMessageType.CALL, self._seqid)
  local args = ping_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CalculatorClient:recv_ping()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ping_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function CalculatorClient:add(num1, num2)
  self:send_add(num1, num2)
  return self:recv_add(num1, num2)
end

function CalculatorClient:send_add(num1, num2)
  self.oprot:writeMessageBegin('add', TMessageType.CALL, self._seqid)
  local args = add_args:new{}
  args.num1 = num1
  args.num2 = num2
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CalculatorClient:recv_add(num1, num2)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = add_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CalculatorClient:calculate(logid, w)
  self:send_calculate(logid, w)
  return self:recv_calculate(logid, w)
end

function CalculatorClient:send_calculate(logid, w)
  self.oprot:writeMessageBegin('calculate', TMessageType.CALL, self._seqid)
  local args = calculate_args:new{}
  args.logid = logid
  args.w = w
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CalculatorClient:recv_calculate(logid, w)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = calculate_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.ouch then
    error(result.ouch)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CalculatorClient:zip()
  self:send_zip()
  end

function CalculatorClient:send_zip()
  self.oprot:writeMessageBegin('zip', TMessageType.ONEWAY, self._seqid)
  local args = zip_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end
CalculatorIface = SharedServiceIface:new{
  __type = 'CalculatorIface'
}


CalculatorProcessor = __TObject.new(SharedServiceProcessor
, {
 __type = 'CalculatorProcessor'
})

function CalculatorProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function CalculatorProcessor:process_ping(seqid, iprot, oprot, server_ctx)
  local args = ping_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ping_result:new{}
  local status, res = pcall(self.handler.ping, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('ping', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CalculatorProcessor:process_add(seqid, iprot, oprot, server_ctx)
  local args = add_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = add_result:new{}
  local status, res = pcall(self.handler.add, self.handler, args.num1, args.num2)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('add', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CalculatorProcessor:process_calculate(seqid, iprot, oprot, server_ctx)
  local args = calculate_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = calculate_result:new{}
  local status, res = pcall(self.handler.calculate, self.handler, args.logid, args.w)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'InvalidOperation' then
    result.ouch = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('calculate', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CalculatorProcessor:process_zip(seqid, iprot, oprot, server_ctx)
  local args = zip_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = zip_result:new{}
  local status, res = pcall(self.handler.zip, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('zip', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

ping_args = __TObject:new{

}

function ping_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ping_args:write(oprot)
  oprot:writeStructBegin('ping_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ping_result = __TObject:new{

}

function ping_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ping_result:write(oprot)
  oprot:writeStructBegin('ping_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

add_args = __TObject:new{
  num1,
  num2
}

function add_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.num1 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.num2 = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function add_args:write(oprot)
  oprot:writeStructBegin('add_args')
  if self.num1 ~= nil then
    oprot:writeFieldBegin('num1', TType.I32, 1)
    oprot:writeI32(self.num1)
    oprot:writeFieldEnd()
  end
  if self.num2 ~= nil then
    oprot:writeFieldBegin('num2', TType.I32, 2)
    oprot:writeI32(self.num2)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

add_result = __TObject:new{
  success
}

function add_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function add_result:write(oprot)
  oprot:writeStructBegin('add_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

calculate_args = __TObject:new{
  logid,
  w
}

function calculate_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.logid = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.w = Work:new{}
        self.w:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function calculate_args:write(oprot)
  oprot:writeStructBegin('calculate_args')
  if self.logid ~= nil then
    oprot:writeFieldBegin('logid', TType.I32, 1)
    oprot:writeI32(self.logid)
    oprot:writeFieldEnd()
  end
  if self.w ~= nil then
    oprot:writeFieldBegin('w', TType.STRUCT, 2)
    self.w:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

calculate_result = __TObject:new{
  success,
  ouch
}

function calculate_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.ouch = InvalidOperation:new{}
        self.ouch:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function calculate_result:write(oprot)
  oprot:writeStructBegin('calculate_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.ouch ~= nil then
    oprot:writeFieldBegin('ouch', TType.STRUCT, 1)
    self.ouch:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

zip_args = __TObject:new{

}

function zip_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function zip_args:write(oprot)
  oprot:writeStructBegin('zip_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end